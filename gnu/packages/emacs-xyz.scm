;;; GNU Guix --- Functional package management for GNU
;;; Copyright © 2014 Taylan Ulrich Bayirli/Kammer <taylanbayirli@gmail.com>
;;; Copyright © 2013-2023 Ludovic Courtès <ludo@gnu.org>
;;; Copyright © 2014, 2015, 2016, 2017, 2018 Mark H Weaver <mhw@netris.org>
;;; Copyright © 2014, 2015, 2016, 2017, 2018, 2019 Alex Kost <alezost@gmail.com>
;;; Copyright © 2015 Federico Beffa <beffa@fbengineering.ch>
;;; Copyright © 2015-2024 Ricardo Wurmus <rekado@elephly.net>
;;; Copyright © 2016, 2017, 2018, 2019 Chris Marusich <cmmarusich@gmail.com>
;;; Copyright © 2015, 2016, 2018, 2020 Christine Lemmer-Webber <cwebber@dustycloud.org>
;;; Copyright © 2016 Adriano Peluso <catonano@gmail.com>
;;; Copyright © 2016-2021, 2023 Efraim Flashner <efraim@flashner.co.il>
;;; Copyright © 2016 David Thompson <davet@gnu.org>
;;; Copyright © 2016 Matthew Jordan <matthewjordandevops@yandex.com>
;;; Copyright © 2016, 2017 Roel Janssen <roel@gnu.org>
;;; Copyright © 2016, 2017 Nikita <nikita@n0.is>
;;; Copyright © 2016, 2019 Alex Griffin <a@ajgrf.com>
;;; Copyright © 2016-2025 Nicolas Goaziou <mail@nicolasgoaziou.fr>
;;; Copyright © 2016, 2017, 2018 Alex Vong <alexvong1995@gmail.com>
;;; Copyright © 2016-2022, 2024–2025 Arun Isaac <arunisaac@systemreboot.net>
;;; Copyright © 2017 Christopher Baines <mail@cbaines.net>
;;; Copyright © 2017, 2018, 2019, 2020, 2022 Mathieu Othacehe <m.othacehe@gmail.com>
;;; Copyright © 2017, 2018, 2019, 2020, 2021, 2022 Clément Lassieur <clement@lassieur.org>
;;; Copyright © 2017 Vasile Dumitrascu <va511e@yahoo.com>
;;; Copyright © 2017, 2018, 2022 Kyle Meyer <kyle@kyleam.com>
;;; Copyright © 2017 Kei Kebreau <kkebreau@posteo.net>
;;; Copyright © 2017 George Clemmer <myglc2@gmail.com>
;;; Copyright © 2017, 2018 Feng Shu <tumashu@163.com>
;;; Copyright © 2017, 2020, 2023 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;; Copyright © 2017, 2018, 2019, 2020 Oleg Pykhalov <go.wigust@gmail.com>
;;; Copyright © 2017 Mekeor Melire <mekeor.melire@gmail.com>
;;; Copyright © 2017 Peter Mikkelsen <petermikkelsen10@gmail.com>
;;; Copyright © 2017–2021 Tobias Geerinckx-Rice <me@tobias.gr>
;;; Copyright © 2017 Mike Gerwitz <mtg@gnu.org>
;;; Copyright © 2017-2025 Maxim Cournoyer <maxim@guixotic.coop>
;;; Copyright © 2018 Sohom Bhattacharjee <soham.bhattacharjee15@gmail.com>
;;; Copyright © 2018, 2019 Mathieu Lirzin <mthl@gnu.org>
;;; Copyright © 2018, 2019, 2020, 2021 Pierre Neidhardt <mail@ambrevar.xyz>
;;; Copyright © 2018, 2019, 2020 Tim Gesthuizen <tim.gesthuizen@yahoo.de>
;;; Copyright © 2018, 2019 Jack Hill <jackhill@jackhill.us>
;;; Copyright © 2018 Pierre-Antoine Rouby <pierre-antoine.rouby@inria.fr>
;;; Copyright © 2018 Alex Branham <alex.branham@gmail.com>
;;; Copyright © 2018 Thorsten Wilms <t_w_@freenet.de>
;;; Copyright © 2018, 2019, 2020, 2021 Pierre Langlois <pierre.langlois@gmx.com>
;;; Copyright © 2018, 2019, 2020, 2021 Brett Gilio <brettg@gnu.org>
;;; Copyright © 2019, 2020 Dimakakos Dimos <bendersteed@teknik.io>
;;; Copyright © 2019, 2020 Brian Leung <bkleung89@gmail.com>
;;; Copyright © 2019 mikadoZero <mikadozero@yandex.com>
;;; Copyright © 2019 Gabriel Hondet <gabrielhondet@gmail.com>
;;; Copyright © 2019, 2020, 2021 Joseph LaFreniere <joseph@lafreniere.xyz>
;;; Copyright © 2019 Todor Kondić <tk.code@protonmail.com>15669
;;; Copyright © 2019 Amar Singh <nly@disroot.org>
;;; Copyright © 2019, 2022, 2023 Baptiste Strazzulla <bstrazzull@hotmail.fr>
;;; Copyright © 2019 Giacomo Leidi <goodoldpaul@autistici.org>
;;; Copyright © 2019 Jens Mølgaard <jens@zete.tk>
;;; Copyright © 2019, 2020 Amin Bandali <bandali@gnu.org>
;;; Copyright © 2019 Jelle Licht <jlicht@fsfe.org>
;;; Copyright © 2019 Björn Höfling <bjoern.hoefling@bjoernhoefling.de>
;;; Copyright © 2019 Stephen Webber <montokapro@gmail.com>
;;; Copyright © 2019, 2021 Liliana Marie Prikler <liliana.prikler@gmail.com>
;;; Copyright © 2019 David Wilson <david@daviwil.com>
;;; Copyright © 2020 Paul Garlick <pgarlick@tourbillion-technology.com>
;;; Copyright © 2020 Robert Smith <robertsmith@posteo.net>
;;; Copyright © 2020 Evan Straw <evan.straw99@gmail.com>
;;; Copyright © 2020, 2021, 2022 Masaya Tojo <masaya@tojo.tokyo>
;;; Copyright © 2020, 2021 Martin Becze <mjbecze@riseup.net>
;;; Copyright © 2020, 2021, 2022 Michael Rohleder <mike@rohleder.de>
;;; Copyright © 2020 Brice Waegeneire <brice@waegenei.re>
;;; Copyright © 2020 6033fe7de85d <6033fe7de85d@airmail.cc>
;;; Copyright © 2020 John Soo <jsoo1@asu.edu>
;;; Copyright © 2020 Jérémy Korwin-Zmijowski <jeremy@korwin-zmijowski.fr>
;;; Copyright © 2020 Alberto Eleuterio Flores Guerrero <barbanegra+guix@posteo.mx>
;;; Copyright © 2020 Marius Bakke <mbakke@fastmail.com>
;;; Copyright © 2020, 2022, 2023, 2025 pinoaffe <pinoaffe@gmail.com>
;;; Copyright © 2020, 2021, 2022 Vinicius Monego <monego@posteo.net>
;;; Copyright © 2020 Ryan Desfosses <rdes@protonmail.com>
;;; Copyright © 2020 Marcin Karpezo <sirmacik@wioo.waw.pl>
;;; Copyright © 2020, 2022 Fredrik Salomonsson <plattfot@posteo.net>
;;; Copyright © 2020 Eric Bavier <bavier@posteo.net>
;;; Copyright © 2020, 2021 Morgan Smith <Morgan.J.Smith@outlook.com>
;;; Copyright © 2020 Peng Mei Yu <i@pengmeiyu.com>
;;; Copyright © 2020, 2021, 2022 Niklas Eklund <niklas.eklund@posteo.net>
;;; Copyright © 2020 Marco Grassi <marco.au.grassi98@protonmail.com>
;;; Copyright © 2020 Tomás Ortín Fernández <tomasortin@mailbox.org>
;;; Copyright © 2020-2022, 2025 Zhu Zihao <all_but_last@163.com>
;;; Copyright © 2020 Adam Kandur <rndd@tuta.io>
;;; Copyright © 2020 Tim Howes <timhowes@lavabit.com>
;;; Copyright © 2020 Noah Landis <noahlandis@posteo.net>
;;; Copyright © 2020, 2021 Nicolò Balzarotti <nicolo@nixo.xyz>
;;; Copyright © 2020, 2022 André A. Gomes <andremegafone@gmail.com>
;;; Copyright © 2020 Jonathan Rostran <rostranjj@gmail.com>
;;; Copyright © 2020, 2021 Noah Evans <noah@nevans.me>
;;; Copyright © 2020 Brit Butler <brit@kingcons.io>
;;; Copyright © 2021, 2022, 2024 Aleksandr Vityazev <avityazev@disroot>
;;; Copyright © 2021 Yurii Kholodkov <urist.mckorobochka@gmail.com>
;;; Copyright © 2021 Alexey Abramov <levenson@mmer.org>
;;; Copyright © 2021 Xinglu Chen <public@yoctocell.xyz>
;;; Copyright © 2021, 2022 Stefan Reichör <stefan@xsteve.at>
;;; Copyright © 2021, 2022, 2023 Simon Tournier <zimon.toutoune@gmail.com>
;;; Copyright © 2021 Eugene Klimov <lipklim@mailbox.org>
;;; Copyright © 2021, 2024 Zheng Junjie <873216071@qq.com>
;;; Copyright © 2021 David Dashyan <mail@davie.li>
;;; Copyright © 2021 Dhruvin Gandhi <contact@dhruvin.dev>
;;; Copyright © 2021 Matthew James Kraai <kraai@ftbfs.org>
;;; Copyright © 2021 Noisytoot <noisytoot@disroot.org>
;;; Copyright © 2021 Simon South <simon@simonsouth.net>
;;; Copyright © 2021 la snesne <lasnesne@lagunposprasihopre.org>
;;; Copyright © 2021 Brian Kubisiak <brian@kubisiak.com>
;;; Copyright © 2021, 2022 Taiju HIGASHI <higashi@taiju.info>
;;; Copyright © 2022 Brandon Lucas <br@ndon.dk>
;;; Copyright © 2022 Jai Vetrivelan <jaivetrivelan@gmail.com>
;;; Copyright © 2022, 2023, 2025 jgart <jgart@dismail.de>
;;; Copyright © 2022 Dominic Martinez <dom@dominicm.dev>
;;; Copyright © 2022 Peter Polidoro <peter@polidoro.io>
;;; Copyright © 2022 Luis Felipe López Acevedo <luis.felipe.la@protonmail.com>
;;; Copyright © 2022 Thomas Albers Raviola <thomas@thomaslabs.org>
;;; Copyright © 2022 Haider Mirza <haider@haider.gq>
;;; Copyright © 2022 Jose G Perez Taveras <josegpt27@gmail.com>
;;; Copyright © 2022 Hilton Chain <hako@ultrarare.space>
;;; Copyright © 2022, 2024, 2025 Nicolas Graves <ngraves@ngraves.fr>
;;; Copyright © 2022 Thiago Jung Bauermann <bauermann@kolabnow.com>
;;; Copyright © 2022 Joeke de Graaf <joeke@posteo.net>
;;; Copyright © 2023, 2025 Simon Streit <simon@netpanic.org>
;;; Copyright © 2023, 2025 John Kehayias <john.kehayias@protonmail.com>
;;; Copyright © 2023 Ivan Vilata-i-Balaguer <ivan@selidor.net>
;;; Copyright © 2022 Demis Balbach <db@minikn.xyz>
;;; Copyright © 2020, 2021, 2022, 2023 Andrew Tropin <andrew@trop.in>
;;; Copyright © 2023 Dominik Delgado Steuter <d@delgado.nrw>
;;; Copyright © 2023 Juliana Sims <juli@incana.org>
;;; Copyright © 2023, 2025 Evgeny Pisemsky <mail@pisemsky.site>
;;; Copyright © 2023 Gabriel Wicki <gabriel@erlikon.ch>
;;; Copyright © 2022-2023 Simon Josefsson <simon@josefsson.org>
;;; Copyright © 2023, 2025 Fabio Natali <me@fabionatali.com>
;;; Copyright © 2023 Arnaud Lechevallier <arnaud.lechevallier@free.fr>
;;; Copyright © 2023 Ahmad Draidi <a.r.draidi@redscript.org>
;;; Copyright © 2023 Sergiu Ivanov <sivanov@colimite.fr>
;;; Copyright © 2023 Camilo Q.S. (Distopico) <distopico@riseup.net>
;;; Copyright © 2023 Thanos Apollo <public@thanosapollo.com>
;;; Copyright © 2023 Ian Eure <ian@retrospec.tv>
;;; Copyright © 2024-2025 Suhail Singh <suhail@bayesians.ca>
;;; Copyright © 2024 dan <i@dan.games>
;;; Copyright © 2024 Ilya Chernyshov <ichernyshovvv@gmail.com>
;;; Copyright © 2024 Wilko Meyer <w@wmeyer.eu>
;;; Copyright © 2024 Noé Lopez <noelopez@free.fr>
;;; Copyright © 2024, 2025 gemmaro <gemmaro.dev@gmail.com>
;;; Copyright © 2024 Daniel Szmulewicz <daniel.szmulewicz@gmail.com>
;;; Copyright © 2024 Ashish SHUKLA <ashish.is@lostca.se>
;;; Copyright © 2024 Artyom V. Poptsov <poptsov.artyom@gmail.com>
;;; Copyright © 2024, 2025 Spencer King <spencer.king@wustl.edu>
;;; Copyright © 2024 emma thompson <bigbookofbug@proton.me>
;;; Copyright © 2024-2025 Liam Hupfer <liam@hpfr.net>
;;; Copyright © 2024-2025 aurtzy <aurtzy@gmail.com>
;;; Copyright © 2024 Olivier Rojon <o.rojon@posteo.net>
;;; Copyright © 2024 Divya Ranjan Pattanaik <divya@subvertising.org>
;;; Copyright © 2025 Arjan Adriaanse <arjan@adriaan.se>
;;; Copyright © 2025 Remco van 't Veer <remco@remworks.net>
;;; Copyright © 2025 Skylar Hill <stellarskylark@posteo.net>
;;; Copyright © 2025 Cayetano Santos <csantosb@inventati.org>
;;; Copyright © 2025 Lee Thompson <lee.p.thomp@gmail.com>
;;; Copyright @ 2025 Amy Pillow <amypillow@lavache.com>
;;; Copyright © 2025 Kurome <hunt31999@gmail.org>
;;; Copyright © 2025 Anderson Torres <anderson.torres.8519@gmail.com>
;;; Copyright © 2025 Jake Forster <jakecameron.forster@gmail.com>
;;; Copyright @ 2025 Andrew Wong <wongandj@icloud.com>
;;; Copyright @ 2025 Nik Gaffney <nik@fo.am>
;;; Copyright © 2025 Untrusem <mysticmoksh@riseup.net>
;;;
;;; This file is part of GNU Guix.
;;;
;;; GNU Guix is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Guix is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Guix.  If not, see <http://www.gnu.org/licenses/>.

(define-module (gnu packages emacs-xyz)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix cvs-download)
  #:use-module (guix download)
  #:use-module (guix deprecation)
  #:use-module (guix bzr-download)
  #:use-module (guix gexp)
  #:use-module (guix i18n)
  #:use-module (guix git-download)
  #:use-module (guix hg-download)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system cmake)
  #:use-module (guix build-system copy)
  #:use-module (guix build-system emacs)
  #:use-module (guix build-system perl)
  #:use-module (guix build-system trivial)
  #:use-module (gnu packages)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages aspell)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages chez)
  #:use-module (gnu packages cmake)
  #:use-module (gnu packages code)
  #:use-module (gnu packages cpp)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages databases)
  #:use-module (gnu packages dictionaries)
  #:use-module (gnu packages djvu)
  #:use-module (gnu packages ebook)
  #:use-module (gnu packages electronics)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages emacs-build)
  #:use-module (gnu packages enchant)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages freedesktop)
  #:use-module (gnu packages games)
  #:use-module (gnu packages gawk)
  #:use-module (gnu packages golang-apps)
  #:use-module (gnu packages guile)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages graphviz)
  #:use-module (gnu packages haskell)
  #:use-module (gnu packages haskell-apps)
  #:use-module (gnu packages ibus)
  #:use-module (gnu packages idris)
  #:use-module (gnu packages java)
  #:use-module (gnu packages julia-xyz)
  #:use-module (gnu packages ncurses)
  #:use-module (gnu packages networking)
  #:use-module (gnu packages python)
  #:use-module (gnu packages python-xyz)
  #:use-module (gnu packages python-check)
  #:use-module (gnu packages telephony)
  #:use-module (gnu packages terminals)
  #:use-module (gnu packages tex)
  #:use-module (gnu packages texinfo)
  #:use-module (gnu packages tcl)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages tree-sitter)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages lesstif)
  #:use-module (gnu packages llvm)
  #:use-module (gnu packages image)
  #:use-module (gnu packages image-processing)
  #:use-module (gnu packages image-viewers)
  #:use-module (gnu packages libffi)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages libevent)
  #:use-module (gnu packages lisp)
  #:use-module (gnu packages lisp-xyz)
  #:use-module (gnu packages lsof)
  #:use-module (gnu packages lua)
  #:use-module (gnu packages maths)
  #:use-module (gnu packages music)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages imagemagick)
  #:use-module (gnu packages w3m)
  #:use-module (gnu packages web)
  #:use-module (gnu packages wget)
  #:use-module (gnu packages autotools)
  #:use-module (gnu packages base)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages node)
  #:use-module (gnu packages xml)
  #:use-module (gnu packages glib)
  #:use-module (gnu packages acl)
  #:use-module (gnu packages mail)
  #:use-module (gnu packages messaging)
  #:use-module (gnu packages package-management)
  #:use-module (gnu packages perl)
  #:use-module (gnu packages perl6)
  #:use-module (gnu packages pdf)
  #:use-module (gnu packages racket)
  #:use-module (gnu packages ruby)
  #:use-module (gnu packages ruby-check)
  #:use-module (gnu packages ruby-xyz)
  #:use-module (gnu packages rust)
  #:use-module (gnu packages rust-apps)
  #:use-module (gnu packages scheme)
  #:use-module (gnu packages serialization)
  #:use-module (gnu packages speech)
  #:use-module (gnu packages xiph)
  #:use-module (gnu packages mp3)
  #:use-module (gnu packages gettext)
  #:use-module (gnu packages fribidi)
  #:use-module (gnu packages gd)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages password-utils)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages animation)
  #:use-module (gnu packages sphinx)
  #:use-module (gnu packages screen)
  #:use-module (gnu packages xdisorg)
  #:use-module (gnu packages shells)
  #:use-module (gnu packages shellutils)
  #:use-module (gnu packages sqlite)
  #:use-module (gnu packages ghostscript)
  #:use-module (gnu packages gnupg)
  #:use-module (gnu packages video)
  #:use-module (gnu packages haskell-xyz)
  #:use-module (gnu packages wordnet)
  #:use-module (gnu packages photo)
  #:use-module (gnu packages tor)
  #:use-module (gnu packages uml)
  #:use-module (gnu packages finance)
  #:use-module (gnu packages ocaml)
  #:use-module (gnu packages erlang)
  #:use-module (gnu packages statistics)
  #:use-module (gnu packages libcanberra)
  #:use-module (gnu packages telegram)
  #:use-module (gnu packages texinfo)
  #:use-module (gnu packages text-editors)
  #:use-module (gnu packages virtualization)
  #:use-module (gnu packages web-browsers)
  #:use-module (gnu packages wget)
  #:use-module (guix utils)
  #:use-module (srfi srfi-1)
  #:use-module (ice-9 match))

(define-public emacs-0x0
  (let ((commit "04f95142b25d8bb701f239539176df6617dcd982")
        (revision "0"))
    (package
      (name "emacs-0x0")
      (version (git-version "1.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.sr.ht/~willvaughn/emacs-0x0")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vj9vrfkgm7plp5mvq22fm9sln11j9763g3wd2w6c82rlsk6dhva"))))
      (build-system emacs-build-system)
      (home-page "https://git.sr.ht/~willvaughn/emacs-0x0")
      (synopsis
       "Integration with @url{https://0x0.st} and self-hosted services
from Emacs")
      (description
       "Emacs 0x0 is a pastebin integration tool.  It can upload the current
buffer, a file on your disk, or a string from the kill ring.")
      (license license:gpl3+))))

(define-public emacs-ac-ispell
  (let ((commit "22bace7387e9012002a6a444922f75f9913077b0")
        (revision "1"))
    (package
      (name "emacs-ac-ispell")
      (version (git-version "0.07" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-ispell")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1cq73bdv3lkn8v3nx6aznygqaac9s5i7pvirl8wz9ib31hsgwpbk"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-auto-complete))
      (home-page "https://github.com/emacsorphanage/ac-ispell")
      (synopsis "Ispell and Aspell completion source for Auto Complete")
      (description
       "AC Ispell is an Ispell and Aspell completion source for Auto Complete.")
      (license license:gpl3+))))

(define-public emacs-elisp-autofmt
  (let ((commit "fa30ffc2320c41fc3827e2a800d40d7d5bcaddbe")
        (revision "0"))
    (package
      (name "emacs-elisp-autofmt")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-elisp-autofmt")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "174cmqszhx42blqc6fjjf3lgaz2hasj15743hcrzj6a97nhx4wsj"))))
      (build-system emacs-build-system)
      (inputs (list python))
      (arguments
       (list
        #:test-command #~(list "make" "tests")
        #:include #~(cons* "elisp-autofmt.py"
                           "elisp-autofmt.overrides.json"
                           %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-dependencies
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "elisp-autofmt.el"
                  (("\"python\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/python3")
                                  "\"")))))
            ;; TODO Remove when fixed upstream. See:
            ;; https://codeberg.org/ideasman42/emacs-elisp-autofmt/issues/36
            (add-before 'check 'fix-tests
              (lambda _
                (setenv "HOME" (getenv "TMPDIR"))
                (with-atomic-file-replacement "Makefile"
                  (lambda (in out)
                    (dump-port in out)
                    (display "\n.PHONY: tests\n" out)))
                (substitute* "Makefile"
                  (("python") "python3")))))))
      (home-page "https://codeberg.org/ideasman42/emacs-elisp-autofmt")
      (synopsis "Auto-format Emacs lisp")
      (description "This is a package to auto-format Emacs lisp.")
      (license license:gpl3+))))

(define-public emacs-ac-php
  (package
    (name "emacs-ac-php")
    (version "2.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xcwen/ac-php")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1yn5cc6cmj3hwqgmjj44dz847xn5k99kirj36qwc04q7vhl8z8k7"))))
    (build-system emacs-build-system)
    (inputs
     (list emacs-auto-complete
           emacs-company
           emacs-dash
           emacs-f
           emacs-helm
           emacs-php-mode
           emacs-popup
           emacs-s
           emacs-xcscope))
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "Emacs Auto Complete & Company mode for PHP")
    (description
     "This package provides Auto Complete and Company back-ends for PHP.")
    (license license:gpl3+)))

(define-public emacs-ace-jump-helm-line
  (let ((commit "1483055255df3f8ae349f7520f05b1e43ea3ed37")
        (revision "0"))
    (package
      (name "emacs-ace-jump-helm-line")
      (version (git-version "0.5.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/cute-jumper/ace-jump-helm-line")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "191a2g1if1jliikbxkpwmvlp4v1sp541j71xrlymili8ygm0idq5"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-avy emacs-helm))
      (home-page "https://github.com/cute-jumper/ace-jump-helm-line")
      (synopsis "Ace-jump to a candidate in Helm window")
      (description
       "This package allows using Ace jump to a candidate in Helm window.")
      (license license:gpl3+))))

(define-public emacs-activities
  (package
    (name "emacs-activities")
    (version "0.7.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/activities-" version ".tar"))
       (sha256
        (base32 "1b6d77b5h2vikfxqjlb1jx5pnij5bif788nysvvn3wlzpwdi88s0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-persist))
    (home-page "https://github.com/alphapapa/activities.el")
    (synopsis "Save/restore sets of windows, tabs/frames, and their buffers")
    (description
     "Inspired by Genera's and KDE's concepts of \"activities\", this library
allows the user to select an \"activity\", the loading of which restores a
window configuration into a @code{tab-bar} tab or frame, along with the
buffers shown in each window.  Saving an activity saves the state for later
restoration.  Switching away from an activity saves the last-used state for
later switching back to, while still allowing the activity's initial or
default state to be restored on demand.  Resuming an activity loads the
last-used state, or the initial/default state when a universal argument is
provided.  The implementation uses the bookmark system to save buffers
states–that is, any major mode that supports the bookmark system is
compatible.")
    (license license:gpl3+)))

(define-public emacs-sops
  (package
    (name "emacs-sops")
    (version "0.1.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/djgoku/sops")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1n49p86sfvhaig7mp17zm9mrsp14mmvgvprp1n16r6kgfx52wxzq"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/djgoku/sops")
    (synopsis "SOPS encrypt and decrypt without leaving the editor")
    (description
     "This package provides a minor mode for editing @acronym{SOPS, Secret
OPerationS}-encrypted files.  To enable it automatically, set
@code{global-sops-mode}.  Users can decrypt with @code{sops-edit-file}, save
changes with @code{sops-save-file}, or discard them with @code{sops-cancel}.
The files are displayed in read-only mode to prevent accidental corruption,
which is useful for partly encrypted files with only one encrypted line.")
    (license license:gpl3+)))

(define-public emacs-age
  (package
    (name "emacs-age")
    (version "0.1.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/anticomputer/age.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09rfk9aijjgacff7n8d1cmsg7yb6cc3fppjxzs07dm9vcakcdvbh"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f))                ;no tests
    (home-page "https://github.com/anticomputer/age.el")
    (synopsis "Age Encryption support for Emacs")
    (description
     "This package provides transparent Age file encryption and decryption
in Emacs.  It is based on the Emacs EasyPG code and offers similar Emacs file
handling for Age encrypted files: maintain @file{.org.age} encrypted Org
files, provide Age encrypted authentication information out of
@file{.authinfo.age}, open/edit/save Age encrypted files via Tramp...")
    (license license:gpl3+)))

(define-public emacs-bookmark-plus
  (package
    (name "emacs-bookmark-plus")
    (version "2022.11.05")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsmirror/bookmark-plus")
             (commit "3db369056a722c42b3eafd10a91831f87d056dfa")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0fnq24f597zfr8jj5h3vr87kdil5lhy11m81q6ayqc03qm0jymrf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsmirror/bookmark-plus")
    (synopsis "Extensions to the Bookmark library in Emacs")
    (description
     "Bookmarks are a powerful Emacs feature.  This package makes them even
more versatile.  You can bookmark many more kinds of data.  You can add tags.
There are many more ways to organize and display your bookmarks.  I recommend
reading the extensive documentation about BookmarkPlus on the Emacs Wiki.")
    (license license:gpl3+)))

(define-public emacs-bqn-mode
  (package
    (name "emacs-bqn-mode")
    ;; Upstream releases are tagged by date.
    (version "2025-04-10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/museoa/bqn-mode/")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0zl6s0c0nd8m55f83yamgnl8kg1a9jrzl0wrmixrixzn7zmdj6qk"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ;No tests found in source.
    (propagated-inputs (list emacs-compat emacs-eros))
    (synopsis "Emacs major mode for the BQN programming language")
    (description
     "This package provides a major mode for editing and executing BQN code.
It can be used to interactively evaluate BQN code in buffer or can be used to
launch BQN REPL sessions.  For evaluating BQN code or spawning interpreters an
executable implementation is required such as @code{cbqn} or @code{dbqn}.")
    (home-page "https://github.com/museoa/bqn-mode/")
    (license license:gpl3)))

(define-public emacs-cfrs
  (package
    (name "emacs-cfrs")
    (version "1.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Alexander-Miller/cfrs")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bnfchv62zk9rapmiff6jcip9w6pp1x48l8qp26z9yb8clnvlz24"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-posframe emacs-s))
    (home-page "https://github.com/Alexander-Miller/cfrs")
    (synopsis "Child Frame Read String")
    (description
     "CFRS is a simple alternative to @code{read-string} that allows reading
input via a small child-frame spawned at the position of the cursor.")
    (license license:gpl3+)))

(define-public emacs-arei
  (package
    (name "emacs-arei")
    (version "0.9.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~abcdw/emacs-arei")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1m8ic5pcshz2y2maxvbgg70n4k2kgxvj98zisqal15j7djz0hzji"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-eros emacs-sesman emacs-queue))
    (home-page "https://git.sr.ht/~abcdw/emacs-arei")
    (synopsis "Asynchronous Reliable Extensible IDE")
    (description "Sleek Guile IDE for Emacs.")
    (license license:gpl3+)))

(define-public emacs-geiser
  (package
    (name "emacs-geiser")
    (version "0.32")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/emacs-geiser/geiser")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09dqwxa2h471xcyk5zncxzaz19gf8d5r83yhi425blf2r1ir7b34"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                      ;no tests
      #:lisp-directory "elisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'make-info
            (lambda _
              (invoke "makeinfo" "--no-split"
                      "-o" "geiser.info" "../doc/geiser.texi"))))))
    (native-inputs
     (list texinfo))
    (home-page "https://www.nongnu.org/geiser/")
    (synopsis "Collection of Emacs modes for Scheme hacking")
    (description
     "Geiser is a collection of Emacs major and minor modes that conspire with
one or more Scheme implementations to keep the Lisp Machine Spirit alive.  The
continuously running Scheme interpreter takes the center of the stage in
Geiser.  A bundle of Elisp shims orchestrates the dialog between the Scheme
implementation, Emacs and, ultimately, the schemer, giving them access to live
metadata.

This package provides just the core of Geiser.  To effectively use it with your
favourite Scheme implementation, you also need the corresponding geiser package,
e.g. emacs-geiser-guile for Guile.")
    (license license:bsd-3)))

(define-public emacs-gptel
  (package
    (name "emacs-gptel")
    (version "0.9.9")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/karthink/gptel")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "00f391gaf0pnin6qncpnxl5yj0j089d1rdblwgv5cf3mkid9w8gj"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'use-appropriate-curl
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "gptel.el"
                ("gptel-use-curl" (search-input-file inputs "/bin/curl"))))))))
    (inputs (list curl))
    (propagated-inputs (list emacs-compat emacs-transient))
    (home-page "https://github.com/karthink/gptel")
    (synopsis "GPTel is a simple ChatGPT client for Emacs")
    (description
     "GPTel is a simple ChatGPT asynchronous client for Emacs with no external
dependencies.  It can interact with ChatGPT from any Emacs buffer with ChatGPT
responses encoded in Markdown or Org markup.  It supports conversations, not
just one-off queries and multiple independent sessions.  It requires an OpenAI
API key.")
    (license license:gpl3+)))

(define-public emacs-gptel-prompts
  ;; No releases.
  (let ((commit "17fd35aca76f2b6681a1807e9f3123fe5ba0b60d")
        (revision "1"))
    (package
      (name "emacs-gptel-prompts")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (uri (git-reference
                (url "https://github.com/jwiegley/gptel-prompts/")
                (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "0s6hl2s1cxj75v6xb4xxsriqqb4rww32yxmybvarx2hpnlr701y8"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (propagated-inputs (list emacs-gptel))
      (home-page "https://github.com/jwiegley/gptel-prompts/")
      (synopsis "Alternative Gptel directives management")
      (description
       "This package offers an advanced way to manage Gptel directives, using
files rather than customizing the variable directly.")
      (license license:gpl2+))))

(define-public emacs-gptel-quick
  (let ((commit "495b5e0b5348dbced1448bd12cbf8847e30b5175")
        (revision "2"))
    (package
      (name "emacs-gptel-quick")
      (version (git-version "0.0.5" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/karthink/gptel-quick")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "1k4n0qmaw4cbybw502wnn1mv2pr9giaickq830ly6bxrc5wz7jn4"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-gptel))
      (home-page "https://github.com/karthink/gptel-quick")
      (synopsis "Quick LLM lookups in Emacs")
      (description
       "This package provides a tiny everyday helper for easily looking up or
summarizing text using an LLM.")
      (license license:gpl3+))))

(define-public emacs-chatgpt-shell
  (package
    (name "emacs-chatgpt-shell")
    (version "2.30.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/xenodium/chatgpt-shell")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0jyhcy27g4dpcd49a2f23smmnxjsvbdzpa71207svillrgiafg8f"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               ;; This phase prevents build phase failure.
               (add-after 'unpack 'generate-empty-config-file
                 (lambda _
                   (setenv "HOME" (getcwd))
                   (mkdir-p ".emacs.d")
                   (call-with-output-file ".emacs.d/.chatgpt-shell.el"
                     (lambda (port)
                       (display "nil" port))))))
           #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-l" "test_chatgpt-shell.el"
                                  "-l" "chatgpt-shell.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-shell-maker))
    (home-page "https://github.com/xenodium/chatgpt-shell")
    (synopsis "Multi-llm Emacs shell")
    (description
     "@code{Chatgpt-shell} is a comint-based LLM shell for Emacs, with support
for multiple backends.")
    (license license:gpl3+)))

(define-public emacs-dall-e-shell
  (let ((commit "428125f9fa8578703a9ca85d173b2cc9a3eb16b9"))
    (package
      (name "emacs-dall-e-shell")
      (version "0.43.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/xenodium/dall-e-shell/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0mhaa7b2ghyjkca3377a9129zfjxyg0m1inqlvqmsj812bvn90q8"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ;no tests
      (propagated-inputs (list emacs-shell-maker))
      (home-page "https://github.com/xenodium/dall-e-shell/")
      (synopsis "Emacs shell for Dall-e")
      (description
       "Dall-e Shell is a comint-based Dall-e shell for Emacs.")
      (license license:gpl3+))))

(define-public emacs-geiser-guile
  (package
    (name "emacs-geiser-guile")
    (version "0.28.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/emacs-geiser/guile")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0i6drqz7cnx97bs5kprvb0hsg2h4bwkfdi61ajv43dqgb368jbff"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "^src/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'make-info
            (lambda _
              (invoke "makeinfo" "--no-split" "geiser-guile.texi")))
          (add-after 'unpack 'patch-geiser-guile-binary
            (lambda* (#:key inputs #:allow-other-keys)
              (substitute* "geiser-guile.el"
                (("\\(t \"guile\")")
                 (format #f "(t ~s)"
                         (search-input-file inputs "bin/guile"))))))
          (add-after 'make-autoloads 'patch-autoloads
            (lambda _
              (substitute* "geiser-guile-autoloads.el"
                ;; Activating implementations fails when Geiser is not yet
                ;; loaded, so let's defer that until it is.
                (("\\(geiser-activate-implementation .*\\)" all)
                 (string-append
                  "(eval-after-load 'geiser-impl '" all ")"))))))))
    (native-inputs (list texinfo))
    (inputs (list guile-3.0-latest))
    (propagated-inputs (list emacs-geiser))
    (home-page "https://www.nongnu.org/geiser/")
    (synopsis "Guile Scheme support for Geiser")
    (description
     "This package adds support for the Guile Scheme implementation to Geiser,
a generic Scheme interaction mode for the GNU Emacs editor.")
    (license license:bsd-3)))

(define-public emacs-ac-geiser
  (let ((commit "93818c936ee7e2f1ba1b315578bde363a7d43d05")
        (revision "0"))
    (package
      (name "emacs-ac-geiser")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/xiaohanyu/ac-geiser")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "00n2qa26yilaj837n1yp6lbqa4gf30nkkbvanl7m9ih7k48ssqmw"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-geiser emacs-auto-complete))
      (synopsis "Auto-complete backend for geiser")
      (description
       "This package provides an auto-complete source for Scheme projects
using geiser.")
      (license license:bsd-3)
      (home-page "https://github.com/xiaohanyu/ac-geiser"))))

(define-public emacs-geiser-gauche
  ;; The latest 0.14 release has an unbound variable (geiser-scheme-dir).
  (let ((commit "96fa06aaeef18cc1b3b519e83dbb7be09eeb0d07")
        (revision "0"))
    (package
      (name "emacs-geiser-gauche")
      (version (git-version "0.14" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/gauche.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1ppracwfl1snq0ifdlyxpdlv7fbn3pbxm1hd1ihgqivii5nbya9r"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include '(cons "^geiser-gauche\\.scm$" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-geiser-gauche-binary
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-sexps "geiser-gauche.el"
                  ("geiser-custom--defcustom geiser-gauche-binary"
                   (search-input-file inputs "bin/gosh")))))
            (add-after 'make-autoloads 'patch-autoloads
              (lambda _
                (substitute* "geiser-gauche-autoloads.el"
                  ;; Activating implementations fails when Geiser is not yet
                  ;; loaded, so let's defer that until it is.
                  (("\\(geiser-activate-implementation .*\\)" all)
                   (string-append
                    "(eval-after-load 'geiser-impl '" all ")"))
                  (("\\(geiser-implementation-extension .*\\)" all)
                   (string-append
                    "(eval-after-load 'geiser-impl '" all ")"))))))))
      (inputs (list gauche))
      (propagated-inputs (list emacs-geiser))
      (home-page "https://gitlab.com/emacs-geiser/gauche")
      (synopsis "Gauche Scheme support for Geiser")
      (description
       "This package adds support for the Gauche Scheme implementation to Geiser,
a generic Scheme interaction mode for the GNU Emacs editor.")
      (license license:expat))))

(define-public emacs-geiser-racket
  (package
    (name "emacs-geiser-racket")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/emacs-geiser/racket")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04gwd9qa0785zfr6m9a5443ilgvyz05l06cb1waicf83sgp8xl32"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "^src/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-geiser-racket-binary
            (lambda* (#:key inputs #:allow-other-keys)
              (substitute* "geiser-racket.el"
                (("\\(t \"racket\")")
                 (format #f "(t ~s)"
                         (search-input-file inputs "bin/racket"))))))
          (add-after 'make-autoloads 'patch-autoloads
            (lambda _
              (substitute* "geiser-racket-autoloads.el"
                ;; Activating implementations fails when Geiser is not yet
                ;; loaded, so let's defer that until it is.
                (("\\(geiser-activate-implementation .*\\)" all)
                 (string-append
                  "(eval-after-load 'geiser-impl '" all ")"))
                (("\\(geiser-implementation-extension .*\\)" all)
                 (string-append
                  "(eval-after-load 'geiser-impl '" all ")"))))))))
    (inputs (list racket))
    (propagated-inputs (list emacs-geiser))
    (home-page "https://www.nongnu.org/geiser/")
    (synopsis "Racket support for Geiser")
    (description
     "This package adds support for the Racket implementation to Geiser,
a generic Scheme interaction mode for the GNU Emacs editor.")
    (license license:bsd-3)))

(define-public emacs-geiser-chez
  (package
    (name "emacs-geiser-chez")
    (version "0.18")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/emacs-geiser/chez")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19yv5brhzf10hsazmm8s1b058d434hv60a52s08m3kxyrkwr5sca"))))
    (build-system emacs-build-system)
    (arguments
     '(#:include (cons "^src/" %default-include)
       #:phases
       (modify-phases %standard-phases
         (add-after 'make-autoloads 'patch-autoloads
           (lambda* (#:key outputs #:allow-other-keys)
             (substitute* "geiser-chez-autoloads.el"
               ;; Activating implementations fails when Geiser is not yet
               ;; loaded, so let's defer that until it is.
               ;; See <https://gitlab.com/emacs-geiser/chez/-/issues/7>.
               (("\\(geiser-activate-implementation .*\\)" all)
                (string-append
                 "(eval-after-load 'geiser-impl '" all ")"))
               (("\\(geiser-implementation-extension .*\\)" all)
                (string-append
                 "(eval-after-load 'geiser-impl '" all ")"))))))))
    (inputs
     (list chez-scheme))
    (propagated-inputs
     (list emacs-geiser))
    (home-page "https://nongnu.org/geiser/")
    (synopsis "Support for Chez Scheme in Geiser")
    (description
     "This package adds support for using Chez Scheme in Emacs with Geiser.")
    (license license:bsd-3)))

(define-public emacs-syncthing
  (package
    (name "emacs-syncthing")
    (version "3.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/KeyWeeUsr/emacs-syncthing.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1zbdv6gaklxi86f3ni5bhl8pnsx1jyi9zmb7rxkgjw46wdyi3c2d"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/KeyWeeUsr/emacs-syncthing")
    (synopsis "Emacs client for Syncthing")
    (description
     "Emacs-Syncthing is a client for the Syncthing file synchronization tool
which provides an Emacs interface to replace the built-in web UI.")
    (license license:gpl3+)))

(define-public emacs-vc-hgcmd
  (package
    (name "emacs-vc-hgcmd")
    (version "1.14.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/muffinmad/emacs-vc-hgcmd")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nlaicza4ds325827ks5gb7zn0nc536k2chq8jwbq34ybvxi93wj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/muffinmad/emacs-vc-hgcmd")
    (synopsis "Version control (VC) backend for the Mercurial command server")
    (description
     "This package provides an Emacs VC backend to work with Mercurial
repositories through the
@uref{https://www.mercurial-scm.org/wiki/CommandServer,Mercurial command
server}.  The main advantage compared to @code{vc-hg} is speed.")
    (license license:gpl3+)))

(define-public emacs-telephone-line
  (package
    (name "emacs-telephone-line")
    (version "0.6")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/dbordak/telephone-line")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1pv6hlzks02bvxkfyg8m04l36clg39h5w7nq2k6ppi5bh4d4kmc8"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/dbordak/telephone-line")
    (synopsis "Implementation of Powerline for Emacs")
    (description
     "Telephone Line is a new implementation of Powerline for Emacs with
optional baked-in Evil support, antialiased separators, and an easy
configuration language which makes it trivial to write your own themes.")
    (license license:gpl3+)))

(define-public emacs-i-ching
  (package
    (name "emacs-i-ching")
    (version "20241113.1642")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://codeberg.org/zzkt/i-ching.git")
              (commit
               "e4339cb64a97e0d04a4cb8e7183aeec4e4ae6a29")))
       (sha256
        (base32
         "08827zq4jni4bxlmjq24nbj6k2q07ks6mb47xfs2bp8hjqb0m07f"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://codeberg.org/zzkt/i-ching")
    (synopsis "The Book of Changes")
    (description
     "Cast hexagrams and consult the I Ching, or 'Book of Changes' from the
comfort of Emacs.  The I Ching can be used as a divination method, pattern
generator or fixed point for millennia of commentary & exegesis.  This package
provides methods for casting and describing hexagrams, querying the oracle,
and finding patterns in randomness.  The descriptions of hexagrams and their
classification have been drawn from public domain sources, tradition and
antiquity.")
    (license license:gpl3+)))

(define-public emacs-inspector
  (let ((commit "0c02fd712ff89006227838e18a4685678abd9ba8")
        (revision "1"))
    (package
      (name "emacs-inspector")
      (version (git-version "0.38" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/mmontone/emacs-inspector")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "0fidzh8zwaxvkxdzj01rznixaqs00kl3w5xi1qylcjl5jvl6vrmg"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "-Q" "--batch"
                               "-l" "inspector.el"
                               "-l" "inspector-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/mmontone/emacs-inspector")
      (synopsis "Inspection tool for Emacs Lisp objects")
      (description
       "This package provides an introspection tool similar to those found in
Common Lisp or Smalltalk, but for Emacs Lisp.")
      (license license:gpl3+))))

(define-public emacs-inspirehep
  ;; No tags or releases.
  (let ((commit "9675ef63833d3f876e2f1dd8f7a8d91eef420aab")
        (revision "0"))
    (package
      (name "emacs-inspirehep")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
            (url "https://codeberg.org/rahguzar/inspirehep.el/")
            (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1rjclz658vca3mlwhil9kz4ffk382l1csrh7wr8ch63babmc7kzy"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (propagated-inputs
       (list emacs-map emacs-pdf-tools emacs-companion-mode))
      (home-page "https://codeberg.org/rahguzar/inspirehep.el/")
      (synopsis "Search literature references for high energy physics")
      (description
       "This package provides an Emacs interface to the online service
@uref{https://inspirehep.net/, Inspirehep}")
      (license license:gpl3+))))

(define-public emacs-treebundel
  (package
    (name "emacs-treebundel")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purplg/treebundel")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0fpmm3jb95lksamxqz9850x2vcmcvq6bx29sn0fci6ny4cvpnq5k"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/purplg/treebundel")
    (synopsis "Bundle related git-worktrees together")
    (description
     "This package is used for bundling related git-worktrees from multiple
repositories together.  This helps switch quickly between repositories and
ensure you're on the correct branch.  When you're done with your changes, you
can use the repositories in the workspace and know which ones were modified to
simplify the process of getting the changes merged in together.  Additionally,
git metadata is shared between all projects.  You can stash, pop, and pull
changes in from the same repository in other workspaces thanks to the power of
git-worktrees.")
    (license license:expat)))

(define-public emacs-tree-inspector
  (let ((commit "bbb8d2dfe84fbf857fcc1579de5a1324b09a877e"))
    (package
      (name "emacs-tree-inspector")
      (version "0.4")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mmontone/emacs-tree-inspector")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "01ad4r97hfr9nndbifyggscb5108y7h2qm95jsmh5b9qgzqm39nx"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "-Q" "--batch"
                               "-L" "."
                               "-l" "tree-inspector-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'fix-library-loading
              ;; The library calls `hash-table-keys', which is not
              ;; auto-loaded.  Explicitly require `subr-x', where it is
              ;; defined.
              (lambda _
                (substitute* "tree-inspector.el"
                  (("\\(require 'cl-lib\\)" line)
                   (string-append line "(require 'subr-x)"))))))))
      (propagated-inputs (list emacs-treeview))
      (home-page "https://github.com/mmontone/emacs-tree-inspector")
      (synopsis "Inspection tool for Emacs Lisp objects that uses a tree view")
      (description
       "Tree Inspector is an inspection tool for Emacs Lisp objects that uses
a tree view.  It works together with Emacs Inspector when it is loaded; when
an object label is clicked on the tree, an inspector is opened on that
object.")
      (license license:gpl3+))))

(define-public emacs-terminal-here
  (package
    (name "emacs-terminal-here")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/davidshepherd7/terminal-here")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1iv1c2mbvhn00ha46c6f98j9syc71xhjpk8m5wa5p32sk4wcc9f4"))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-el-mock emacs-ert-runner emacs-validate))
    (home-page "https://github.com/davidshepherd7/terminal-here")
    (synopsis "Open external terminals from Emacs")
    (description
     "This package provides commands to open external terminal emulators from
Emacs, whose initial working directories are determined in relation to the
current buffer.")
    (license license:gpl3+)))

(define-public emacs-treeview
  (package
    (name "emacs-treeview")
    (version "1.3.0")
    (source
     (origin
       (uri (git-reference
             (url "https://github.com/tilmanrassy/emacs-treeview")
             (commit (string-append "v" version))))
       (method git-fetch)
       (sha256
        (base32 "0blggaqzz7rwycpp6v0n0fig1d9prdp63w25cprnq59ymczr7w85"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tilmanrassy/emacs-treeview/")
    (synopsis "Emacs Lisp framework for tree navigation")
    (description
     "This package provides an abstract Emacs Lisp framework for tree
navigation.")
    (license license:gpl3+)))

(define-public emacs-hide-lines
  (package
    (name "emacs-hide-lines")
    (version "20210513.1636")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/vapniks/hide-lines.git")
                    (commit "f0828c15e50db5eddb905de783e7683b04d1eca3")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1pw0wp1pzy6snycvz12nj0q7jxxj07h3lqas184w44nhrira7qhj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/vapniks/hide-lines")
    (synopsis "Commands for hiding lines based on a regexp")
    (description
     "This package provides commands to hide lines based on a regular
expression.")
    (license license:gpl3+)))

(define-public emacs-hgignore-mode
  ;; From 2021-03-14.
  ;; No releases available.
  (let ((commit "2c5aa4c238848f5b4f2955afcfb5f21ea513653b")
        (revision "0"))
    (package
      (name "emacs-hgignore-mode")
      ;; `Version:' header says 0.1.20150329
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/omajid/hgignore-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0jn9rzhrmmv4lf7rdapdjclk6623d1mir2lq3c46428skhzjlph7"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/omajid/hgignore-mode")
      (synopsis "Major mode for editing @file{hgignore} files")
      (description "This package provides a basic major mode for
editing @file{.hgignore} files used by the Mercurial version control
system.")
      (license license:gpl3+))))

(define-public emacs-hsluv
  (package
    (name "emacs-hsluv")
    (version "20181127.1206")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/hsluv/hsluv-emacs.git")
                    (commit "c3bc5228e30d66e7dee9ff1a0694c2b976862fc0")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "19q8qlq4s2kfydpadkq1zd92611dvq7dr8vlhlbd9gplzpx7dhfd"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/hsluv/hsluv-emacs")
    (synopsis "HSLuv color space conversions")
    (description
     "This package provides an elisp implementation of the HSLUV colorspace
conversions documented on @url{http://www.hsluv.org/}.  HSLuv is a
human-friendly alternative to HSL.  CIELUV is a color space designed for
perceptual uniformity based on human experiments.  When accessed by polar
coordinates, it becomes functionally similar to HSL with a single problem: its
chroma component doesn't fit into a specific range.  HSLuv extends CIELUV with
a new saturation component that allows you to span all the available chroma as
a neat percentage.")
    (license license:expat)))

(define-public emacs-platformio-mode
  (package
    (name "emacs-platformio-mode")
    (version "0.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ZachMassia/PlatformIO-Mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0ian50v9vaz7kqzn20bhqadq50h0l3zhjkmniinpz4q9klh7drh9"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-async emacs-projectile))
    (home-page "https://github.com/zachmassia/platformio-mode")
    (synopsis "Minor mode for building and uploading PlatformIO projects")
    (description "This package provides an Emacs minor mode for building and
uploading PlatformIO projects.")
    (license license:gpl3+)))

(define-public emacs-hyperbole
  (package
    (name "emacs-hyperbole")
    (version "9.0.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "hyperbole-" version ".tar"))
       (sha256
        (base32 "0a7py2dvszh0rf2smbmm8msjrc8vbbvlqnsqw0m2l12v8vllmxnb"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons* "DEMO"
                              "DEMO-ROLO.otl"
                              "HY-ABOUT"
                              "HY-NEWS"
                              "man/hkey-help.txt"
                              "man/hyberbole.info"
                              "kotl/.*"
                              "\\.kotl$"
                              %default-include)
           ;; XXX: tests want to download requirements very badly
           #:tests? #f
           #:phases
           #~(modify-phases %standard-phases
               ;; Fix build issues about missing "domainname" and
               ;; "hpmap:dir-user" parent dir, and missing require in
               ;; "hgnus.el" (void-function: var-append).
               (add-after 'unpack 'fix-build
                 (lambda* (#:key inputs #:allow-other-keys)
                   (substitute* "hypb.el"
                     (("/bin/domainname")
                      (search-input-file inputs "bin/dnsdomainname")))
                   (substitute* "hyperbole.el"
                     (("\\(hyperb:check-dir-user\\)") ""))
                   (substitute* "hgnus.el"
                     (("hmail ") "hmail hvar "))))
               (add-after 'install 'install-doc
                 (lambda _
                   (install-file "man/hyperbole.info"
                                 (string-append #$output "/share/info"))
                   (install-file "man/hkey-help.txt"
                                 (string-append #$output "/share/doc/"
                                                #$name "-" #$version))))
               (add-after 'install 'install-images
                 (lambda _
                   (let ((dir (string-append #$output "/share/info/im")))
                     (for-each (lambda (file)
                                 (install-file file dir))
                               (find-files "man/im" "\\.png$"))))))))
    (inputs
     (list inetutils))
    (home-page "https://www.gnu.org/software/hyperbole/")
    (synopsis "The Everyday Hypertextual Information Manager")
    (description
     "GNU Hyperbole, or just Hyperbole, is a programmable hypertextual
information management system.  It offers rapid views and interlinking of all
kinds of textual information, utilizing Emacs for editing.  In particular,
Hyperbole lets you quickly create and activate hyperlink buttons, build
outlines, manage all your contacts, your windows and frames, and search across
buffers, directory trees, or the web.")
    (license license:gpl3+)))

(define-public emacs-vline
  (let ((commit "f5d7b5743dceca75b81c8c95287cd5b0341debf9")
        (revision "0"))
    (package
      (name "emacs-vline")
      (version (git-version "1.11" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/buzztaiki/vline")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "06qqpjaxsacslxb3f2bm790lwygbq6387n9ccn4v9vz9xlyn9dmi"))))
      (build-system emacs-build-system)
      (arguments
       ;; No tests
       (list #:tests? #f))
      (home-page "https://github.com/buzztaiki/vline")
      (synopsis "Column highlighting (vertical line displaying) mode")
      (description
       "@code{vline-mode} is a minor mode for highlighting column at cursor
position.  It enhances text editing by visually indicating the vertical
line.")
      (license license:gpl2+))))

(define-public emacs-xhair
  (let ((commit "c7bd7c501c3545aa99dadac386c882fe7c5edd9c")
        (revision "0"))
    (package
      (name "emacs-xhair")
      ;; No tag, version comes from source code
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-xhair")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "03m15lbspk73x59wvb77wgvnkrmrlq4w6kmnrr2i69jgafqh0421"))))
      (build-system emacs-build-system)
      (arguments
       ;; No tests
       (list #:tests? #f))
      (propagated-inputs (list emacs-vline))
      (home-page "https://github.com/Boruch-Baum/emacs-xhair")
      (synopsis "Highlight the current line and column")
      (description
       "This package simultaneously applies @code{vline-mode} and
@code{hl-line-mode}, with tweaks, to present @code{point} in highlighted
cross-hairs, reporting the value of @code{point} as a message in the echo
area.")
      (license license:gpl3+))))

(define-public emacs-vlf
  (package
    (name "emacs-vlf")
    (version "1.7.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "vlf-" version ".tar"))
       (sha256
        (base32 "0hpri19z6b7dqmrj5ckp8sf0m0l72lkgahqzvfmwhgpgv2p81bny"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/m00natic/vlfi/")
    (synopsis "View large files in Emacs")
    (description
"Vlf is an Emacs minor mode that allows viewing, editing, searching and
comparing large files in batches.")
    (license license:gpl2+)))

(define-public emacs-hg-histedit
  ;; From 2021-03-02.
  ;; No releases available.
  (let ((commit "a05149483b9c5f7848ece0ba6028c900595a6a25")
        (revision "0"))
    (package
      (name "emacs-hg-histedit")
      (version (git-version "0.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jojojames/hg-histedit")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "04zps0d4s99f5a8ahrpyf8b6qw0c1y7rd1bsaq9nc6m4qblsvwc8"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-with-editor))
      (home-page "https://github.com/jojojames/hg-histedit")
      (synopsis "Emacs interface to @command{hg histedit}")
      (description "This package provides an Emacs interface to
@command{hg histedit} for editing the commit history.")
      (license license:gpl3+))))

(define-public emacs-package-build
  (package
    (name "emacs-package-build")
    (version "4.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/melpa/package-build")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "165gbrc1h1yj764kn3qq2y1551y04lqnklfa0k87gqgd38q5v985"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f))  ; No tests.
    (home-page "https://github.com/melpa/package-build")
    (synopsis "Tools for assembling an Emacs package archive")
    (description "This package provides tools for assembling an @acronym{ELPA,
Emacs package archive}.")
    (license license:gpl3+)))

(define-public emacs-paredit
  (package
    (name "emacs-paredit")
    (version "26")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://mumble.net/~campbell/git/paredit.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1hwl2jhv1fhsdrspfhprq77n763i4zsj350q024ajy0m2kaql6ws"))))
    (build-system emacs-build-system)
    (home-page "https://mumble.net/~campbell/emacs/paredit/")
    (synopsis "Emacs minor mode for editing parentheses")
    (description
     "ParEdit (paredit.el) is a minor mode for performing structured editing
of S-expression data.  The typical example of this would be Lisp or Scheme
source code.

ParEdit helps keep parentheses balanced and adds many keys for moving
S-expressions and moving around in S-expressions.  Its behavior can be jarring
for those who may want transient periods of unbalanced parentheses, such as
when typing parentheses directly or commenting out code line by line.")
    (license license:gpl3+)))

(define-public emacs-puni
  ;; No tagged release upstream
  (let ((commit "f430f5b0a14c608176e3376058eb380ab0824621")
        (revision "3"))
    (package
      (name "emacs-puni")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/AmaiKinono/puni")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0kvxll2yx4lh5x04cigdizncp2kbva1iidz9fjnbi8qqfm6pq5qq"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no actual tests
      (propagated-inputs (list emacs-with-editor))
      (home-page "https://github.com/AmaiKinono/puni")
      (synopsis "Emacs minor mode for structured editing")
      (description
       "Puni is an Emacs minor mode for structured editing: soft deletion,
expression navigating and manipulating.  It supports many major modes
out of the box.")
      (license license:gpl3+))))

(define-public emacs-pug-mode
  (package
    (name "emacs-pug-mode")
    (version "1.0.8")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/hlissner/emacs-pug-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1f6bhdr1a72x94dlz2i1fwwln8crc2mbpc2iq23hvsbsfmj7xfzp"))))
    (native-inputs (list emacs-ert-runner))
    (build-system emacs-build-system)
    (home-page "https://github.com/hlissner/emacs-pug-mode")
    (synopsis "Pug support for Emacs")
    (description "Pug mode offers Emacs support for Pug.  Unlike Jade mode, it
is based off of Slim mode.")
    (license license:gpl3+)))

(define-public emacs-show-font
  (package
    (name "emacs-show-font")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/protesilaos/show-font")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "03l92jacamd6vda51r9cw60bdyrv4ag8bk6qi6jpps6ljss5g6pl"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs
     (list texinfo))
    (home-page "https://github.com/protesilaos/show-font")
    (synopsis "Show font features in a buffer")
    (description
     "Show Font lets you preview a font inside of Emacs.  It does so in three
ways: prompt for a font on the system and display it in a buffer, list all
known fonts in a buffer with a short preview for each, and provide a major
mode to preview a font whose file is among the installed ones.")
    (license license:gpl3+)))

(define-public emacs-sed-mode
  (package
    (name "emacs-sed-mode")
    (version "1.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/sed-mode-" version
                           ".tar"))
       (sha256
        (base32 "0zhga0xsffdcinh10di046n6wbx35gi1zknnqzgm9wvnm2iqxlyn"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/sed-mode.html")
    (synopsis "Major mode to edit sed scripts")
    (description
     "The Sed major mode provides basic support for sed scripts.  The
functionalities supported are font-locking and auto-indentation.")
    (license license:gpl3+)))

(define-public emacs-spaceline-all-the-icons
  (package
    (name "emacs-spaceline-all-the-icons")
    (version "1.4.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/domtronn/spaceline-all-the-icons.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "186v71d8n1iy73drayyf57pyzlz973q74mazkyvb8w3fj8bb3llm"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-all-the-icons
           emacs-memoize
           emacs-spaceline))
    (home-page "https://github.com/domtronn/spaceline-all-the-icons.el")
    (synopsis
     "Theme for @code{emacs-spaceline} using @code{emacs-all-the-icons}")
    (description
     "This package is a theme for @code{emacs-spaceline} that recreates most
of the segments available in that package using icons from
@code{emacs-all-the-icons}.  Icon fonts allow for more tailored and detailed
information in the mode line.")
    (license license:expat)))

(define-public emacs-snow
  (let ((commit "be17977677fa29709a726715a1a1cba1bd299f68")
        (revision "1"))
     (package
      (name "emacs-snow")
      (version (git-version "0" revision commit))
       (source
        (origin
          (method git-fetch)
          (uri (git-reference
               (url "https://github.com/alphapapa/snow.el")
                (commit commit)))
          (file-name (git-file-name name version))
          (sha256
          (base32 "0fh1hmwpszm9frvnqr2b8rlfx33dy9jm5r82hldgxdbhlv8dq4d0"))))
       (build-system emacs-build-system)
      (home-page "https://github.com/alphapapa/snow.el/")
      (synopsis "Let it snow in Emacs")
      (description "This package adds a command @code{snow} that displays
a buffer in which it snows.  The storm varies in intensity, a gentle breeze
blows at times, and snow accumulates on the terrain in the scene.")
      (license license:gpl3+))))

(define-public emacs-spongebob
  (let ((commit "ae8ae6ba0dc57b7357ba87ff0609d27c4a0a5f51")
        (revision "0"))
     (package
      (name "emacs-spongebob")
      (version (git-version "0" revision commit))
       (source
        (origin
          (method git-fetch)
          (uri (git-reference
               (url "https://gitlab.com/dustyweb/spongebob.el")
                (commit commit)))
          (file-name (git-file-name name version))
          (sha256
          (base32 "1agqpp078ij2irn0kb8bgqk0nd47fi20yfd9szn8kbqypfqalvgc"))))
       (build-system emacs-build-system)
      (home-page "https://gitlab.com/dustyweb/gauche")
      (synopsis "Memetically mock a region of text")
      (description "This package transforms text using @code{studlify-region}
and inserts a SpongeBob SquarePants ASCII art figure in the current
buffer.")
      (license license:gpl3+))))

(define-public emacs-prism
  (let ((commit "6046a5cf793f65ff86fe0392e0edf29ffcd57567")) ;version bump
    (package
      (name "emacs-prism")
      (version "0.3.5")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/alphapapa/prism.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1p4vqyc4jm0pg4999i0k04pl0sa9nhrczxf4bng4id1r19sxm6dh"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-compat emacs-dash))
      (home-page "https://github.com/alphapapa/prism.el")
      (synopsis
       "Disperses bracket-bounded syntax into a spectrum of color by depth")
      (description
       "Prism is a Rainbow Blocks-like mode for Emacs.  It preserves non-color
face properties and allows configuration of faces and colors.")
      (license license:gpl3+))))

(define-public emacs-project
  (package
    (name "emacs-project")
    (version "0.11.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/project-" version ".tar"))
       (sha256
        (base32 "1973d6z7nx9pp5gadqk8p71v6s5wqja40a0f8zjrn6rrnfarrcd0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-xref))
    (home-page "https://elpa.gnu.org/packages/project.html")
    (synopsis "Operations on the current project")
    (description
     "This library contains generic infrastructure for dealing with projects,
some utility functions, and commands using that infrastructure.")
    (license license:gpl3+)))

(define-public emacs-flymake
  (package
    (name "emacs-flymake")
    (version "1.4.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "flymake-" version ".tar"))
       (sha256
        (base32 "02y7fgg2m0ya4c6r4861nk0128wdb18892hc940an268zjjixghy"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-eldoc emacs-project))
    (home-page "https://elpa.gnu.org/packages/flymake.html")
    (synopsis "Universal on-the-fly syntax checker")
    (description
     "Flymake collects diagnostic information for multiple sources,
called backends, and visually annotates the relevant portions in the buffer.")
    (license license:gpl3+)))

;; Package has no release.  Version is extracted from "Version:" keyword in
;; main file.
(define-public emacs-project-mode-line-tag
  (let ((commit "a8809cc1a50cfdedaf7bed2810249ae262884716")
        (revision "0"))
    (package
      (name "emacs-project-mode-line-tag")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://github.com/fritzgrabo/project-mode-line-tag")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0bmx9a1g199axj9ypqisvfyf1517czw23zg96x1wdzqrpw3cb7cx"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/fritzgrabo/project-mode-line-tag")
      (synopsis "Display a buffer's project in its mode line")
      (description
       "Display information about a buffer's project (a \"project tag\") in
its mode line.")
      (license license:gpl3+))))

(define-public emacs-project-tab-groups
  (let ((commit "2658405d5f3c539fbd9ccf95297a016a2c91816a")
        (revision "1"))
    (package
      (name "emacs-project-tab-groups")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/fritzgrabo/project-tab-groups.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1zg9kxyjz942ib9lii0in67hwqil2xlz78vjm1qqypw3zaivhh7p"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/fritzgrabo/project-tab-groups")
      (synopsis "Support a \"one tab group per project\" workflow")
      (description "This package provides a global minor mode that enhances the
Emacs built-in @code{project.el} library to support keeping projects isolated
in named tab groups.  This package automates the steps you’d otherwise need to
do manually if you wanted to keep the buffers of a project neatly isolated in
separate, named tab groups.")
      (license license:gpl3+))))

(define-public emacs-dicom
  (package
    (name "emacs-dicom")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/dicom")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pmqszfk5gn1wa9x37ywzsgwhf3cy44yihi3vjffgvhmik64hxpb"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-dcmtk-executables
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "dicom.el")
              (let ((dcm2xml (search-input-file inputs "/bin/dcm2xml"))
                    (dcmj2pnm (search-input-file inputs "/bin/dcmj2pnm")))
                (substitute* "dicom.el"
                  (("\"dcm2xml")
                   (string-append "\"" dcm2xml))
                  (("\"dcmj2pnm")
                   (string-append "\"" dcmj2pnm)))))))))
    (inputs (list dcmtk))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/dicom")
    (synopsis
     "@acronym{DICOM, Digital Imaging and Communications in Medicine} viewer
for Emacs")
    (description
     "This package adds the ability to view @acronym{DICOM, Digital Imaging
and Communications in Medicine} files in Emacs.")
    (license license:gpl3+)))

(define-public emacs-discourse-mode
  (package
    (name "emacs-discourse-mode")
    (version "0.2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/glenneth/discourse-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0j2f0vclj6zrmk1hxyrrhkcpk74vqvq42g9wjqrjw827yjh2wm65"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat
                             emacs-markdown-mode
                             emacs-request))
    (home-page "https://codeberg.org/glenneth/discourse-mode")
    (synopsis "Emacs package for interacting with Discourse forums")
    (description "This package lets you browse categories, view topics, read
posts, and participate in discussions on Discourse, directly from Emacs.")
    (license license:gpl3+)))

(define-public emacs-disproject
  (package
    (name "emacs-disproject")
    (version "2.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/aurtzy/disproject")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17ffcfm4qxjvnmy95yczk18mngiy13pbq7avzrhrh44p3d53b5ss"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-transient))
    (home-page "https://github.com/aurtzy/disproject")
    (synopsis "Transient interface for managing and interacting with projects")
    (description
     "Disproject is a package for GNU Emacs that implements Transient menus
for dispatching project-related commands on top of the Project library.  It
aims to provide a more capable version of the @code{project-switch-project}
command, which it is inspired by.  Those who are familiar with Projectile may
also find similarities to @code{projectile-commander}.")
    (license license:gpl3+)))

(define-public emacs-golden-ratio
  (let ((commit "375c9f287dfad68829582c1e0a67d0c18119dab9")
        (revision "0"))
    (package
      (name "emacs-golden-ratio")
      (version (git-version "1.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/roman/golden-ratio.el")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0a635a3h6jx0clgwmhwc48i14y3xy5q29y37lp2sjnbxx1hlmkli"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ;no tests
      (home-page "https://github.com/roman/golden-ratio.el")
      (synopsis "Automatic resizing of Emacs windows to the golden ratio")
      (description "This package provides an Emacs mode for automatically
resizing the window that has main focus to be more convenient for editing,
while the ones that are not being actively edited will be reduced to a smaller
size.")
      (license license:expat))))

(define-public emacs-zoom
    (package
      (name "emacs-zoom")
      (version "0.3.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/cyrus-and/zoom")
                (commit (string-append "v" version))))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1zzm8kchm5wwxras4bfl46flyfj44bf7qazc5yyahx9qr2ksfnhd"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ;no tests
      (home-page "https://github.com/cyrus-and/zoom")
      (synopsis "Fixed and automatic balanced window layout for Emacs")
      (description
       "This minor mode takes care of managing the window sizes by
enforcing a fixed and automatic balanced layout where the currently
selected window is resized according to @code{zoom-size} which can be
an absolute value in lines/columns, a ratio between the selected window
and frame size or even a custom callback.")
      (license license:expat)))

(define-public emacs-git-modes
  (package
    (name "emacs-git-modes")
    (version "1.4.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/git-modes")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0k73855kzl2hj0lsr68gmbmabxjm5pxwciybbz0pr3j67s3i7r82"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/magit/git-modes")
    (synopsis "Emacs major modes for Git configuration files")
    (description
     "This package provides Emacs major modes for editing various Git
configuration files, such as @file{.gitattributes}, @file{.gitignore}, and
@file{.git/config}.")
    (license license:gpl3+)))

(define-deprecated/public-alias git-modes emacs-git-modes)

(define-public emacs-with-editor
  (package
    (name "emacs-with-editor")
    (version "3.4.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/with-editor")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1d0y32y934ld60vdyx9hwbvpifmhdmm08066x0ivxqcyw0qyggxg"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ; no test suite
      #:lisp-directory "lisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'make-info
            (lambda _
              (with-directory-excursion "../docs"
                (invoke "makeinfo" "--no-split"
                        "-o" "with-editor.info" "with-editor.texi")
                (install-file "with-editor.info" "../lisp")))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-async emacs-compat))
    (home-page "https://github.com/magit/with-editor")
    (synopsis "Emacs library for using Emacsclient as EDITOR")
    (description
     "This package provides an Emacs library to use the Emacsclient as
@code{$EDITOR} of child processes, making sure they know how to call home.
For remote processes a substitute is provided, which communicates with Emacs
on stdout instead of using a socket as the Emacsclient does.")
    (license license:gpl3+)))

(define-public emacs-libgit
  (let ((commit "ab1a53a6a0120872e42582fc980e779d47de6d0e")
        (revision "1"))
    (package
      (name "emacs-libgit")
      (version (git-version "0.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/magit/libegit2")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1fqqhc7mr9lyshqva8wqknk5kc9vr10rxdp9dkrqgwawr3lk1k5p"))
                (snippet
                 #~(begin
                     ;; bundled, use the one shipped with emacs instead
                     (delete-file "src/emacs-module.h")))))
      ;; Use the cmake-build-system as it provides support for cross builds.
      (build-system cmake-build-system)
      (arguments
       (list
        #:configure-flags #~(list "-DUSE_SYSTEM_LIBGIT2=x")
        ;; Add the emacs-build-system byte compilation and install phases.
        #:imported-modules `(,@%cmake-build-system-modules
                             (guix build emacs-build-system)
                             (guix build emacs-utils))
        #:modules '((guix build cmake-build-system)
                    ((guix build emacs-build-system) #:prefix emacs:)
                    (guix build emacs-utils)
                    (guix build utils))
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-source
              (lambda _
                ;; Use Emacs 28 unibyte strings.
                ;; XXX: This now breaks if linked against Emacs <= 26, probably
                ;; also 27.
                (substitute* "src/egit-blob.c"
                  (("make_string") "make_unibyte_string"))))
            (add-after 'unpack 'set-libgit--module-file
              (lambda _
                (emacs-substitute-variables "libgit.el"
                  ("libgit--module-file"
                   (string-append (emacs:elpa-directory #$output)
                                  "/libegit2.so")))))
            (add-after 'unpack 'skip-failing-tests
              ;; XXX: Skip 2 failing tests (out of 29).
              (lambda _
                (substitute* "test/submodule-test.el"
                  (("\\(ert-deftest (status|ids) .*" all)
                   (string-append all " (skip-unless nil)")))))
            (add-after 'unpack 'ert-number-tests
              (lambda _
                (ert-number-tests "test/repository-test.el"
                                  "repository-head-for-worktree")))
            (add-before 'install 'prepare-for-install
              (lambda _
                (let ((s "../source"))
                  (copy-file "libegit2.so" (string-append s "/libegit2.so"))
                  (chdir s))))
            (replace 'install
              (lambda* (#:key outputs #:allow-other-keys)
                (let ((install (assoc-ref emacs:%standard-phases 'install)))
                  (install #:outputs outputs
                           #:include (cons "\\.so$"
                                           emacs:%default-include)))))
            (add-after 'unpack 'emacs-add-install-to-native-load-path
              (assoc-ref emacs:%standard-phases 'add-install-to-native-load-path))
            (add-after 'unpack 'make-autoloads
              (assoc-ref emacs:%standard-phases 'make-autoloads))
            (add-after 'unpack 'patch-el-files
              (assoc-ref emacs:%standard-phases 'patch-el-files))
            (add-after 'install 'emacs-build
              (assoc-ref emacs:%standard-phases 'build))
            (add-after 'emacs-build 'validate-compiled-autoloads
              (assoc-ref emacs:%standard-phases 'validate-compiled-autoloads)))))
      (native-inputs
       (list emacs-no-x git-minimal pkg-config))
      (inputs
       (list libgit2))
      (home-page "https://github.com/magit/libegit2")
      (synopsis "Emacs bindings for libgit2")
      (description "This is an experimental module written in C providing
libgit2 bindings for Emacs, intended to boost the performance of Magit.")
      (license license:gpl2+))))

(define-public emacs-llama
  (package
    (name "emacs-llama")
    (version "1.0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tarsius/llama")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "13f5crs3sc0k5v64mhbg1415q9hm92f43ba53avacxjjzk7gzad4"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-l" "llama-tests.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/llama")
    (synopsis "Compact syntax for short lambda")
    (description
     "This package implements the macro @code{##}, which provides compact
syntax for short lambda.")
    (license license:gpl3+)))

(define-public emacs-llm
  (package
    (name "emacs-llm")
    (version "0.27.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ahyatt/llm")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1yf6gbl5360747zgcnl983gwghgad892arpb07k5yhpa61jw50aa"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch"
                             "-l" "llm-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-plz emacs-plz-event-source
                             emacs-plz-media-type))
    (home-page "https://github.com/ahyatt/llm")
    (synopsis "Emacs library abstracting Large Language Model capabilities")
    (description
     "This package provides interfaces to abstract various @acronym{LLM, large
language model}s out in the world.  To respect user freedom, it will warn you
before interacting with non-free LLMs.")
    (license license:gpl3+)))

(define-public emacs-llm-tool-collection
  (let ((commit "6d2765a16dc10af2e1d1911bcabf6d7f287e0434")
        (revision "0"))
    (package
      (name "emacs-llm-tool-collection")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/skissue/llm-tool-collection/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1rddjhm5jrl5a32bzmhrjfyh54y6ibrsj5pb5hrp3h93iwp16vwk"))))
      (build-system emacs-build-system)
      (arguments
       (list #:emacs emacs                   ;for cl-lib
             #:tests? #f))                   ;no tests
      (home-page "https://github.com/skissue/llm-tool-collection/")
      (synopsis "Collection of Emacs Lisp LLM tools")
      (description
       "This package provides a collection of tools to be used by
@acronym{Large Language Models, LLM} clients in Emacs.")
      (license license:gpl3+))))

(define-public emacs-magit
  (package
    (name "emacs-magit")
    (version "4.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/magit")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lsxldyjv2h69657pgrblhkxq8fvc0xdwlwpfmd09pb8zawygh2g"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "lisp"
      #:test-command #~(list "make" "-C" ".." "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              (invoke "make" "-C" ".." "info")
              ;; Copy info files to the lisp directory, which acts as
              ;; the root of the project for the emacs-build-system.
              (rename-file "../docs/magit.info" "../lisp/magit.info")))
          (add-after 'unpack 'patch-version-executables
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "magit.el"
                ("magit-version" #$version))
              (emacs-substitute-variables "magit-git.el"
                ("magit-git-executable"
                 (search-input-file inputs "/bin/git")))
              (emacs-substitute-variables "magit-sequence.el"
                ("magit-perl-executable"
                 (search-input-file inputs "/bin/perl"))))))))
    (native-inputs
     (list texinfo))
    (inputs
     (list git perl))
    (propagated-inputs
     ;; Note: the 'git-commit' and 'magit-section' dependencies are part of
     ;; magit itself.
     (list emacs-compat
           emacs-cond-let
           emacs-llama
           emacs-transient
           emacs-with-editor))
    (home-page "https://magit.vc/")
    (synopsis "Emacs interface for the Git version control system")
    (description
     "With Magit, you can inspect and modify your Git repositories
with Emacs.  You can review and commit the changes you have made to
the tracked files, for example, and you can browse the history of past
changes.  There is support for cherry picking, reverting, merging,
rebasing, and other common Git operations.")
    (license license:gpl3+)))

(define-public emacs-magit-stgit
  (package
    (name "emacs-magit-stgit")
    (version "3.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/stacked-git/magit-stgit.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10ql7gi586w65vds6wsh8bw5nr444xqhgh87khzcpfaglnw2lyaf"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f)) ;no tests
    (propagated-inputs (list emacs-magit emacs-transient emacs-llama))
    (home-page "https://github.com/stacked-git/magit-stgit")
    (synopsis "StGit extension for Magit")
    (description
     "This package provides basic support for @code{stgit} in
@code{emacs-magit}.  When @code{magit-stgit-mode} is turned on, the
current patch series is displayed in the status buffer.  While point is on a
patch the changes it introduces can be shown using @code{RET}, it can be selected
as the current patch using @code{a}, and it can be discarded using @code{k}.  Other
@code{StGit} commands are available from the @code{StGit} transient on @code{/}.")
    (license license:gpl3+)))

(define-public emacs-magit-svn
  (package
    (name "emacs-magit-svn")
    (version "2.2.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/magit/magit-svn")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0x419qz80ir9ni94j3n08a5ygfq1265fpr13dsnxjjnlwjbq7sx7"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-with-editor emacs-magit))
    (home-page "https://github.com/magit/magit-svn")
    (synopsis "Git-SVN extension to Magit")
    (description
     "This package is an extension to Magit, the Git Emacs mode, providing
support for Git-SVN.")
    (license license:gpl3+)))

(define-public emacs-magit-popup
  (package
    (name "emacs-magit-popup")
    (version "2.13.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/magit-popup")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0znp6gx6vpcsybg774ab06mdgxb7sfk3gki1yp2qhkanav13i6q1"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f    ; no tests
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'make-info
           (lambda _
             (invoke "make" "info"))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/magit/magit-popup")
    (synopsis "Define prefix-infix-suffix command combos")
    (description
     "This library implements a generic interface for toggling switches and
setting options and then invoking an Emacs command which does something with
these arguments.  The prototypical use is for the command to call an external
process, passing on the arguments as command line arguments.")
    (license license:gpl3+)))

(define-public emacs-magit-annex
  (package
    (name "emacs-magit-annex")
    (version "1.9.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/magit-annex")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gbrn80xcwhfav962hjv6lhx444b81jknzj22zb8d5piqfpg8rvc"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; tests rely on an older version of emacs-magit.
           #:test-command
           (let ((emacs-magit (this-package-input "emacs-magit")))
             #~(list "make" "test"
                     (string-append "MAGIT_DIR="
                                    #$emacs-magit
                                    "/share/emacs/site-lisp/magit-"
                                    #$(package-version emacs-magit))))))
    (propagated-inputs (list emacs-magit))
    (home-page "https://github.com/magit/magit-annex/")
    (synopsis "Git-annex support for Magit")
    (description
     "Magit-annex adds a few git-annex operations to the Magit interface.")
    (license license:gpl3+)))

(define-public emacs-magit-tbdiff
  (package
    (name "emacs-magit-tbdiff")
    (version "1.2.0")
    (home-page "https://github.com/magit/magit-tbdiff")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jh6wspb6ijmkqvyaswqj60ixpgjj2ijcf0b53q48pfs5dwc97p4"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-magit))
    (synopsis "Magit extension for range diffs")
    (description
     "Magit-tbdiff provides a Magit interface to @code{git-range-diff} (and its
third-party predecessor @code{git-tbdiff}), a Git subcommand for comparing two
versions of a topic branch.")
    (license license:gpl3+)))

(define-public emacs-malyon
  (package
    (name "emacs-malyon")
    (version "20161204")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/speedenator/malyon/")
                    (commit "0d9882650720b4a791556f5e2d917388965d6fc0")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0an1yvp0p624rxd8n5phiwvznw35ripqhlwzwyv2bw7lc1rscllr"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/speedenator/malyon")
    (synopsis "Z-machine interpreter")
    (description
     "Malyon is a Z-machine interpreter for playing text-based adventure
games.  Malyon plays version 3 (.z3), version 5 (.z5), and version 8 (.z8) z
code files.")
    (license license:expat)))

(define-public emacs-mcp
  ;; No releases available.
  (let ((commit "4708c5849ce4ddb632016eca662a7405bfa642d4")
        (revision "0"))
    (package
      (name "emacs-mcp")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/lizqwerscott/mcp.el/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "11x3jscm4iggyy926aidiv95lrbcncngbvivsybvzjvbhdxhb65h"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (inputs (list emacs-jsonrpc))
      (home-page "https://github.com/lizqwerscott/mcp.el/")
      (synopsis "Emacs interface to MCP protocol")
      (description "@code{emacs-mcp} is an Emacs client providing structured
communication to @acronym{Model Context Protocol, MCP} servers, with Support
for filesystem and generic servers.")
      (license license:gpl3+))))

(define-public emacs-mct
  (package
    (name "emacs-mct")
    (version "1.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/protesilaos/mct")
                    (commit version)))
              (sha256
               (base32 "0k9g3305ba4m2bljq4k69jvrzd8h27mmkj17544182hfl6i64gs1"))
              (file-name (git-file-name name version))))
    (native-inputs (list texinfo))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (home-page "https://protesilaos.com/emacs/mct")
    (synopsis "Enhancement of the default Emacs minibuffer completion UI")
    (description "Minibuffer and Completions in Tandem, also known as MCT, or
mct.el, is an Emacs package that enhances the default minibuffer and
@samp{*Completions*} buffer so that they work together as part of a unified
framework.  The idea is to make the presentation and overall functionality be
consistent with other popular, vertically aligned completion UIs while
leveraging built-in functionality.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ; GFDLv1.3+ for the manual

(define-public emacs-meyvn
  (let ((commit "8d00ada6daa5617fa60f76e0be2cf2f5d1babcf9")) ;version bump
    (package
      (name "emacs-meyvn")
      (version "1.7")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/danielsz/meyvn-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ncilsn0ih01w6hjdn529jkapiv4nnkway07j2b5fndkrlgk2ry4"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-cider
                               emacs-dash
                               emacs-geiser
                               emacs-parseclj
                               emacs-parseedn
                               emacs-projectile
                               emacs-s))
      (home-page "https://github.com/danielsz/meyvn-el")
      (synopsis "Emacs client for the Meyvn build tool")
      (description
       "This package provides an Emacs client for the @url{https://meyvn.org, Meyvn} build tool.")
      (license license:gpl3+))))

(define-public emacs-affe
  (package
    (name "emacs-affe")
    (version "0.9")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/minad/affe")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "166v7d120hbk6vczj1iam85xivk6wwpvga8m0vxgcii19issh5b3"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-consult))
    (home-page "https://github.com/minad/affe")
    (synopsis "Asynchronous fuzzy finder for Emacs")
    (description "This package provides Affe, an asynchronous fuzzy finder for
GNU Emacs written in pure Emacs Lisp. It spawns an external producer process,
such as @command{find} or @command{grep}, and filters the output asynchronously.
The UI remains responsive, and results are shown via the Consult interface.
Affe is experimental and best suited for small to medium projects.")
    (license license:gpl3+)))

(define-public emacs-fzf
  (let ((commit "641aef33c88df3733f13d559bcb2acc548a4a0c3")
        (revision "1"))
    (package
      (name "emacs-fzf")
      (version (git-version "0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/bling/fzf.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1nyvam5jg4gih0x2rvwr4jn97lyhaic3adpdxpdfx682ckj1k2vp"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ;no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-fzf-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "fzf.el"
                  ("fzf/executable" (search-input-file inputs "/bin/fzf"))))))))
      (inputs (list fzf))
      (home-page "https://github.com/bling/fzf.el")
      (synopsis "Emacs front-end for Fzf finder")
      (description "This package provides an Emacs front-end for Fzf general
purpose finder.")
      (license license:gpl3+))))

(define-public emacs-ezf
  (let ((commit "038513f7bd335981430f5d3386d533272567cefd")
        (revision "0"))
    (package
      (name "emacs-ezf")
      (version (git-version "0.1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mickeynp/ezf")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0nrby8f3magyjwwyqk9bqyrgh04vlm8alajzng9x507n42pb7bn7"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command #~(list "emacs" "--batch"
                                    "-l" "ezf.el" "-l" "ezf-test.el"
                                    "-f" "ert-run-tests-batch-and-exit")
             #:phases
             #~(modify-phases %standard-phases
                 (add-after 'install 'install-script
                   (lambda _
                     (install-file "ezf"
                                   (string-append #$output "/bin")))))))
      (propagated-inputs
       (list emacs-helm))
      (home-page "https://github.com/mickeynp/ezf")
      (synopsis "Emacs Fuzzy Finder")
      (description "Emacs Fuzzy Finder is like fzf, but it leverages the power
of your Emacs instance to filter and select candidates.  Use ezf as part of
piping and command substitutions to manually select and filter matches.")
      (license license:gpl3+))))

(define-public emacs-pacfiles-mode
  (package
    (name "emacs-pacfiles-mode")
    (version "1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/UndeadKernel/pacfiles-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1d61s846r9ncmyx97f44r8i3p1ikgi4bab8k7xk868lja96y2ij7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/UndeadKernel/pacfiles-mode")
    (synopsis "ArchLinux's pacnew and pacsave merging tool")
    (description
     "This Emacs major mode helps manage @file{.pacnew} and @file{.pacsave}
files left by ArchLinux's pacman.")
    (license license:expat)))

(define-public emacs-palimpsest
  (package
    (name "emacs-palimpsest")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/danielsz/Palimpsest")
             (commit "f474b3ad706373d9953abdc401d683a2a023d28e")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0wzxl1zcbm3svspjpjzvx92is1k9sz7g0a99r8q066j2364la0zh"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/danielsz/Palimpsest")
    (synopsis "Remove text without permanently deleting it")
    (description
     "This minor mode for Emacs provides several strategies to remove text
without permanently deleting it.  Namely, it can send selected test to the
bottom, or top, of the buffer, or to a trash file.")
    (license license:gpl3+)))

(define-public emacs-minions
  (package
    (name "emacs-minions")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/minions")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0hlb0d4lhwclvng4kdzngk4i9d1nbylcrp1ninpjdn8k310ni728"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat emacs-dash))
    (home-page "https://github.com/tarsius/minions")
    (synopsis "Minor-mode menu for the mode line")
    (description
     "This package implements a menu that lists enabled minor-modes, as well
as commonly but not currently enabled minor-modes.  It can be used to toggle
local and global minor-modes, to access mode-specific menus, and to get help
about modes.

This menu is intended as a replacement for the incomplete yet wide list of
enabled minor-modes that is displayed in the mode line by default.  To use the
menu like this, enable Minions mode.

Alternatively the menu can be bound globally, for example:
@code{(global-set-key [S-down-mouse-3] 'minions-minor-modes-menu)}.")
    (license license:gpl3+)))

(define-public emacs-nano-modeline
  (let ((commit "04676d57a1e602123a593836745a744d1b2028fb")) ;version bump
    (package
      (name "emacs-nano-modeline")
      (version "1.1.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/rougier/nano-modeline")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1q10zd8aiq5xm7p4sm1mrfmw0sfgfyznyk4lvh2rl9pqh9kh700a"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/rougier/nano-modeline")
      (synopsis "Emacs minor mode controlling mode line")
      (description "Nano modeline is a minor mode for Emacs that modifies the
mode line as @samp{[ status | name (primary) secondary ]}.  It can be
displayed at the bottom or at the top.")
      (license license:gpl3+))))

(define-public emacs-moody
  (package
    (name "emacs-moody")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/moody")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17llgkykbl9b53frl4l61glxa2dd8jqh93hfklch0yl9x52fn3rb"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/tarsius/moody")
    (synopsis "Tabs and ribbons for Emacs mode-line")
    (description
     "@code{emacs-moody} provides utilities for displaying elements of
the mode line as tabs and ribbons.  It also provides replacements for a few
built-in elements.  The biggest difference to similar packages is that
this one is much simpler and much more consistent.  When using this package,
then only the color of the mode line changes when a window becomes in-/active.")
    (license license:gpl3+)))

(define-public emacs-acme-theme
  (let ((commit "7c408d111c5e451ecb8fdd5f76cf7d8074aec793")
        (revision "0"))
    (package
      (name "emacs-acme-theme")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/ianyepan/acme-emacs-theme")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "16qxspzlf0bvw36ff4qnrn5p7mc5sf923ba0ar04cr87bfqgyak4"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/ianyepan/acme-emacs-theme")
      (synopsis "Emacs theme inspired by Plan 9's Acme and Sam Editor")
      (description "Acme theme is an Emacs theme with an old-school vibe
inspired by Plan 9 Acme and the Sam text editor.")
      (license license:gpl3+))))

(define-public emacs-catppuccin-theme
  (let ((commit "2975032bcf55d23b1cc05e323f5c30ec36bf17ba")
        (revision "2"))
    (package
      (name "emacs-catppuccin-theme")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/catppuccin/emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0lqmqzanky88jlmrq1qafp5cls2wc39rm65325522izbvqaalgrp"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/catppuccin/emacs")
      (synopsis "Soothing pastel theme for Emacs")
      (description
       "Catppuccin is a soothing pastel theme for Emacs.  It provides
different color palettes, such as @samp{frappe}, @samp{macchiato}, or
@samp{latte}.")
      (license license:expat))))

(define-public emacs-theme-magic
  ;; No tagged release upstream, but the commit below correspond to the 0.2.3
  ;; release.
  (let ((commit "844c4311bd26ebafd4b6a1d72ddcc65d87f074e3")
        (revision "0"))
    (package
      (name "emacs-theme-magic")
      (version "0.2.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jcaw/theme-magic")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "10gkg7jh1s1484gm66a87zr7x8vmv00s7gfd0w2pj47nqf98g8hz"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; Include Pywal interaction scripts.
        #:include #~(cons "^python/" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* '("theme-magic.el" "python/wal_change_colors.py")
                  (("\"python\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/python3")
                                  "\""))
                  (("\"wal\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/wal")
                                  "\""))))))))
      (inputs
       (list python python-pywal))
      (home-page "https://github.com/jcaw/theme-magic")
      (synopsis "Generate and apply color palettes based on your Emacs theme")
      (description
       "This package provides a command to extract the colors from your Emacs
theme and apply them to the rest of Linux with Pywal.  Pywal only applies your
theme to the current session.")
      (license license:gpl3+))))

(define-public emacs-vscode-dark-plus
  (package
    (name "emacs-vscode-dark-plus")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ianyepan/vscode-dark-plus-emacs-theme")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vcaqvhdgr91pr7kqskbscs8awm8jp6dkh79h6w36i9ipmc4l4hl"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ianyepan/vscode-dark-plus-emacs-theme")
    (synopsis "Emacs port of the default VS Code Dark+ theme")
    (description
     "This theme aims to be as identical as possible to the default Dark+
color scheme used by Visual Studio Code.")
    (license license:gpl3+)))

(define-public emacs-theme-sorcery
  (let ((revision "0")
        (commit "5a1c4445b9e6e09589a299a9962a6973272a0c2f"))
    (package
      (name "emacs-theme-sorcery")
      (version "1.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mtreca/emacs-theme-sorcery")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1b858049n6nw4qf60fmszjrhl80x7ssh32f7glj722kwy7404kdh"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-autothemer))
      (home-page "https://github.com/mtreca/emacs-theme-sorcery")
      (synopsis "Dark and low-contrast Emacs theme")
      (description "Sorcery is a dark and low-contrast Emacs theme inspired by
Apprentice and Sourcerer.")
      (license license:gpl3+))))

(define-public emacs-suneater-theme
  (package
    (name "emacs-suneater-theme")
    (version "2.5.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~plattfot/suneater-theme")
             (commit version)))
       (sha256
        (base32
         "0l53709gfx70rqxp8n785bg5n4sdmblwsnbm8y4k7jj4i1sqiqpn"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~plattfot/suneater-theme")
    (synopsis "Minimalistic dark theme for Emacs")
    (description
     "Suneater is a dark, minimalistic Emacs theme.  It was based on Sunburst
theme but now takes more inspiration from the Nano theme.")
    (license license:gpl3+)))

(define-public emacs-adwaita-dark-theme
  (package
    (name "emacs-adwaita-dark-theme")
    (version "1.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/jessieh/adwaita-dark-theme")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "10hm8anw78n37pl9rz3dnjphrnsxf3fy00d008gayn70jfjl1433"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/jessieh/adwaita-dark-theme")
    (synopsis "Adwaita-inspired dark color scheme for Emacs")
    (description
     "This package provides an Adwaita-inspired dark color scheme for Emacs.")
    (license license:gpl2+)))

(define-public emacs-treepy
  (package
    (name "emacs-treepy")
    (version "0.1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/volrath/treepy.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0pmrpij80m5kgcr8bw36r8wllgppasw08vn3ghwvis9srpaq75cn"))))
    (build-system emacs-build-system)
    (home-page
     "https://github.com/volrath/treepy.el")
    (synopsis "Tree traversal tools")
    (description
     "Generic tools for recursive and iterative tree traversal based on
clojure.walk and clojure.zip respectively.")
    (license license:gpl3+)))

(define-public emacs-typing
  (let ((commit "a2ef25dde2d8eb91bd9c0c6164cb5208208647fa")
        (revision "0"))
    (package
      (name "emacs-typing")
      (version (git-version "1.1.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kensanata/typing")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1dbh0srbf54lgd60ia79y9cfnq3kxlgw01qzdjs9mk3nfazzpgnv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/kensanata/typing/")
      (synopsis "Emacs game where you have to type fast")
      (description "The Typing of Emacs is a game for Emacs that
forces you to type words correctly as fast as possible, otherwise
you will die.  The game builds the list of words from the active buffer.")
      (license license:gpl2+))))

(define-public emacs-speed-type
  (package
    (name "emacs-speed-type")
    (version "1.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/dakra/speed-type")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1rw3lgm65jxcs7vbj0055ays4wv23mk2kj3xivnqmhnm030vk868"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs" "-Q" "--batch" "-L" "."
              "-l" "test-speed-type.el"
              "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'skip-failing-test
            ;; This test requires an internet connection.
            (lambda _
              (substitute* "test-speed-type.el"
                (("\\(ert-deftest speed-type--retrieve-test .*" all)
                 (string-append all " (skip-unless nil)"))))))))
    (native-inputs (list emacs-dash))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/dakra/speed-type")
    (synopsis "Practice touch/speed typing in GNU Emacs")
    (description
     "Speed Type allows you to practice your touch typing skills.  You can
test yourself by typing snippets from online books or use any piece of text or
code you have in Emacs.  Speed Type keeps track of your stats (WPM, CPM,
accuracy) while you are typing.")
    (license license:gpl3+)))

(define-public emacs-graphql
  (let ((commit "b57b5ca5d2d0837e1fb4a4f30c051d5f3e643f0f")) ;version bump
    (package
      (name "emacs-graphql")
      (version "0.1.2")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/vermiculus/graphql.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "18k2c2b7y5qgc7qpkqjmz1nv61w470ja3vwprmy5dlkzficzqsvf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'skip-failing-test
              (lambda _
                (substitute* "test/graphql-test.el"
                  (("\\(ert-deftest correct-tag .*" all)
                   (string-append all " (skip-unless nil)"))))))))
      (native-inputs (list emacs-ert-runner))
      (propagated-inputs (list emacs-ghub))
      (home-page "https://github.com/vermiculus/graphql.el")
      (synopsis "GraphQL utilities")
      (description
       "GraphQL.el provides a generally-applicable domain-specific language for
creating and executing GraphQL queries against your favorite web services.
GraphQL is a data query language and runtime designed and used to request and
deliver data to mobile and web apps.")
      (license license:gpl3+))))

(define-public emacs-graphql-mode
  ;; No tagged commit.  No "Version" keyword either.
  (let ((commit "9bed568ec86242dbe30bdbab324aa0eb2cd9bf08")
        (revision "1"))
    (package
      (name "emacs-graphql-mode")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/davazp/graphql-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0x9y7qq6y0zg8ncamzvk68ccmdyzh7xsj0xs0ykyl20d5wdpplj4"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/davazp/graphql-mode")
      (synopsis "Emacs mode to edit GraphQL schema and queries")
      (description
       "This package implements a major mode to edit GraphQL schemas and
query.  The basic functionality includes syntax highlight and indentation.
Additionally, it is able to send GraphQL queries to an end-point URL.

Files with the @file{.graphql} and @file{.gql} extensions are
automatically opened with this mode.")
      (license license:gpl3+))))

(define-public emacs-ghq
  (package
    (name "emacs-ghq")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rcoedo/emacs-ghq")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10a7rxmijwmdkfb5rgavd8inc3a45q0m57dxdf6v62bcy00kmw4l"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'set-ghq-location
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((ghq (search-input-file inputs "/bin/ghq")))
                (substitute* "ghq.el"
                  (("\"ghq") (string-append "\"" ghq)))))))))
    (inputs
     (list ghq))
    (propagated-inputs
     (list emacs-dash emacs-s))
    (home-page "https://github.com/rcoedo/emacs-ghq")
    (synopsis "Emacs interface for @code{ghq} tool")
    (description
     "This package provides a set of functions wrapping @code{ghq}, a tool for
organizing remote Go repository clones.")
    (license license:gpl3+)))

(define-public emacs-ghub
  (package
    (name "emacs-ghub")
    (version "5.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/ghub")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1p88q8g3a0qqd2rakpg03p945y88cmb9c93sihh77ya5r477glh0"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; there are no tests
      #:lisp-directory "lisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              (invoke "make" "--directory=.." "info")))
          (add-after 'install 'install-info
            (lambda _
              (let ((info (string-append #$output "/share/info")))
                (install-file "../docs/ghub.info" info)))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-compat
           emacs-llama
           emacs-let-alist
           emacs-treepy))
    (home-page "https://github.com/magit/ghub")
    (synopsis "Emacs client libraries for the APIs of various Git forges")
    (description
     "Ghub provides basic support for using the APIs of various Git forges from
Emacs packages.  It supports the REST APIs of Github, Github GraphQL, Gitlab,
Gitea, Gogs and Bitbucket.  It abstracts access to API resources using only a
handful of functions that are not resource-specific.")
    (license license:gpl3+)))

(define-public emacs-typit
  (package
    (name "emacs-typit")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mrkkrp/typit")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0djxmni5mfc9wzm0zg7fsd7138ic5qznbmqd5jyrk4mpf0li8nhy"))))
    (build-system emacs-build-system)
    (arguments
     '(#:include (cons "^dict/" %default-include)))
    (propagated-inputs
     (list emacs-f emacs-mmt))
    (home-page "https://github.com/mrkkrp/typit")
    (synopsis "Typing game for Emacs with two difficulties")
    (description "Emacs Typit is a typing game for Emacs.  Words that are
picked randomly from the most frequent words in language you're practicing,
until time is up.")
    (license license:gpl3+)))

(define-public emacs-scribble-mode
  (let ((commit "217945d54de5e4bb207033f2116baa28f5c5ecf2")
        (revision "2"))
    (package
      (name "emacs-scribble-mode")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacs-pe/scribble-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1s5ccw1a5ack01wd94ywfcrar9j98agchwdh30q7iyxr0d2z4sii"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://github.com/emacs-pe/scribble-mode")
      (synopsis "Emacs mode for editing the Scribble documentation syntax")
      (description
       "This package provides basic syntax highlighting and editing support
for editing Racket's Scribble documentation syntax in Emacs.")
      (license license:gpl3+))))

(define-public emacs-shroud
  (package
    (name "emacs-shroud")
    (version "1.105")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.savannah.gnu.org/git/emacs-shroud.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0q2pb3w8s833fjhkzicciw2php4lsnismad1dnwgp2lcway757ra"))))
    (build-system gnu-build-system)
    (arguments
     `(#:modules ((guix build gnu-build-system)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  (guix build utils))
       #:imported-modules (,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
       #:configure-flags (list (string-append "--with-lispdir="
                                              (emacs:elpa-directory %output)))
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'expand-load-path
           (assoc-ref emacs:%standard-phases 'expand-load-path)))))
    (native-inputs
     (list autoconf automake texinfo perl emacs-minimal))
    (propagated-inputs
     (list emacs-bui
           emacs-dash
           emacs-f
           emacs-s
           gnupg
           shroud))
    (home-page "https://www.nongnu.org/emacs-shroud")
    (synopsis "Emacs interface to the Shroud password manager")
    (description
     "This package provides an Emacs interface to the Shroud password manager,
using the Buffers User Interface library.  You can view, copy, and edit secrets
from within Emacs.")
    (license license:gpl3+)))

(define-public emacs-solidity
  ;; This commit fixes a spacing issue and adds new keywords.
  (let ((commit "d166a86b83907e0cfd64c191e9dfce4b44a9843e")
        (revision "0"))
    (package
      (name "emacs-solidity")
      (version (git-version "0.1.10" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ethereum/emacs-solidity")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19hgvsrqch2vp49ag6m76bi5qxd20v95z0ib838rib9as15b17wq"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company emacs-flycheck))
      (home-page "https://github.com/ethereum/emacs-solidity")
      (synopsis "Major mode for writing Solidity code")
      (description
       "This is a simple language mode for the Solidity language.  It is
a constant work in progress as the language itself also progresses.")
      (license license:gpl3+))))

(define-public emacs-unpackaged
  (let ((commit "0c1f447dab29697d4e30806022f28657c1489375")
        (revision "4"))
    (package
      (name "emacs-unpackaged")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/unpackaged.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "042vcffg1scq6zq8rhv3f2hsl4ychr1gx6hlp23b8hfmz268fima"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-dash
                               emacs-esxml
                               emacs-org
                               emacs-s
                               emacs-hydra
                               emacs-use-package
                               emacs-ts))
      (home-page "https://github.com/alphapapa/unpackaged.el")
      (synopsis "Useful snippets of Emacs Lisp code")
      (description
       "This package provides Emacs Lisp utilities for a variety
of tasks, including version control, task management, and regex-based
replacement.")
      (license license:gpl3+))))

(define-deprecated-package emacs-unpackaged-el
  emacs-unpackaged)

(define-public emacs-haskell-mode
  (let ((commit "e9c356739310332afe59b10ffa2e6c3e76f124e3")
        (revision "0"))
    (package
    (name "emacs-haskell-mode")
    (version (git-version "17.5" revision commit))
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/haskell/haskell-mode")
             (commit commit)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1mkp9b31ai1z6sccx8cff40viryamw7dm85acig3q82dwlbmxx98"))))
    (propagated-inputs
     (list emacs-dash))
    (native-inputs
     (list emacs-minimal emacs-el-search emacs-stream texinfo))
    (build-system gnu-build-system)
    (arguments
     (list
      #:make-flags #~(list
                      (string-append "EMACS=" #$emacs-minimal "/bin/emacs"))
      #:modules `((ice-9 match)
                  (srfi srfi-26)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  ,@%default-gnu-imported-modules)
      #:imported-modules `(,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
      #:phases
      #~(modify-phases %standard-phases
          (delete 'configure)
          (add-before 'build 'pre-build
            (lambda* (#:key inputs #:allow-other-keys)
              (define (el-dir store-dir)
                (match (find-files store-dir "\\.el$")
                  ((f1 f2 ...) (dirname f1))
                  (_ "")))

              (let ((sh (search-input-file inputs "/bin/sh")))
                (define emacs-prefix? (cut string-prefix? "emacs-" <>))

                (setenv "SHELL" "sh")
                (setenv "EMACSLOADPATH"
                        (string-concatenate
                         (map (match-lambda
                                (((? emacs-prefix? name) . dir)
                                 (string-append (el-dir dir) ":"))
                                (_ ""))
                              inputs)))
                (substitute* (find-files "." "\\.el") (("/bin/sh") sh)))))
          (add-before 'check 'delete-failing-tests
            ;; XXX: these tests require GHC executable, which would be a big
            ;; native input.
            (lambda _
              (with-directory-excursion "tests"
                ;; File `haskell-indent-tests.el' fails with
                ;; `haskell-indent-put-region-in-literate-2'
                ;; on Emacs 27.1+
                ;; XXX: https://github.com/haskell/haskell-mode/issues/1714
                (for-each delete-file
                          '("haskell-indent-tests.el"
                            "haskell-customize-tests.el"
                            "inferior-haskell-tests.el"))

                ;; requires many external tools (e.g. git, hasktags)
                (substitute* "haskell-mode-tests.el"
                  (("\\(ert-deftest haskell-generate-tags.*" all)
                   (string-append all " (skip-unless nil)"))))))
          (replace 'install
            (lambda* (#:key outputs #:allow-other-keys)
              (let* ((out (assoc-ref outputs "out"))
                     (el-dir (emacs:elpa-directory out))
                     (doc (string-append
                           out "/share/doc/haskell-mode-" #$version))
                     (info (string-append out "/share/info")))
                (define (copy-to-dir dir files)
                  (for-each (lambda (f)
                              (install-file f dir))
                            files))

                (with-directory-excursion "doc"
                  (invoke "makeinfo" "haskell-mode.texi")
                  (install-file "haskell-mode.info" info))
                (copy-to-dir doc '("CONTRIBUTING.md" "NEWS" "README.md"))
                (copy-to-dir el-dir (find-files "." "\\.elc?"))))))))
    (home-page "https://github.com/haskell/haskell-mode")
    (synopsis "Haskell mode for Emacs")
    (description
     "This is an Emacs mode for editing, debugging and developing Haskell
programs.")
    (license license:gpl3+))))

(define-public emacs-lean4-mode
  (package
    (name "emacs-lean4-mode")
    (version "1.1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/leanprover-community/lean4-mode.git")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1i4l614n0hs02y0a4xfnzc4xkilkp6bzx28pys4jkp96vp2ivf0c"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-data
            (lambda _
              (let ((data (string-append (elpa-directory #$output) "/data")))
                (mkdir-p data)
                (copy-recursively "data" data)))))))
    ;; TODO: Just emacs-magit-section instead of emacs-magit would be enough.
    (propagated-inputs
     (list emacs-compat emacs-lsp-mode emacs-dash emacs-magit))
    (synopsis "Lean 4 major mode for Emacs")
    (description "This package provides a major mode for the Lean theorem
prover, version 4.")
    (home-page "https://lean-lang.org/")
    (license license:asl2.0)))

(define-public emacs-lem
  (package
    (name "emacs-lem")
    (version "0.24")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/martianh/lem.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "181cibmv6da4rjr6p3nqpza6i7v4scc4qndznhyjb9nhbf3gsil4"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; no tests
      #:lisp-directory "lisp"))
    (propagated-inputs
     (list emacs-fedi emacs-markdown-mode))
    (home-page "https://codeberg.org/martianh/lem.el")
    (synopsis "Emacs client for Lemmy")
    (description "@code{lem.el} is an Emacs client for Lemmy, the federated link
aggregator.")
    (license license:gpl3+)))

(define-public emacs-dante
  (package
    (name "emacs-dante")
    (version "1.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jyp/dante")
                    (commit version)))
              (sha256
               (base32
                "0q7hackvaplh1f645ngd76f2ls5mvg93xicr3rkxr07hd36yihag"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company
           emacs-dash
           emacs-f
           emacs-flycheck
           emacs-haskell-mode
           emacs-lcr
           emacs-s))
    (home-page "https://github.com/jyp/dante")
    (synopsis "Minor mode for interactive Haskell")
    (description
     "This package provides a minor mode for Haskell development that
supports type hints, definition-jumping, completion, and more.")
    (license license:gpl3+)))

(define-public emacs-flexoki-themes
  (let ((commit "1b871e57e989d58a793cbfef7b4996a6bd47ba9f")) ;version bump
    (package
      (name "emacs-flexoki-themes")
      (version "0.20")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/crmsnbleyd/flexoki-emacs-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0npl45h1l8jhrd5dcaaql5in4pj7c3wxnqsp8di668pz2s4i9pfh"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/crmsnbleyd/flexoki-emacs-theme")
      (synopsis "Inky colour scheme for prose and code")
      (description
       "Flexoki themes is a pair of light and dark themes for GNU Emacs based
on the Flexoki colour scheme by Steph Ango.")
      (license license:gpl3+))))

(define-public emacs-flycheck
  (package
    (name "emacs-flycheck")
    (version "35.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/flycheck/flycheck/")
              (commit (string-append "v" version))))
       (sha256
        (base32 "1jj9w1j1qgpj3cdihwkgaj7nd714a0sgsydh413j9rsv6a3d4cgg"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (native-inputs
     (list emacs-shut-up))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'change-flycheck-version
            (lambda _
              (substitute* "flycheck.el"
                (("\\(pkg-info-version-info 'flycheck\\)")
                 (string-append "\"" #$version "\""))))))
      ;; TODO: many failing tests
      #:tests? #f
      #:test-command
      #~(list "emacs" "-Q" "--batch"
              "-L" "."
              "--load" "test/flycheck-test"
              "--load" "test/run.el"
              "-f" "flycheck-run-tests-main")))
    (home-page "https://www.flycheck.org")
    (synopsis "On-the-fly syntax checking")
    (description
     "This package provides on-the-fly syntax checking for GNU Emacs.  It is a
replacement for the older Flymake extension which is part of GNU Emacs, with
many improvements and additional features.

Flycheck provides fully-automatic, fail-safe, on-the-fly background syntax
checking for over 30 programming and markup languages with more than 70
different tools.  It highlights errors and warnings inline in the buffer, and
provides an optional IDE-like error list.")
    (license license:gpl3+)))                     ;+GFDLv1.3+ for the manual

(define-public emacs-flycheck-clj-kondo
  (let ((commit "e38c67ba9db1ea1cbe1b61ab39b506c05efdcdbf")
        (revision "1"))
    (package
      (name "emacs-flycheck-clj-kondo")
      (version (git-version "0.0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/borkdude/flycheck-clj-kondo")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1pxlb8axgmc8cw4id40z576kd041qb1irq8rkjn6xbda585ix58f"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-flycheck))
      (home-page "https://github.com/borkdude/flycheck-clj-kondo")
      (synopsis "Add Clj-kondo linter to Flycheck")
      (description
       "This package integrates Clj-kondo with Emacs via Flycheck.")
      (license license:gpl3+))))

(define-public emacs-fb2-reader
  (let ((commit "9836db284749e0cef4c43c2cb5358c82ae9b8589")) ; version bump
    (package
      (name "emacs-fb2-reader")
      (version "0.1.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jumper047/fb2-reader")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vx4b9wnmx1bng8wak5r7yryyvgib4m46l6b877xzkdhsjr3rbsi"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "buttercup" "-L" ".")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'qualify-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (let ((unzip (search-input-file inputs "/bin/unzip")))
                  (substitute* "fb2-reader.el"
                    (("unzip") unzip)))))
            (add-after 'unpack 'fix-tests
              (lambda _
                ;; Lexical binding is required for compatibility with recent
                ;; Buttercup.
                (emacs-batch-edit-file "tests/test-fb2-reader.el"
                  '(progn
                    (insert ";;; -*-lexical-binding:t -*-\n")
                    (basic-save-buffer)))
                ;; Fix bogus function name.
                (substitute* "tests/test-fb2-reader.el"
                  (("fb2-reader-render") "fb2-reader-render-xml")))))))
      (inputs (list unzip))
      (native-inputs
       (list emacs-async emacs-buttercup emacs-dash emacs-s))
      (propagated-inputs
       (list emacs-f emacs-visual-fill-column))
      (home-page "https://github.com/jumper047/fb2-reader")
      (synopsis "Emacs plugin to read FictionBook2 ebooks")
      (description "FB2 Reader provides a major mode for reading
FictionBook2 (@file{.fb2} and @file{.fb2.zip} files) ebooks.")
      (license license:gpl3+))))

(define-public emacs-flymake-clippy
  (let ((commit "713b7e873d6b30dc0ded75d5d890d6847f2ea093")
        (revision "0"))
    (package
      (name "emacs-flymake-clippy")
      (version (git-version "1.1.0" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://git.sr.ht/~mgmarlow/flymake-clippy")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "097yha74kabxzyf6zqdi94wxjs7zdsg38nxwz1w4w86wxlrq0ymg"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #t
        #:phases
        #~(modify-phases %standard-phases
            (replace 'check
              (lambda* (#:key tests? #:allow-other-keys)
                (when tests?
                  (invoke "make" "test")))))))
      (synopsis "Flymake backend for Clippy")
      (description "Emacs package for displaying Clippy lint diagnostics for
Rust code.")
      (home-page "https://git.sr.ht/~mgmarlow/flymake-clippy")
      (license license:gpl3+))))

(define-public emacs-flymake-collection
  (package
    (name "emacs-flymake-collection")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mohkale/flymake-collection")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1dxy1bljvd8rar0pivdrfahmgnnjlxm0mlks8mzw3l7k7b7jar6k"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "src"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'move-checkers
            (lambda _
              ;; Move checkers to the top level, which is in the
              ;; EMACSLOADPATH.
              (for-each (lambda (f)
                          (rename-file f (basename f)))
                        (find-files "./checkers" ".*\\.el$")))))))
    (home-page "https://github.com/mohkale/flymake-collection/")
    (synopsis "Collection of checkers for Flymake")
    (description
     "This package provides a comprehensive list of diagnostic-functions for
use with Flymake, give users the tools to easily define new syntax checkers
and help selectively enable or disable diagnostic functions based on major
modes.")
    (license license:expat)))

(define-public emacs-flymake-guile
  (package
    (name "emacs-flymake-guile")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url
              "https://framagit.org/flymake-backends/flymake-guile.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0cb2wcn34bzj93y7s1g2b2sxv79vqihb3a5n0rhxbrddfila95hh"))))
    (build-system emacs-build-system)
    (home-page "https://framagit.org/flymake-backends/flymake-guile")
    (synopsis "GNU Guile support for Flymake")
    (description
     "This package provides a Flymake backend for GNU Guile using @code{guild
compile}.")
    (license license:gpl3+)))

(define-public emacs-flymake-perlcritic
  (let ((commit "311743e97d2f705e76755697eea9ff451a39dd64")
        (revision "1"))
    (package
      (name "emacs-flymake-perlcritic")
      (version (git-version "1.0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/flymake/emacs-flymake-perlcritic")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "11h5jr7whwdgwq3zqi0wz9l5830qjazwinff2r8iyicp9azqf081"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~'("emacs" "--batch"
                           "--load" "ert"
                           "--load" "flymake-perlcritic.el"
                           "--load" "test/flymake-perlcritic-test.el"
                           "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'set-command
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "flymake-perlcritic.el"
                  ("flymake-perlcritic-command"
                   (search-input-file inputs "/bin/perlcritic"))))))))
      (inputs (list perl-critic))
      (home-page "https://github.com/flymake/emacs-flymake-perlcritic")
      (synopsis "Flymake handler for perlcritic")
      (description
       "Flymake Perlcritic adds support to Flymake for running Perl::Critic to
perform static analysis of Perl code.")
      (license license:gpl3+))))

(define-public emacs-flymake-popon
  (package
    (name "emacs-flymake-popon")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/akib/emacs-flymake-popon")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0ljqnnl5k2f62ilahilx0ldv0spjp9hpgyikd4py1348flzq4k31"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-popon
            emacs-posframe))
    (home-page "https://codeberg.org/akib/emacs-flymake-popon")
    (synopsis "Flymake diagnostics on cursor hover")
    (description "This package shows Flymake diagnostics on cursor hover.")
    (license license:gpl3+)))

(define-public emacs-flymake-flycheck
  (package
    (name "emacs-flymake-flycheck")
    (version "20210404.2128")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://melpa.org/packages/flymake-flycheck-"
                           version ".el"))
       (sha256
        (base32 "1m59ahd5gjlfwf328labwdlpcxh8ywywkwgfrlsy5jyxfc9ss4nv"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "https://github.com/purcell/flymake-flycheck")
    (synopsis "Use Flycheck checkers as Flymake backends")
    (description
     "This package provides support for running any Flycheck checker as a
Flymake diagnostic backend.  The effect is that Flymake will control when the
checker runs, and Flymake will receive its errors.")
    (license license:gpl3+)))

(define-public emacs-flymake-quickdef
  ;; This particular commit includes bug fixes on top of 1.0.0 release.
  (let ((version "1.0.0")
        (revision "0")
        (commit "150c5839768a3d32f988f9dc08052978a68f2ad7"))
    (package
      (name "emacs-flymake-quickdef")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/karlotness/flymake-quickdef")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19gfd539l97j8xbrq1fw83b54mxbcamlz9m896088d3p01zf8b0g"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/karlotness/flymake-quickdef")
      (synopsis "Quickly define a new Flymake backend")
      (description
       "This package mainly defines a macro which helps remove some of the
boilerplate code from defining new Flymake backend functions.")
      (license license:gpl3+))))

(define-public emacs-flymake-kondor
  (package
    (name "emacs-flymake-kondor")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/turbo-cafe/flymake-kondor")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vcl1q07faqqmrryyia36hbgf78g3cs51pbi0bx41yzz779ribvk"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/turbo-cafe/flymake-kondor")
    (synopsis "Linter with clj-kondo")
    (description "This package adds Clojure syntax checker clj-kondo.")
    (license license:gpl3+)))

(define-public emacs-flymake-shellcheck
  ;; No tag, version grabbed from source .el file.
  (let ((commit "ac534e9ef15c82ac86ae65fe5004d29dbc8c92c7")
        (revision "1"))
    (package
      (name "emacs-flymake-shellcheck")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/federicotdn/flymake-shellcheck")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "04yfb4sy41spjzk9mhm4gy0h8vnjx09p2g6nm1yzgd9a5ph9sqgl"))))
      (build-system emacs-build-system)
      (arguments
       '(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'substitute-shellcheck-path
             (lambda* (#:key inputs #:allow-other-keys)
               (make-file-writable "flymake-shellcheck.el")
               (emacs-substitute-sexps "flymake-shellcheck.el"
                 ("defcustom flymake-shellcheck-path"
                  `(or (executable-find "shellcheck")
                       ,(search-input-file inputs "bin/shellcheck")))))))))
      (inputs
       (list shellcheck))
      (home-page "https://github.com/federicotdn/flymake-shellcheck")
      (synopsis "Flymake backend for Bash/Sh powered by ShellCheck")
      (description
       "This package provides a backend for Flymake to use the
tool ShellCheck for static analyzing @command{bash} and @command{sh}
scripts.")
      (license license:gpl3+))))

(define-public emacs-a
  (package
    (name "emacs-a")
    (version "1.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/plexus/a.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32 "0zkv4xvw1jdsfxqqkxskl2l380gfs13n86hj4hhzrqf0sb6aymws"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/plexus/a.el/")
    (synopsis
     "Emacs library for dealing with association lists and hash tables")
    (description "@code{emacs-a} provides Emacs Lisp functions for dealing
with associative structures in a uniform and functional way.  These functions
can take association lists, hash tables, and in some cases vectors (where the
index is considered the key).")
    (license license:gpl3+)))

(define-public emacs-abyss-theme
  (package
    (name "emacs-abyss-theme")
    (version "0.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/mgrbyte/emacs-abyss-theme")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "07z0djv7h3yrv4iw9n633j6dxzxb4nnzijsqkmz22ik6fbwxg5mh"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/mgrbyte/emacs-abyss-theme")
    (synopsis "Dark theme with strong colours for Emacs")
    (description
     "A dark theme with contrasting colours for Emacs based on the
@url{https://github.com/andre-richter/emacs-lush-theme, @code{lush}} theme by
Andre Richter, using the same colours palette as the the built-in
@code{dichromacy} theme; intended to be suitable
for red/green colour blind users.")
    (license license:gpl3+)))

(define-public emacs-ace-jump-mode
  (package
    (name "emacs-ace-jump-mode")
    (version "2.0")
    (home-page "https://github.com/winterTTr/ace-jump-mode")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit (string-append "v" version))))
              (sha256
               (base32
                "1bwvzh056ls2v7y26a0s4j5mj582dmds04lx4x6iqihs04ss74bb"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (synopsis "Cursor location minor mode for fast navigation")
    (description "Ace-jump-mode is a fast/direct cursor location minor
mode.  It creates an N-Branch search tree internally and marks all
the possible position with predefined keys in within the whole Emacs
view.  This allows you to move to the character, word, or line almost
directly.")
    (license license:gpl3+)))

(define-public emacs-ahg
  ;; No tags; commit from 2021-04-12.
  (let ((commit "77bc2a628df006dcd2dc359ac12acdf8091a1356")
        (revision "0"))
    (package
      (name "emacs-ahg")
      (version (git-version "1.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://bitbucket.org/agriggio/ahg")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1wmvz9d40aznqh2y078v8k7n3l66m48vnf873vifi8rwg6158kqh"))))
      (build-system emacs-build-system)
      (home-page "https://bitbucket.org/agriggio/ahg")
      (synopsis "Emacs front-end for the Mercurial SCM")
      (description
       "This package provides a simple Emacs front-end for the Mercurial
Distributed @acronym{Source Control Management, SCM} system.")
      (license license:gpl3+))))

(define-public emacs-alarm-clock
  (package
    (name "emacs-alarm-clock")
    (version "1.0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/wlemuel/alarm-clock")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0vdwvrbj79ylaz5ffa2bpfy4kzi1s6hf6bxijvyw7h8y6bd196av"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons "alarm.mp3" %default-include)
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'configure
                 (lambda* (#:key inputs #:allow-other-keys)
                   (substitute* "alarm-clock.el"
                     (("\"mpg123\"")
                      (string-append
                       "\"" (search-input-file inputs "bin/mpg123") "\""))
                     (("notify-send")
                      (search-input-file inputs "bin/notify-send"))))))))
    (inputs
     (list libnotify mpg123))
    (propagated-inputs
     (list emacs-f))
    (home-page "https://github.com/wlemuel/alarm-clock")
    (synopsis "Alarm clock for Emacs")
    (description "Alarm Clock provides an alarm clock for Emacs.")
    (license license:gpl3+)))

(define-public emacs-world-time-mode
  (let ((commit "ce7a3b45c87eb24cfe61eee453175d64f741d7cc")
        (revision "0"))
    (package
      (name "emacs-world-time-mode")
      (version (git-version "0.0.6" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/nicferrier/emacs-world-time-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0i00xm4rynbp2v3gm6h46ajgj8h8nxnsjh6db1659b0hbpnah0ji"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/nicferrier/emacs-world-time-mode")
      (synopsis "Show whole days of world time")
      (description "@code{emacs-world-time-mode} shows time zones in your
@code{display-time-world-list} formatted as a list of whole days with the
differing times.")
      (license license:gpl3+))))

(define-public emacs-anaphora
  (package
    (name "emacs-anaphora")
    (version "1.0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rolandwalker/anaphora")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "11fgiy029sqz7nvdm7dcal95lacryz9zql0x5h05z48nrrcl4bib"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" ".")
                     #:tests? #f))      ; 18 unexpected results
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/rolandwalker/anaphora/")
    (synopsis "Anaphoric expressions for Emacs Lisp")
    (description "@code{emacs-anaphora} implements anaphoric expressions for
Emacs Lisp.

Anaphoric expressions implicitly create one or more temporary variables which
can be referred to during the expression.  This technique can improve clarity
in certain cases.  It also enables recursion for anonymous functions.")
    (license license:public-domain)))

(define-public emacs-xah-fly-keys
  (let ((commit "e81f8143e9f7b8e55fa549ec6113048e4959b96e"))
    (package
      (name "emacs-xah-fly-keys")
      (version "24.19.20231204080156")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/xahlee/xah-fly-keys")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1pnq4p5y0h7d3nj3vcsdfccc0aahdvcgskik337z6k7hmb32xz48"))))
      (build-system emacs-build-system)
      (home-page "http://xahlee.info/emacs/misc/ergoemacs_vi_mode.html")
      (synopsis "Modal keybinding system for Emacs, based on command frequency and
ergonomics")
      (description "xah-fly-keys.el is a modal editing mode for Emacs, like Vi,
but the design of key/command choice is based on command frequency statistics
and ease-of-key score.  Most frequently used commands have most easy keys.")
      (license license:gpl3))))

(define-public emacs-xr
  (package
    (name "emacs-xr")
    (version "2.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/xr-" version ".tar"))
       (sha256
        (base32 "1yssl7av2rpanzmm93iw74acnb3pbrnh0b51kr64wcj6hwb26cy2"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/xr.html")
    (synopsis "Convert string regexp to rx notation")
    (description
     "This is an inverse companion to the @code{rx} package for translating
regexps in string form to the @code{rx} notation.  Its chief uses are:

@itemize
@item Migrating existing code to @code{rx} form, for better readability and
maintainability
@item Understanding complex regexp strings and finding errors in them
@end itemize

In addition to Emacs regexps, this package can also parse and troubleshoot
skip set strings, which are arguments to @code{skip-chars-forward} and
@code{skip-chars-backward}.")
    (license license:gpl3+)))

(define-public emacs-ample-regexps
  (let ((commit "153969ce547afe410b8986f01c9ed4087c9cd20b")
        (revision "2"))
    (package
      (name "emacs-ample-regexps")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/immerrr/ample-regexps.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0dkp7bcd7h2ds40wyszy11nmh7c2jxrwy04ayz7pbxh53ir7s2k0"))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-ert-runner))
      (arguments
       `(#:test-command '("ert-runner" "-l" "ample-regexps")))
      (home-page "https://github.com/immerrr/ample-regexps.el")
      (synopsis "Compose and reuse Emacs regexps")
      (description
       "This package allows common parts of regexps to be easily picked out
and reused.")
      (license license:gpl3+))))

(define-public emacs-airline-themes
  (package
    (name "emacs-airline-themes")
    (version "1.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/AnthonyDiGirolamo/airline-themes")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jx17g8a6pxkw4zlx3fwhqgxfzcf3019k8fklykamfrkharzsc2l"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-powerline))
    (home-page "https://github.com/AnthonyDiGirolamo/airline-themes")
    (synopsis "Vim-airline themes for Emacs Powerline")
    (description
     "This is a port of the themes in Vim-airline to Emacs Powerline.")
    (license license:expat)))

(define-public emacs-ample-theme
  (let ((commit "536966adf882446165a1f756830028faa792c7a9")
        (revision "1"))
    (package
      (name "emacs-ample-theme")
      (version (git-version "0.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jordonbiondo/ample-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "07bpv8dag40qjnm5000pgzpazj4whfxf93x2vprz26sg3mjfx0nf"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jordonbiondo/ample-theme")
      (synopsis "Theme for Emacs providing dark, light, and flat versions")
      (description "Ample themes is a collection of three themes sharing a
similar pallet with a light, dark and flat versions with a focus on being easy
on the eyes during night and day.  They only support GUI and 256 colour
terminals.")
      (license license:gpl3+))))

(define-public emacs-rbs-mode
  (package
    (name "emacs-rbs-mode")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ybiquitous/rbs-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ibn8246q0yqdnf3qdww9rvzac9gla7gzjj0n5j5x08brgj5ll2h"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ybiquitous/rbs-mode")
    (synopsis "Major mode for Ruby type signature")
    (description
     "RBS mode is a major mode for Ruby type signature language (RBS).  It
provides basic supports for syntax highlighting and indentation.")
    (license license:gpl3+)))

(define-public emacs-reformatter
  (package
    (name "emacs-reformatter")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/reformatter.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vm030lz489vjx1dz1jrnj7zd2b43y98rffdxyshfvxbfv1cbmyk"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f        ; XXX: 4/4 tests broken
                     #:test-command #~(list "make" "test" "INIT_PACKAGES=t")))
    (home-page "https://github.com/purcell/reformatter.el")
    (synopsis "Define commands which run reformatters on the current buffer")
    (description
     "This library lets elisp authors easily define an idiomatic command to
reformat the current buffer using a command-line program, together with an
optional minor mode which can apply this command automatically on save.")
    (license license:gpl3+)))

(define-public emacs-rescript-mode
  (let ((commit "b9dda43cc52cd4a9b384c59fb0cc7a11f0bad230")
        (revision "0"))
    (package
      (name "emacs-rescript-mode")
      (version (git-version "0.1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jjlee/rescript-mode")
                      (commit commit)))
                (sha256
                 (base32
                  "00pjn683zl5rcmwf86gs4ikxzz82d3rpmicpxhgy2m2xyrfxpz89"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "ert-runner")))
      (native-inputs
       (list emacs-ert-runner))
      (home-page "https://github.com/jjlee/rescript-mode")
      (synopsis "Major mode for editing ReScript")
      (description "This package provides a major mode for editing ReScript source code.")
      (license license:gpl3))))

(define-public emacs-language-id
  (package
    (name "emacs-language-id")
    (version "0.20")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/lassik/emacs-language-id.git")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "153810jq4rbgpzvbhz2i1dyrj8bmdf4zxsrhfg0b70iq4bh78bz6"))))
    (build-system emacs-build-system)
    (synopsis "Identify programming language used in Emacs buffers")
    (description "This package provides a way for Emacs to identify the
programming language used in an Emacs buffer.")
    (home-page "https://github.com/lassik/emacs-language-id")
    (license license:isc)))

(define-public emacs-format-all-the-code
  (package
    (name "emacs-format-all-the-code")
    (version "0.6.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/lassik/emacs-format-all-the-code.git")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1p8bh96yksbpajx2pqxjc4vf7nfncwc3mvh1fcj8afw53g72is8m"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-inheritenv emacs-language-id))
    (synopsis "Auto-format any source code")
    (description "This package lets you auto-format source code in many
languages using the same command for all languages, instead of learning
a different Emacs package and formatting command for each language.
Over 70 languages are supported, including Emacs Lisp, Kotlin, Go and
Rust.")
    (home-page "https://github.com/lassik/emacs-format-all-the-code")
    (license license:expat)))

(define-public emacs-relative-buffers
  (let ((release "0.0.1")
        (revision "0")
        (commit "9762fe268e9ff150dcec2e2e45d862d82d5c4008"))
    (package
      (name "emacs-relative-buffers")
      (version (git-version release revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsattic/relative-buffers")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0fzhwbpyndwrmxip9zlcwkrr675l5pzwcygi45hv7w1hn39w0hxp"))
         (snippet
          '(begin
             ;; Delete the Cask test runners.
             (for-each delete-file '("Cask" "test/test-helper.el"))))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-ert-runner))
      (propagated-inputs
       (list emacs-dash emacs-f emacs-s))
      (home-page "https://github.com/emacsattic/relative-buffers")
      (synopsis "Minor mode to rename buffers by project structure")
      (description
       "This package provides a minor mode for renaming buffers according to
project structure.  For Python buffers, that will be the whole module name.
For temporary files and directories, that will be the relative path from the
project root.")
      (license license:gpl3+))))

(define-public emacs-relint
  (package
    (name "emacs-relint")
    (version "2.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "relint-" version ".tar"))
       (sha256
        (base32 "0ikml87y0k85qd92m3l1gkzjd9ng3mhjfk19w15ln0w801351cq0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-xr))
    (home-page "https://github.com/mattiase/relint")
    (synopsis "Elisp regexp mistake finder")
    (description
     "Relint (regular expression lint) scans Elisp files for mistakes in
regexps, including deprecated syntax and bad practice.  It also checks the
regexp-like arguments to @code{skip-chars-forward} and
@code{skip-chars-backward}.")
    (license license:gpl3+)))

(define-public emacs-bug-hunter
  (let ((commit "b88d981afa9154b236c5a3a83b50d5889d46c6a7")
        (revision "1"))
    (package
      (name "emacs-bug-hunter")
      (version (git-version "1.3.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Malabarba/elisp-bug-hunter")
               (commit commit)))
         (file-name (git-file-name name commit))
         (sha256
          (base32
           "134fj493sdn93pyyac8rpz1fzahzmayvphsrmqp3wvgysmfqm38l"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Malabarba/elisp-bug-hunter")
      (synopsis "Hunt down errors by bisecting elisp files")
      (description
       "The Bug Hunter is an Emacs library that finds the source of an error
or unexpected behavior inside an elisp configuration file (typically
@file{init.el} or @file{.emacs}).")
      (license license:gpl3+))))

(define-public emacs-w3m
  ;; Emacs-w3m follows a "rolling release" model.
  (package
    (name "emacs-w3m")
    (version "20220508.2259")
    (source (origin
              ;; "Officially" this is still on cvs.namazu.org, but that repo
              ;; seems to be unreachable.
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-w3m/emacs-w3m.git")
                    (commit "bbcebbe20ebfa807a3e4beaadf40ce6f4be213e7")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0y892n8jaxzyxi1fgyklc7zfh57ibp4yyywmif69dm28hykj6lmz"))))
    (build-system gnu-build-system)
    (native-inputs (list autoconf texinfo emacs-minimal))
    (inputs (list w3m imagemagick))
    (arguments
     (list
      #:modules '((guix build gnu-build-system)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  (guix build utils)
                  (guix build emacs-utils))
      #:imported-modules `(,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
      #:configure-flags
      #~(list (string-append "--with-lispdir=" (emacs:elpa-directory #$output))
              (string-append "--with-icondir="
                             #$output "/share/images/emacs-w3m")
              ;; Leave .el files uncompressed, otherwise GC can't
              ;; identify run-time dependencies.  See
              ;; <http://lists.gnu.org/archive/html/guix-devel/2015-12/msg00208.html>
              "--without-compress-install")
      #:tests? #f                       ; no check target
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'autoconf
            (lambda _
              (invoke "autoconf")))
          (add-before 'configure 'support-emacs!
            (lambda _
              ;; For some reason 'AC_PATH_EMACS' thinks that 'Emacs 26' is
              ;; unsupported.
              (substitute* "configure"
                (("EMACS_FLAVOR=unsupported") "EMACS_FLAVOR=emacs"))))
          (add-before 'build 'patch-exec-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "w3m.el")
              (emacs-substitute-variables "w3m.el"
                ("w3m-command" (search-input-file inputs "/bin/w3m"))
                ("w3m-touch-command" (search-input-file inputs "/bin/touch"))
                ("w3m-icon-directory"
                 (string-append #$output "/share/images/emacs-w3m")))
              (make-file-writable "w3m-image.el")
              (emacs-substitute-variables "w3m-image.el"
                ("w3m-imagick-convert-program"
                 (search-input-file inputs "/bin/convert"))
                ("w3m-imagick-identify-program"
                 (search-input-file inputs "/bin/identify")))))
          (replace 'install
            (lambda _
              (invoke "make" "install" "install-icons")
              (with-directory-excursion (emacs:elpa-directory #$output)
                (for-each delete-file '("ChangeLog" "ChangeLog.1"))
                (symlink "w3m-load.el" "w3m-autoloads.el")))))))
    (home-page "http://emacs-w3m.namazu.org/")
    (synopsis "Simple Web browser for Emacs based on w3m")
    (description
     "Emacs-w3m is an emacs interface for the w3m web browser.")
    (license license:gpl2+)))

(define-public emacs-wget
  (package
    (name "emacs-wget")
    (version "0.5.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "mirror://debian/pool/main/w/wget-el/wget-el_"
                           version ".orig.tar.gz"))
       (sha256
        (base32 "10byvyv9dk0ib55gfqm7bcpxmx2qbih1jd03gmihrppr2mn52nff"))))
    (build-system emacs-build-system)
    (inputs (list wget))
    (native-inputs
     (list emacs-minimal))
    (arguments
     `(#:tests? #f                      ;no check target
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-exec-paths
           (lambda* (#:key inputs outputs #:allow-other-keys)
             (emacs-substitute-variables "wget.el"
               ("wget-command" (search-input-file inputs "/bin/wget"))))))))
    (home-page "https://www.emacswiki.org/emacs/EmacsWget")
    (synopsis "Simple file downloader for Emacs based on wget")
    (description
     "Emacs-wget is an emacs interface for the wget file downloader.")
    (license license:gpl2+)))

(define-public emacs-eww-lnum
  (package
    (name "emacs-eww-lnum")
    (version "1.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/m00natic/eww-lnum")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0gs6bi3s2sszc6v2b26929azmn5513kvyin99n4d0ark1jdbjmv2"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/m00natic/eww-lnum")
    (synopsis "Conkeror-like functionality for Eww")
    (description "This is extension to the Emacs browser Eww that adds
Conkeror-like functionality.  In short, currently visible links, forms,
buttons are temporarily assigned numbers with which the former can be
immediately activated.  Also filtering can be applied so selection can be
incrementally confined in Isearch manner.")
    (license license:gpl3+)))

(define-public emacs-dnt
  (let ((commit "d28d232d682094ab79cfa78c97668c6ebd327c8c")
        (revision "1"))
    (package
      (name "emacs-dnt")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/dnt.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1bls9j1ibw0npjapslbrh6nmlbn3d4ajhjygsqlf6h9qg12sxm3r"))))
      (propagated-inputs (list emacs-s))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/dnt")
      (synopsis "Strip trackers from URLs")
      (description "This package provides a series of rules and helper functions
to prevent advertisers from tracking you when you open URLs (or listen to
podcasts) in Emacs.")
      (license (list license:gpl3+)))))

(define emacs-emms-print-metadata
  (package
    (name "emacs-emms-print-metadata")
    (version "24")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.savannah.gnu.org/git/emms/")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1x0lja7k2vn3dhnmhg3gvhiv6yid899k26f79c7slwfs0sl680yc"))))
    (build-system gnu-build-system)
    (arguments
     (list
      #:make-flags #~(list "emms-print-metadata")
      #:tests? #f                       ; No tests.
      #:phases
      #~(modify-phases %standard-phases
          (delete 'configure)
          (replace 'install
            (lambda _
              (install-file "src/emms-print-metadata"
                            (string-append #$output "/bin"))
              (install-file "emms-print-metadata.1"
                            (string-append #$output "/share/man/man1")))))))
    (inputs
     (list taglib))
    (home-page "https://www.gnu.org/software/emms/")
    (synopsis "The Emacs Multimedia System")
    (description
     "EMMS is the Emacs Multimedia System.  It is a small front-end which
can control one of the supported external players.  Thus, it supports
whatever formats are supported by your music player.  It also
supports tagging and playlist management, all behind a clean and
light user interface.")
    (license license:gpl3+)))

(define-public emacs-emms
  (package
    (inherit emacs-emms-print-metadata)
    (name "emacs-emms")
    (build-system emacs-build-system)
    (arguments
     `(#:test-command
       (list "emacs" "-Q" "--batch"
             "--eval=(cd \"test/\")"
             "-l" "emms-tests.el"
             "-l" "emms-info-native-tests.el"
             "-l" "emms-info-native-ogg-tests.el"
             "-l" "emms-info-native-mp3-tests.el"
             "-l" "emms-info-native-flac-tests.el"
             "-l" "emms-info-native-vorbis-tests.el"
             "-f" "ert-run-tests-batch-and-exit")
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'make-info
           (lambda _
             (invoke "make" "-C" "doc" "all")
             (rename-file "doc/emms.info" "emms.info")))
         (add-after 'unpack 'set-external-programs
           ;; Specify the absolute file names of the various programs
           ;; so that everything works out-of-the-box. (tinytag missing)
           (lambda* (#:key inputs #:allow-other-keys)
             (let ((amixer (search-input-file inputs "/bin/amixer"))
                   (emms-print-metadata
                    (search-input-file inputs "/bin/emms-print-metadata"))
                   (exiftool (search-input-file inputs "/bin/exiftool"))
                   (metaflac (search-input-file inputs "/bin/metaflac"))
                   (mp3info (search-input-file inputs "/bin/mp3info"))
                   (mpg321 (search-input-file inputs "/bin/mpg321"))
                   (mid3v2 (search-input-file inputs "/bin/mid3v2"))
                   (ogg123 (search-input-file inputs "/bin/ogg123"))
                   (ogginfo (search-input-file inputs "/bin/ogginfo"))
                   (opusinfo (search-input-file inputs "/bin/opusinfo"))
                   (vorbiscomment (search-input-file inputs "/bin/vorbiscomment")))
               (emacs-substitute-variables "emms-player-mpg321-remote.el"
                 ("emms-player-mpg321-remote-command"
                  (string-append mpg321 "/bin/mpg321")))
               (substitute* "emms-player-simple.el"
                 (("\"ogg123\"") (string-append "\"" ogg123 "\"")))
               (substitute* "emms-player-simple.el"
                 (("\"mpg321\"") (string-append "\"" mpg321 "\"")))
               (emacs-substitute-variables "emms-info-ogginfo.el"
                 ("emms-info-ogginfo-program-name" ogginfo))
               (emacs-substitute-variables "emms-info-opusinfo.el"
                 ("emms-info-opusinfo-program-name" opusinfo))
               (emacs-substitute-variables "emms-info-libtag.el"
                 ("emms-info-libtag-program-name" emms-print-metadata))
               (emacs-substitute-variables "emms-info-mp3info.el"
                 ("emms-info-mp3info-program-name" mp3info))
               (emacs-substitute-variables "emms-info-metaflac.el"
                 ("emms-info-metaflac-program-name" metaflac))
               (emacs-substitute-variables "emms-source-file.el"
                 ("emms-source-file-gnu-find" (which "find")))
               (substitute* "emms-volume-amixer.el"
                 (("\"amixer\"") (string-append "\"" amixer "\"")))
               (substitute* "emms-tag-editor.el"
                 (("\"mid3v2\"") (string-append "\"" mid3v2 "\""))
                 (("\"vorbiscomment\"")
                  (string-append "\"" vorbiscomment "\"")))
               (substitute* "emms-info-exiftool.el"
                 (("\"exiftool\"") (string-append "\"" exiftool "\"")))))))))
    (inputs
     (list emacs-emms-print-metadata
           alsa-utils
           flac                         ;for metaflac
           vorbis-tools
           mpg321
           mp3info
           python-mutagen
           perl-image-exiftool
           opus-tools))
    (native-inputs (list emacs-ert-runner texinfo))))

(define-public emacs-emms-mode-line-cycle
  (package
    (name "emacs-emms-mode-line-cycle")
    (version "0.2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/momomo5717/emms-mode-line-cycle")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0q80f0plch6k4lhs8c9qm3mfycfbp3kn5sjrk9zxgxwnn901y9mp"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-emms))
    (home-page "https://github.com/momomo5717/emms-mode-line-cycle")
    (synopsis "Display the EMMS mode line as a ticker")
    (description
     "This is a minor mode for updating the EMMS mode-line string cyclically
within a specified width.  It is useful for displaying long track titles.")
    (license license:gpl3+)))

(define-public emacs-mediainfo-mode
  (package
    (name "emacs-mediainfo-mode")
    (version "0.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/xFA25E/mediainfo-mode.git")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1jvbwisjb8927mmqavp9x1054lpm3wljja9k4jwqwbnkydf6vn3d"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list mediainfo ffmpeg imagemagick))
    (synopsis "mediainfo mode")
    (description "This package provides a major mode that shows metadata of
media files.")
    (home-page "https://github.com/xFA25E/mediainfo-mode")
    (license license:gpl3+)))

(define-public emacs-emprise
  (package
    (name "emacs-emprise")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~plattfot/emprise")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "0yddvvpjdcgsiwv24jbddkgl5r1lxgz037akjln6z9acx9qrc8px"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://sr.ht/~plattfot/emprise")
    (synopsis "Control MPRIS supported media players from Emacs")
    (description "This package provides a set of commands to control media
players that supports the Media Player Remote Interfacing
Specification (MPRIS) protocol from Emacs.  It uses Emacs' Completing Read
framework as the user interface, which integrates well with Vertico or
Selectrum.")
    (license license:gpl3+)))

(define-public emacs-empv
  (package
    (name "emacs-empv")
    (version "5.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/isamert/empv.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0in9yyssahrp0qfbwziymg85bmysxlzr58vycb13k4m4g9i4s3r7"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases #~(modify-phases %standard-phases
                   (add-after 'unpack 'set-default-binaries
                     (lambda* (#:key inputs #:allow-other-keys)
                       (emacs-substitute-variables "empv.el"
                         ("empv-fd-binary" (search-input-file inputs "/bin/fd"))
                         ("empv-mpv-binary" (search-input-file inputs "/bin/mpv"))))))))
    (inputs (list fd mpv))
    (propagated-inputs (list emacs-compat emacs-consult emacs-s))
    (home-page "https://github.com/isamert/empv.el")
    (synopsis
     "Emacs multimedia player, media library manager, YouTube frontend")
    (description
     "This package is an Emacs multimedia player based on mpv.  It offers
a comprehensive interface to mpv, including convenient features such as an
embedded radio manager, YouTube integration, and a local music and video
library manager.")
    (license license:gpl3+)))

(define-public emacs-marginalia-emprise
  (package
    (name "emacs-marginalia-emprise")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~plattfot/marginalia-emprise")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "1kbk3kgvv1k5zdysvpgcsbxiwn4la3vvnmv3sbzxq7q5v5cr4a54"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-emprise emacs-marginalia))
    (home-page "https://sr.ht/~plattfot/emprise/")
    (synopsis "Annotate Emprise with Marginalia")
    (description "This package provides an annotation function to show
playback status, artist name and title for Emprise using Marginalia.")
    (license license:gpl3+)))

(define-public emacs-eradio
  (let ((commit "47769986c79def84307921f0277e9bb2714756c2")
        (revision "0"))
    (package
      (name "emacs-eradio")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/olavfosse/eradio")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0lks2pph44qxc9l34nr55ha667974r8ckxdwmvcp6v9mnm05317s"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/olavfosse/eradio")
      (synopsis "Simple radio player for GNU Emacs")
      (description
       "Eradio is a simple internet radio player for Emacs.  Start, stop or
toggle custom-defined channels.  An external media player like mpv or VLC is
required.")
      (license license:gpl3+))))

(define-public emacs-ace-link
  (package
    (name "emacs-ace-link")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/abo-abo/ace-link")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "147dz79vg4ym5wg3d544bw2khdb2j3hr73rw4qfm64wf0q2dj0vk"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-avy))
    (home-page "https://github.com/abo-abo/ace-link")
    (synopsis "Quickly follow links in Emacs")
    (description
     "Currently, to jump to a link in a @code{Info-mode}, @code{help-mode},
@code{woman-mode}, @code{org-mode}, @code{eww-mode}, @code{compilation-mode},
@code{goto-address-mode} buffer, you can tab through the links to select the
one you want.  This is an O(N) operation, where the N is the amount of links.
This package turns this into an O(1) operation.  It does so by assigning a
letter to each link using avy.")
    (license license:gpl3+)))

(define-public emacs-app-launcher
  ;; XXX: Upstream did not tag any commit so far.  Base version is extracted
  ;; from Version keyword.
  (let ((commit "d5015e394b0a666a8c7c4d4bdf786266e773b145")
        (revision "0"))
    (package
      (name "emacs-app-launcher")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/SebastienWae/app-launcher")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0l97ajy27awydyd4gc6323wyhpm5vm2db6i0lp5gqaxi9fp7jivp"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/SebastienWae/app-launcher")
      (synopsis "Use Emacs standard completion to launch applications")
      (description "This package defines the @code{app-launcher-run-app}
command, which uses Emacs standard completion to select an application
installed on your machine and launch it.")
      (license license:gpl3+))))

(define-public emacs-alchemist
  (package
    (name "emacs-alchemist")
    (version "1.8.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://stable.melpa.org/packages/"
                           "alchemist-" version ".tar"))
       (sha256
        (base32 "0ygwf9d739zqc8dcckw0j0bqkipw7cmxbrx3l281x237a3d384yw"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-elixir-mode emacs-dash emacs-company emacs-pkg-info))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-server
            (lambda _
              (let ((server (string-append (elpa-directory #$output)
                                           "/alchemist-server")))
                (mkdir-p server)
                (copy-recursively "alchemist-server" server)
                (delete-file-recursively (string-append server "/test"))))))))
    (home-page "https://www.github.com/tonini/alchemist.el")
    (synopsis "Elixir tooling integration into Emacs")
    (description
     "This package brings you all the Elixir tooling and power inside your Emacs
editor.  It comes with commands to compile, execute and test your code, spawn
an interactive shell, and look up definitions and documentation as well as
code completion and project management support.")
    (license license:gpl3+)))

(define-public emacs-auto-compile
  (package
    (name "emacs-auto-compile")
    (version "2.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacscollective/auto-compile")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "10kjl3cvkq024a3kh30s6l0x326cbm6nz6904zkafxjz4lbrryln"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-compat emacs-packed))
    (home-page "https://github.com/emacscollective/auto-compile")
    (synopsis "Automatically compile Emacs Lisp libraries")
    (description
     "This package provides two minor modes which automatically recompile
Emacs Lisp source files.  Together, these modes guarantee that Emacs never
loads outdated byte code files.")
    (license license:gpl3+)))

(define-public emacs-auto-sudoedit
  (package
    (name "emacs-auto-sudoedit")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ncaq/auto-sudoedit")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1rhdvrj2rjbvl7vkb0wcp6krqxcaigl7jk9z8yvhx6s4cm2qli6q"))))
    (propagated-inputs
     (list emacs-f))
    (build-system emacs-build-system)
    (home-page "https://github.com/ncaq/auto-sudoedit")
    (synopsis "Automatically re-open read-only files with sudo")
    (description
     "This package automatically reopens a file or directory with
@command{sudo} if it cannot write to it.")
    (license license:expat)))

(define-public emacs-read-only-cfg
  ;; XXX: Upstream has no tagged release.  Version is extracted from keyword
  ;; in main file.
  (let ((commit "c128c9412f768adf89ff5c4ad433cf0beab6656a")
        (revision "0"))
    (package
      (name "emacs-read-only-cfg")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/pfchen/read-only-cfg")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "11zj4ysmacvz82j1siqlcp30i05my20lscls8wkdjl75g9d2b12l"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/pfchen/read-only-cfg")
      (synopsis "Make files read-only based on user configuration")
      (description
       "Read-only-cfg is an Emacs minor mode that can automatically make files
read-only based on user configuration.  User configuration may be prefix
directories or regex patterns.")
      (license license:gpl3+))))

;; Use latest commit since there are no tags anymore for several versions
(define-public emacs-rebecca-theme
  (let ((commit "4b8b5aae9099185e07c2b4cac4943c7f66a3f003")
        (revision "0"))
    (package
      (name "emacs-rebecca-theme")
      (version (git-version "1.3.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/vic/rebecca-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0y2kcs6zgi3dijagyz6lxbv6gi2mih8m943fhjrzkj35wfvjmhsz"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/vic/rebecca-theme")
      (synopsis "Dark Emacs theme with purple/violet colors")
      (description
       "Rebecca Emacs theme is a dark theme with purple/violet colors, based on
the @code{Dracula} theme for Emacs and the @code{Gloom} theme for Atom.")
      (license license:expat))))

(define-public emacs-reverso
  (let ((commit "40ed3d83c4f04c39e05d69d84595761ae2956a64")
        (revision "1"))
    (package
      (name "emacs-reverso")
      (version (git-version "0.1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/SqrtMinusOne/reverso.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1agsscrkqnmz8shibfy8df5f34xwixiyfad381k04aibadh742yb"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ; no tests
      (propagated-inputs (list emacs-request))
      (home-page "https://github.com/SqrtMinusOne/reverso.el")
      (synopsis "Translation, grammar checking, context search")
      (description "Reverso is an emacs client for the reverso.net service.")
      (license license:gpl3+))))

(define-public emacs-bbdb
  (package
    (name "emacs-bbdb")
    (version "3.2.2.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "bbdb-" version ".tar"))
       (sha256
        (base32 "13i8ggknc29sny16rq126q0ssz26m3fam0zpdhlsm05pa8dydd7p"))))
    (build-system emacs-build-system)
    (arguments
     ;; XXX: The following file cannot be byte-compiled, because et requires
     ;; `vm-autoloads', from the VM package, with is neither in Emacs nor
     ;; packaged in Guix.  So, don't bother for now.
     `(#:exclude '("bbdb-vm\\.el")))
    (inputs (list emacs-notmuch))
    (home-page "https://elpa.gnu.org/packages/bbdb.html")
    (synopsis "Contact management utility for Emacs")
    (description
     "BBDB is the Insidious Big Brother Database for GNU Emacs.  It provides
an address book for email and snail mail addresses, phone numbers and the
like.  It can be linked with various Emacs mail clients (Message and Mail
mode, Rmail, Gnus, MH-E, and VM).  BBDB is fully customizable.")
    (license license:gpl3+)))

(define-public emacs-bbdb-vcard
  ;; No release since Dec 1, 2013.
  (let ((version "0.4.1") ;3d79fdb4200a64a043e203a3baac95c936095b52, not tagged
        (revision "88")
        (commit "113c66115ce68316e209f51ebce56de8dded3606"))
    (package
      (name "emacs-bbdb-vcard")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/tohojo/bbdb-vcard")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1sr5kd2gvw1b4hl147yb60cgx6j730vdnpyr09p7vmpw65hzwlwm"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "test")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'patch-tests
              (lambda _
                (substitute* "Makefile"
                  (("test: \\$\\(ELCS\\)")
                   "test:"))
                ;; FIXME Unclear why these tests fail.
                (substitute* "bbdb-vcard-tests.el"
                  (("\\(ert-deftest bbdb-vcard-test-(bad-1|rfc2426) .*" all)
                   (string-append all "(skip-unless nil)"))))))))
      (native-inputs (list which))
      (propagated-inputs (list emacs-bbdb))
      (home-page "https://github.com/tohojo/bbdb-vcard")
      (synopsis
       "The Insidious Big Brother Database (BBDB) vCard Import and Export")
      (description
       "@code{bbdb-vcard.el} imports and exports vCards (version 3.0) as
defined in RFC 2425 and RFC 2426 to/from The Insidious Big Brother Database
(BBDB).  Version 2.1 vCards are converted into version 3.0 on import.")
      (license license:gpl2+))))

(define-public emacs-eweouz
  (package
    (name "emacs-eweouz")
    (version "0.12")
    (source
     (origin
       (method url-fetch)
       ;; README's git://git.err.no/eweouz is gone
       (uri (string-append "mirror://debian/pool/main/e/eweouz/"
                           "eweouz_" version ".tar.xz"))
       (file-name (string-append name "-" version ".tar.xz"))
       (sha256
        (base32
         "192zl3dyphhvcrvn65bqsrc4h6zks8b747lp6pqbpbmsqy4g4mr8"))))
    (build-system gnu-build-system)
    (arguments
     (list
      #:modules '((guix build gnu-build-system)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  (guix build utils)
                  (guix build emacs-utils))
      #:imported-modules `(,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
      #:configure-flags
      #~(list (string-append "--with-lispdir="
                             (emacs:elpa-directory #$output)))
      #:phases
      #~(modify-phases %standard-phases
          (replace 'bootstrap
            (lambda _ (invoke "autoreconf" "-vif")))
          (add-after 'compress-documentation 'enter-lisp-dir
            (lambda _ (chdir "lisp/")))
          (add-after 'enter-lisp-dir 'emacs-patch-variables
            (lambda _
              (emacs-substitute-sexps "eweouz.el"
                ("eweouz-helper-dirs"
                 `(list ,(string-append #$output "/libexec/eweouz"))))))
          (add-after 'enter-lisp-dir 'emacs-make-autoloads
            (assoc-ref emacs:%standard-phases 'make-autoloads))
          (add-after 'emacs-patch-variables 'emacs-expand-load-path
            (assoc-ref emacs:%standard-phases 'expand-load-path))
          (add-after 'emacs-expand-load-path 'emacs-add-install-to-native-load-path
            (assoc-ref emacs:%standard-phases 'add-install-to-native-load-path))
          (add-after 'emacs-add-install-to-native-load-path 'emacs-install
            (assoc-ref emacs:%standard-phases 'install))
          (add-after 'emacs-install 'emacs-build
            (assoc-ref emacs:%standard-phases 'build)))))
    (native-inputs
     (list autoconf
           automake
           emacs-minimal
           pkg-config))
    (inputs
     (list evolution-data-server))
    (home-page "https://tracker.debian.org/pkg/eweouz")
    (synopsis "Emacs interface to Evolution Data Server")
    (description
     "Eweouz is an tool for looking up contacts from Evolution Data Server
from Emacs.  It is similar to BBDB, except much, much simpler.")
    ;; Most things are GPLv2-only although lisp/vcard.el is GPLv2+.
    (license (list license:gpl2 license:gpl2+))))

(define-public emacs-beacon
  (package
    (name "emacs-beacon")
    (version "1.3.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Malabarba/beacon")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0mypzfasclq7bmw0i8hfyp8c1ycd3kdgd5h1faygzh9r0phh7ciy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/beacon")
    (synopsis "Emacs minor mode creating a light that follows your cursor around")
    (description
     "Beacon is an Emacs minor-mode.  Whenever the window scrolls a light will
shine on top of your cursor so you know where it is.")
    (license license:gpl3+)))

(define-public emacs-bar-cursor
  (let ((revision "0")
        (commit "78f195b6db63459033c4f1c7e7add5d82f3ce424"))
    (package
      (name "emacs-bar-cursor")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/ajsquared/bar-cursor.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1g344fzfkq5z53vja68kv55l1x29v15q41qb08nqc9k4pvpwdvmp"))))
      (build-system emacs-build-system)
      (synopsis "Bar cursor shape")
      (description "This package provides a bar cursor shape.  When in
overwrite mode, it will turn into a block cursor.")
      (home-page "https://github.com/ajsquared/bar-cursor")
      (license license:gpl2+))))

(define-public emacs-paradox
  (let ((commit "96401577ed02f433debe7604e49afd478e9eda61")) ;version bump
    (package
      (name "emacs-paradox")
      (version "2.5.5")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Malabarba/paradox")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0v9hmvq6bcr2hwlb09ldsd6pjl19ri5n2hl2bs3x52fqjj6fdzzn"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-hydra emacs-let-alist emacs-spinner))
      (native-inputs (list emacs-ert-runner emacs-undercover))
      (home-page "https://github.com/Malabarba/paradox")
      (synopsis "Paradox is an extension to Emacs packages menu")
      (description
       "Paradox is a project for modernizing Emacs' Package menu.  It provides
improved appearance, mode-line information, GitHub integration,
customizability and asynchronous upgrading.")
      (license license:gpl2+))))

(define-public emacs-carp
  (let ((commit "17d3d84963434233997626850195f205882bf0df")
        (revision "0"))
    (package
      (name "emacs-carp")
      (version (git-version "0" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/carp-lang/carp-emacs")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "0mn4mg94hzzwb54kikg4c6hvf9ka15f2nz95g0clmn8r0mvkj4d5"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
        (list emacs-clojure-mode emacs-flycheck))
      (home-page "https://github.com/carp-lang/carp-emacs")
      (synopsis "Emacs support for Carp")
      (description
       "This package provides syntax highlighting, a minor mode for
listing type errors via Flycheck, as well as REPL support for Carp.")
      (license license:asl2.0))))

(define-public emacs-cond-let
  (package
    (name "emacs-cond-let")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/tarsius/cond-let/")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1hsxl42dysbrkmgnbd954zjv28cms73r7nask5ip4f07qzgaj1gi"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs" "--batch"
              "-l" "cond-let-tests.el"
              "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/tarsius/cond-let/")
    (synopsis "Additional and improved binding conditionals")
    (description "This package implements binding conditionals @code{and-let}
and @code{while-let*}, and the original @code{cond-let}, @code{cond-let*},
@code{and$} and @code{and>}.")
    (license license:gpl3+)))

(define-public emacs-coterm
  (package
    (name "emacs-coterm")
    (version "1.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/coterm-"
                           version ".tar"))
       (sha256
        (base32 "0ikfm1acdsckflv1hcy9lmssyac2099x2yybhvb6vkghcgy99p00"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://repo.or.cz/emacs-coterm.git")
    (synopsis "Terminal emulation for comint")
    (description
     "This package provides terminal emulation for comint.  If the global
@code{coterm-mode} is enabled, proper terminal emulation will be supported for
all newly spawned comint processes.  This allows you to use more complex
console programs such as @code{less} and @code{mpv} and full-screen TUI
programs such as @code{vi}, @code{top}, @code{htop} or even @code{emacs
-nw}.")
    (license license:gpl3+)))

(define-public emacs-mistty
  (package
    (name "emacs-mistty")
    (version "1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/szermatt/mistty")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1dlb4k7sbjjgyhikbcw0qf9js328vhs964lmhciyh8ahcfb7i9l6"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases #~(modify-phases %standard-phases
                   (add-before 'patch-el-files 'replace-bash-path
                     (lambda* (#:key inputs #:allow-other-keys)
                       (substitute* "mistty-term.el"
                         (("/bin/bash")
                          (search-input-file inputs "bin/bash"))))))))
    (inputs (list bash))
    (home-page "https://github.com/szermatt/mistty")
    (synopsis "Emacs terminal major mode based on Term")
    (description
     "This package defines a major mode that runs a shell inside of
a buffer, similarly to Comint mode.  It is built on top of Term.")
    (license license:gpl3+)))

(define-public emacs-counsel-bbdb
  (package
    (name "emacs-counsel-bbdb")
    (version "0.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/counsel-bbdb")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jrj7hx6y518np3xcnarbj0c43lglcf9gww3fhfqp7lzxl9hvi8s"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-bbdb emacs-ivy))
    (home-page "https://github.com/redguardtoo/counsel-bbdb")
    (synopsis "Ivy interface for BBDB")
    (description "This Ivy extension enables the use of @code{ivy-mode} to input
email addresses from BBDB efficiently.  The main functions are:
@table @code
@item counsel-bbdb-complete-mail to input email addresses;
@item counsel-bbdb-reload' to reload contacts from BBDB database;
@item counsel-bbdb-expand-mail-alias to expand mail alias.
@end table
Since @code{counsel-bbdb} is based on @code{ivy-mode}, all Ivy key bindings
are supported.  For example, after @samp{C-u M-x counsel-bbdb-complete-mail},
you can press @samp{C-M-n} to input multiple email addresses.")
    (license license:gpl3+)))

(define-public emacs-bluetooth
  (package
    (name "emacs-bluetooth")
    (version "0.4.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "bluetooth-" version ".tar"))
       (sha256
        (base32 "1chi9xjg5zcg6qycn2n442adhhmip1vpvg12szf1raq3zhg7lr01"))))
    (build-system emacs-build-system)
    (inputs
     (list bluez dbus))
    (propagated-inputs
     (list emacs-compat emacs-dash emacs-transient))
    (home-page "https://gitlab.com/rstocker/emacs-bluetooth")
    (synopsis "Manage Bluetooth devices using Emacs")
    (description
     "This package implements basic Bluetooth management functionality, such
as connecting and disconnecting devices, setting properties and aliases,
putting the adapter in discovery mode and controlling its power supply.  It
also includes a pairing agent.")
    (license license:gpl3+)))

(define-public emacs-aggressive-indent
  (package
    (name "emacs-aggressive-indent")
    (version "1.10.0")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/"
                                  "aggressive-indent-" version ".tar"))
              (sha256
               (base32
                "166jk1z0vw481lfi3gbg7f9vsgwfv8fiyxpkfphgvgcmf5phv4q1"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/aggressive-indent.html")
    (synopsis "Minor mode to aggressively keep your code always indented")
    (description
     "@code{aggressive-indent-mode} is a minor mode that keeps your code
always indented.  It reindents after every change, making it more reliable
than @code{electric-indent-mode}.")
    (license license:gpl2+)))

(define-public emacs-smarttabs
  (package
    (name "emacs-smarttabs")
    (version "1.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/jcsalomon/smarttabs")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32 "0hkgw9i4yynazx5vbkb8a1lfp0yndyi8c1w3cf7ajxpnig3hs9j6"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "http://www.emacswiki.org/emacs/SmartTabs")
    (synopsis "Indent with tabs, align with spaces!")
    (description
     "There is a semantic way of using tab characters in source code:
@strong{tabs for indentation, spaces for alignment}.  This package provides a
minor mode which improves Emacs' auto-indenting so that pressing @key{TAB}
inserts the correct mix of tabs and spaces to maintain visual alignment
regardless of a viewer's tab width.  You can still use all spaces if you
prefer; the code merely ensures that @emph{if} you enable tabs, the tab size
does not matter.")
    (license license:gpl2+)))

(define-public emacs-gc-stats
  (package
    (name "emacs-gc-stats")
    (version "1.4")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/"
                                  "emacs-gc-stats-" version ".tar"))
              (sha256
               (base32
                "19195s2nw87nmdz861j6shw5m2lv0spbcb1wff0y338fgx9sicgz"))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~yantar92/emacs-gc-stats")
    (synopsis "Collect Emacs GC statistics")
    (description
     "This package collects Emacs @dfn{garbage collection} (GC) statistics over
time and saves it in the format that can be shared with Emacs maintainers.

This package does not upload anything automatically.  You will need to upload
the data manually, by sending email attachment.  If necessary, you can review
@code{emacs-gc-stats-file} (defaults to @code{~/.emacs.d/emacs-gc-stats.eld})
before uploading-it is just a text file.")
    (license license:gpl3+)))

(define-public emacs-gcmh
  ;; No tagged release upstream, but the commit below correspond to the 0.2.1
  ;; release.
  (let ((commit "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9"))
    (package
      (name "emacs-gcmh")
      (version "0.2.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/koral/gcmh")
               (commit commit)))
         (sha256
          (base32 "0yh1ap8phv3x44rp0yr6z884xqw2apanbx4c0acqglvj0gaaqx25"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://gitlab.com/koral/gcmh")
      (synopsis "Emacs Garbage Collector Magic Hack")
      (description
       "This package enforces a sneaky @dfn{garbage collector} (GC) strategy
to minimize GC interference with the activity.  During normal use a high GC
threshold is set.  When idling GC is immediately triggered and a low threshold
is set.")
      (license license:gpl3+))))

(define-public emacs-ctrlf
  (package
    (name "emacs-ctrlf")
    (version "1.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/raxod502/ctrlf")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "061id540spjycgy2xshj8kwgdngkjinznhx2qp5pmqzzx7z7rpfb"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/raxod502/ctrlf/")
    (synopsis "Single-buffer text search in Emacs")
    (description "CTRLF (pronounced @emph{control F}) is an intuitive and
efficient solution for single-buffer text search in Emacs, replacing packages
such as Isearch, Swiper, and helm-swoop.  It takes inspiration from the
widely-adopted and battle-tested @samp{Ctrl+F} interfaces in programs such as
web browsers, but follows the flow and keybindings of Isearch.")
    (license license:expat)))

(define-public emacs-dhall-mode
  ;; There is no proper release.  The base version is extracted from the
  ;; "Version" keyword in the main file.
  (let ((revision "1")
        (commit  "484bcf8f78f1183ef45c3b04a362bb73690c6b9b"))
    (package
      (name "emacs-dhall-mode")
      (version (git-version "0.1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/psibi/dhall-mode")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1wggg8jlzg9rph4jhxp6yiri178rnasbv38838i973kjgqjxrl76"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-reformatter))
      (home-page "https://github.com/psibi/dhall-mode")
      (synopsis "Major mode for working with Dhall configuration language")
      (description
       "Dhall-mode provides an Emacs Major mode for working with the Dhall
configuration language.  It features:

@itemize
@item Syntax highlighting
@item Multiline support for String
@item Basic indentation, commenting
@item Automatic formatting on save using dhall-format.
@item Error highlighting.
@end itemize")
      (license license:gpl3+))))

(define-public emacs-link-hint
  ;; Last release was in 2015.
  (let ((commit "83cd0489b16f013647d0507ef20905a0a91db433")
        (revision "4"))
    (package
      (name "emacs-link-hint")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/noctuid/link-hint.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0kwaia6i0asr7yqcw1anzq6lf93357cc1fphkvp0llbmxizmkzb3"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-avy))
      (home-page "https://github.com/noctuid/link-hint.el")
      (synopsis "Vimperator-style link-hinting in Emacs")
      (description "This package provides commands for visiting and acting on
links.")
      (license license:gpl3+))))

(define-public emacs-ag
  (package
    (name "emacs-ag")
    (version "0.48")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/ag.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1p918y24vcn2pdliaymd210xp9fvhd4a1srqbv2lfiqrh59yjidx"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'substitute-ag-path
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "ag.el")
              (emacs-substitute-variables "ag.el"
                ("ag-executable" (search-input-file inputs "/bin/ag")))))
          (add-before 'install 'make-info
            (lambda _
              (with-directory-excursion "docs"
                (invoke "make" "info"))))
          (add-after 'install 'install-info
            (lambda _
              (install-file "docs/_build/texinfo/agel.info"
                            (string-append #$output "/share/info")))))))
    (inputs (list the-silver-searcher))     ; 'ag' executable
    (native-inputs
     (list emacs-ert-runner emacs-undercover python-sphinx texinfo))
    (propagated-inputs
     (list emacs-dash emacs-s))
    (home-page "https://github.com/Wilfred/ag.el")
    (synopsis "Front-end for ag (the-silver-searcher) for Emacs")
    (description "This package provides the ability to use the silver
searcher, a code searching tool, sometimes abbreviated to @code{ag}.  Features
include version control system awareness, use of Perl compatible regular
expressions, editing the search results directly and searching file names
rather than the contents of files.")
    (license license:gpl3+)))

(define-public emacs-aio
  (let ((revision "0")
        (commit "289c1e9530b59b4e2fd88f87f303547b23f2a3e3"))
    (package
      (name "emacs-aio")
      (version (git-version "1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      ;; Switched from <https://github.com/skeeto/emacs-aio>
                      ;; since <https://github.com/skeeto/emacs-aio/issues/31>
                      ;; is open since Jan 1 2025 with no merge.
                      (url "https://github.com/kiennq/emacs-aio")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1jaq3xbk69ki10bfdphl4ac2hsnvr56bg4fcr0si8q31zgar7xzj"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("emacs" "--batch"
                          "-l" "aio-test.el"
                          "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-elfeed emacs-skewer-mode))
      (home-page "https://github.com/skeeto/emacs-aio")
      (synopsis "Async/Await for Emacs Lisp")
      (description "@code{aio} is to Emacs Lisp as @code{asyncio} is to Python.
This package builds upon Emacs generators to provide functions that pause
while they wait on asynchronous events.  They do not block any thread while
paused.")
      (license license:unlicense))))

(define-public emacs-async
  (package
    (name "emacs-async")
    (home-page "https://github.com/jwiegley/emacs-async")
    (version "1.9.9")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0krg7n8l3yv1fnixnx6j5imdh10jpfabm6ym9s1s610hp47gpfaz"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("buttercup" "-L" ".")))
    (native-inputs
     (list emacs-buttercup))
    (synopsis "Asynchronous processing in Emacs")
    (description
     "This package provides the ability to call asynchronous functions and
processes.  For example, it can be used to run dired commands (for copying,
moving, etc.) asynchronously using @code{dired-async-mode}.  Also it is used
as a library for other Emacs packages.")
    (license license:gpl3+)))

(define-public emacs-auctex
  (package
    (name "emacs-auctex")
    (version "14.1.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "auctex-" version ".tar"))
       (sha256
        (base32 "0cb5f86p7yxqx27wck2a3wgsxrzhv5rrgn88wpias1w7v2lbsw2j"))))
    (build-system emacs-build-system)
    ;; We use 'emacs' because AUCTeX requires dbus at compile time
    ;; ('emacs-minimal' does not provide dbus).
    (arguments
     (list
      #:emacs emacs
      #:include #~(cons* "^images/" "^latex/" %default-include)
      #:exclude #~(cons "^latex/README" %default-exclude)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "preview.el"
                ("preview-gs-command"
                 (search-input-file inputs "/bin/gs")))
              ;; Leave "dvipng" and "dvips" executables as-is.  Otherwise, this
              ;; would require to add a TeX Live system to inputs, which is
              ;; much for an Emacs package.
              (substitute* "preview.el"
                (("\"pdf2dsc ")
                 (let ((pdf2dsc (search-input-file inputs "/bin/pdf2dsc")))
                   (string-append "\"" pdf2dsc " "))))))
          (add-after 'install 'install-doc
            (lambda _
              (let ((doc-dir (string-append #$output "/share/doc/"
                                            #$name "-" #$version)))
                (with-directory-excursion "doc"
                  (setenv "HOME" (getenv  "TMPDIR")) ; for mktextfm
                  (invoke "pdftex" "tex-ref")
                  (install-file "tex-ref.pdf" doc-dir))))))))
    (native-inputs
     (list perl (texlive-local-tree)))
    (inputs
     (list ghostscript))
    (home-page "https://www.gnu.org/software/auctex/")
    (synopsis "Integrated environment for TeX")
    (description
     "AUCTeX is a comprehensive customizable integrated environment for
writing input files for TeX, LaTeX, ConTeXt, Texinfo, and docTeX using Emacs
or XEmacs.")
    (license license:gpl3+)))

(define-public emacs-latex-extra
  (let ((commit "a81e7588448f85c5fcc3f3fc71cf957d0928a656")
        (revision "0"))
    (package
      (name "emacs-latex-extra")
      (version (git-version "1.14" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/Malabarba/latex-extra")
                      (commit commit)))
                (sha256
                 (base32
                  "0sajg5vmygnkcnmkrpf8r7c4b8v95hgsv1y6pz868jpznmldnxkb"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "-Q" "--batch"
                "--eval=(cd \"tests/\")"
                "-l" "latex-extra-test.el"
                "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'build 'set-home
              (lambda _ (setenv "HOME" (getcwd)))))))
      (propagated-inputs (list emacs-auctex))
      (home-page "https://github.com/Malabarba/latex-extra")
      (synopsis "Usability improvements for LaTeX mode")
      (description
       "Latex-extra defines extra commands and keys for LaTeX mode, as well
as brings user experience improvements.")
      (license license:gpl3+))))

(define-public emacs-xenops
  (package
    (name "emacs-xenops")
    (version "0.0.1")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://github.com/dandavison/xenops/archive/"
                                  version ".tar.gz"))
              (sha256
               (base32
                "1gaym5bl6fhdp4pa283qcx5qf77wz2g7xl9n1gyvvl9yl0kvrb48"))))
    (propagated-inputs (list emacs-aio emacs-auctex emacs-avy emacs-dash
                             emacs-f emacs-s))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "lisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'set-home
            (lambda _
              (setenv "HOME" "/tmp"))))))
    (synopsis "WYSIWYG LaTeX environment")
    (description "This package provides a WYSIWYG LaTeX environment.
It uses @command{dvisvgm}, @command{xclip}, @command{pngpaste} and
@command{latex}.")
    (home-page "https://github.com/dandavison/xenops")
    (license license:expat)))

(define-public emacs-autothemer
  (let ((commit "8f72afc6dba5ad7cc3a201a084fd20571f945d2e")) ;version bump
    (package
      (name "emacs-autothemer")
      (version "0.2.18")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sebastiansturm/autothemer")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "15f7i39937riswpwjpc1ryg2v0rqj944pwf7rp2ry56rbx4vgl97"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "-Q" "--batch"
                               "-l" "tests/autothemer-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/sebastiansturm/autothemer")
      (synopsis "Conveniently create Emacs themes")
      (description
       "Autothemer provides a thin layer on top of @code{deftheme} and
@code{custom-theme-set-faces} that creates a new custom color theme, based on
a set of simplified face specifications and a user-supplied color palette.")
      (license license:gpl3+))))

(define-public emacs-howm
  (package
    (name "emacs-howm")
    (version "1.5.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kaorahi/howm")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1dmjcbwcghyppqrg383pkric5mjhrz95f7wlm8lxq8k6zkynm1hp"))))
    (build-system gnu-build-system)
    (native-inputs
     (list emacs-minimal))
    (arguments
     `(#:configure-flags
       (list (string-append "--with-howmdir=" (emacs:elpa-directory %output)))
       #:modules ((guix build gnu-build-system)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  (guix build utils))
       #:imported-modules (,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
       #:phases
       (modify-phases %standard-phases
         (add-after 'install 'make-autoloads
           (assoc-ref emacs:%standard-phases 'make-autoloads)))))
    (home-page "https://kaorahi.github.io/howm/")
    (synopsis "Note-taking tool for Emacs")
    (description "Howm is a note-taking tool for Emacs.  Like
@code{emacs-wiki.el}, it facilitates using hyperlinks and doing full-text
searches.  Unlike @code{emacs-wiki.el}, it can be combined with any format.")
    (license license:gpl1+)))

(define-public emacs-mediawiki
  (package
    (name "emacs-mediawiki")
    (version "2.4.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hexmode/mediawiki-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0qgydr8ll1g0d28yy7p8k2sij7769bxx4fhd7c0s5c8cg7mrl666"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "make" "test-mediawiki-simple" "test-mediawiki-core"
              "test-mediawiki-utils" "test-mediawiki-mode")))
    (synopsis "Mediawiki editor for Emacs")
    (description
     "This package provides a way to edit mediawiki sites from within emacs.")
    (home-page "https://github.com/hexmode/mediawiki-el")
    (license license:gpl3+)))

(define-deprecated-package emacs-mediawiki-el
  emacs-mediawiki)

(define-public emacs-bm
  (package
    (name "emacs-bm")
    (version "202506")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joodland/bm")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0298hjdgx03y028pql6z3jcym47ji10hv66zydn1kicsjds0r45l"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "bm-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://joodland.github.io/bm/")
    (synopsis "Visual bookmarks for Emacs")
    (description "This package provides visible, buffer local bookmarks and
the ability to jump forward and backward to the next bookmark.")
    (license license:gpl2+)))

(define-public emacs-calfw
  (package
    (name "emacs-calfw")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kiwanami/emacs-calfw")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0vmd9dl1hnmwjfr9gy8n91724bl05walhjx2myszh6qs28xay0z4"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-howm))
    (home-page "https://github.com/kiwanami/emacs-calfw/")
    (synopsis "Calendar framework for Emacs")
    (description
     "This package displays a calendar view with various schedule data in the
Emacs buffer.")
    (license license:gpl3+)))

(define-public emacs-varuga
  (package
    (name "emacs-varuga")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.systemreboot.net/varuga/")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "01hlnhqhys8qzfwhza1ypc436zg5lhlkx5yy71bhmrbmyfzfh0fr"))))
    (build-system emacs-build-system)
    (home-page "https://git.systemreboot.net/varuga/about/")
    (synopsis "Send iCal calendar invites by email")
    (description
     "Varuga allows you to format and send iCal calendar invites using your
Emacs mail client.  These invites are similar to those produced by Google
Calendar or Outlook Calendar, and are compatible with them.

Varuga populates a Message mode buffer with an iCal MIME part (using MML, the
MIME Meta Language).  It also adds a plain text part listing the time of the
event in various configured timezones.")
    (license license:gpl3+)))

(define-public emacs-caml
  (package
    (name "emacs-caml")
    (version "4.9")
    (source
      (origin
        (method url-fetch)
        (uri (string-append "https://elpa.nongnu.org/nongnu/caml-"
                            version ".tar"))
        (sha256
          (base32
            "00ldvz6r10vwwmk6f3az534p0340ywn7knsg2bmvbvh3q51vyl9i"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/ocaml/caml-mode")
    (synopsis "Caml mode for GNU Emacs")
    (description
      "This package provides a major mode for editing OCaml code in Emacs.
Some of its major features include:

@itemize
@item syntax highlighting (font lock);
@item automatic indentation;
@item querying the type of expressions (using compiler generated annot files);
@item running an OCaml REPL within Emacs;
@item scanning of declarations and placing them in a menu.
@end itemize")
    (license license:gpl2+)))

(define-public emacs-campus
  (let ((commit "0a475cd7704001d8dc8280acb91a317db797933b")
        (revision "0"))
    (package
      (name "emacs-campus")
      (version (git-version "0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/eshrh/campus-emacs")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13vych4kk6adn15scl1s4znnbmfjvihfglxglrqqp2llzh0wsnlm"))))
      (arguments (list #:tests? #f)) ; There are no tests.
      (propagated-inputs (list emacs-dash emacs-s))
      (build-system emacs-build-system)
      (home-page "https://github.com/eshrh/campus-emacs")
      (synopsis "Simple and sane approach to repl programming")
      (description
       "Campus is a simple but effective improvement to the
inferior-process repl development experience in Emacs.")
      (license license:gpl3+))))

(define-public emacs-caps-lock
  (package
    (name "emacs-caps-lock")
    (version "1.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "caps-lock-" version ".el"))
       (sha256
        (base32 "1i4hwam81p4dr0bk8257fkiz4xmv6knkjxj7a00fa35kgx5blpva"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/caps-lock.html")
    (synopsis "Caps Lock as a minor mode")
    (description
     "This package provides a minor mode to emulate the behavior of a Caps
Lock key.")
    (license license:gpl3+)))

(define-public emacs-chocolate-theme
  (let ((commit "ccc05f7ad96d3d1332727689bf6250443adc7ec0")
        (revision "0"))
    (package
      (name "emacs-chocolate-theme")
      (version (git-version "0.2.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://github.com/SavchenkoValeriy/emacs-chocolate-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1d8a9jwv9y0sncw24k840c8yyrig30f2d6q2zqlc09f05yzq9p9p"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-autothemer))
      (home-page "https://github.com/SavchenkoValeriy/emacs-chocolate-theme")
      (synopsis "Dark chocolatey theme for Emacs")
      (description
       "Chocolate theme is a dark, chocolatey, vibrant and subtle theme for
Emacs.")
      (license license:gpl3))))

(define-public emacs-chronometrist
  (package
    (name "emacs-chronometrist")
    (version "0.10.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://tildegit.org/contrapunctus/chronometrist")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0qpkpkipmac24m3ng4ahsml3vi15qcvmid3g02pbpgbpc113zfpl"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "elisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-doc
            ;; Documentation consists of several Markdown files.
            (lambda _
              (let ((doc (string-append #$output
                                        "/share/doc/emacs-chronometrist-"
                                        #$version)))
                (with-directory-excursion "../doc"
                  (for-each (lambda (f) (install-file f doc))
                            (cons* "../UNLICENSE"
                                   "../WTFPL"
                                   (find-files "." "\\.md$"))))))))))
    (propagated-inputs
     (list emacs-alert emacs-dash emacs-s emacs-spark emacs-ts))
    (home-page "https://github.com/contrapunctus-1/chronometrist")
    (synopsis "Time tracker for Emacs")
    (description "Chronometrist is a time tracker in Emacs, largely modelled
after the Android application, @emph{A Time Tracker}.

Its features are:
@itemize
@item Simple and efficient to use,
@item Displays useful information about your time usage,
@item Support for both mouse and keyboard,
@item Human errors in tracking are easily fixed by editing a plain text file,
@item Hooks to let you perform arbitrary actions when starting/stopping tasks.
@end itemize")
    ;; Software is dual-licensed.
    (license (list license:unlicense license:wtfpl2))))

(define-public emacs-citeproc
  (package
    (name "emacs-citeproc")
    (version "0.9.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/andras-simonyi/citeproc-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1l74c2f2xjzsp3i331sw3db4fhbvdbwyd856j1ygldwrh4rli9ml"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs emacs ;need libxml support
      #:tests? #f)) ;tests require missing data
    (propagated-inputs (list emacs-compat
                             emacs-dash
                             emacs-f
                             emacs-parsebib
                             emacs-queue
                             emacs-s
                             emacs-string-inflection))
    (home-page "https://github.com/andras-simonyi/citeproc-el")
    (synopsis "Citation Style Language (CSL) processor for Emacs")
    (description
     "Citeproc-el is an Emacs Lisp library for rendering citations
and bibliographies in styles described in the Citation Style
Language (CSL), an XML-based, open format to describe the formatting
of bibliographic references.")
    (license license:gpl3+)))

(define-deprecated-package emacs-citeproc-el
  emacs-citeproc)

(define-public emacs-corfu
  (package
    (name "emacs-corfu")
    (version "2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/minad/corfu")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0x1469cqv3yis64i7biqycvcg66kx91qkb5kzmndbkvn1w94802j"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; there are no tests
      #:phases
      #~(modify-phases %standard-phases
          ;; Move the extensions source files to the top level, which is
          ;; included in the EMACSLOADPATH.
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./extensions" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files))))
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/minad/corfu")
    (synopsis "Completion overlay region function")
    (description
     "Corfu enhances the default completion in region function with a completion
overlay.  The current candidates are shown in a popup overlay below or above
the point.  Corfu can be considered the minimalistic
@code{completion-in-region} counterpart of the Vertico minibuffer UI.")
    (license license:gpl3+)))

(define-public emacs-corfu-doc
  (package
    (name "emacs-corfu-doc")
    (version "0.6.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/galeo/corfu-doc")
             (commit "f9566cf13f6730a45b2f3c12e491a3fa2097e5d5")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "098yf29yv1b11p7kvdc7n4ra7f5vcmf6nlvhl85jgwqrsdz1795b"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-corfu))
    (home-page "https://github.com/galeo/corfu-doc")
    (synopsis "Documentation popup for Corfu")
    (description
     "The @code{corfu-doc} package provides a way to display a documentation
popup for completion candidates when using @code{emacs-corfu}.  It can
be regarded as @code{emacs-company-quickhelp} for @code{emacs-corfu}.")
    (license license:gpl3+)))

(define-public emacs-corfu-candidate-overlay
  (package
    (name "emacs-corfu-candidate-overlay")
    (version "1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://code.bsdgeek.org/adam/corfu-candidate-overlay")
             (commit "265438b16155e899d82a869aebca16105665c998")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0i36g2i7435pby32vcapv4ydmp6rqn0r51qm91wqyzan1f3n3qck"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-corfu))
    (license license:gpl3)
    (home-page "https://code.bsdgeek.org/adam/corfu-candidate-overlay")
    (synopsis "Show first Corfu's completion candidate in an overlay while
 typing")
    (description
     "Simple corfu as-you-type auto-suggestion candidate overlay with a visual
 indication of whether there are many or exactly one candidate available.")))

(define-public emacs-cape
  (package
    (name "emacs-cape")
    (version "2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/cape")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "156jihiybiigs3gx7c9q9irqhv44677ggn3k1zcs528mz7vqvkrp"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ;no test suite
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/cape")
    (synopsis "Completion at point extensions for Emacs")
    (description
     "Cape provides some Completion At Point Extensions, which can be used in
combination with Corfu completion UI or the default completion UI.  The
completion backends used by @code{completion-at-point} are so called
@code{completion-at-point-functions} (Capfs).  In principle, the Capfs
provided by Cape can also be used by Company.")
    (license license:gpl3+)))

(define-public emacs-capf-autosuggest
  (package
    (name "emacs-capf-autosuggest")
    (version "0.3")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/capf-autosuggest-"
                                  version ".tar"))
              (sha256
               (base32
                "18cwiv227m8y1xqvsnjrzgd6f6kvvih742h8y38pphljssl109fk"))))
    (build-system emacs-build-system)
    (synopsis "@code{eshell} completion suggestions for Emacs")
    (description "This package provides comint autosuggestions for Emacs
eshell.")
    (home-page "https://repo.or.cz/emacs-capf-autosuggest")
    (license license:gpl3+)))

(define-public emacs-direnv
  (package
    (name "emacs-direnv")
    (version "2.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wbolster/emacs-direnv")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0cf5npgksl9a03mnfdhfdhlf46gr9qz9adjxz3dbckq9b1vl0dfc"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-in-direnv
           (lambda* (#:key inputs #:allow-other-keys)
             (let ((direnv (search-input-file inputs "/bin/direnv")))
               (substitute* "direnv.el"
                 (("\"direnv\"") (string-append "\"" direnv "\"")))))))))
    (inputs
     (list direnv))
    (propagated-inputs
     (list emacs-dash emacs-with-editor))
    (home-page "https://github.com/wbolster/emacs-direnv")
    (synopsis "Direnv integration for Emacs")
    (description
     "This package provides support for invoking direnv to get the environment
for the current file and updating the environment within Emacs to match.

Direnv can be invoked manually, and a global minor mode is included that will
update the environment when the active buffer changes.

Using emacs-direnv means that programs started from Emacs will use the
environment set through Direnv.")
    (license license:gpl3+)))

(define-public emacs-elf-mode
  (package
    (name "emacs-elf-mode")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/abo-abo/elf-mode")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0cbvjbk2893ag1iy8ggixpirfiyhssm7fii96hb9jqdz874cdl0k"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/abo-abo/elf-mode")
    (synopsis "Show symbol list when opening a binary file in Emacs")
    (description "This Emacs package provides a command showing the symbols
that the binary uses instead of the actual binary contents.")
    (license license:gpl3+)))

(define-public emacs-ellama
  (package
    (name "emacs-ellama")
    (version "1.8.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/s-kostyaev/ellama")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "14f4mwkjsldygvv232d3ivkggizm3ccyrgyd01hymfmv6xazj155"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'disable-failing-tests
            (lambda _
              (substitute* (find-files "tests/" "\\.el$")
                (((string-append
                   "\\(ert-deftest "
                   "test-ellama-context-element-extract-info-node .*") all)
                 (string-append all "(skip-unless nil)\n"))))))
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "ellama.el"
                             "-l" "tests/test-ellama.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-compat emacs-llm emacs-plz))
    (home-page "https://github.com/s-kostyaev/ellama")
    (synopsis "Tool for interacting with LLMs")
    (description
     "Ellama is a tool for interacting with large language models from Emacs.
It allows you to ask questions and receive responses from the LLMs.  Ellama
can perform various tasks such as translation, code review, summarization,
enhancing grammar/spelling or wording and more through the Emacs interface.
Ellama natively supports streaming output, making it effortless to use with
your preferred text editor.")
    (license license:gpl3+)))

(define-public emacs-ollama-buddy
  (package
    (name "emacs-ollama-buddy")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/captainflasmr/ollama-buddy/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17jrpmj5wnafwsbvwrdfds9c92nflcf5sipd37ci4gsjckd83wvq"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "ollama-buddy-presets" "ollama-buddy-mini"
                         %default-include)
      ;; See: https://github.com/captainflasmr/ollama-buddy/issues/17
      #:tests? #f
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              (invoke "make" "-C" "docs" "docs")
              (rename-file "docs/ollama-buddy.info" "ollama-buddy.info"))))))
    (native-inputs (list texinfo))
    (home-page "https://github.com/captainflasmr/ollama-buddy/")
    (synopsis "Interface for interacting with Ollama models")
    (description
     "@code{Ollama-buddy} offers a convenient way to integrate to Ollama's
local LLM capabilities from Emacs.")
    (license license:gpl3+)))

(define-public emacs-org-fc
  (package
    (name "emacs-org-fc")
    (version "0.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~l3kn/org-fc")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bch6dlw3f8zxvfazsndmilizvxvxpcfgrv89nk6id966y3czrpl"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "\\.awk$" "\\.org$" %default-include)
      #:exclude #~(cons "^tests/" %default-exclude)
      #:test-command #~(list "emacs" "--batch"
                             "-L" "."
                             "-L" "tests/"
                             "-l" "tests/org-fc-card-test.el"
                             "-l" "tests/org-fc-filter-test.el"
                             "-l" "tests/org-fc-indexer-test.el"
                             "-l" "tests/org-fc-review-data-test.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'qualify-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((find (search-input-file inputs "/bin/find"))
                    (gawk (search-input-file inputs "/bin/gawk"))
                    (xargs (search-input-file inputs "/bin/xargs")))
                (substitute* "org-fc-awk.el"
                  (("\"find ") (string-append "\"" find " "))
                  (("\"gawk ") (string-append "\"" gawk " "))
                  (("\"xargs ") (string-append "\"" xargs " ")))))))))
    (native-inputs (list emacs-el-mock))
    (inputs (list findutils gawk))
    (propagated-inputs (list emacs-hydra))
    (home-page "https://www.leonrische.me/fc/index.html")
    (synopsis "Spaced repetition system for Emacs Org mode")
    (description
     "Org-fc is a spaced-repetition system for Emacs' Org mode.
It allows you to mark headlines in a file as flashcards, turning pieces of
knowledge you want to learn into a question-answer test.  These cards are
reviewed at regular interval.  After each review, the next review interval is
calculated based on how well you remembered the contents of the card.")
    (license license:gpl3+)))

(define-public emacs-font-lock+
  (let ((commit "aa1c82d05c9222b09099a0ccd7468e955497940c")
        (revision "0"))
    (package
      (name "emacs-font-lock+")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/font-lock-plus")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1369r5p6s9c561g5f772lvrpcqxhvyhqd9yk0853hyl03ags9gvs"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsmirror/font-lock-plus")
      (synopsis "Enhancements to standard Font Lock library")
      (description
       "This package provides enhancements to standard Font Lock library.")
      (license license:gpl3+))))

(define-public emacs-font-lock-studio
  (package
    (name "emacs-font-lock-studio")
    (version "0.0.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Lindydancer/font-lock-studio")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gjr02kww4a0a4x30pj6lls2wdj25vi14ay4pl4fgc2h98yli3c8"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Lindydancer/font-lock-studio")
    (synopsis "Interactive debugger for Font Lock keywords")
    (description
     "Font Lock Studio is an interactive debugger for Emacs syntax highlighting
rules, also called Font Lock keywords.  It can @emph{single-step} Font Lock
keywords -- matchers, highlights, and anchored rules, to see what happens when
a buffer is fontified.  Breakpoints can be set on or inside rules.  When
inside a rule, matches are visualized using a palette of background colors.
The explainer can describe a rule in plain-text English.  Finally, tight
integration with Edebug allows stepping into Lisp expressions that are part of
the Font Lock keywords.")
    (license license:gpl3+)))

(define-public emacs-font-utils
  ;; latest release from 10 years ago
  (let ((commit "abc572eb0dc30a26584c0058c3fe6c7273a10003")
        (revision "0"))
    (package
      (name "emacs-font-utils")
      (version (git-version "0.7.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rolandwalker/font-utils/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0hx3k2zx2kdavivr1b957jq7kcwk301yzw77aprxzbs7jz73a35x"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f ; require pcache
        #:test-command #~(list "make" "test")))
      (native-inputs (list which))
      (home-page "https://github.com/rolandwalker/font-utils/")
      (synopsis "Utility functions for working with fonts in Emacs")
      (description
       "@code{Font-utils} is a collection of functions for working with fonts.  This
library has no user-level interface, it is only useful for programming in Emacs
Lisp.")
      (license license:bsd-2))))

 (define-public emacs-fontaine
   (package
     (name "emacs-fontaine")
     (version "3.0.0")
     (source (origin
               (method git-fetch)
               (uri (git-reference
                     (url "https://github.com/protesilaos/fontaine")
                     (commit version)))
               (file-name (git-file-name name version))
               (sha256
                (base32
                 "1rkk6bzb5fwl1xkr8ifcvla7xgms7iks09xkxmpzar4qvq7y8c28"))))
     (build-system emacs-build-system)
     (home-page "https://github.com/protesilaos/fontaine")
     (synopsis "Set Emacs font configurations using presets")
     (description
      "Fontaine lets the user specify presets of font configurations
and set them on demand on graphical Emacs frames.")
     (license license:gpl3+)))

(define-public emacs-form-feed
  (package
    (name "emacs-form-feed")
    (version "0.2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://depp.brause.cc/form-feed.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10mcj4x2fjq0ikq9adkd72k9zp6caqib628bmj8d67wwabvzj6mk"))))
    (build-system emacs-build-system)
    (home-page "https://depp.brause.cc/form-feed")
    (synopsis "Display ^L glyphs as horizontal lines")
    (description
     "This package provides a minor mode @code{form-feed-mode} to display page
delimiters which usually appear as ^L glyphs on a single line as horizontal
lines spanning the entire window.  The minor mode is suitable for inclusion
into mode hooks and is intended to be used that way.")
    (license license:gpl3+)))

(define-public emacs-xcscope
  (let ((commit "d228d7593d762e457340f678d14b663ef66d7cee")
        (revision "0"))
    (package
      (name "emacs-xcscope")
      (version (git-version "1.5" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/dkogan/xcscope.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0pr85ywp585imjzswm04647nb4iqqvg8jgmbcs5210qmr9kh0z8d"))))
      (build-system emacs-build-system)
      (inputs (list cscope))
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'substitute-cscope-path
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "xcscope.el"
                  ("cscope-program"
                   (search-input-file inputs "/bin/cscope"))))))))
      (home-page "https://github.com/dkogan/xcscope.el")
      (synopsis "Interface to the source cross-referencing tool Cscope")
      (description
       "Xcscope is an Emacs interface to Cscope, the source cross-referencing
tool.")
      (license license:gpl2+))))

(define-public emacs-ggtags
  (let ((commit "4e3630c30fb836872b5d8f2ae3e5d5ae003365d8")
        (revision "0"))
    (package
      (name "emacs-ggtags")
      (version (git-version "0.9.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/leoliu/ggtags")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1mgdli2kvsg3y6ynsl6547cwwg9f2q0s1cv4b74slpcvq5n1kb90"))))
      (build-system emacs-build-system)
      (inputs
       (list global))
      (arguments
       `(#:tests? #f                    ; no tests
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'configure
             (lambda* (#:key inputs #:allow-other-keys)
               (chmod "ggtags.el" #o644)
               (emacs-substitute-variables "ggtags.el"
                 ("ggtags-executable-directory"
                  (dirname (search-input-file inputs "bin/global")))))))))
      (home-page "https://github.com/leoliu/ggtags")
      (synopsis "Frontend to the GNU Global source code tagging system")
      (description "@code{ggtags} provides a frontend to the GNU Global source
code tagging system.

Features:

@itemize
@item Build on @code{compile.el} for asynchronicity and its large feature-set.
@item Automatically update Global's tag files when needed with tuning for
large source trees.
@item Intuitive navigation among multiple matches with mode-line display of
current match, total matches and exit status.
@item Read tag with completion.
@item Show definition at point.
@item Jump to #include files.
@item Support search history and saving a search to register/bookmark.
@item Query replace.
@item Manage Global's environment variables on a per-project basis.
@item Highlight (definition) tag at point.
@item Abbreviated display of file names.
@item Support all Global search backends: @code{grep}, @code{idutils}, etc.
@item Support exuberant ctags @url{http://ctags.sourceforge.net/} and
@code{pygments} backend.
@item Support all Global's output formats: @code{grep}, @code{ctags-x},
@code{cscope} etc.
@item Support projects on remote hosts (e.g. via @code{tramp}).
@item Support eldoc.
@item Search @code{GTAGSLIBPATH} for references and symbols.
@end itemize\n")
      (license license:gpl3+))))

(define-public emacs-go-mode
  (package
    (name "emacs-go-mode")
    (version "1.6.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/dominikh/go-mode.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "00qzn136d8cl3szbi44xf3iiv75r6n1m7wwgldmzn4i5mpz8dbq7"))))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-commands
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "go-mode.el"
                ("godef-command" (search-input-file inputs "bin/godef")))))
          (add-before 'check 'fix-tests
            ;; Two tests fail because they (wrongly) assume we run them from
            ;; the "test" sub-directory.  Fix their expectations.
            (lambda _
              (let ((test-file "test/go-indentation-test.el"))
                (make-file-writable test-file)
                (substitute* test-file
                  (("testdata/indentation_tests/" all)
                   (string-append "test/" all)))
                (ert-number-tests "test/go-fill-paragraph-test.el"
                                  "go--fill-paragraph-block-region")))))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (inputs (list godef))
    (home-page "https://github.com/dominikh/go-mode.el")
    (synopsis "Go mode for Emacs")
    (description
     "This package provides go-mode, an Emacs mode for working with software
written in the Go programming language.")
    (license license:bsd-3)))

(define-public emacs-google-maps
  ;; There has been no new release tag since 2013.
  (let ((commit "2eb16ff609f5a9f8d02c15238a111fbb7db6c146")
        (revision "1"))
    (package
      (name "emacs-google-maps")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jd/google-maps.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1bl0dnksbf14d0xcnvdy9qpvzc5c8jwkxpmfvgayj6djikxnw2md"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jd/google-maps.el")
      (synopsis "Access Google Maps from Emacs")
      (description "The @code{google-maps} package displays Google Maps
directly inside Emacs.  It requires a Google Map Static API key to function.")
      (license license:gpl3+))))

(define-public emacs-geoclue
  (let ((commit "f409b544be4d2cfd848f4658618374b0bc76cb3c")
        (revision "1"))
    (package
      (name "emacs-geoclue")
      (version (git-version "0.8.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/geoclue.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1ggyn9rvc6si3xy1rrw2f2hyw6cys4bgb9v0ah0qq65y3dnziq6m"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/geoclue")
      (synopsis "Determine your current location using GeoClue2 over D-Bus")
      (description "This package provides an Emacs library which lets you
determine your current location using GeoClue2 over D-Bus.")
      (license (list license:gpl3+)))))

(define-public emacs-nominatim
  (let ((revision "0")
        (commit "f814e16f8f4e2cfd633f52b29699a009ab704fbf"))
    (package
      (name "emacs-nominatim")
      (version (git-version "0.9.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://codeberg.org/emacs-weirdware/nominatim")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "19nw2iy8fxy6mfd4nwrdfa23a74a1b644400xx0900fwn6ihjhpl"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/nominatim")
      (synopsis "Forward and reverse geocode using Nominatim inside Emacs")
      (description "This is an Emacs library which lets you forward and
reverse geocode using Nominatim, a component of OpenStreetMap.")
      (license license:gpl3+))))

(define-public emacs-org-street
  (let ((revision "0")
        (commit "17913afe01504ee0cbcf83abaca18c5c618f9b33"))
    (package
      (name "emacs-org-street")
      (version (git-version "0.7.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://codeberg.org/emacs-weirdware/org-street")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1a5mnnvs4yxrw4s71z9ap65xi0fc1ki1qprif5jxn8apswjlmiw1"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-nominatim))
      (home-page "https://codeberg.org/emacs-weirdware/org-street")
      (synopsis "(Reverse) Geocoding for Emacs Org files")
      (description "Org Street is an extension for Org Mode for turning the
names of places into a LOCATION property containing their address.  Given some
freeform text approximately describing a location, it geocodes it with
OpenStreetMap’s Nominatim API to determine a canonical location.  If Nominatim
returns multiple locations, a list is displayed to choose from.")
      (license license:gpl3+))))

(define-public emacs-graphviz-dot-mode
  (package
    (name "emacs-graphviz-dot-mode")
    (version "0.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ppareit/graphviz-dot-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1v1p85wk73nfsvv66qf90flgf9dqhmv15z1r7q4zmc4ifklqn08m"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "graphviz-dot-mode.el"
                ("graphviz-dot-dot-program"
                 (search-input-file inputs "/bin/dot")))))
          (add-before 'install 'make-info
            (lambda* (#:key inputs #:allow-other-keys)
              (with-directory-excursion "texinfo"
                (substitute* "Makefile"
                  (("\\/usr\\/bin\\/gzip")
                   (search-input-file inputs "/bin/gzip")))
                (invoke "make"
                        "clean"
                        "info"
                        (string-append "TEXINFODIR="
                                       #$(this-package-native-input "texinfo")
                                       "/bin")))))
          (add-after 'install 'install-info
            (lambda _
              (let ((info (string-append #$output "/share/info")))
                (install-file "texinfo/graphviz-dot-mode.info.gz" info)))))))
    (native-inputs
     (list gzip texinfo))
    (inputs (list graphviz))
    (propagated-inputs
     (list emacs-company))
    (home-page "http://ppareit.github.com/graphviz-dot-mode")
    (synopsis "Major mode for editing Graphviz DOT files")
    (description
     "This Emacs package helps you to create @file{.dot} or @file{.gv} files
using the DOT syntax, and use Graphviz to convert these files to diagrams.")
    (license license:gpl2+)))

(define-public emacs-imenu-list
  (let ((commit "b50222378412fbe321622a84cb2b036e084c697a")
        (revision "1")
        (version "0.9"))
    (package
      (name "emacs-imenu-list")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/bmag/imenu-list")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1936dd41fa05ndzf2bwhllvjz97iz0rflkazjipr7dvz5q072wj2"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/bmag/imenu-list")
      (synopsis
       "Automatically tracks the current buffer's imenu entries")
      (description
       "This Emacs minor mode creates an automatically updated buffer called
@code{*Ilist*} that is populated with the current buffer's imenu entries.
This buffer is typically shown as a sidebar (Emacs vertically splits the
window).")
      (license license:gpl3+))))

(define-public emacs-imenu-anywhere
  (package
    (name "emacs-imenu-anywhere")
    (version "1.1.6")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/vspinu/imenu-anywhere")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0lbwfhcl40ayxskvmsvdrg8p63qp086xpzw61bqk4b3fxndxl04h"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/vspinu/imenu-anywhere")
    (synopsis
     "Imenu tag selection across buffers with the same mode/project")
    (description
     "This Emacs package provides navigation for imenu tags across all buffers
that satisfy a filtering criteria.  Available criteria are all buffers with
the same major mode, same project buffers, and user-defined list of friendly
mode buffers.")
    (license license:gpl3+)))

(define-public emacs-mmm-mode
  (package
    (name "emacs-mmm-mode")
    (version "0.5.11")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "mmm-mode-" version ".tar"))
       (sha256
        (base32 "07pda4bvvcmdwkwh8dnfqgvhkdni2wjgps1094kn1j5c9j254741"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/mmm-mode")
    (synopsis "Allow multiple major modes in an Emacs buffer")
    (description
     "MMM Mode is a minor mode that allows multiple major modes to coexist in
a single buffer.")
    (license license:gpl3+)))

(define-public emacs-mmt
  (package
    (name "emacs-mmt")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mrkkrp/mmt")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "13vbfc5597v0gd87qyhn10f93nb477vjpg3jlpphbax9fvkf4gav"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/mrkkrp/mmt")
    (synopsis "Classic tools to write Emacs Lisp macros")
    (description "Emacs MMT is a package that contains classic tools for Emacs
Lisp developers who want to write macros with convenience.")
    (license license:gpl3+)))

(define-public emacs-noman
  (package
    (name "emacs-noman")
    (version "0.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/andykuszyk/noman.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0rh1p9nlhkmhfqmp507rz8hwfgwrdvxx0zba41lxsd2admai90wv"))
       (snippet #~(begin
                    (for-each delete-file
                              '("makem.sh" "Makefile" "screencast.gif"))))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list #$(file-append (this-package-native-input "makem")
                                  "/bin/makem.sh") "test")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'patch-test
                 (lambda _
                   (substitute* "tests/noman-tests.el"
                     (("#!/bin/bash")
                      (string-append "#!" (which "bash")))))))))
    (native-inputs
     (list bash emacs-ert-runner emacs-f makem-minimal))
    (synopsis "Emacs package for browsing CLI command docs without man pages")
    (description
     "Noman is an Emacs package that parses command line help from flags like
@code{--help}, and presents it in an easy-to-navigate Emacs buffer.")
    (home-page "https://github.com/andykuszyk/noman.el")
    (license license:gpl3+)))

(define-public emacs-tablist
  (package
    (name "emacs-tablist")
    (version "1.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacsorphanage/tablist")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "11vmvrhmsxy97bfj7jndpc58bik7177i3wvc45mlyldxwyirs962"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no test suite
    (home-page "https://github.com/politza/tablist")
    (synopsis "Extension for @code{tabulated-list-mode}")
    (description "Tablist is the Emacs package that provides several
additional features to @code{tabulated-list-mode}: it adds marks,
filters, new key bindings and faces.  It can be enabled by
@code{tablist-mode} or @code{tablist-minor-mode} commands.")
    (license license:gpl3+)))

(define-public emacs-djvu
  (package
    (name "emacs-djvu")
    (version "1.1.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "djvu-" version ".tar"))
       (sha256
        (base32 "0i7xwgg2fxndy81lnng6fh9iknals8xvx4f1nmxq7c099bzwb57c"))))
    (build-system emacs-build-system)
    (inputs (list djview djvulibre))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((file "djvu.el"))
                ;; Specify the absolute executable locations.
                (make-file-writable file)
                (substitute* file
                  (("\"djvused\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/djvused")
                                  "\""))
                  (("\"djvm\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/djvm")
                                  "\""))
                  (("\"ddjvu\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/ddjvu")
                                  "\"")))
                (emacs-substitute-variables file
                  ("djvu-djview-command"
                   (search-input-file inputs "/bin/djview")))))))))
    (home-page "https://elpa.gnu.org/packages/djvu.html")
    (synopsis "Edit and view Djvu files via djvused")
    (description
     "This package is a front end for the command-line program djvused from
DjVuLibre, see @url{http://djvu.sourceforge.net/}.")
    (license license:gpl3+)))

(define-public emacs-djvu3
  ;; Commit from 2021-06-03.
  (let ((commit "37b675be1d4d436cdd0c3b5d3f13e88b59a7bf18")
        (revision "0"))
    (package
      (name "emacs-djvu3")
      ;; `Version:' header says 1.0
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dalanicolai/djvu3")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0p0izjrgbayx5ybk1n6db5hbrjv9d4kpn57w4iyxdm3h96sp9cmr"))))
      (propagated-inputs
       (list emacs-djvu emacs-tablist))
      (build-system emacs-build-system)
      (home-page "https://github.com/dalanicolai/djvu3")
      (synopsis "Extend djvu.el to display annotations and more")
      (description "This package extends @code{emacs-djvu} with annotation
rendering features and a fast occur search feature using @code{svg.el}.

Other features include:

@itemize
@item clickable links
@item marker extension to @code{svg.el} for providing arrowheads (or other
types of markers)
@item a quite fancy keyboard annotation function
@item an @code{imenu} index function to enable imenu navigation
@item document restore function to open the document at the last location of
the previous session
@end itemize")
      (license license:gpl3+))))

(define-public emacs-pabbrev
  (package
    (name "emacs-pabbrev")
    (version "4.3.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "pabbrev-" version ".tar"))
       (sha256
        (base32 "0a54ld80s0r9zrc2kd861p4ii3jzqhxykzcnvi64fhxxg3x2aggx"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/pabbrev.html")
    (synopsis "Predictive abbreviation expansion")
    (description
     "The code provides a abbreviation expansion for Emacs.  It is
fairly similar to Dabbrev expansion, which works based on the contents
of the current buffer (or other buffers).

Predictive abbreviation expansion works based on the previously
written text.  Unlike dynamic abbreviation, the text is analysed
during idle time, while Emacs is doing nothing else.")
    (license license:gpl3+)))

(define-public emacs-pdf-tools
  (package
    (name "emacs-pdf-tools")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/vedang/pdf-tools")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1v861fpzck3ky21m4g42h6a6y0cbhc4sjzpzqx0zxd7sfi7rn768"))))
    (build-system gnu-build-system)
    (arguments
     `(#:tests? #f                      ; there are no tests
       #:modules ((guix build gnu-build-system)
                  ((guix build emacs-build-system) #:prefix emacs:)
                  (guix build utils)
                  (guix build emacs-utils))
       #:imported-modules (,@%default-gnu-imported-modules
                           (guix build emacs-build-system)
                           (guix build emacs-utils))
       #:phases
       (modify-phases %standard-phases
         ;; Build server side using 'gnu-build-system'.
         (add-after 'unpack 'enter-server-dir
           (lambda _ (chdir "server")))
         (add-after 'enter-server-dir 'autogen
           (lambda _
             (invoke "bash" "autogen.sh")))
         ;; Build emacs side using 'emacs-build-system'.
         (add-after 'compress-documentation 'enter-lisp-dir
           (lambda _ (chdir "../lisp")))
         (add-after 'enter-lisp-dir 'emacs-patch-variables
           (lambda* (#:key outputs #:allow-other-keys)
             (for-each make-file-writable (find-files "."))

             ;; Set path to epdfinfo program.
             (emacs-substitute-variables "pdf-info.el"
               ("pdf-info-epdfinfo-program"
                (string-append (assoc-ref outputs "out")
                               "/bin/epdfinfo")))
             ;; Set 'pdf-tools-handle-upgrades' to nil to avoid "auto
             ;; upgrading" that pdf-tools tries to perform.
             (emacs-substitute-variables "pdf-tools.el"
               ("pdf-tools-handle-upgrades" '()))))
         (add-after 'enter-lisp-dir 'emacs-make-autoloads
           (assoc-ref emacs:%standard-phases 'make-autoloads))
         (add-after 'emacs-patch-variables 'emacs-expand-load-path
           (assoc-ref emacs:%standard-phases 'expand-load-path))
         (add-after 'emacs-expand-load-path 'emacs-add-install-to-native-load-path
           (assoc-ref emacs:%standard-phases 'add-install-to-native-load-path))
         (add-after 'emacs-add-install-to-native-load-path 'emacs-install
           (assoc-ref emacs:%standard-phases 'install))
         (add-after 'emacs-install 'emacs-build
           (assoc-ref emacs:%standard-phases 'build)))))
    (native-inputs
     (list autoconf automake emacs-minimal pkg-config))
    (inputs
     (list cairo glib libpng poppler zlib))
    (propagated-inputs
     (list emacs-tablist))
    (home-page "https://github.com/vedang/pdf-tools")
    (synopsis "Emacs support library for PDF files")
    (description
     "PDF Tools is, among other things, a replacement of DocView for PDF
files.  The key difference is that pages are not pre-rendered by
e.g. ghostscript and stored in the file-system, but rather created on-demand
and stored in memory.")
    (license license:gpl3+)))

(define-public emacs-saveplace-pdf-view
  (package
    (name "emacs-saveplace-pdf-view")
    (version "1.0.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nicolaisingh/saveplace-pdf-view")
             (commit (string-append "saveplace-pdf-view-" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "03kqxi1f5idq7140f7h7ck5f56p1yvz5vb19dq5bz65iwgdrx6xy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nicolaisingh/saveplace-pdf-view")
    (synopsis "Save place in pdf-view buffers for Emacs")
    (description
     "This package extends the built-in Save-Place mode by adding support for
PDF view (see @code{emacs-pdf-tools}).  This package will store the
place (e.g., the current page and zoom) of PDF buffers under PDFView mode or
DocView mode, and revisiting those PDF files later using the same mode will
restore the saved place.")
    (license license:gpl3+)))

(define-public emacs-org-pdftools
  (let ((revision "0")
        (commit "5613b7ae561e0af199f25aacc0a9c34c16638408"))
    (package
      (name "emacs-org-pdftools")
      (version (git-version "1.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/fuxialexander/org-pdftools/")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0p86943abk55bc2402w5lb7115l3b61wv0w07m84wxi4hbfqk8k6"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f ; there are no tests
             #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'setenv
                   (lambda _
                     (substitute* "org-pdftools.el"
                       ;; Fix a small typo.
                       (("let [(]pdf-isearch-narrow-to-page t[)]")
                        "let ((pdf-isearch-narrow-to-page t))"))
                     (setenv "HOME" "/tmp"))))))
      (propagated-inputs (list emacs-org-noter emacs-pdf-tools))
      (synopsis "Support for links to documents in pdfview mode")
      (description "This package adds support for org links from pdftools buffers
with more precise location control.")
      (home-page "https://github.com/fuxialexander/org-pdftools/")
      (license license:gpl3+))))

(define-public emacs-sage-shell-mode
  (let ((commit "4291700e981a2105d55fa56382ba25046d3d268d")
        (revision "1"))
    (package
      (name "emacs-sage-shell-mode")
      (version (git-version "0.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/sagemath/sage-shell-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1dch7cwwslffgnzp1djlhz6a792ci42p4bvazxd9lqzhzal0rsbb"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 ;; Fix duplicate tests in test file.
                 (add-before 'check 'remove-duplicate-test
                   (lambda _
                     (ert-number-tests "test/sage-shell-mode-test.el"
                                       "sage-shell:parse-state-func-call-1")))
                 ;; The test below is meant to be called from a CI environment
                 ;; and can be ignored.
                 (add-before 'check 'skip-failing-test
                   (lambda _
                     (substitute* "test/sage-shell-mode-test.el"
                       (("\\(ert-deftest sage-shell:development-version-test .*"
                         all)
                        (string-append all "(skip-unless nil)\n"))))))
             ;; The "test" command from the Makefile rebuilds everything.  Run
             ;; the tests at a lower level.
             #:test-command #~(list "emacs" "-Q" "-batch"
                                    "-L" "."
                                    "-l" "test/sage-shell-mode-test.el"
                                    "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs (list emacs-deferred))
      (home-page "https://github.com/sagemath/sage-shell-mode")
      (synopsis "Emacs front-end for SageMath")
      (description
       "Sage Shell mode provides an Emacs front-end for SageMath.  It can run
the Sage terminal inside Emacs, and allows editing @file{.sage} source files
with a dedicated major mode and sending their contents directly to that
terminal.")
      (license license:gpl3+))))

(define-public emacs-sakura-theme
  (package
    (name "emacs-sakura-theme")
    (version "1.0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacsfodder/emacs-theme-sakura")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0nxj6gx5virv95sfxbasvr2mh427w5srzjsfawhf58ixif8wkhd0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page "https://github.com/emacsfodder/emacs-theme-sakura")
    (synopsis "Emacs theme of cherry blossoms")
    (description
     "Sakura Emacs theme is the rose tinted fork of @code{Creamsody},
inspired by the Deep Purple.")
    (license license:gpl3+)))

(define-public emacs-pdfgrep
  ;; XXX: Upstream does not tag releases.  The commit below matches latest
  ;; version bump.
  (let ((commit "a4ca0a1e6521de93f28bb6736a5344b4974d144c")
        (revision "1"))
    (package
      (name "emacs-pdfgrep")
      (version (git-version "1.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jeremy-compostella/pdfgrep")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "093sm3ywa338lhhz2ib3ylcgklsbxcsqck2qsaq26i2qxr0r7lq2"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'patch-pdfgrep-path
                   (lambda* (#:key inputs #:allow-other-keys)
                     (make-file-writable "pdfgrep.el")
                     (emacs-substitute-variables "pdfgrep.el"
                       ("pdfgrep-program"
                        (search-input-file inputs "bin/pdfgrep"))))))))
      (inputs (list pdfgrep))
      (home-page "https://github.com/jeremy-compostella/pdfgrep")
      (synopsis "Emacs module providing @code{grep} comparable facilities but
for PDF files")
      (description
       "pdfgrep is a GNU/Emacs module providing @code{grep} comparable
facilities but for PDF files.  Its usage is similar to the @code{grep}
function.  For example, using the @code{next-error} function gets you to the
next matching page.")
      (license license:gpl3+))))

(define-public emacs-bui
  (package
    (name "emacs-bui")
    (version "1.2.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://notabug.org/alezost/emacs-bui.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0sszdl4kvqbihdh8d7mybpp0d8yw2p3gyiipjcxz9xhvvmw3ww4x"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://notabug.org/alezost/emacs-bui")
    (synopsis "Buffer interface library for Emacs")
    (description
     "BUI (Buffer User Interface) is a library for making @code{list} and
@code{info} interfaces to display an arbitrary data of the same
type, for example: packages, buffers, files, etc.")
    (license license:gpl3+)))

(define-public emacs-guix
  (let ((commit "324987fb4a3e67c6f0f565b6605b8fce559f60ee")
        (revision "9"))
    (package
      (name "emacs-guix")
      (version (git-version "0.5.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://codeberg.org/guix/emacs-guix/")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1bg8sy20rdpdv1vzim494jwrmd63rd1mn8v94rkdijs9a2cakdkq"))))
      (build-system gnu-build-system)
      (arguments
       (list
        #:modules '((guix build gnu-build-system)
                    ((guix build emacs-build-system) #:prefix emacs:)
                    (guix build utils))
        #:imported-modules `(,@%default-gnu-imported-modules
                             (guix build emacs-build-system)
                             (guix build emacs-utils))
        #:tests? #f    ; no tests
        #:configure-flags
        #~(list (string-append "--with-lispdir="
                               (emacs:elpa-directory #$output)))
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'expand-load-path
              (lambda _
                ((assoc-ref emacs:%standard-phases 'expand-load-path)
                 #:prepend-source? #f))))))
      (native-inputs
       (list autoconf automake emacs-minimal pkg-config texinfo))
      (inputs
       (list (lookup-package-input guix "guile")
             guix))
      (propagated-inputs
       (list emacs-bui
             emacs-dash
             emacs-edit-indirect
             emacs-geiser
             emacs-geiser-guile
             emacs-magit-popup
             guile-gcrypt))
      (home-page "https://guix.gnu.org")
      (synopsis "Emacs interface for GNU Guix")
      (description
       "Emacs-Guix provides a visual interface, tools and features for the GNU
Guix package manager.  Particularly, it allows you to do various package
management tasks from Emacs.  To begin with, run @code{M-x guix-about} or
@code{M-x guix-help} command.")
      (license license:gpl3+))))

(define-public emacs-build-farm
  (package
    (name "emacs-build-farm")
    (version "0.2.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://notabug.org/alezost/emacs-build-farm.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0i0bwbav5861j2y15j9nd5m9rdqg9q97zgcbld8pivr9nyxy63lz"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-bui emacs-magit-popup))
    (home-page "https://notabug.org/alezost/emacs-build-farm")
    (synopsis "Emacs interface for Hydra and Cuirass build farms")
    (description
     "This Emacs package provides an interface for Hydra and
Cuirass (build farms used by Nix and Guix).  It allows you to look at
various data related to the build farm projects, jobsets, builds and
evaluations.  The entry point is @code{M-x build-farm} command.")
    (license license:gpl3+)))

(define-public emacs-d-mode
  (package
    (name "emacs-d-mode")
    (version "2.0.12")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Emacs-D-Mode-Maintainers/Emacs-D-Mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mwd412d2kha8avkyhvvkh8r7an859xk18f7phgx7kj989pr3xkr"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f        ; XXX: too many failures
                     #:test-command
                     #~(list "emacs" "-Q" "-batch" "-l" "d-mode-test.el"
                             "-l" "d-mode.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-undercover))
    (home-page "https://github.com/Emacs-D-Mode-Maintainers/Emacs-D-Mode")
    (synopsis "Emacs major mode for editing D code")
    (description "This package provides an Emacs major mode for highlighting
code written in the D programming language.")
    (license license:gpl2+)))

(define-public emacs-extempore-mode
  ;; Use the latest commit at time of packaging.  There are no releases or tags.
  (let ((commit "92e0fff482a0a4dc2971c39581c5ea9e84ae5e1c")
        (revision "2"))
    (package
      (name "emacs-extempore-mode")
      (version (git-version "0.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/extemporelang/extempore-emacs-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1chxl2x9wjblhfknx7aa8pgqppc60917n437bxapx4hp3275x16q"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/extemporelang/extempore-emacs-mode")
      (synopsis "Emacs major mode for Extempore source files")
      (description
       "This package provides a major mode for editing Extempore code.  It can
create an Extempore REPL, connect the current @code{extempore-mode} buffer to a
running Extempore process, and more.")
      (license license:bsd-2))))

(define-public emacs-external-completion
  (package
    (name "emacs-external-completion")
    (version "0.1")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://elpa.gnu.org/packages/external-completion-" version
                    ".tar"))
              (sha256
               (base32
                "12pddwp5jby2icshj77w4kwxv75zi00jdxw18f721d7zx3l7q668"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/external-completion.html")
    (synopsis "Let external tools control Emacs completion style")
    (description
     "The @code{external} completion style is used with a ``programmable
completion'' table that gathers completions from an external tool such as
a shell utility, an inferior process, an HTTP server.  The table and external
tool are fully in control of the matching of the pattern string to the
potential candidates of completion.  When @code{external} is in use, the usual
styles configured by the user or other in @code{completion-styles} are
ignored.  This compromise is for speed: all other styles need the full data
set to be available in Emacs addressing space, which is often slow if not
completely unfeasible.")
    (license license:gpl3+)))

(define-public emacs-kakoune
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "d73d14e69ea38076af50cc69f846808383ff539d")
        (revision "0"))
    (package
      (name "emacs-kakoune")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jmorag/kakoune.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0nk6jdy1y5mc3ryd0smiqghrk6iv34d5grc7f7migmshlbq0np92"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-expand-region emacs-multiple-cursors emacs-ryo-modal))
      (home-page "https://github.com/jmorag/kakoune.el")
      (synopsis "Emacs simple simulation, but not emulation, of Kakoune")
      (description "This package provides many, but not all of the editing
primitives in the Kakoune editor.  Unlike Evil mode for Vim, this is a very
shallow emulation, which seeks to do as little work as possible, leveraging
Emacs native editing commands and the work of other packages wherever
possible.")
      (license license:expat))))

(define-public emacs-kana
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "b239c3c3c6124b46ff720cca7b80ecbafd7fa489")
        (revision "0"))
    (package
      (name "emacs-kana")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/chenyanming/kana")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vrrl1kniq4h111jvnapvx3wybvsl3alfaygw634mmryr3h7pwi8"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/chenyanming/kana")
      (synopsis "Learn Japanese Kana in Emacs")
      (description
       "This Emacs mode displays Hiragana and Katakana flashcards.  It can use
functionality from Emacs Kanji mode if it is installed.")
      (license license:gpl3+))))

(define-public emacs-kanji
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "5e9d5b72468ece11cfb81b729be6babf63ede425")
        (revision "0"))
    (package
      (name "emacs-kanji")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/wsgac/kanji-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1zh7klqaza840q5f44zzh1wrnd6sqa2k93z3dgx3yhhsxfd1dxvy"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/wsgac/kanji-mode")
      (synopsis "Emacs minor mode for displaying Japanese Kanji stroke order")
      (description
       "This minor mode displays the stroke order of the Kanji sign under
cursor in a transient buffer.  It has a built-in collection of SVG images
depicting stroke orders for all Kanji.  The collection is a slightly modified
and limited version of the images provided by the KanjiVG project.")
      (license license:gpl3+))))

(define-public emacs-migemo
  (let ((commit "fbc16b57eace9bf25bcb325032c59c50b186b9d7")
        (revision "0"))
    (package
      (name "emacs-migemo")
      (version (git-version "1.9.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-jp/migemo")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "10d27jrmn7k4mqqd5cgqf8jwa0pq9yh2550b1r6lwmz6wx509552"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; tests rely on cmigemo, which has not yet been packaged
        #:tests? #f))
      (home-page "https://github.com/emacs-jp/migemo")
      (synopsis
       "Japanese incremental search through dynamic pattern expansion")
      (description
       "This package provides incremental searching through Japanese text through
romanization for Emacs.")
      (license license:gpl2+))))

(define-public emacs-kbd
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "b9048e928ac403c8a1cf09b4fec75776dc4ecf4f")
        (revision "1"))
    (package
      (name "emacs-kbd")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/slotThe/kbd-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1rcx6aasr2vnhzqx03w3y39w78w0kvqf5j4j863nk18dalx585b2"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/slotThe/kbd-mode")
      (synopsis "Minor mode for syntax highlighting kmonad's @file{.kbd} files")
      (description
       "This minor mode provides syntax highlighting for Lisp-like DSL used in
kmonad's configuration files (@file{.kbd}).")
      (license license:gpl3+))))

(define-public emacs-keycast
  (package
    (name "emacs-keycast")
    (version "1.4.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/keycast")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0w8kvizrzml85j7m8c3nb8a9sp8nvx0l2xwv3f0zr2nald0vsd6c"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/tarsius/keycast")
    (synopsis "Show current command and its key in the mode line")
    (description
     "This package provides Keycast mode.  Once enabled, that mode shows the
current command and its key or mouse binding in the mode line, and updates
them whenever another command is invoked.")
    (license license:gpl3+)))

(define-public emacs-keyfreq
  (package
    (name "emacs-keyfreq")
    (version "20160516.716")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "http://melpa.org/packages/keyfreq-"
                           version ".el"))
       (sha256
        (base32
         "008hd7d06qskc3mx0bbdgpgy2pwxr8185fzlyqf9qjg49y74p6g8"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/dacap/keyfreq")
    (synopsis "Track Emacs command frequencies")
    (description "@code{emacs-keyfeq} tracks and shows how many times you used
a command.")
    (license license:gpl3+)))

(define-public emacs-khardel
  (package
    (name "emacs-khardel")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DamienCassou/khardel")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gqijnmj24phryi6n74iq410k0637j0li1ncdymxhk3bdmp4mb40"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #false              ;no tests
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'fix-path
                 (lambda* (#:key inputs #:allow-other-keys)
                   (emacs-substitute-variables "khardel.el"
                     ("khardel-command"
                      (search-input-file inputs "/bin/khard"))))))))
    (inputs
     (list khard))
    (propagated-inputs
     (list emacs-yaml-mode))
    (home-page "https://github.com/DamienCassou/khardel")
    (synopsis "Emacs interface to Khard")
    (description
     "Khardel provide an Emacs integration with Khard, a console application
to search and edit contacts in vCard format.")
    (license license:gpl3+)))

(define-public emacs-ligature
  (let ((commit "3d1460470736777fd8329e4bb4ac359bf4f1460a")
        (revision "1"))
    (package
      (name "emacs-ligature")
      (version (git-version "1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mickeynp/ligature.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1rnx2mp8y1phnvfirmf4a6lza38dg2554r9igyijl9rgqpjax94d"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/mickeynp/ligature.el")
      (synopsis "Typographic ligatures in Emacs")
      (description
       "This package maps ordinary graphemes (characters) to fancy ligatures,
if both your version of Emacs and the font supports it.  With this package you
can control where Emacs must display ligatures.  That is useful if you only
want a subset of the ligatures in certain major modes, for instance, or if you
want to ensure that some modes have no ligatures at all.")
      (license license:gpl3+))))

(define-public emacs-olivetti
  (package
    (name "emacs-olivetti")
    (version "2.0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rnkn/olivetti")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0q1z07z0nkvzplmsqni25hqhv81x3r7f1xahjjkskmllrhksz0bh"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ; Linting but not testing.
    (home-page "https://github.com/rnkn/olivetti")
    (synopsis "Emacs minor mode for a nice writing environment")
    (description "This package provides an Emacs minor mode that puts writing
in the center.")
    (license license:gpl3+)))

(define-public emacs-undo-tree
  (package
    (name "emacs-undo-tree")
    (version "0.8.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/tsc25/undo-tree")
             (commit "42aab056e37e033816b2d192f9121b89410b958e"))) ; no 0.8.2 tag
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xvkxc078b4z5zqwndz6jcv4ga8yd2ci32v7l8pdvqjmz7fq7bfz"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-queue))
    (home-page "https://www.dr-qubit.org/undo-tree.html")
    (synopsis "Treat undo history as a tree")
    (description
     "Tree-like interface to Emacs undo system, providing
graphical tree presentation of all previous states of buffer that
allows easily move between them.")
    (license license:gpl3+)))

(define-public emacs-undo-fu
  ;; There are no tagged releases upstream, instead we are using
  ;; the most recent commit.
  (let ((commit "0e22308de8337a9291ddd589edae167d458fbe77")
        (revision "0"))
    (package
      (name "emacs-undo-fu")
      (version (git-version "0.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-undo-fu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "18c8lq4h3i5rzz8jwwszmq9ga1m7jk3sbrh76sgrsbdawpap3ak5"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/ideasman42/emacs-undo-fu")
      (synopsis "Simple, stable linear undo with redo for Emacs")
      (description
       "This is a light weight wrapper for Emacs built-in undo system,
adding convenient undo/redo without losing access to the full undo history,
allowing you to visit all previous states of the document if you need.")
      (license license:gpl3+))))

(define-public emacs-undo-fu-session
  ;; There are no tagged releases upstream, instead we are using the
  ;; most recent commit.
  (let ((commit "a6c4f73bc22401fd36e0f2fd4fe058bb28566d84")
        (revision "0"))
    (package
      (name "emacs-undo-fu-session")
      (version (git-version "0.6" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-undo-fu-session")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "03pb88bi5z4f01972jbk9z6w9iqamqflfp20mih29ghvbiyn6ahj"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; The tests require temp files handling which a recent change disabled
        ;; by default. We re-enable it here to make tests work again.
        #:test-command #~(list "emacs" "--batch" "--eval"
                               "(setq undo-fu-session-ignore-temp-files nil)"
                               "-l" "tests/undo-fu-session-test.el"
                               "-f" "undo-fu-session-test-run-all")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'set-home
              (lambda _
                (setenv "HOME" "/tmp"))))))
      (home-page "https://codeberg.org/ideasman42/emacs-undo-fu-session")
      (synopsis "Save & recover undo steps between Emacs sessions")
      (description "This package writes undo/redo information upon file save
which is restored where possible when the file is loaded again.")
      (license license:gpl3+))))

(define-public emacs-inflections
  (package
    (name "emacs-inflections")
    (version "2.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/eschulte/jump.el")
             (commit version)))
       (file-name (git-file-name name version))
       (snippet #~(begin (delete-file "jump.el")))
       (sha256
        (base32 "03fh7i6blnbc0zbmp83fk095hr3q4fdvrvfxad74zghcbc2nk7b7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/eschulte/jump.el")
    (synopsis "Convert english words between singular and plural")
    (description "This package provides an Emacs library for converting
english words between singular and plural.")
    (license license:gpl3+)))

(define-public emacs-blight
  (package
    (name "emacs-blight")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/emacs-weirdware/blight")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1k1w1jr56pp8dgcpdxrymiam1hxsdy7nh6gi5l17pimwba3r4wbm"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-udev-rules-absolute-path-bins
            (lambda _
              (substitute* "20-backlight.rules"
                (("/bin/chgrp") (which "chgrp"))
                (("/bin/chmod") (which "chmod")))))
          (add-after 'install 'install-udev-rules
            (lambda _
              (install-file "20-backlight.rules"
                            (string-append #$output "/lib/udev/rules.d")))))))
    (home-page "https://codeberg.org/emacs-weirdware/blight")
    (synopsis "Control display brightness")
    (description
     "Blight allows you to control display brightness from Emacs.  It features
object-oriented code using EIEIO, a base class implementing a reasonable API
which focuses on the @emph{set the back light to this percentage}
functionality, it includes a concrete implementation that uses SysFS to
control brightness.  Other systems (D-Bus, xbacklight, XELB using XRandR) are
easily supportable, giving the same experience across environments.")
    (license license:gpl3+)))

(define-public emacs-symon
  (package
    (name "emacs-symon")
    (version "20160630")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/zk-phi/symon")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1q7di9s8k710nx98wnqnbkkhdimrn0jf6z4xkm4c78l6s5idjwlz"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/zk-phi/symon")
    (synopsis "Tiny graphical system monitor")
    (description
     "Tiny graphical system monitor for the Emacs minibuffer when idle.")
    (license license:gpl2+)))

(define-public emacs-lemon
  (package
    (name "emacs-lemon")
    (version "2.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/emacs-weirdware/lemon")
             (commit "b10e992a25757a91723c7d554a5fa8e14291e702")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18yclk2zzqcahzhz2kq8g9gy1xnnxiy6rxs2lwhskj475kvwy2f9"))))
    (build-system emacs-build-system)
    (arguments
     (list
      ;; Only one test out of the four passes
      #:test-command #~(list "emacs" "-Q" "--batch" "-L" "."
                             ;; "-l" "lemon--test.el"
                             ;; "-l" "lemon-monitor--test.el"
                             ;; "-l" "lemon-sparkline--test.el"
                             "-l" "lemon-time--test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (native-inputs
     (list emacs-blight emacs-emms))
    (propagated-inputs
     (list emacs-s))
    (home-page "https://codeberg.org/emacs-weirdware/lemon")
    (synopsis "System monitors in the echo area")
    (description
     "Lemon is a tiny system monitor which displays system information in
the echo area when Emacs is has been idle for a few seconds.  This is a fork
of zk_phi’s Symon, which has been largely rewritten.  It works nicely with
EXWM.")
    (license license:gpl3+)))

(define-public emacs-sx
  (let ((revision "1")
        (commit "8c1c28f33d714fc8869e49f5642e1a585c8c85af"))
    (package
      (name "emacs-sx")
      (version (git-version "0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/vermiculus/sx.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0jkmb8x28v8jnhgm9zibyjn6q5dmssv24gq1084jwx2kzg135sjm"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases #~(modify-phases %standard-phases
                     (add-after 'unpack 'fix-emacs-30-build
                       (lambda _
                         (substitute* "sx-question-print.el"
                           ((":foreground nil t")
                            ":foreground nil 'default")))))
        #:tests? #f  ; Tests are broken on emacs@30
        #:test-command
        #~(list "emacs" "--batch" "-L" "." "-l" "ert" "-l" "test/tests.el"
                "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-markdown-mode))
      (home-page "https://github.com/vermiculus/sx.el")
      (synopsis "Emacs StackExchange client")
      (description
       "Emacs StackExchange client.  Ask and answer questions on
Stack Overflow, Super User, and other StackExchange sites.")
      (license license:gpl3+))))

(define-public emacs-skempo
  (package
    (name "emacs-skempo")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xFA25E/skempo")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0xsr6819qaad0y8rhfrf555c9w7cmgbgkf1a2svgbp7rhhnywl0a"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/xFA25E/skempo")
    (synopsis "Enhancements for skeleton/tempo + abbrev")
    (description
     "Skempo is an attempt to improve Emacs built-in Skeleton and Tempo
templates.  It tries to make a unified syntax for template definitions.  It
also adds tags and marks support for Skeleton, and Abbrev support for Tempo.")
    (license license:gpl3+)))

(define-public emacs-toc-org
  (package
    (name "emacs-toc-org")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/snosov1/toc-org")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "00a2al7ghrlabf65kfj1mk30p2pl37h6ppwlgghbgiy7rwlzkdbm"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/snosov1/toc-org")
    (synopsis "Table of Contents generator for Emacs Org mode")
    (description
     "This package generates a table of contents when saving in Org and
Markdown files.")
    (license license:gpl2+)))

(define-public emacs-toml-mode
  (let ((version "0.1.3")
        (revision "0")
        (commit "f6c61817b00f9c4a3cab1bae9c309e0fc45cdd06"))
    (package
      (name "emacs-toml-mode")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dryman/toml-mode.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "05b4ksay85c8y5ncax0qsvnmplwsfiw24z16a58gkarjz938hb57"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/dryman/toml-mode.el")
      (synopsis "Emacs major mode for editing TOML files")
      (description
       ;; XXX: Ideally we'd use @acronym for "TOML", but Guile's Texinfo
       ;; parser does not currently support @comma{}, making it impossible
       ;; to use commas in the @acronym arguments.
       "This package provides a major mode for editing files in @dfn{TOML}
(Tom's Obvious, Minimal Language) data format.")
      (license license:gpl3+))))

(define-public emacs-twittering-mode
  (package
    (name "emacs-twittering-mode")
    (version "3.1.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "mirror://sourceforge/twmode"
                           "/twittering-mode-" version
                           "/twittering-mode-" version ".tar.xz"))
       (sha256
        (base32 "02imis1gxz90lah0b5n37j2hlsaw5igss11d85vpsm5d1bgw8j28"))))
    (build-system emacs-build-system)
    (home-page "https://twmode.sourceforge.net")
    (synopsis "Emacs major mode for Twitter")
    (description
     "Twittering mode is an Emacs major mode for Twitter.
You can check timelines, tweet, mark posts as favorites and so on with
Emacs.")
    (license license:gpl2+)))

(define-public emacs-fountain-mode
  (package
    (name "emacs-fountain-mode")
    (version "3.7.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rnkn/fountain-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15r0pzdmimm72jx26zgdxf7fwwcppl45vvh33xx5wnhqzd140hwn"))))
    (arguments
     (list
      #:tests? #f                       ; no actual tests
      #:phases #~(modify-phases %standard-phases
                   (add-after 'unpack 'add-contrib
                     (lambda _
                       (copy-recursively "contrib" "."))))))
    (build-system emacs-build-system)
    (home-page "https://github.com/rnkn/fountain-mode")
    (synopsis "Major mode for screenwriting in Fountain markup")
    (description "Fountain Mode is a scriptwriting program for GNU Emacs
using the Fountain plain text markup format.")
    (license license:gpl3+)))

(define-public emacs-fringe-helper
  (let ((commit "ef4a9c023bae18ec1ddd7265f1f2d6d2e775efdd")
        (revision "1"))
    (package
      (name "emacs-fringe-helper")
      (version (git-version "1.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nschum/fringe-helper.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ra9rc53l1gvkqank8apasl3r7wz2yfjrcvmfk3wpxhh24ppxv9d"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("emacs" "--batch"
                          "-l" "tests.el"
                          "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/nschum/fringe-helper.el")
      (synopsis "Helper functions for fringe bitmaps")
      (description
       "This package allows fringe bitmaps to be defined with a visual string
representation.")
      (license license:gpl2+))))

(define-public emacs-git-gutter
  (package
    (name "emacs-git-gutter")
    (version "0.93")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-git-gutter")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0qjp1gind95py0zfc3a32j7g6bmdh0pszpyiazqqzxm3rz82m7rn"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/syohex/emacs-git-gutter")
    (synopsis "See and manage hunks of text in a version control system")
    (description
     "This package is an Emacs minor mode for displaying and interacting with
hunks of text managed in a version control system.  Added modified and deleted
areas can be indicated with symbols on the edge of the buffer, and commands
can be used to move between and perform actions on these hunks.

Git, Mercurial, Subversion and Bazaar are supported, and many parts of the
display and behaviour is easily customisable.")
    (license license:gpl3+)))

(define-public emacs-git-gutter-fringe
  (let ((commit "648cb5b57faec55711803cdc9434e55a733c3eba")
        (revision "2"))
    (package
      (name "emacs-git-gutter-fringe")
      (version (git-version "0.23" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/git-gutter-fringe")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13bqq5r8ys2mmw1ffsm6hn6fji0vq3nx3slw98c9dgbvlprkaiip"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-git-gutter emacs-fringe-helper))
      (home-page "https://github.com/emacsorphanage/git-gutter-fringe")
      (synopsis "See and manage hunks of text in a version control system")
      (description
       "This package extends @code{git-gutter} to use the fringe area of a
window.")
      (license license:gpl3+))))

(define-public emacs-git-link
  (package
    (name "emacs-git-link")
    (version "0.10.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sshaw/git-link")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1cq456q908nmbz2br578fhi8vq2jh11nf0axxa7913gd7dhmqklg"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")))
    (home-page "https://github.com/sshaw/git-link")
    (synopsis "Create links for files and commits in GitHub/GitLab/etc. repos")
    (description
     "@code{git-link} returns the URL for the current buffer's file location
at the current line number or active region.  @code{git-link-commit} returns
the URL for a commit.  URLs are added to the kill ring.")
    (license license:gpl3+)))

(define-public emacs-frowny
  (package
    (name "emacs-frowny")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/duckwork/frowny.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "01ss3js71as1jpqcf0x9hfvapiyyhj9ni4y1n6wvqsghv5dcaiy0"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/duckwork/frowny.el")
    (synopsis "Insert frownies in Emacs :(")
    (description "This package ships @code{frowny-mode}, which makes it so that
inserting a single @code{(} when after a @code{:} will not automatically close
the parenthesis, meaning that only @code{:(} is inserted.  Works with
@code{electric-pair-mode}, @code{paredit-mode}, and others.")
    (license license:public-domain)))

(define-public emacs-apache-mode
  (package
    (name "emacs-apache-mode")
    (version "2.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-php/apache-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1grs2x51k8pa6sgfa82s5pwwdfv7zw46ccw0zvd2rvzbhpq21p2z"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacs-php/apache-mode")
    (synopsis
     "Syntax highlighting and indentation support for Apache config files")
    (description
     "This package provides @code{apache-mode}, an Emacs major mode for Apache
configuration files which provides syntax highlighting and indentation rules.
This mode supports Apache HTTP Server 2.4 and major modules.")
    (license license:gpl2+)))

(define-public emacs-apheleia
  (package
    (name "emacs-apheleia")
    (version "4.4.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/raxod502/apheleia")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "06zbl4syvk05qh57mlzwyw9avyag26yirw99b9l3z0fxcmyn8l39"))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-buttercup))
    (home-page "https://github.com/raxod502/apheleia")
    (synopsis "Reformat buffer stably")
    (description
     "This package allows for a buffer to be reformatted without moving point,
so that running a formatting tool like @code{Prettier} or @code{Black} upon
saving won't move point back to the beginning of the buffer.")
    (license license:gpl3+)))

(define-public emacs-git-timemachine
  (package
    (name "emacs-git-timemachine")
    (version "4.13")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/pidu/git-timemachine")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "152vq34dn76m21ab97wwm31hgp2wl9y437vwmd4kcd5pvwjhx9c6"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/pidu/git-timemachine")
    (synopsis "Step through historic versions of Git-controlled files")
    (description "This package enables you to step through historic versions
of files under Git version control from within Emacs.")
    (license license:gpl3+)))

(define-public emacs-minitest
  (package
    (name "emacs-minitest")
    (version "0.9.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/arthurnn/minitest-emacs")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0d8kg68yy5x1y3ivj43vzcakb3gii6bh8jm40g4sah5f53bbrs16"))))
    (build-system emacs-build-system)
    (arguments
     '(#:include (cons "^snippets\\/minitest-mode\\/" %default-include)
       #:exclude (delete "^[^/]*tests?\\.el$" %default-exclude)))
    (propagated-inputs
     (list emacs-dash emacs-f))
    (home-page "https://github.com/arthurnn/minitest-emacs")
    (synopsis "Emacs minitest mode")
    (description
     "The minitest mode provides commands to run the tests for the current
file or line, as well as rerunning the previous tests, or all the tests for a
project.

This package also includes relevant snippets for yasnippet.")
    (license license:expat)))

(define-public emacs-gdscript-mode
  (package
    (name "emacs-gdscript-mode")
    (version "1.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/godotengine/emacs-gdscript-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09q0himrz7a6xgz0jmcl85qc5xhk5fwi6d2vw1n8qaiavm96ksdy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/godotengine/emacs-gdscript-mode")
    (synopsis "GDScript support and syntax highlighting in Emacs")
    (description
     "This package adds support for the GDScript programming language from the
Godot game engine in Emacs.  It features all the essentials, e.g., syntax
highlighting, code folding, indentation, automatic pairing, auto-completion,
and code formatting.")
    (license license:gpl3+)))

(define-public emacs-ef-themes
  (package
    (name "emacs-ef-themes")
    (version "1.11.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/protesilaos/ef-themes")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "049wfnvw4x81k2r34znj4w4fw5xrg376y63x87gkf28vlcmdkkrs"))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~protesilaos/ef-themes")
    (synopsis "Colorful and legible themes")
    (description
     "The Ef themes are a collection of light and dark themes for GNU Emacs
whose goal is to provide colorful yet legible options for users who want
something with a bit more flair than the Modus themes.")
    (license license:gpl3+)))

(define-public emacs-doric-themes
  (package
    (name "emacs-doric-themes")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/protesilaos/doric-themes")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "06kvv5hvqig1sngzzvpxfpb9wln9fv2b7krjmvb0n3kvp0s0bxmd"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://github.com/protesilaos/doric-themes")
    (synopsis "Highly readable minimalist Emacs themes")
    (description
     "This package provides a set of Emacs themes that conform with a
minimalist aesthetic: they use few colours and appear monochromatic in many
contexts")
    (license license:gpl3+)))

(define-public emacs-eslint-flymake
  (let ((commit "c78246330ee3ac1e0e07a709473d98a113d268e5")
        (revision "1"))
    (package
      (name "emacs-eslint-flymake")
      (version "0.2.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-pe/eslint-flymake")
               (commit commit)))
         (sha256
          (base32 "19h95k57hrsysmvqzillzfn6wcinvcidv14fvbaqxgigwfwj0jnw"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-flymake))
      (home-page "https://github.com/emacs-pe/eslint-flymake")
      (synopsis "ESLint backend for Flymake")
      (description
       "This package lets Flymake run ESLint on the current buffer.")
      (license license:gpl3+))))

(define-public emacs-spark
  (let ((version "20160503")  ; no proper tag, use date of commit
        (commit "0bf148c3ede3b31d56fd75f347cdd0b0eae60025")
        (revision "1"))
    (package
      (name "emacs-spark")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alvinfrancis/spark")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1ykqr86j17mi95s08d9fp02d7ych1331b04dcqxzxnmpkhwngyj1"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/alvinfrancis/spark")
      (synopsis "Sparkline generation library for Emacs Lisp")
      (description "@code{emacs-spark} is a sparkline generation library for
Emacs Lisp.  It generates a sparkline string given a list of numbers.  It is a
port of @code{cl-spark} to Emacs Lisp.")
      (license license:expat))))

(define-public emacs-spray
  (let ((version "0.0.2") (revision "0")
        (commit "74d9dcfa2e8b38f96a43de9ab0eb13364300cb46"))
    (package
      (name "emacs-spray")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.sr.ht/~iank/spray")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1avbfr32dvff26kgvd5vgan99nb5c6al9kv5xbmy2rcls17py7r2"))))
      (build-system emacs-build-system)
      (home-page "https://git.sr.ht/~iank/spray")
      (synopsis "Speed reading mode for Emacs")
      (description
       "For speed reading, or just more enjoyable reading.  Narrows
the buffer to show one word at a time.  Adjust speed / pause as needed.")
      (license license:gpl3+))))

(define-public emacs-es-mode
  (package
    (name "emacs-es-mode")
    (version "4.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dakrone/es-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1qhfnd5anp5qrmravv7ks5ix763xnki2f5jwcyj70qyxwr0l60cg"))))
    (build-system emacs-build-system)
    (propagated-inputs
     ;; The version of org in Emacs 24.5 is not sufficient, and causes tables
     ;; to be rendered incorrectly
     (list emacs-dash emacs-org emacs-spark))
    (home-page "https://github.com/dakrone/es-mode")
    (synopsis "Major mode for editing Elasticsearch queries")
    (description "@code{es-mode} includes highlighting, completion and
indentation support for Elasticsearch queries.  Also supported are
@code{es-mode} blocks in @code{org-mode}, for which the results of queries can
be processed through @code{jq}, or in the case of aggregations, can be
rendered in to a table.  In addition, there is an @code{es-command-center}
mode, which displays information about Elasticsearch clusters.")
    (license license:gpl3+)))

(define-public emacs-expand-region
  (package
    (name "emacs-expand-region")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magnars/expand-region.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mw1jlgdp17k56rq4g801z7y35h4infm9cy3mh8jw5wqqar5ifa6"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/magnars/expand-region.el")
    (synopsis "Increase selected region by semantic units")
    (description
     "Expand region increases the selected region by semantic units.  Just
keep pressing the key until it selects what you want.  There's also
@code{er/contract-region} if you expand too far.")
    (license license:gpl3+)))

(define-public emacs-explain-pause-mode
  (let ((commit "2356c8c3639cbeeb9751744dbe737267849b4b51")
        (revision "0"))
    (package
      (name "emacs-explain-pause-mode")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/lastquestion/explain-pause-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0frnfwqal9mrnrz6q4v7vcai26ahaw81894arff1yjw372pfgv7v"))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-buttercup))
      (arguments
       '(#:phases
         (modify-phases %standard-phases
           ;; This causes the byte-compilation before unit-tests to fail.
           (add-after 'unpack 'remove-error-on-warn
             (lambda _
               (substitute* "Makefile"
                 (("--eval '\\(setq byte-compile-error-on-warn t\\)'") "")))))
         ;; Don't run case-tests as they will fail to create sockets because
         ;; the path is too long
         #:test-command '("make" "byte-compile" "unit-tests")
         ;; Parallel testing will cause the tests to run before
         ;; byte-compilation is finished
         #:parallel-tests? #f))
      (home-page "https://github.com/lastquestion/explain-pause-mode")
      (synopsis "Top-like interface to determine why Emacs paused")
      (description
       "This package monitors Emacs function calls and records their execution
time.  This information can be reviewed to determine what is causing the user
interface to pause.")
      (license license:gpl3+))))

(define-public emacs-filladapt
  (package
    (name "emacs-filladapt")
    (version "2.12.2")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://elpa.gnu.org/packages/filladapt-"
               version ".el"))
        (sha256
          (base32
            "1cxyxfdjg1dsmn1jrl6b7xy03xr42fb6vyggh27s4dk417ils6yg"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/filladapt.html")
    (synopsis "Adaptive fill for Emacs")
    (description
     "This package provides functions which enhance the default behavior of
Emacs' Auto Fill mode and the commands @code{fill-paragraph},
@code{lisp-fill-paragraph}, @code{fill-region-as-paragraph}, and
@code{fill-region}.

The chief improvement is that the beginning of a line to be
filled is examined and, based on information gathered, an
appropriate value for fill-prefix is constructed.  Also the
boundaries of the current paragraph are located.  This occurs
only if the fill prefix is not already non-nil.

The net result of this is that blurbs of text that are offset
from left margin by asterisks, dashes, and/or spaces, numbered
examples, included text from USENET news articles, etc. are
generally filled correctly with no fuss.")
    (license license:gpl3+)))

(define-public emacs-fill-column-indicator
  (package
    (name "emacs-fill-column-indicator")
    (version "1.90")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alpaker/Fill-Column-Indicator")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0snjznxdwwfdgccdcvrnk467416r244r2r5qcm2sga8l0ha9gw9z"))))
    (build-system emacs-build-system)
    (home-page "https://www.emacswiki.org/emacs/FillColumnIndicator")
    (synopsis "Graphically indicate the fill column")
    (description
     "Fill-column-indicator graphically indicates the location of the fill
column by drawing a thin line down the length of the editing window.")
    (license license:gpl3+)))

(define-public emacs-greader
  (let ((commit "07266f027f9e3d4b690142f525b5bbde2cb4b19e")) ;version bump
    (package
      (name "emacs-greader")
      (version "0.12.7")
      (source
       (origin
         (uri (git-reference
                (url "https://gitlab.com/michelangelo-rodriguez/greader")
                (commit commit)))
         (method git-fetch)
         (file-name (git-file-name name version))
         (sha256
          (base32 "1qg9a3msnh95rj4jmih2j48r8dsisiqd8nlrj1qf3mfl4xr1kb7c"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f))              ;no tests
      (inputs (list emacs-compat espeak-ng))
      (home-page "https://gitlab.com/michelangelo-rodriguez/greader")
      (synopsis
       "Gnamù Reader, or Greader, sends buffer contents to a speech engine")
      (description
       "Greader is a module that sends any Emacs buffer to a @acronym{TTS,
Text To Speech} engine, such as Espeak-NG or Speech Dispatcher.

The mode supports timer reading, automatic scrolling of buffers in modes like
Info mode, and repeating reading of regions or the whole buffer.  It also
includes a feature to facilitate the compilation of Espeak-NG
pronunciations.")
      (license license:gpl3+))))

(define-public emacs-grep-a-lot
  (package
    (name "emacs-grep-a-lot")
    (version "1.0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ZungBang/emacs-grep-a-lot")
             (commit "9f9f645b9e308a0d887b66864ff97d0fca1ba4ad")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1f8262mrlinzgnn4m49hbj1hm3c1mvzza24py4b37sasn49546lw"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ZungBang/emacs-grep-a-lot")
    (synopsis "Enables multiple grep buffers in Emacs")
    (description
     "This Emacs package allows managing multiple grep buffers.")
    (license license:gpl3+)))

(define-public emacs-fd
  (package
    (name "emacs-fd")
    (version "0.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/yqrashawn/fd-dired")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1fas0fpvym2lyzybwm44gly9jz6a2fpp72yxnwfbqqjkfgk9910y"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/yqrashawn/fd-dired")
    (synopsis "Dired-mode interface for fd result")
    (description "This package provides a dired-mode interface for fd's
result.")
    (license license:gpl3+)))

(define-public emacs-ripgrep
  (package
    (name "emacs-ripgrep")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nlamirault/ripgrep.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1a5rdpmvsgsjlc9sywism9pq7jd6n9qbcdsvpbfkq1npwhpifkbj"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "ert-runner")
           #:phases
           #~(modify-phases %standard-phases
               ;; The repository contains both ripgrep and projectile-ripgrep
               ;; packages. The latter has been merged into projectile itself.
               (add-after 'unpack 'delete-projectile-ripgrep
                 (lambda _
                   (delete-file "projectile-ripgrep.el"))))))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs (list ripgrep))
    (home-page "https://github.com/nlamirault/ripgrep.el")
    (synopsis "Search using ripgrep from inside Emacs")
    (description "@code{ripgrep} is an Emacs search package based on the
@command{ripgrep} command line tool.")
    (license license:gpl2+)))

(define-public emacs-rg
  (package
    (name "emacs-rg")
    (version "2.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dajva/rg.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19vczsw4f36gn0n7gfmq5j919m813rr9s4vg8kjh20ysnl04qqxl"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "ert-runner" "--pattern" "rg-unit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'remove-rg-path
            ;; Remove the path to ripgrep so that it works on remote systems.
            (lambda _
              (let ((file "rg.el"))
                (make-file-writable file)
                (emacs-substitute-sexps file
                  ("(defcustom rg-executable" "rg")))))
          (add-before 'check 'skip-failing-tests
            (lambda _
              (substitute* (list "test/rg-isearch.el-test.el"
                                 "test/rg-menu.el-test.el")
                (("\\(ert-deftest rg-unit/isearch-project.*" all)
                 (string-append all " (skip-unless nil)"))
                (("\\(ert-deftest rg-unit/menu-define-search.*" all)
                 (string-append all " (skip-unless nil)"))
                (("\\(ert-deftest rg-unit/menu-transient-insert.*" all)
                 (string-append all " (skip-unless nil)"))))))))
    (propagated-inputs
     (list emacs-s emacs-wgrep ripgrep))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://rgel.readthedocs.io/en/latest/")
    (synopsis "Search tool based on @code{ripgrep}")
    (description
     "@code{rg} is an Emacs search package based on the @code{ripgrep} command
line tool.  It allows one to interactively search based on the editing context
then refine or modify the search results.")
    (license license:gpl3+)))

(define-public emacs-inf-ruby
  (package
    (name "emacs-inf-ruby")
    (version "2.9.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nonsequitur/inf-ruby")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ah4hfy17x4ikrg3q555q7qfmz021wmfm5v11l1id3aqfqira599"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nonsequitur/inf-ruby")
    (synopsis "Provides a REPL buffer connected to a Ruby subprocess in Emacs")
    (description
     "@code{inf-ruby} provides a Read Eval Print Loop (REPL) buffer, allowing
for easy interaction with a Ruby subprocess.  Features include support for
detecting specific uses of Ruby, e.g., when using Rails, and using an
appropriate console.

If you are using Guix shell with @file{manifest.scm}, the
@code{inf-ruby-wrapper-command} customization variable could be helpful.")
    (license license:gpl3+)))

(define-public emacs-chruby
  (let ((version "1.0")
        (commit "42bc6d521f832eca8e2ba210f30d03ad5529788f")
        (revision "0"))
    (package
      (name "emacs-chruby")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/plexus/chruby.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256 (base32 "06pvjw40qk017py9km26vjrh90acycnkr5r04nxf664qqkjlg2mc"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/plexus/chruby.el")
      (synopsis "Emacs support for the Chruby version switcher for Ruby")
      (description "This package lets you switch Ruby versions using chruby.")
      (license license:gpl3+))))

(define-deprecated-package emacs-chruby-el
  emacs-chruby)

;; Package has no release.  Version is extracted from "Version:" keyword in
;; main file.
(define-public emacs-zeno-theme
  (let ((commit "70fa7b7442f24ea25eab538b5a22da690745fef5")
        (revision "0"))
    (package
      (name "emacs-zeno-theme")
      (version (git-version "1.0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/zenobht/zeno-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "10v6yf9c5qdsxrp6rk1n1xkv4byyfkinsikskdb2apjg05cx2273"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/zenobht/zeno-theme")
      (synopsis "Dark theme using different shades of blue for Emacs")
      (description
       "This package provides a dark theme using different shades of blue for
Emacs, inspired by @code{Dracula} theme.")
      (license license:gpl3+))))

(define-public emacs-zig-mode
  (let ((commit "f0b4a487530146f99230f4a5ff67e8d56c8f3f80")
        (revision "2"))
    (package
      (name "emacs-zig-mode")
      (version (git-version "0.0.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ziglang/zig-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1cm4wvddvqyjhlp7wngls1lapsiq1n14qgi1ygiq3w2vryg96s1v"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:emacs emacs
        #:test-command #~(list "emacs" "--batch"
                               "-l" "zig-mode.el"
                               "-l" "test/zig-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs (list emacs-reformatter))
      (home-page "https://github.com/ziglang/zig-mode/")
      (synopsis "Zig mode for Emacs")
      (description
       "This package provides syntax highlighting and automatic indentation
for the Zig programming language in Emacs.")
      (license license:gpl3+))))

(define-public emacs-zk
  (package
    (name "emacs-zk")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/localauthor/zk/")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0449zsahyzvjlhv27lkj33ybnq86j47paww779zd0qhq550hdnjs"))))
    (arguments
     (list
      #:tests? #f ; There are no tests.
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (substitute* "zk.el"
                (("\"grep")
                 (string-append
                  "\""
                  (search-input-file inputs "/bin/grep")))
                (("\"egrep")
                 (string-append
                  "\""
                  (search-input-file inputs "/bin/egrep")))))))))
    (propagated-inputs (list emacs-citar emacs-link-hint))
    (inputs (list grep))
    (build-system emacs-build-system)
    (home-page "https://github.com/localauthor/zk/")
    (synopsis "Zettelkasten-style linked notes for Emacs")
    (description
     "Emacs packages for working with Zettelkasten-style linked notes.")
    (license license:gpl3+)))

(define-public emacs-erc
  (package
    (name "emacs-erc")
    (version "5.6.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/erc-" version ".tar"))
       (sha256
        (base32 "13dzip6xhj0mf8hs8wk08pfxny5gwpbzfsqkmz146xvl2d8m621x"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://www.gnu.org/software/emacs/erc.html")
    (synopsis "An Emacs Internet Relay Chat client")
    (description
     "ERC is a powerful, modular, and extensible IRC client for Emacs.")
    (license license:gpl3+)))

(define-public emacs-znc
  (package
    (name "emacs-znc")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sshirokov/ZNC.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ran86ycnays9s23wk3iczqqgnpbyx0lijiarx65am3jc1yzg5ia"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sshirokov/ZNC.el")
    (synopsis "Make ERC and ZNC get along better")
    (description
     "This is a thin wrapper around @code{erc} that enables one to use the ZNC
IRC bouncer with ERC.")
    (license license:expat)))

(define-public emacs-erc-status-sidebar
  (let ((commit "ea4189a1dbfe60117359c36e681ad7c389e2968c")
        (revision "1"))
    (package
      (name "emacs-erc-status-sidebar")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/drewbarbs/erc-status-sidebar")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1hwlhzgx03z8891sblz56zdp8zj0izh72kxykgcnz5rrkyc3vfi3"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/drewbarbs/erc-status-sidebar")
      (synopsis "Hexchat-like activity overview for ERC channels")
      (description
       "This package provides a Hexchat-like status bar for joined channels in
ERC, an Emacs client for IRC (Internet Relay Chat).  It relies on the
@code{erc-track} module, and displays all the same information
@code{erc-track} does in the mode line, but in an alternative format.")
      (license license:gpl3+))))

(define-public emacs-paren-face
  (package
    (name "emacs-paren-face")
    (version "1.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/paren-face")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04b4znak3qzy482byyv4z6i8nnvbg6d7y2jwmicgjpn53qspzsr7"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/tarsius/paren-face")
    (synopsis "Face for parentheses in Lisp modes")
    (description
     "This library defines a face named @code{parenthesis} used just for
parentheses.  The intended purpose of this face is to make parentheses less
visible in Lisp code by dimming them.  Lispers probably don't need to be
constantly made aware of the existence of the parentheses.  Dimming them might
be even more useful for people new to Lisp who have not yet learned to
subconsciously blend out the parentheses.")
    (license license:gpl3+)))

(define-public emacs-page-break-lines
  (package
    (name "emacs-page-break-lines")
    (version "0.15")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/page-break-lines")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "11b9mxxly3jsiha1znprkbfsgcxppjr2a6qza1xb3pysk3k8szha"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/purcell/page-break-lines")
    (synopsis "Display page breaks as tidy horizontal lines")
    (description
     "This library provides a global mode which displays form feed characters
as horizontal rules.")
    (license license:gpl3+)))

(define-public emacs-simple-httpd
  (package
    (name "emacs-simple-httpd")
    (version "1.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skeeto/emacs-web-server")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0dpn92rg813c4pq7a1vzj3znyxzp2lmvxqz6pzcqi0l2xn5r3wvb"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/skeeto/emacs-web-server")
    (synopsis "HTTP server in pure Emacs Lisp")
    (description
     "This package provides a simple HTTP server written in Emacs Lisp to
serve files and directory listings.")
    (license license:unlicense)))

(define-public emacs-skewer-mode
  (package
    (name "emacs-skewer-mode")
    (version "1.8.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skeeto/skewer-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ha7jl7776pk1bki5zj2q0jy66450mn8xr3aqjc0m9kj3gc9qxgw"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-simple-httpd emacs-js2-mode))
    (arguments '(#:tests? #f            ; no tests
                 #:include '("\\.el$" "\\.js$" "\\.html$")))
    (home-page "https://github.com/skeeto/skewer-mode")
    (synopsis "Live web development in Emacs")
    (description
     "Skewer-mode provides live interaction with JavaScript, CSS, and HTML in
a web browser.  Expressions are sent on-the-fly from an editing buffer to be
evaluated in the browser, just like Emacs does with an inferior Lisp process
in Lisp modes.")
    (license license:unlicense)))

(define-public emacs-litable
  (let ((commit "b0278f3f8dcff424bfbdfdefb545b1fbff33206f"))
    (package
      (name "emacs-litable")
      (version (git-version "0.1" "0" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/Fuco1/litable")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0bny40hv9a024n01clxns351cs4j4ifhgcc7m4743xncqf612p7g"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/Fuco1/litable/")
      (synopsis "Dynamic evaluation replacement with Emacs")
      (description "This package provides dynamic evaluation in Emacs.")
      (license license:gpl3+))))

(define-public emacs-literate-elisp
  (package
    (name "emacs-literate-elisp")
    (version "0.8")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jingtaozf/literate-elisp")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32 "0i9468rh61l4xq918fgwk6li93lpm6zbn0lkpxr7pbvkgrl5xsr6"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/jingtaozf/literate-elisp/tags")
    (synopsis "Load Emacs Lisp code blocks from Org files")
    (description
     "Literate-Elisp is an Emacs lisp library to provide an easy way to use
literal programming in Emacs lisp.  It extends the Emacs load mechanism so
Emacs can load Org files as Lisp source files directly.")
    (license license:gpl3+)))

(define-public emacs-calc-currency
  (let ((commit "7021d892ef38b01b875082aba4bae2517ce47ae6")
        (revision "0"))
    (package
      (name "emacs-calc-currency")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jws85/calc-currency")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0y4m0hasg4ji6zfis3088hq90pm9998lnnh8yg9g8yqqaqpfizp8"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-L" "."
                               "-l" "test/calc-currency-init.el"
                               "-l" "test/calc-currency-ecb-test.el"
                               "-l" "test/calc-currency-oxr-test.el"
                               ;; test/calc-currency-utils-test.el fails
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs (list emacs-f))
      (home-page "https://github.com/jws85/calc-currency")
      (synopsis "Add currency units to Emacs Calc")
      (description "This package adds custom units to the units table in Emacs
Calc by fetching exchange rates backends.")
      (license license:gpl3+))))

(define-public emacs-literate-calc-mode
  (let ((commit "ba7d22140a165b0fdd900a8d04916115ca6ab8ff")
        (revision "2"))
    (package
      (name "emacs-literate-calc-mode")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sulami/literate-calc-mode.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1bdybw44pmhfpikdv1kg2sx88546xyncks5a4b2s0ak4p66r82k3"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-s))
      (home-page "https://github.com/sulami/literate-calc-mode.el")
      (synopsis "Literate programming for Emacs Calc")
      (description
       "This library provides literate programming for Calc.  There is both
a major and a minor mode.  The major mode does some basic syntax highlighting,
while the minor mode only evaluates all Calc statements while typing.  In
particular, the minor mode works quite well with Org or Markdown modes, or
other markup language major modes.")
      (license license:gpl3+))))

(define-public emacs-standard-dirs
  (package
    (name "emacs-standard-dirs")
    (version "2.0.0")
    (home-page "https://github.com/lafrenierejm/standard-dirs.el")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0r814qcrhvx4qlx4sdzwdmrhiryslqclx0bnpp0qcrbx6g8qfl25"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-f emacs-s))
    (synopsis "Platform-specific paths for config, cache, and other data")
    (description
     "This package provides platform-specific paths for reading and writing
configuration, cache, and other data.")
    (license license:gpl3+)))

(define-public emacs-standard-themes
  (package
    (name "emacs-standard-themes")
    (version "2.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/standard-themes-"
                           version ".tar"))
       (sha256
        (base32 "0qdld75vcfhsn2l0xips52vrlp5q7ss3973hd722h2gp1wddn5f7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/protesilaos/standard-themes")
    (synopsis "Like the default Emacs theme but more consistent")
    (description
     "The standard-themes are a pair of light and dark themes for GNU Emacs.
They emulate the out-of-the-box looks of Emacs (which technically do
@emph{not} constitute a theme) while bringing to them thematic consistency,
customizability, and extensibility.")
    (license license:gpl3+)))

(define-public emacs-string-inflection
  (package
    (name "emacs-string-inflection")
    (version "1.0.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/akicho8/string-inflection")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0wskrp3v5gi3b3s9471ijkdncnfd888qd50c72rv2p8846174paj"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/akicho8/string-inflection")
    (synopsis "Convert symbol names between different naming conventions")
    (description
     "This Emacs package provides convenient methods for manipulating the
naming style of a symbol.  It supports different naming conventions such as:

@enumerate
@item camel case
@item Pascal case
@item all upper case
@item lower case separated by underscore
@item etc...
@end enumerate\n")
    (license license:gpl2+)))

(define-public emacs-stripe-buffer
  (package
    (name "emacs-stripe-buffer")
    (version "0.2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sabof/stripe-buffer")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "035ym1c1vzg6hjsnd258z4dkrfc11lj4c0y4gpgybhk54dq3w9dk"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sabof/stripe-buffer/")
    (synopsis "Add stripes to list buffers")
    (description
     "This Emacs package adds faces to add stripes to list buffers and org
tables.")
    (license license:gpl2+)))

(define-public emacs-org-beautify-theme
  ;; Latest release (0.4) is not tagged, use commit hash.
  (let ((commit "df6a1114fda313e1689363e196c8284fbe2a2738")
        (revision "0"))
    (package
      (name "emacs-org-beautify-theme")
      (version "0.4")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jonnay/org-beautify-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1lkz7736swimad12khwbbqc4gxjydgr1k45p4mx03s25pv1w920y"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jonnay/org-beautify-theme")
      (synopsis "Theme to make Org mode look more beautiful")
      (description
       "The theme adds padding between headings, increases the size of titles,
strike through completed TODO headings, changes Org blocks, changes Org check
boxes, and more.")
      (license license:gpl3+))))

(define-public emacs-org-books
  (package
    (name "emacs-org-books")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lepisma/org-books")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1sgckvpjdaig9r2clcvs6ckgf2kx7amikkpq26y30jbnfnbskf0v"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash
           emacs-enlive
           emacs-helm
           emacs-helm-org
           emacs-org
           emacs-s))
    (home-page "https://github.com/lepisma/org-books")
    (synopsis "Reading list management with Org mode and Helm")
    (description
     "Org Books is a tool for managing reading lists in an Org mode file.")
    (license license:gpl3+)))

(define-public emacs-org-chef
  ;; Upstream does not tag version bumps.  Version is extracted from "Version"
  ;; keyword in main file.
  (let ((commit "87e9a6c4844ff32f47c8d1108ec0f087a3148a8e")
        (revision "0"))
    (package
      (name "emacs-org-chef")
      (version (git-version "0.1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Chobbes/org-chef")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0xdfaf3shl3iij7nnshb5ryccqq70rpk0zm0d3fdwdbfa8rf7fkp"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-org))
      (home-page "https://github.com/Chobbes/org-chef")
      (synopsis "Cookbook and recipe management with Emacs Org mode")
      (description
       "Org Chef is a package for managing recipes in Org mode.  One of the
main features is that it can automatically extract recipes from websites like
allrecipes.com.")
      (license license:expat))))

(define-public emacs-org-inline-pdf
  (package
    (name "emacs-org-inline-pdf")
    (version "0.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/shg/org-inline-pdf.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "04rfv4qsyhc8w23hbzw8k5f292lafkgf1n0gbbkgc93gifx91s4f"))))
    (build-system emacs-build-system)
    (inputs
     (list pdf2svg))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-exec-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((pdf2svg (search-input-file inputs "/bin/pdf2svg")))
                (substitute* "org-inline-pdf.el"
                  (("\"pdf2svg\"") (string-append "\"" pdf2svg "\"")))))))))
    (home-page "https://github.com/shg/org-inline-pdf.el")
    (synopsis "Inline PDF previewing for Org")
    (description "This package provides a minor mode that enables
inline PDF preview in Org buffers by using @command{pdf2svg}.")
    (license license:gpl3+)))

(define-public emacs-org-rainbow-tags
  (let ((commit "dfe36047bc9646b621452f3e2e97170e99e2b43f")
        (revision "1"))
    (package
      (name "emacs-org-rainbow-tags")
      (version (git-version "0.1-pre" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/KaratasFurkan/org-rainbow-tags")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1rhgvbhsbm999l5kg19747dxwscd5h5sl330d6a422f0dxvvxqrq"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/KaratasFurkan/org-rainbow-tags")
      (synopsis "Colorize Org tags automatically")
      (description
       "This package adds random colors to your Org tags.  In order to make
colors random but consistent between same tags, colors are generated from the
hash of the tag names.")
      (license license:gpl3+))))

(define-public emacs-comment-tags
  ;; Upstream didn't tag a working version.
  (let ((commit "7d914097f0a03484af71e621db533737fc692f58")
        (revision "1"))
    (package
      (name "emacs-comment-tags")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/vincekd/comment-tags.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0s86a7078arck9z4gzkp2hnxyklprl0zh5hsw7nkyyscjydly80i"))))
      (build-system emacs-build-system)
      (synopsis "Minor mode to show comments which have tags like TODO")
      (description "This package provides a minor mode to show all lines that
have a comment with a tag, for example listing them right next to each other.")
      (home-page "https://github.com/vincekd/comment-tags")
      (license license:gpl3+))))

(define-public emacs-org-rich-yank
  (package
    (name "emacs-org-rich-yank")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/unhammer/org-rich-yank")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0cajgkfcwqgqdqyqf01hxji28n27jmj9nf0w3rbyw6l5dffgch0n"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/unhammer/org-rich-yank")
    (synopsis "Surround source code pasted into Org with @code{#+BEGIN_SRC}
blocks")
    (description
     "This package provides a utility function for Org buffers that makes a
@code{_SRC} block with the appropriate language annotation for code that has
been copied from an Emacs major mode.")
    (license license:gpl2+)))

(define-public emacs-org-fancy-priorities
  (let ((commit "819bb993b71e7253cefef7047306ab4e0f9d0a86")
        (revision "1"))
    (package
      (name "emacs-org-fancy-priorities")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/harrybournis/org-fancy-priorities.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "13cyzlx0415i953prq6ch7r5iy23c1pz116bdxi5yqags4igh4wv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/harrybournis/org-fancy-priorities")
      (synopsis "Display org priorities as custom strings")
      (description
       "This package provides a minor mode that displays Org priorities as
custom strings.  This mode does not change your files in any way, it only
displays the priority part of a heading as your preferred string value.")
      (license license:expat))))

(define-public emacs-org-fragtog
  (package
    (name "emacs-org-fragtog")
    (version "0.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/io12/org-fragtog")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xag0pdphigk0ilrj2hacai3p6xgl27jji08aa1zlhq7p3rbay7m"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-org))
    (home-page "https://github.com/io12/org-fragtog")
    (synopsis "Toggle Org mode LaTeX fragments preview at cursor")
    (description
     "Org mode supports inline image previews of LaTeX fragments.  This
package automates this, so fragment previews are disabled for editing when
your cursor steps onto them, and re-enabled when the cursor leaves.")
    (license license:gpl3+)))

(define-public emacs-ob-erlang
  (let ((revision "1")
        (commit "a029c23902b4ad73b84f262a7fc5b98d87b63dfd"))
    (package
      (name "emacs-ob-erlang")
      (version (git-version "20210321" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/xfwduke/ob-erlang")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1dlb9qgmijff4giglwb358g5zzyjbnay0wkr5spks1bawvyxpiyl"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/xfwduke/ob-erlang/")
      (synopsis "Org-babel support for Erlang")
      (description "This package adds support for working with Erlang code
blocks with @code{org-babel} in @code{org-mode}.")
      (license license:gpl3+))))

(define-public emacs-ob-go
  (let ((commit "2067ed55f4c1d33a43cb3f6948609d240a8915f5")
        (revision "0"))
    (package
      (name "emacs-ob-go")
      (version (git-version "0.02" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/pope/ob-go")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "069w9dymiv97cvlpzabf193nyw174r38lz5j11x23x956ladvpbw"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch" "-L" "."
                               "--eval=(require 'ob-go)"
                               "-l" "test-ob-go.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:phases #~(modify-phases %standard-phases
                     (add-after 'unpack 'ert-number-tests
                       (lambda _
                         (ert-number-tests "test-ob-go.el"
                                           "ob-go/string-variables")
                         (ert-number-tests "test-ob-go.el"
                                           "ob-go/imports"))))))
      (home-page "https://github.com/pope/ob-go")
      (synopsis "Org Babel support for evaluating Go code")
      (description "@code{ob-go} enables Org Babel support for evaluating Go
code.  It was created based on the usage of @code{ob-C}.")
      (license license:gpl3+))))

(define-public emacs-ob-gptel
  (let ((commit "60e704a390d767a7d06c8d3845ba8786b75f7da3")
        (revision "2"))
    (package
      (name "emacs-ob-gptel")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/jwiegley/ob-gptel/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0l4abglx5q8ym2ii6my58001v98jhqd0c0jpvbk4dz2i3h9rsxqv"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (propagated-inputs
       (list emacs-gptel))
      (home-page "https://github.com/jwiegley/ob-gptel/")
      (synopsis "Org Babel support for evaluating @code{gptel} prompts.")
      (description "@code{ob-gptel} is a backend for Org Babel.  It provides
an alternative interface to evaluate @{gptel} prompts as Org mode blocks.")
      (license license:gpl3+))))

(define-public emacs-ob-restclient
  (let ((commit "1b021ce1c67c97fa1aa4d2c0816edb7add129e48"))
    (package
      (name "emacs-ob-restclient")
      (version (git-version "0.02" "3" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alf/ob-restclient.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1bcjj01q5n9w2cch6brbz8pzwnwsmdlgaa4sf5s97b9frmqb2ffg"))))
      (propagated-inputs
       (list emacs-restclient))
      (build-system emacs-build-system)
      (home-page "https://github.com/alf/ob-restclient.el")
      (synopsis "Org-babel functionality for @code{restclient-mode}")
      (description
       "This package integrates @code{restclient-mode} with Org.")
      (license license:gpl3+))))

(define-public emacs-org-now
  (let ((commit "8f6b277a73f1c66e58ccb4b7f40d406851befc91"))
    (package
      (name "emacs-org-now")
      (version (git-version "0.1-pre" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/org-now")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "117zzkryznznk6h4i1jqzdn888nl019xrgxm2gza0lndx8dxsg2c"))))
      (propagated-inputs
       (list emacs-dash))
      (build-system emacs-build-system)
      (home-page "https://github.com/alphapapa/org-now")
      (synopsis "Show current Org tasks in a sidebar")
      (description
       "This package provides commands to show Org headings in a sidebar
window while working on them.  After defining one heading as the \"now\"
heading, other headings can be refiled to it with one command, and back to
their original location with another.")
      (license license:gpl3+))))

(define-public emacs-orgmdb
  (package
    (name "emacs-orgmdb")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/isamert/orgmdb.el")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "09c3mslhnrqx6xy1js7zckrfc3pk5yvh020bj55845w8knlamjg0"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'configure
                 (lambda* (#:key inputs #:allow-other-keys)
                   (substitute* "orgmdb.el"
                     (("\"fd ")
                      (string-append "\""
                                     (search-input-file inputs "/bin/fd")
                                     " "))))))))
    (inputs
     (list fd))
    (propagated-inputs
     (list emacs-dash emacs-org emacs-s))
    (home-page "https://github.com/isamert/orgmdb.el")
    (synopsis "Emacs' Org mode watchlist manager and OMDb API client")
    (description "This package adds tools for managing your watchlist in Emacs'
Org mode and some functions for interacting with the OMDb API.")
    (license license:gpl3+)))

(define-public emacs-rich-minority
  (package
    (name "emacs-rich-minority")
    (version "1.0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Malabarba/rich-minority")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1kn7c9qr9ykj68iqffzzmjsr6aazwac8cxb7j960sjb282rq0yyj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/rich-minority")
    (synopsis "Clean-up and beautify the list of minor modes")
    (description
     "This Emacs package hides and/or highlights minor modes in the
mode-line.")
    (license license:gpl2+)))

(define-public emacs-robe
  (package
    (name "emacs-robe")
    (version "0.8.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dgutov/robe")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "14apmvbs89si3v5hsiz11dckp8fdfidm14lc090lswq7mgk7h79s"))))
    (build-system emacs-build-system)
    (arguments
     '(#:include (cons "^lib\\/" %default-include)
       #:test-command (list "make" "ert")))
    (propagated-inputs
     (list emacs-inf-ruby))
    (home-page "https://github.com/dgutov/robe")
    (synopsis "Ruby code assistance tool for Emacs")
    (description
     "Robe can provide information on loaded classes and modules in Ruby code,
as well as where methods are defined.  This allows the user to jump to method
definitions, modules and classes, display method documentation and provide
method and constant name completion.")
    (license license:gpl3+)))

(define-public emacs-robot-mode
  (package
    (name "emacs-robot-mode")
    (version "0.8.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kopoli/robot-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1a377lws4f0az2y1r3z2i3mghvg7a4094wkchvjvsl1nd6yxdxwa"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/kopoli/robot-mode")
    (synopsis "Emacs mode for Robot Framework")
    (description
     "This major mode facilitates editing Robot Framework source files with
features such as syntax highlighting, comments, finding keywords, completing
keywords and smart indentation.")
    (license license:gpl3+)))

(define-public emacs-robot-log
  (package
    (name "emacs-robot-log")
    (version "0.1.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.sr.ht/~apteryx/emacs-robot-log")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1l9yxryrhvylh2x17cczd8v8978w1nv8173d4l9hv0cr26kp5b68"))))
    (build-system emacs-build-system)
    (arguments
     ;; XXX: Tests are currently broken due to python-robotframework.
     (list #:tests? #f))
    (native-inputs (list python-robotframework))
    (home-page "https://sr.ht/~apteryx/emacs-robot-log/")
    (synopsis "Emacs major mode for viewing RobotFramework debug log files")
    (description "@code{robot-log} is an Emacs major mode that allows more
easily viewing and navigating RobotFramework debug log files.  It provides
syntax highlighting and convenient shortcuts to move from one keyword to the
next, or locate errors.")
    (license license:gpl3+)))

(define-public emacs-robots-txt-mode
  (package
    (name "emacs-robots-txt-mode")
    (version "0.0.9")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-php/robots-txt-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "07255pn80w4742sz2h9vbmfxxd8ps2kcn73p7m2bgy02kgbzw42b"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacs-php/robots-txt-mode")
    (synopsis "Syntax highlighting for @file{robots.txt} files")
    (description "This package provides an Emacs major mode for editing
@file{robots.txt} files.")
    (license license:gpl3+)))

(define-public emacs-roguel-ike
  (package
    (name "emacs-roguel-ike")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/stevenremot/roguel-ike")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "02yq2qy17gafkayzxfvf9nwm950cw54hlqgzc4mjb21al75rfyrn"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-popup))
    (arguments
     (list
      #:include #~(cons* "^roguel-ike/" "^roguel-ike-lib/" %default-include)
      #:tests? #t ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'build 'set-build-environment
            (lambda _
              (setenv "HOME" "/tmp"))))))
    (home-page "https://github.com/stevenremot/roguel-ike.git")
    (synopsis "Coffee-break roguelike for Emacs")
    (description
     "Roguel-ike is an attempt to develop a coffee-break roguelike for
Emacs.  The complete game would allow the player to create various characters
and to make them fulfill challenges like arena fight and short dungeon
explorations.")
    (license license:gpl3+)))

(define-public emacs-rspec
  (let ((commit "66ea7cc9699d6edc6115daa024818adbd85efc20")
        (revision "1"))
    (package
      (name "emacs-rspec")
      (version (git-version "1.11" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/pezra/rspec-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0b11s8r0pi7ah54km4yg4fqff8wkk409d25qnlwm1l94pdwjd1c8"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons "^snippets\\/rspec-mode\\/" %default-include)
         #:test-command '("make" "test")))
      (home-page "https://github.com/pezra/rspec-mode")
      (synopsis "Provides a rspec mode for working with RSpec")
      (description
       "The Emacs RSpec mode provides keybindings for Ruby source files, e.g. to
verify the spec associated with the current buffer, or entire project, as well
as moving between the spec files, and corresponding code files.

Also included are keybindings for spec files and Dired buffers, as well as
snippets for yasnippet.")
      (license license:gpl3+))))

(define-public emacs-vhdl-ext
  (package
    (name "emacs-vhdl-ext")
    (version "0.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/gmlarumbe/vhdl-ext/")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0agiamq7g8zm3blznykbr1kgr09rb133rd4mh9nfc0vfk8i5mabv"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f         ;the testing framework, test-hdl, requires network
      #:test-command #~(list "make")))
    (propagated-inputs
     (list emacs-ag
           emacs-async
           emacs-flycheck
           emacs-hydra
           emacs-lsp-mode
           emacs-ripgrep
           emacs-vhdl-ts-mode))
    (home-page "https://github.com/gmlarumbe/vhdl-ext/")
    (synopsis "Extensions to Emacs @code{vhdl-mode}")
    (description "This package provides additional features and utilities for
@code{vhdl-mode}, such as snippet selection via @code{hydra}, code navigation, code
formatting, and code folding.")
    (license license:gpl3+)))

(define-public emacs-vhdl-mode
  (package
    (name "emacs-vhdl-mode")
    (version "3.39.3")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://iis-people.ee.ethz.ch/~zimmi/emacs/vhdl-mode-"
                    version ".tar.gz"))
              (sha256
               (base32
                "1yvh4gyig8hgf5pahajjgsgp4jpzwgmlprwzsfybqxrcfza6f3yq"))))
    (build-system emacs-build-system)
    (home-page "https://iis-people.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html")
    (synopsis "Major mode for VHDL programming language")
    (description
     "This Emacs package provides a mode for the VHDL programming language.
It tracks the latest version of the same @code{vhdl-mode} package included
with Emacs.")
    (license license:gpl3+)))

(define-public emacs-vhdl-ts-mode
  (package
    (name "emacs-vhdl-ts-mode")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/gmlarumbe/vhdl-ts-mode/")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0x11sjiy3j43am0clwxsbx7b38pfsl74qgypkc3czs7dh1c5xyrx"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f         ;the testing framework, test-hdl, requires network
      #:test-command #~(list "make")))
    (propagated-inputs (list tree-sitter-vhdl))
    (home-page "https://github.com/gmlarumbe/vhdl-ts-mode/")
    (synopsis "VHDL Tree-sitter mode")
    (description
     "VHDL-ts-mode provides syntax highlighting, indentation, imenu,
which-func, navigation and basic beautify and completion features to navigate
and edit VHDL files.")
    (license license:gpl3+)))

(define-public emacs-typst-ts-mode
  (let ((commit "972dc69d6b8a3f8983f6b8000654f59c8a8d05ba")
        (revision "0"))
    ;; Releases are not tagged, so use commits that change the "Version:"
    ;; keyword in the main file.
    (package
      (name "emacs-typst-ts-mode")
      (version (git-version "0.12.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://codeberg.org/meow_king/typst-ts-mode")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "167kdgbxp8n721xnka803lzgwxrfx4h6m4m2ip0lnfxi2fv007zv"))
         (snippet #~(begin (delete-file "test/basic-syntax.pdf")))))
      (build-system emacs-build-system)
      (propagated-inputs (list tree-sitter-typst))
      ;; There is a 'test' directory, but it is for use during development.
      ;; There are no automated tests.
      (arguments (list #:tests? #f))
      (home-page "https://codeberg.org/meow_king/typst-ts-mode")
      (synopsis "Typst tree-sitter mode")
      (description
       "@code{typst-ts-mode} is a tree-sitter mode for the Typst typesetting and
markup language, providing automatic (re-)compilation, structural navigation,
symbol and documentation lookup, and more.")
      (license license:gpl3+))))

(define-public emacs-mode-line-bell
  (package
    (name "emacs-mode-line-bell")
    (version "0.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/purcell/mode-line-bell")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "13n3di05lgqfm4f8krn3p36yika5znhymp5vr2d747x54hqmgh7y"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; no tests
    (home-page "https://github.com/purcell/mode-line-bell")
    (synopsis "Flash the mode-line instead of ringing the bell")
    (description
     "This Emacs package provides a global minor mode @code{mode-line-bell-mode}
which sets @code{ring-bell-function} to a function that will briefly flash the
mode-line when the bell is rung.")
    (license license:gpl3+)))

(define-public emacs-mode-line-idle
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "1dc0115bd4864b8b8cc9cbaac75c03d764070873")
        (revision "0"))
    (package
      (name "emacs-mode-line-idle")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (file-name (git-file-name name version))
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-mode-line-idle")
               (commit commit)))
         (sha256
          (base32 "006ynxzakfc11lz9s915agdiiisnbfxiv9a7mj9g0890qh7isjvy"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/ideasman42/emacs-mode-line-idle")
      (synopsis "Simple delayed text evaluation for the mode-line")
      (description
       "Mode Line Idle provides a convenient way to defer text evaluation
which integrates into existing mode-line without requiring a minor mode or
configuration.")
      (license license:gpl3+))))

(define-public emacs-nyan-mode
  (package
    (name "emacs-nyan-mode")
    (version "1.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/TeMPOraL/nyan-mode/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0d0hdjliad8afz4br38gwidph9zhmm5s09y45n95kqlazq62jfsx"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "img/" "mus/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-sources
            (lambda* (#:key inputs #:allow-other-keys)
              (substitute* "nyan-mode.el"
                (("mplayer ")
                 (string-append (search-input-file inputs "bin/mplayer")
                                " "))))))))
    (inputs (list mplayer))
    (home-page "https://github.com/TeMPOraL/nyan-mode/")
    (synopsis "Nyan Cat as buffer position indicator")
    (description
     "Nyan mode is an analog indicator of your position in the buffer.  The cat
should go from left to right in your mode-line, as you move your point from 0%
to 100%.  You can click on the rainbow or the empty space to scroll backwards
and forwards and also animate it.")
    (license license:gpl3+)))

(define-public emacs-smart-mode-line
  (package
    (name "emacs-smart-mode-line")
    (version "2.14")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Malabarba/smart-mode-line")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1h5w5lrgrmhpaqwppg5msylh7z78mvwy9mm8xiiv8w4wxvncxxl2"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-rich-minority))
    (home-page "https://github.com/Malabarba/smart-mode-line")
    (synopsis "Color-coded smart mode-line")
    (description
     "Smart Mode Line is a mode-line theme for Emacs.  It aims to be easy to
read from small to large monitors by using colors, a prefix feature, and smart
truncation.")
    (license license:gpl2+)))

(define-public emacs-sqlite
  ;; XXX: There is no tagged commit.
  (let ((commit "dad42b8bbca4994be1871343dd18fd6528ee5797")
        (revision "0"))
    (package
      (name "emacs-sqlite")
      (build-system emacs-build-system)
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/cnngimenez/sqlite.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "06ln4vijl8kii3nzc5cscgsadx1fqgxksflijd3ain83bn8g4wrd"))))
      (home-page "https://gitlab.com/cnngimenez/sqlite.el")
      (synopsis "SQLite interface for Emacs Lisp")
      (description "Emacs SQLite is a simple SQLite interface for connecting
and retrieving information using the SQLite program through Elisp programming.
It is not intended as a user interface.")
      (license license:gpl3+))))

(define-public emacs-sqlite3-api
  (package
    (name "emacs-sqlite3-api")
    (version "0.18")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/pekingduck/emacs-sqlite3-api")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1d1r65ybcf5idbs8sv0l3dna4l1wy3jba9dvv1kkz7zj6qhr48fs"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test" "EMACS=emacs")
      #:modules '((guix build emacs-build-system)
                  (guix build emacs-utils)
                  (guix build utils))
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-module-load
            (lambda _
              (make-file-writable "sqlite3.el")
              (emacs-substitute-sexps "sqlite3.el"
                ("(require 'sqlite3-api nil t)"
                 `(module-load
                   ,(string-append #$output "/lib/sqlite3-api.so"))))))
          (add-before 'check 'build-emacs-module
            (lambda _
              ;; Remove code that fetches constants from the SQLite website
              ;; and the call to generate a timestamp.
              (invoke "sed" "--in-place" "3,4d;24,28d;31d" "tools/gen-consts.sh")
              ;; Remove filter logic from the script that generates the constants.
              (invoke "sed" "--in-place" "7,11d;18,22d" "tools/gen-consts.py")
              ;; Generate the consts.c file.
              (invoke "make" "--directory=tools")
              ;; Remove the SQLITE_STATIC and SQLITE_TRANSIENT
              ;; constants. They cause a compilation warning and would have
              ;; been removed by the original script.
              (invoke "sed" "--in-place" "/ifdef SQLITE_STATIC/,+2d" "consts.c")
              (invoke "sed" "--in-place" "/ifdef SQLITE_TRANSIENT/,+2d" "consts.c")
              ;; Compile the shared object file.
              (invoke "make" #$(string-append "CC=" (cc-for-target)))
              ;; Move the shared object file into /lib.
              (install-file "sqlite3-api.so"
                            (string-append #$output "/lib")))))))
    (native-inputs (list python sed))
    (inputs (list sqlite))
    (home-page "https://github.com/pekingduck/emacs-sqlite3-api")
    (synopsis "Dynamic module for Emacs to access the SQLite C interface")
    (description "This package provides a dynamic module for Emacs that allows
direct access to the SQLite C interface.  It only exposes a subset of the full
SQLite C interface, but should satisfy most user's needs.")
    (license license:gpl3+)))

(define-public emacs-pretty-speedbar
  (let ((commit "56dc9f114fcc55843e182cde1fc9d7a14c261c6a")
        (revision "0"))
    (package
      (name "emacs-pretty-speedbar")
      (version (git-version "0.2" revision commit))
      (source (origin
                (uri (git-reference
                      (url "https://github.com/kcyarn/pretty-speedbar")
                      (commit commit)))
                (method git-fetch)
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1hz67jhvg9n9d07lil6zqciqhh512k0fv54dl605p7vi704ma2ir"))))
      (build-system emacs-build-system)
      (propagated-inputs (list font-awesome))
      (home-page "https://github.com/kcyarn/pretty-speedbar")
      (synopsis "SVG icons for the Emacs Speedbar")
      (description
       "This package generates and implements appealing SVG icons for the
Emacs Speedbar.  By default, it generates icons from the Font Awesome fontset.
However, alternative fontsets may also be used, and the color of the icons may
be customized.")
      (license license:gpl3+))))

(define-public emacs-sr-speedbar
  (let ((commit "77a83fb50f763a465c021eca7343243f465b4a47")
        (revision "0"))
    (package
      (name "emacs-sr-speedbar")
      (version (git-version "20161025" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/sr-speedbar")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0sd12555hk7z721y00kv3crdybvcn1i08wmd148z5imayzibj153"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/SrSpeedbar")
      (synopsis "Same frame Emacs @code{speedbar}")
      (description
       "This Emacs package allows you to show @code{M-x speedbar} in the
same frame (in an extra window).  You can customize the initial width of
the speedbar window.")
      (license license:gpl3+))))

(define-public emacs-shell-maker
  (package
    (name "emacs-shell-maker")
    (version "0.83.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/xenodium/shell-maker")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "10was1mbgwrpvqpm0kj6b5q5gcbj9l03an5nnd7z6vz902wcb2rm"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://github.com/xenodium/shell-maker")
    (synopsis "Create Emacs shells")
    (description "Shell Maker is a convenience wrapper around Comint mode.")
    (license license:gpl3+)))

(define-public emacs-shell-switcher
  (package
    (name "emacs-shell-switcher")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DamienCassou/shell-switcher")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0py95c6i7bffidwkwld1j1h2isyq7psna2kz81jigzz0wi885pjr"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-L" "."
                             "-l" "test/rswitcher-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/DamienCassou/shell-switcher")
    (synopsis "Provide fast switching between shell buffers")
    (description
     "This package provides commands to quickly switch between shell buffers.")
    (license license:gpl3+)))

(define-public emacs-shx
  ;; XXX: Some tests fails in the latest stable release.
  (let ((commit "b99d16f36bc278d668d8428c4bc9af77064c336a")
        (revision "1"))
    (package
      (name "emacs-shx")
      (version (git-version "1.5.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/riscy/shx-for-emacs")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1wkqnc5n8if8fsh7f3bdr5nzn6dbj1nzdxlmnz8nflmx4g32fp6v"))
                (patches
                 (search-patches "emacs-shx-byte-compilation-test.patch"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "--batch" "--quiet" "--script" "test/script.el")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'appease-checkdoc
              (lambda _
                (substitute* "shx.el"
                  (("Toggle shx-mode on") "Toggle `shx-mode' on")))))))
      (home-page "https://github.com/riscy/shx-for-emacs")
      (synopsis "Extras for the Comint mode shell")
      (description
       "This package extends Comint mode: it parses markup in the output
stream, enabling plots and graphics to be embedded, and adds command-line
functions which plug into Emacs (e.g., use @code{:e <filename>} to edit
a file).")
      (license license:gpl3+))))

(define-public emacs-names
  (let ((commit "d8baba5360e5253938a25d3e005455b6d2d86971")
        (version "20151201.0")
        (revision "8"))
    (package
      (name "emacs-names")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Malabarba/names")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "11wyha2q8y7bzqq3jrzix8n97ywvsibvddrahqcps1a1yqk4hzfz"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f      ; XXX: "Package cl is deprecated"
                       #:test-command #~(list "make" "test")))
      (home-page "https://github.com/Malabarba/names/")
      (synopsis "Namespace implementation for Emacs Lisp")
      (description
       "This package provides a macro that writes your namespaces for you.")
      (license license:gpl3+))))

(define-public emacs-nameless
  (package
    (name "emacs-nameless")
    (version "1.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Malabarba/Nameless")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "107q1rximjnag9r9vgwh0iv687i3rsscbdnjc46f8l16j6vi4n7d"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/nameless")
    (synopsis "Hide package namespace in your Emacs-lisp code")
    (description
     "This package provides a @code{nameless-mode} minor mode in which the
package namespace prefix is ​​hidden by a colon.")
    (license license:gpl2+)))

(define-public emacs-nano-theme
  ;; No named branches.
  (let ((commit "ffe414c8af9c673caf8b8b05ba89a229cb9ad48b")
        (revision "0"))
    (package
      (name "emacs-nano-theme")
      (version (git-version "0.3.4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/rougier/nano-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0wi5snsakpag7lcdndz10x5fxb0yrnignqdx3v4fm5drbk0d7hkr"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/rougier/nano-theme")
      (synopsis "GNU Emacs / N Λ N O Theme")
      (description
       "Nano is a consistent theme for GNU Emacs which is based on Material
colors and the dark theme is based on Nord colors.")
      (license license:gpl3+))))

(define-public emacs-evil-leader
  (package
    (name "emacs-evil-leader")
    (version "0.4.3")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/cofi/evil-leader")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1k2zinchs0jjllp8zkpggckyy63dkyi5yig3p46vh4w45jdzysk5"))))
    (inputs
     (list emacs-evil))
    (build-system emacs-build-system)
    (home-page "https://github.com/cofi/evil-leader")
    (synopsis "Implement <leader> feature from Vim")
    (description
     "Evil Leader provides the @code{<leader>} feature from Vim that provides
an easy way to bind keys under a configurable prefix key.")
    (license license:gpl3+)))

(define-public emacs-evil-tex
  (package
    (name "emacs-evil-tex")
    (version "1.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/iyefrat/evil-tex")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1wrx8ihimn1sx3vzzfppcwv0yfh3x95jrkxqvzj0ykckipm3zk0b"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-before 'build 'set-home
           (lambda _ (setenv "HOME" "/tmp"))))))
    (propagated-inputs
     (list emacs-auctex emacs-evil))
    (home-page "https://github.com/iyefrat/evil-tex")
    (synopsis "Evil oriented additions for editing LaTeX")
    (description "This package is a toolbox for LaTeX editing with Evil.  It
provides many text objects fully utilizing @code{evil-surround}, some useful
movements, and keymaps for quickly entering environments or
@code{cdlatex}-like accents.")
    (license license:gpl3+)))

(define-public emacs-evil-textobj-syntax
  (let ((commit "2d9ba8c75c754b409aea7469f46a5cfa52a872f3")
        (version "0")
        (revision "1"))
    (package
      (name "emacs-evil-textobj-syntax")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/laishulu/evil-textobj-syntax/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "031p5i3274dazp7rz6m5y38shfgszm1clmkcf58qfqlvy978ammc"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil emacs-names))
      (home-page "https://github.com/laishulu/evil-textobj-syntax/")
      (synopsis "Text objects based on syntax highlighting")
      (description
       "This package provides text objects for @code{evil-mode} with
boundaries defined by syntax highlighting.")
      (license license:gpl3+))))

(define-public emacs-flycheck-flow
  (let ((commit "9e8e52cfc98af6a23fd906f9cb5d5d470d8cf82d")
        (version "1.1")
        (revision "1"))
    (package
      (name "emacs-flycheck-flow")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-flow")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "14qldlisbmxzammr500gyha2hiv2xgyzfc6mysqii06kbcqn1ik1"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-flycheck))
      (home-page "https://github.com/lbolla/emacs-flycheck-flow")
      (synopsis "Flow support for @code{flycheck-mode}")
      (description
       "This package allows @code{flycheck-mode} to provide syntax-checking
for Flow files.")
      (license license:gpl3+))))

(define-public emacs-flycheck-grammalecte
  (package
    (name "emacs-flycheck-grammalecte")
    (version "2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.umaneti.net/flycheck-grammalecte/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bv6g3y39ifcyxynmwk619hkfl643s3pa4qrmy7m440dndfqjzxf"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "\\.py$" %default-include)
      #:emacs emacs-no-x                ;need libxml support
      #:tests? #f  ; Tests require a tty.
      #:test-command
      #~(list "emacs" "-l" "test-home/classic.el" "example.org")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'specify-python-location
            ;; Hard-code python3 executable location in the library.
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((python3 (search-input-file inputs "/bin/python3")))
                (substitute* '("flycheck-grammalecte.el" "grammalecte.el")
                  (("\"python3") (string-append "\"" python3)))
                (substitute* '("conjugueur.py" "flycheck_grammalecte.py")
                  (("/usr/bin/env python3?") python3)))))
          (add-after 'unpack 'specify-grammalecte-location
            ;; Use our own Grammalecte.
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "grammalecte.el")
              (emacs-substitute-variables "grammalecte.el"
                ("grammalecte-python-package-directory"
                 (search-input-directory
                  inputs
                  (string-append "lib/python"
                                 #$(version-major+minor (package-version python))
                                 "/site-packages/grammalecte"))))))
          (add-after 'unpack 'do-not-phone-home
            ;; Do not check for Grammalecte updates, ever.
            (lambda _
              (make-file-writable "grammalecte.el")
              (emacs-substitute-variables "grammalecte.el"
                ("grammalecte-check-upstream-version-delay" 0)))))))
    (inputs
     (list grammalecte python))
    (propagated-inputs
     (list emacs-flycheck emacs-pkg-info))
    (home-page "https://git.umaneti.net/flycheck-grammalecte/")
    (synopsis "Integrate Grammalecte with Flycheck")
    (description
     "Integrate the French grammar and typography checker Grammalecte with
Flycheck to automatically look for mistakes in your writings.  It also
provides an easy way to find synonyms and antonyms for a given word (to avoid
repetitions for example).")
    (license license:gpl3+)))

(define-public emacs-flycheck-guile
  (package
    (name "emacs-flycheck-guile")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/flatwhatson/flycheck-guile")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18rkkc7zdcdqp8zlpz6n4zhqky0svacf03arqw0b1whb62p44j9r"))))
    (propagated-inputs
     (list emacs-flycheck emacs-geiser emacs-geiser-guile))
    (build-system emacs-build-system)
    (home-page "https://github.com/flatwhatson/flycheck-guile")
    (synopsis "GNU Guile support for Flycheck")
    (description
     "This package provides a Flycheck checker for GNU Guile using @code{guild
compile}.")
    (license license:gpl3+)))

(define-public emacs-flycheck-ledger
  (package
    (name "emacs-flycheck-ledger")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/flycheck-ledger")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1djrj3is0dzrl2703bw7bclf33dp4xqmy144q7xj5pvpb9v3kf50"))))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda _
              (let ((ledger #$(this-package-input "ledger")))
                ;; Specify the absolute executable location of ledger.
                (substitute* "flycheck-ledger.el"
                  (("\"ledger\"") (string-append "\"" ledger "\"")))))))))
    (inputs (list ledger))
    (propagated-inputs
     (list emacs-flycheck))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/flycheck-ledger")
    (synopsis "Ledger support for Flycheck")
    (description
     "This Flycheck checker uses the output of @code{ledger balance} on the
current file to find errors such as unbalanced transactions and syntax
errors.")
    (license license:gpl3+)))

(define-public emacs-flycheck-rust
  (package
    (name "emacs-flycheck-rust")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/flycheck/flycheck-rust")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1fh6j5w2387nh2fwwjphkhq17cgj5m2q5k0fhidvgc2w65lzbr1r"))))
    (propagated-inputs
     (list emacs-dash emacs-flycheck emacs-let-alist))
    (native-inputs
     (list emacs-buttercup
           rust-bootstrap-1.54
           `(,rust-bootstrap-1.54 "cargo")))
    (build-system emacs-build-system)
    (home-page "https://github.com/flycheck/flycheck-rust")
    (synopsis "Rust/Cargo support for Flycheck")
    (description
     "This Flycheck extension configures Flycheck automatically for
the current Cargo project.")
    (license license:gpl3+)))

(define-public emacs-flycheck-deno
  (package
    (name "emacs-flycheck-deno")
    (version "0.1.0")
    (source
     (origin
      (method git-fetch)
      (uri
       (git-reference
        (url "https://github.com/flycheck/flycheck-deno")
        (commit version)))
      (file-name (git-file-name name version))
      (sha256
       (base32 "1vvhzidnpzf25z5qn85zx7cpwaavd22vsds4q9y5mpmf8hi526l6"))))
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-flycheck))
    (build-system emacs-build-system)
    (home-page "https://github.com/flycheck/flycheck-deno")
    (synopsis "Deno support for Flycheck")
    (description
     "This Flycheck extension configures Flycheck automatically for
  the current Deno project.")
    (license license:gpl3+)))

(define-public emacs-flycheck-package
  (package
    (name "emacs-flycheck-package")
    (version "0.14")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/flycheck-package")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "00py39n1383761wq6wp194pvyk94ydqdbxj9kl64g9jnipkp7849"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-flycheck emacs-package-lint))
    (home-page "https://github.com/purcell/flycheck-package")
    (synopsis "Flycheck checker for elisp package metadata")
    (description
     "This library provides a flycheck checker for the metadata in Emacs Lisp
files which are intended to be packages.")
    (license license:gpl3+)))

(define-public emacs-flymake-proselint
  (let ((commit "9c68ee881f18f554f0ab5bbf5bee1a4b753d792b"))
    (package
      (name "emacs-flymake-proselint")
      (version "0.3.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.sr.ht/~manuel-uberti/flymake-proselint")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1n8i17il2nfazw3d9kza2r7py61dgdr7kqmg0s1vhrk86qq39669"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "flymake-proselint.el"
                  (("\"proselint\"")
                   (string-append
                    "\"" (search-input-file inputs "/bin/proselint") "\""))))))))
      (inputs
       (list python-proselint))
      (home-page "https://git.sr.ht/~manuel-uberti/flymake-proselint")
      (synopsis "Flymake backend for @code{proselint}")
      (description "This package adds support for @code{proselint} in Flymake.")
      (license license:gpl3+))))

(define-public emacs-el-job
  (package
    (name "emacs-el-job")
    (version "2.5.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/meedstrom/el-job")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1y4cdf1kafrhf24jbhw2f8415n1x22hczy2di6ysr3mv4im0nvsr"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-l" "el-job-test.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/meedstrom/el-job")
    (synopsis "Split up the inputs of a function in many sub-processes")
    (description
     "This library gives you the tools to split up the inputs and run the
function in many sub-processes (one per CPU core), then merges their outputs
and passes it back to the current Emacs.  In the meantime, current Emacs does
not hang at all.")
    (license license:gpl3+)))

(define-public emacs-elastic-modes
  (let ((commit "ea49bb03b78cb9fd17655990223e3095f137a3ce")
        (revision "1"))
    (package
      (name "emacs-elastic-modes")
      (version "1.0.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jyp/elastic-modes")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1dkigkjw4i9nz5rl0dnic16ljdnp5cyz2xic3hc2myqnjlqnc6z6"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #false)) ;no tests
      (propagated-inputs (list emacs-dash))
      (home-page "https://github.com/jyp/elastic-modes")
      (synopsis "Text and code alignment for variable-width fonts")
      (description
       "This is an Emacs package for text and code alignment for
variable-width (i.e., proportional, or variable pitch) fonts.")
      (license license:gpl3+))))

(define-public emacs-elisp-demos
  (package
    (name "emacs-elisp-demos")
    (version "2024.01.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xuchunyang/elisp-demos")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1pgg5z3z2pf0vps86lrkxfr36v4c24mpgvj551gixdlrm2s55p0l"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "\\.org$" %default-include)
      #:test-command #~(list "make" "test")))
    (home-page "https://github.com/xuchunyang/elisp-demos/")
    (synopsis "Enhance @code{*Help*} buffers with additional examples")
    (description
     "This package injects example uses of Elisp functions into their
respective @code{*Help*} buffers.")
    (license license:gpl3+)))

(define-public emacs-docker-compose-mode
  (package
    (name "emacs-docker-compose-mode")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/meqif/docker-compose-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1fbcxwfvm33xcdj3cs26d9i1zyrryyjjkv7sc3mfxd45nq8d3ivj"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-f emacs-yaml-mode))
    (home-page "https://github.com/meqif/docker-compose-mode/")
    (synopsis "Major mode for editing @file{docker-compose} files")
    (description
     "This is a major mode for @file{docker-compose} files that provides
completion of relevant keywords.")
    (license license:expat)))

(define-public emacs-dwim-shell-command
  (package
    (name "emacs-dwim-shell-command")
    ;; This release is untagged, change commit below when updating.
    (version "0.63.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xenodium/dwim-shell-command")
             (commit "dd742977abaa25991a8b0b8beff1ae9e4bb39fd6")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0b9nzla9gygljchdw04sr8c86h4sh52wqv644fzw5nmzvs9zkagj"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;No tests.
    (home-page "https://github.com/xenodium/dwim-shell-command")
    (synopsis "Shell commands with @acronym{DWIM, do what I mean} behaviour")
    (description
     "This package provides @code{dwim-shell-command} as an opinionated,
@acronym{DWIM, do what I mean} alternative to @code{shell-command}.")
    (license license:gpl3+)))

(define-public emacs-dvc
  (let ((revision "591")                ;no tags or official releases
        (guix-revision "1"))
    (package
      (name "emacs-dvc")
      (version (string-append "0.0.0-" guix-revision "." revision))
      (source
       (origin
         (method bzr-fetch)
         (uri (bzr-reference
               (url "lp:dvc")
               (revision revision)))
         (sha256
          (base32 "03pqn493w70wcpgaxvqnfgynxghw114l9pyiv3r414d84vzhan6h"))
         (file-name (string-append name "-" version "-checkout"))))
      (build-system gnu-build-system)
      (arguments
       (list
        #:modules `((guix build gnu-build-system)
                    ((guix build emacs-build-system) #:prefix emacs:)
                    (guix build utils))
        #:imported-modules `(,@%default-gnu-imported-modules
                             (guix build emacs-build-system)
                             (guix build emacs-utils))
        #:configure-flags
        #~(list (string-append "--with-lispdir="
                               (emacs:elpa-directory #$output)))
        #:tests? #f                     ;no test suite
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'build 'set-home
              ;; Something in dvc-bookmarks.el attempts to write config files
              ;; in $HOME during the autoload generation.
              (lambda _ (setenv "HOME" (getenv "TMPDIR"))))
            (add-before 'build 'fix-texinfo
              ;; See https://bugs.launchpad.net/dvc/+bug/1264383.
              (lambda _
                (substitute* "texinfo/dvc-intro.texinfo"
                  (("@itemx update ``to''") "@item update ``to''")
                  (("@itemx brief") "@item brief")
                  (("@itemx full") "@item full")
                  (("@itemx drop") "@item drop")
                  (("@itemx left file") "@item left file")))))))
      (native-inputs
       (list autoconf automake emacs-minimal texinfo))
      (home-page "http://xsteve.at/prg/emacs_dvc/index.html")
      (synopsis "Emacs front-end for various distributed version control systems")
      (description "DVC is a legacy Emacs front-end for a number of
distributed version control systems.  It currently supports GNU Arch, GNU
Bazaar, git, Mercurial, and Monotone.  It also provides some integration with
Gnus, e.g., for applying patches received by email.")
      (license license:gpl2+))))

(define-public emacs-sudo-edit
  (package
    (name "emacs-sudo-edit")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nflath/sudo-edit")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1hncxbg5lvywzkwvdmzvrz71midy4samjq2vvxxhz90z1y5l8l29"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-undercover))
    (arguments
     (list
      #:emacs emacs
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'fix-makefile
            (lambda _
              (substitute* "Makefile"
                (("\\$\\(CASK\\) exec ") "")))))
      #:test-command #~(list "make" "test")))
    (home-page "https://github.com/nflath/sudo-edit/")
    (synopsis "Open files as another user")
    (description
     "This package allows editing files as another user, including the root
user.")
    (license license:gpl3+)))

(define-public emacs-subed
  (package
    (name "emacs-subed")
    (version "1.2.23")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.nongnu.org/nongnu/subed-"
                                  version ".tar"))
              (sha256
               (base32
                "0bvsv688mqhga8dffy3841wxs5pkw0vish15dgligll47cj98mzp"))))
    (arguments
     (list
      #:test-command #~(list "buttercup" "-L" ".")))
    (native-inputs (list emacs-buttercup))
    (inputs (list ffmpeg))
    (build-system emacs-build-system)
    (home-page "https://elpa.nongnu.org/nongnu/subed.html")
    (synopsis "Major mode for editing subtitles")
    (description
     "@code{subed} is an Emacs major mode for editing subtitles while playing
the corresponding video with @code{mpv}.  At the moment, the only supported
formats are SubRip (@file{.srt}), WebVTT (@file{.vtt}), and Advanced
SubStation Alpha (@file{.ass}).")
    (license license:gpl3+)))

(define-public emacs-miniedit
  (package
    (name "emacs-miniedit")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsmirror/miniedit")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1850z96gly0jnr50472idqz1drzqarr0n23bbasslrc501xkg0bq"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsmirror/miniedit/")
    (synopsis "Enhanced editing for minibuffer fields")
    (description
     "This package provides a function that can be called from the
minibuffer to enable editing the minibuffer input in another buffer with
@code{text-mode} enabled.")
    (license license:gpl2+)))

(define-public emacs-ob-ipython
  (package
    (name "emacs-ob-ipython")
    (version "20180224")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (commit "7147455230841744fb5b95dcbe03320313a77124")
                    (url "https://github.com/gregsexton/ob-ipython")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1a10fc2jk37ni5sjjvf87s5nyaz2a6h2mlj5dxh4dhv5sd3bb85p"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-f))
    (home-page "http://www.gregsexton.org")
    (synopsis "Org-Babel functions for IPython evaluation")
    (description "This package adds support to Org-Babel for evaluating Python
source code using IPython.")
    (license license:gpl3+)))

(define-public emacs-ob-asymptote
  (package
    (name "emacs-ob-asymptote")
    (version "1.0.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/ob-asymptote-"
                           version ".tar"))
       (sha256
        (base32 "0b9glzj3aq39rksb0bg4qvsnqknwjk7lbixapw9695hfr2l4hv02"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/hurrja/ob-asymptote")
    (synopsis "Babel functions for Asymptote")
    (description
     "This package provides Org Babel support for evaluating Asymptote source
code.  This differs from most standard languages in that:
@itemize
@item there is no such thing as a ``session'' in Asymptote,
@item we are generally only going to return results of type @code{file},
@item we are adding the @code{file} and @code{cmdline} header arguments, if
file is omitted then the @samp{-V} option is passed to the @command{asy}
command for interactive viewing.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-ob-async
  (package
    (name "emacs-ob-async")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/astahlman/ob-async")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10x4hxrjm4pr6vg42a961h9ilqzyd0l0fv7fsbq9clxi439f1nd6"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; ~1/2 tests fail.
           #:test-command
           #~(list "ert-runner" "--verbose" "--debug" "-l" "ob-async.el")))
    (native-inputs
     (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-async emacs-dash))
    (home-page "https://github.com/astahlman/ob-async")
    (synopsis "Asynchronous src_block execution for org-babel")
    (description "@code{ob-async} enables asynchronous execution of org-babel
src blocks.")
    (license license:gpl3+)))

(define-public emacs-ol-notmuch
  (package
    (name "emacs-ol-notmuch")
    (version "2.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/ol-notmuch")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "15n3hsfqnr4srmr3n2kry4348kbnx71x3cl00knqkr3a3bm66izy"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat emacs-notmuch emacs-org))
    (home-page "https://github.com/tarsius/ol-notmuch")
    (synopsis "Links to notmuch messages for Emacs' Org mode")
    (description
     "This package implements links to Notmuch messages and searches for
Emacs' Org mode.  A search is a query to be performed by Notmuch; it is the
equivalent to folders in other mail clients.  Similarly, mails are referred to
by a query, so both a link can refer to several mails.")
    (license license:gpl3+)))

(define-public emacs-debbugs
  (package
    (name "emacs-debbugs")
    (version "0.45")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/debbugs-"
                           version ".tar"))
       (sha256
        (base32 "1rbj3ms2hkg0ra30y0bwzmdlcq58p15vzhin28a1rw2rmbwx5irc"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(list "\\.el$" "\\.wsdl$" "\\.info$")
      #:phases #~(modify-phases %standard-phases
                   (add-before 'check 'add-test-dir-to-emacs-load-path
                     (lambda _
                       (setenv "EMACSLOADPATH"
                               (string-append (getcwd) "/test:"
                                              (getenv "EMACSLOADPATH"))))))))
    (propagated-inputs (list emacs-soap-client))
    (home-page "https://elpa.gnu.org/packages/debbugs.html")
    (synopsis "Access the Debbugs bug tracker in Emacs")
    (description
     "This package lets you access the @uref{http://bugs.gnu.org,GNU Bug
Tracker} from within Emacs.

For instance, it defines the command @code{M-x debbugs-gnu} for listing bugs,
and the command @code{M-x debbugs-gnu-search} for bug searching.  If you
prefer the listing of bugs as TODO items of @code{org-mode}, you could use
@code{M-x debbugs-org} and related commands.

A minor mode @code{debbugs-browse-mode} let you browse URLs to the GNU Bug
Tracker as well as bug identifiers prepared for @code{bug-reference-mode}.")
    (license license:gpl3+)))

(define-public emacs-piem
  (package
    (name "emacs-piem")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.kyleam.com/piem")
             (commit (string-append "v" version))))
       (file-name (string-append name "-" version "-checkout"))
       (sha256
        (base32 "0smdb1iph2q1xvxix5c93llckcxh7kmhg6pxgyrm88j736m4l16q"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'configure
                 (lambda* (#:key inputs #:allow-other-keys)
                   (emacs-substitute-variables "piem-b4.el"
                     ("piem-b4-b4-executable"
                      (search-input-file inputs "/bin/b4")))))
               (add-after 'install 'makeinfo
                 (lambda _
                   (invoke "makeinfo" "Documentation/piem.texi")
                   (install-file "piem.info"
                                 (string-append #$output "/share/info")))))))
    (native-inputs (list texinfo))
    (inputs
     (list b4
           emacs-debbugs
           emacs-elfeed
           emacs-notmuch))
    (home-page "https://docs.kyleam.com/piem/")
    (synopsis "Glue for working with public-inbox archives")
    (description "This package provides a collection of Emacs libraries for
working with public-inbox archives.  As much of the hard work here is already
done by other Emacs libraries—things like mail clients, news readers, Git
interfaces, and even web browsers—piem is mostly about bridging some of these
parts for convenience.")
    (license license:gpl3+)))

(define-public emacs-deferred
  (package
    (name "emacs-deferred")
    (version "0.5.1")
    (home-page "https://github.com/kiwanami/emacs-deferred")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xy9zb6wwkgwhcxdnslqk52bq3z24chgk6prqi4ks0qcf2bwyh5h"))
       (patches
        (search-patches "emacs-deferred-fix-number-of-arguments.patch"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'set-shell
           ;; Setting the SHELL environment variable is required for the tests
           ;; to find sh.
           (lambda _
             (setenv "SHELL" (which "sh"))))
         (add-before 'check 'fix-makefile
           (lambda _
             (substitute* "Makefile"
               (("\\$\\(CASK\\) exec ") "")))))
       #:test-command '("make" "test")))
    (native-inputs
     (list emacs-ert-expectations emacs-ert-runner emacs-undercover))
    (synopsis "Simple asynchronous functions for Emacs Lisp")
    (description
     "The @code{deferred.el} library provides support for asynchronous tasks.
The API is almost the same as that of
@uref{https://github.com/cho45/jsdeferred, JSDeferred}, a JavaScript library
for asynchronous tasks.")
    (license license:gpl3+)))

(define-public emacs-butler
  (package
    (name "emacs-butler")
    (version "0.2.6")
    (home-page "https://github.com/AshtonKem/Butler")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1wsk5isza8xqr84w6haal95ssifz6j2lrr5phbsdc90jb9hicbff"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-deferred))
    (synopsis "Emacs client for Jenkins")
    (description
     "Butler provides an interface to connect to Jenkins continuous
integration servers.  Users can specify a list of server in the
@code{butler-server-list} variable and then use @code{M-x butler-status} to
view the build status of those servers' build jobs, and possibly to trigger
build jobs.")
    (license license:gpl3+)))

(define-public emacs-zmq
  (package
    (name "emacs-zmq")
    (version "1.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nnicandro/emacs-zmq")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1my9gw15xdbw7wdv6xa29lw8vfxqjsypk2465zxic2825hs0wn07"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda _
              (invoke "make" "src/configure")
              (substitute* "src/configure"
                (("/bin/sh") (which "sh"))
                (("/usr/bin/file") (which "file")))
              (substitute* "zmq.el"
                ;; This typo is already fixed in master--but no release was
                ;; made.
                (("zmq-mesage-more-p") "zmq-message-more-p"))
              (invoke "make")))
          (add-after 'install 'install-shared-object
            (lambda _
              (install-file "emacs-zmq.so" (elpa-directory #$output)))))))
    (native-inputs
     (list autoconf automake libtool pkg-config))
    (inputs
     (list zeromq))
    (home-page "https://github.com/nnicandro/emacs-zmq")
    (synopsis "Emacs bindings to ØMQ")
    (description "This package provides Emacs bindings to ØMQ.")
    (license (list license:gpl2+        ;zmq.el
                   license:gpl3+)))) ;src/emacs-module.h

(define-public emacs-tup-mode
  (package
    (name "emacs-tup-mode")
    (version "1.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ejmr/tup-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0asd024n5v23wdsg1959sszq568wg3a1bp4jrk0cllfji1z0n78y"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ejmr/tup-mode")
    (synopsis "Major mode for editing ``tupfiles'' used by the Tup build system")
    (description
     "Tup mode provides syntax highlighting for all of the elements of
tupfiles, such as rule definitions, user-defined variables, macros, flags, bin
variables, and so on.  The mode also allows you to execute Tup commands.")
    (license license:gpl3+)))

(define-public emacs-turtles
  (package
    (name "emacs-turtles")
    (version "2.0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/szermatt/turtles")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1cipfgzx8ws79lzx7dfqr9lbirxf5fl332y8m5wz46455421avgi"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/szermatt/turtles")
    (synopsis "Library for writing ERT-based tests")
    (description
     "This package helps writing ERT-based tests that check how Emacs renders
buffers and windows. The ERT tests can be run interactively or in batch
mode.")
    (license license:gpl3+)))

(define-public emacs-combobulate
  (let ((commit "17c71802eed2df1a6b25199784806da6763fb90c")
        (revision "2"))
    (package
      (name "emacs-combobulate")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mickeynp/combobulate")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "14fv5nvll0v1i5zwn7xlf6n7g0yxl7vgkkxwj16dk4f7nxc3mvcv"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "ert-runner" "tests")))
      (propagated-inputs
       (list tree-sitter-javascript
             tree-sitter-python
             tree-sitter-typescript))
      (native-inputs
       (list emacs-ert-runner python-minimal))
      (home-page "https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter")
      (synopsis "Structured editing and navigation in Emacs with tree-sitter")
      (description
       "Combobulate is a package that adds structured editing and movement to
a wide range of programming languages.  Unlike most programming major modes
that use error-prone imperative code and regular expressions to determine
what's what in your code, Combobulate uses Emacs 29's tree-sitter library.
Tree-sitter maintains a concrete syntax tree of your code; it gives
Combobulate absolute clarity of all aspects of your code, enabling more
correct movement and editing than you would otherwise have.")
      (license license:gpl3+))))

(define-public emacs-companion-mode
  ;; No tags or releases.
  (let ((commit "2c3c794c583058db83e92e69b8cb1bf0c84551eb")
        (revision "0"))
    (package
      (name "emacs-companion-mode")
      ;; Version is extracted from the main file.
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
            (url "https://codeberg.org/rahguzar/companion-mode/")
            (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0bi3y3r0y1n7kl6nrr0mpdp0zyr1mgcg8mrm5yxldfvdh2245jgq"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/rahguzar/companion-mode/")
      (synopsis "Pairing buffers for simulatenous display")
      (description
       "This package defines a global minor mode to pair buffers with a
companion, such that when the buffer is displayed in a window, the companion is
also displayed.")
      (license license:gpl3+))))

(define-public emacs-company
  (package
    (name "emacs-company")
    (version "1.0.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "company-" version ".tar"))
       (sha256
        (base32 "00vmqra0fav0w4q13ngwpyqpxqah0ahfg7kp5l2nd0h2l8sp79qr"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "icons/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'move-doc 'install-doc-images
            (lambda* (#:key outputs #:allow-other-keys)
              (let ((images (find-files "./images/small/" ".*\\.png$")))
                (for-each
                 (lambda (image)
                   (install-file
                    image
                    (string-append #$output "/share/info/images/small")))
                 images)))))))
    (home-page "https://company-mode.github.io/")
    (synopsis "Modular text completion framework")
    (description
     "Company is a modular completion mechanism.  Modules for retrieving
completion candidates are called back-ends, modules for displaying them are
front-ends.  Company comes with many back-ends, e.g., @code{company-elisp}.
These are distributed in separate files and can be used individually.")
    (license license:gpl3+)))

(define* (%emacs-company-box-upstream-source #:key commit version hash)
  (origin
    (method git-fetch)
    (uri (git-reference
          (url "https://github.com/sebastiencs/company-box")
          (commit commit)))
    (file-name (git-file-name "emacs-company-box" version))
    (hash hash)))

(define-public emacs-company-box
  ;; There is no release yet.  Version is extracted from the main
  ;; file.
  (let ((version "0.0.1")
        (revision "0")
        (commit "be37a9a30dc112ab172af21af694e2cb04a74f85"))
    (package
      (name "emacs-company-box")
      (version (git-version version revision commit))
      (source
       (origin
         (method (@@ (guix packages) computed-origin-method))
         (file-name (string-append name "-" version ".tar.gz"))
         (sha256 #f)
         (uri
          (delay
            (with-imported-modules '((guix build emacs-utils)
                                     (guix build utils))
              #~(begin
                  (use-modules (guix build utils)
                               (guix build emacs-utils))
                  (let* ((dir (string-append "emacs-company-box-" #$version)))

                    (set-path-environment-variable
                     "PATH" '("bin")
                     (list #+emacs-minimal
                           #+(canonical-package bash)
                           #+(canonical-package coreutils)
                           #+(canonical-package gzip)
                           #+(canonical-package tar)))

                    ;; Copy the upstream source
                    (copy-recursively
                     #+(%emacs-lsp-treemacs-upstream-source
                        #:commit commit #:version version
                        #:hash
                        (content-hash
                         "13fgmdy51gqdwijqfvb784pirx4lgva0y7ysi0c3fcx8f82cdj59"))
                     dir)

                    (with-directory-excursion dir
                      ;; The icons are unclearly licensed and possibly non-free,
                      ;; see <https://github.com/emacs-lsp/lsp-treemacs/issues/123>
                      (with-directory-excursion "images"
                        (for-each delete-file-recursively
                                  '("eclipse" "idea" "netbeans")))

                      ;; Also remove any mentions in the source code.
                      (make-file-writable "company-box-icons.el")
                      (emacs-batch-edit-file "company-box-icons.el"
                        '(progn
                          (while (search-forward-regexp
                                  "(defvar company-box-icons-\\([a-z-]*\\)"
                                  nil t)
                            (pcase (match-string 1)
                                   ((or "images"
                                        "all-the-icons"
                                        "icons-in-terminal") nil)
                                   (_ (beginning-of-line)
                                      (kill-sexp)))
                            (basic-save-buffer))))

                      ;; Also patch source to not show broken icons as configuration
                      ;; option.
                      (substitute* "company-box-icons.el"
                        (("- .*, from.*editor.*") "")
                        (("\\(const :tag \"([a-z]*)\".*\\)" all tag)
                         (if (member tag
                                     '("images" "all-the-icons" "icons-in-terminal"))
                             all
                             ""))))

                    (invoke "tar" "cvfa" #$output
                            "--mtime=@0"
                            "--owner=root:0"
                            "--group=root:0"
                            "--sort=name"
                            "--hard-dereference"
                            dir))))))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company emacs-dash emacs-frame-local))
      (home-page "https://github.com/sebastiencs/company-box")
      (synopsis "Company front-end with icons")
      (description
       "Company box is a Company front-end.  It supports different
colors for different backends, associates icons to functions,
variables... and their backends, and displays candidate's
documentation.  It is not limited by the current window size or
buffer's text properties.

This package is not compatible with a TTY.")
      (license license:gpl3+))))

(define-public emacs-company-posframe
  (package
    (name "emacs-company-posframe")
    (version "0.7.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tumashu/company-posframe")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "03kj8yxd4y9aw86b6y6z5l9y76q5gjyiyhi5120nx1a8cwbd9g4a"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company emacs-posframe))
    (home-page "https://github.com/tumashu/company-posframe")
    (synopsis "Use a posframe for @code{emacs-company}'s candidate menu")
    (description
     "Allows @code{emacs-company} to use child frames for its candidate menus.

@code{emacs-company-posframe} is fast enough for daily use and supports CJK
languages.")
    (license license:gpl3+)))

(define-public emacs-irony-mode
  (package
    (name "emacs-irony-mode")
    (version "1.6.1")
    (home-page "https://github.com/Sarcasm/irony-mode")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url (string-append home-page ".git"))
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1w0rd74kjgda7mjbf853yavppkgzdfyw1a2hgskbqbbjii3mr1zy"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda _
              (chmod "irony.el" #o644)
              (emacs-substitute-variables "irony.el"
                ("irony-server-install-prefix" #$emacs-irony-mode-server)))))))
    (inputs (list emacs-irony-mode-server))
    (synopsis "C/C++/ObjC Code completion and syntax checks for Emacs")
    (description "Irony-mode provides Clang-assisted syntax checking and
completion for C, C++, and ObjC in GNU Emacs.  Using @code{libclang} it can
provide syntax checking and autocompletion on compiler level which is very
resistant against false positives.  It also integrates well with other
packages like @code{eldoc-mode} and especially @code{company-mode} as
described on the homepage.")
    (license license:gpl3+)))

(define-public emacs-irony-mode-server
  (package
    (inherit emacs-irony-mode)
    (name "emacs-irony-mode-server")
    (arguments
     (list
      #:tests? #f
      #:phases
      #~(modify-phases %standard-phases
          (replace 'configure
            (lambda _
              (invoke "cmake" "server"
                      (string-append "-DCMAKE_INSTALL_PREFIX=" #$output)))))))
    (inputs
     (list clang))
    (build-system cmake-build-system)
    (synopsis "Server for the Emacs @dfn{irony mode}")))

(define-public emacs-company-irony
  (package
    (name "emacs-company-irony")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Sarcasm/company-irony")
             (commit (string-append "v" version))))
       (sha256
        (base32 "1d3jw0d4zymznri86a5iixyxnw16jzkkrbhrh657ys73189c1c73"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (inputs
     (list emacs-company emacs-irony-mode))
    (synopsis "C++ completion backend for Company using Irony mode")
    (description "This backend for Company allows for C++ code completion
with Irony mode using Clang tooling.")
    (home-page "https://github.com/Sarcasm/company-irony")
    (license license:gpl3+)))

(define-public emacs-flycheck-irony
  (package
    (name "emacs-flycheck-irony")
    (version "0.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Sarcasm/flycheck-irony")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32 "0qa5a8wzvzxwqql92ibc9s43k8sj3vwn7skz9hfr8av0skkhx996"))))
    (build-system emacs-build-system)
    (inputs
     (list emacs-irony-mode emacs-flycheck emacs-company))
    (synopsis "Live syntax checking frontend for Flycheck using irony-mode")
    (description "This package provides a frontend for Flycheck that lets
irony-mode do the syntax checking.")
    (home-page "https://github.com/Sarcasm/flycheck-irony")
    (license license:gpl3+)))

(define-public emacs-irony-eldoc
  (package
    (name "emacs-irony-eldoc")
    (version (package-version emacs-irony-mode))
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ikirill/irony-eldoc")
             (commit "0df5831eaae264a25422b061eb2792aadde8b3f2")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1l5qpr66v1l12fb50yh73grb2rr85xxmbj19mm33b5rdrq2bqmmd"))))
    (build-system emacs-build-system)
    (inputs
     (list emacs-irony-mode))
    (synopsis "Eldoc integration for irony-mode")
    (description "Irony-eldoc is an eldoc extension that shows documentation
for the current function or variable in the minibuffer.")
    (home-page "https://github.com/ikirill/irony-eldoc")
    (license license:gpl3+)))

(define-public emacs-company-quickhelp
  (package
    (name "emacs-company-quickhelp")
    (version "2.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/expez/company-quickhelp")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "08ccsfvwdpzpj0gai3xrdb2bv1nl6myjkxsc5774pbvlq9nkfdvr"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-pos-tip emacs-company))
    (home-page "https://github.com/expez/company-quickhelp")
    (synopsis "Popup documentation for completion candidates")
    (description "@code{company-quickhelp} shows documentation for the
completion candidate when using the Company text completion framework.")
    (license license:gpl3+)))

(define-public emacs-math-symbol-lists
  (package
    (name "emacs-math-symbol-lists")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/vspinu/math-symbol-lists")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1r2i600356k8g0l53s4b5xc24flpka664i8f23zbj4h7gk1g2787"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/vspinu/math-symbol-lists")
    (synopsis "Lists of Unicode math symbols and @code{LaTeX} commands")
    (description "This is a storage package used by completion engines like
@code{company-math}.")
    (license license:gpl3+)))

(define-public emacs-math-preview
  (package
    (name "emacs-math-preview")
    (version "5.1.1")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://gitlab.com/matsievskiysv/math-preview")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0ni08900p0pbajw143iw0b7a62qiqcm9b6jy7pqgpn437vydjx1z"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://gitlab.com/matsievskiysv/math-preview")
    (synopsis "Preview TeX math equations inline using MathJax")
    (description
     "Emacs math-preview uses MathJax for displaying TeX, MathML and AsciiMath
  math inline in Emacs buffers.")
    (license license:gpl3+)))

(define-public emacs-company-coq
  (package
    (name "emacs-company-coq")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/cpitclaudel/company-coq")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0dxi4h8xqq5647k7h89s4pi8nwyj3brlhsckrv3p3b1g4dr6mk3b"))))
    (inputs
     (list emacs-company emacs-company-math emacs-dash emacs-yasnippet))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/cpitclaudel/company-coq")
    (synopsis "Emacs extensions for Proof General's Coq mode")
    (description "This package includes a collection of Company mode backends
for Proof-General's Coq mode, and many useful extensions to Proof-General.  It
features:

@itemize
@item Prettification of operators, types, and subscripts,
@item Auto-completion,
@item Insertion of cases,
@item Fully explicit intros,
@item Outlines, code folding, and jumping to definition,
@item Help with errors,
@item and more.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-company-math
  (package
    (name "emacs-company-math")
    (version "1.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/vspinu/company-math")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1pj10i7ml5d2spcmf8035ngcq5zc6rs3lqx09d0qj6bsghglr6j3"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company emacs-math-symbol-lists))
    (home-page "https://github.com/vspinu/company-math")
    (synopsis "Completion backends for math symbols and @code{LaTeX} tags")
    (description
     "This package provides a backend for use with Company mode allowing for
completion of common math symbols.")
    (license license:gpl3+)))

(define-public emacs-compdef
  (let ((commit "67104a38763cc819644f711248b170a43bce151b")
        (revision "2"))
    (package
      (name "emacs-compdef")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/jjzmajic/compdef.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1f6y6cr67gps9jp5hd20xszfd3k26v70g6z4g5db6wdkvlnc2wkg"))))
      (build-system emacs-build-system)
      (home-page "https://gitlab.com/jjzmajic/compdef")
      (synopsis "Set local completion backends")
      (description "This package provides a function to cleanly set local
completion backends according to mode, and integrates with
@code{use-package}.")
      (license license:gpl3+))))

(define-public emacs-icomplete-vertical
  (package
    (name "emacs-icomplete-vertical")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/oantolin/icomplete-vertical")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "02v190pb802vck7di39jyf5prvmfsgcxln8mgwsls2b4clx9da97"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/oantolin/icomplete-vertical")
    (synopsis "Display Icomplete candidates vertically")
    (description
     "This package defines a global minor mode to display Icomplete
completion candidates vertically.")
    (license license:gpl3+)))

(define-public emacs-handle
  (let ((commit "51c050bc1c6e5caf0eb47ecd985daea1db7241ab")
        (revision "2"))
    (package
      (name "emacs-handle")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/jjzmajic/handle.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "14f15qzfmwdslml4rv37zb5d1lsjf0jibriz636hb7q7knx1n4sg"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-parent-mode))
      (home-page "https://gitlab.com/jjzmajic/handle")
      (synopsis "Handle generic functions across related major modes")
      (description "This package provides generic functions that specialize on
major modes and intended purpose rather than on arguments.  Different
callables for tasks like expression evaluation, definition-jumping, and more
can now be grouped accordingly and tried in sequence until one of them
succeeds.")
      (license license:gpl3+))))

(define-public emacs-nswbuff
  (package
    (name "emacs-nswbuff")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joostkremers/nswbuff")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0bkx7mwy3zbb0ixawvn4cysxk3jjc7ahssvdprvw19ls9xx3wbsp"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/joostkremers/nswbuff")
    (synopsis "Quickly switch between buffers")
    (description "This package allows for navigating between buffers within
a customizable list.")
    (license license:gpl3+)))

(define-public emacs-phi-search
  (let ((commit "9a089b8271cb1cff9640848850298c9ec855286c")
        (revision "1"))
    (package
      (name "emacs-phi-search")
      (version (git-version "20160630" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zk-phi/phi-search")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1gr5plcbrfdc4pglfj905s89hf8x0kc083h30wcnd81bnw9jwz1x"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/zk-phi/phi-search")
      (synopsis "Interactive search compatible with @code{multiple-cursors}")
      (description "This package can be used with @code{multiple-cursors} to
provide an incremental search that moves all fake cursors in sync.")
      (license license:gpl2+))))

(define-public emacs-phi-search-mc
  (let ((commit "7aa671910f766437089aec26c3aa7814222d1356")
        (revision "1"))
    (package
      (name "emacs-phi-search-mc")
      (version (git-version "2.2.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/knu/phi-search-mc.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0wr86ad0yl52im6b9z0b9pzmhcn39qg5m9878yfv1nbxliw40lcd"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-phi-search emacs-multiple-cursors))
      (home-page "https://github.com/knu/phi-search-mc.el")
      (synopsis "Extend @code{phi-search} with additional
@code{multiple-cursors} functionality")
      (description "This package provides further integration between
@code{multiple-cursors} and @code{phi-search}, a package that allows for
interactive searches to move multiple fake cursors.")
      (license license:bsd-2))))

(define-public emacs-multiple-cursors
  (package
    (name "emacs-multiple-cursors")
    (version "1.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magnars/multiple-cursors.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "01ccwbfrnc66ax4bngw1b6k9rzw0m85cm4s0wzk1gkdsc2z647jn"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/magnars/multiple-cursors.el")
    (synopsis "Multiple cursors for Emacs")
    (description
     "This package adds support to Emacs for editing text with multiple
simultaneous cursors.")
    (license license:gpl3+)))

(define-public emacs-multifiles
  ;; There is no tag and no "Version:" keyword.  Using the latest release
  ;; instead.
  (let ((commit "dddfe64b8e1c1cd1f9ccc1f03405477fc0d53897")
        (revision "1"))
    (package
      (name "emacs-multifiles")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/magnars/multifiles.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "065l04ylplng1vgykkbn2vnkcs3sn1k2cikx1ha2q8wmgx6bkvai"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ; no tests
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/magnars/multifiles.el")
      (synopsis "Edit multiple files in a single Emacs buffer")
      (description
       "This package allows one to view and edit parts of multiple files in
one Emacs buffer.")
      (license license:gpl3+))))

(define-public emacs-mc-extras
  (package
    (name "emacs-mc-extras")
    (version "1.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/knu/mc-extras.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xrlp192wi51qpzgpkn9ph5zlpj08ifd8r3444llskyv0bay6g14"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-multiple-cursors))
    (home-page "https://github.com/knu/mc-extras.el")
    (synopsis "Extra functions for manipulating multiple cursors")
    (description
     "This package provides additional functions for
@code{multiple-cursors}, including functions for marking s-expressions,
comparing characters, removing cursors, and more.")
    (license license:bsd-2)))

(define-public emacs-substitute
  (package
    (name "emacs-substitute")
    (version "0.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/protesilaos/substitute")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "10dfrigpg3nkfa08zfb99cf7b5cjdqilfh2j5z00zh9b2k3jyymh"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/protesilaos/substitute")
    (synopsis "Efficiently replace targets in the buffer or context")
    (description
     "Substitute is a set of commands that perform text replacement (i)
throughout the buffer, (ii) limited to the current definition (per
narrow-to-defun), (iii) from point to the end of the buffer, and (iv) from
point to the beginning of the buffer.

These substitutions are meant to be as quick as possible and, as such, differ
from the standard @code{query-replace} tool.  The provided commands prompt for
substitute text and perform the substitution outright.")
    (license license:gpl3+)))

(define-public emacs-sudoku
  (package
    (name "emacs-sudoku")
    (version "20191015.1315")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/zevlg/sudoku.el.git")
             (commit "b1924fd244a5fa284de9d67b66fbd69164b37318")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19i3rrz4qnc9i845j0bbmps69372rry7gadcyj06gvq2hf9dy3nh"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/zevlg/sudoku.el")
    (synopsis "Simple sudoku game in Emacs")
    (description "This package provides a simple sudoku game in Emacs.")
    (license license:gpl3+)))

(define-public emacs-typo
  ;; Latest tagged release is from 2013.
  (let ((commit "173ebe4fc7ac38f344b16e6eaf41f79e38f20d57")
        (revision "0"))
    (package
      (name "emacs-typo")
      (version (git-version "1.1" revision commit))
      (home-page "https://github.com/jorgenschaefer/typoel")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url home-page)
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "09835zlfzxby5lpz9njl705nqc2n2h2f7a4vpcyx89f5rb9qhy68"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (synopsis "Minor mode for typographic editing")
      (description
       "This package provides two Emacs modes, @code{typo-mode} and
@code{typo-global-mode}.  These modes automatically insert Unicode characters
for quotation marks, dashes, and ellipses.  For example, typing @kbd{\"}
automatically inserts a Unicode opening or closing quotation mark, depending
on context.")
      (license license:gpl3+))))

(define-public emacs-company-lsp
  (package
    (name "emacs-company-lsp")
    (version "2.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tigersoldier/company-lsp")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1hy1x2w0yp5brm7714d1hziz3rpkywb5jp3yj78ibmi9ifny9vri"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-lsp-mode emacs-company emacs-s emacs-dash))
    (native-inputs
     (list emacs-buttercup))
    (arguments
     `(#:test-command '("buttercup" "-L" ".")))
    (home-page "https://github.com/tigersoldier/company-lsp")
    (synopsis "Completion for @code{lsp-mode}")
    (description
     "This package provides completion features that are not possible with
@code{lsp-mode} and @code{company-capf} alone, including support for trigger
characters and asynchronous fetching of completion candidates.")
    (license license:gpl3+)))

(define-public emacs-scala-mode
  (package
    (name "emacs-scala-mode")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hvesalai/emacs-scala-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1072lsin7dxadc0xyhy42wd0cw549axbbd4dy95wfmfcc1xbzjwv"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "ert-runner")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/hvesalai/emacs-scala-mode")
    (synopsis "Emacs major mode for Scala")
    (description
     "This package provides basic Emacs support for the Scala language,
including: local indenting of code, comments and multi-line strings, motion
commands and highlighting.")
    ;; There are no copyright headers in the source code.  The LICENSE file
    ;; indicates GPL3.
    (license license:gpl3)))

(define-public emacs-sbt-mode
  (package
    (name "emacs-sbt-mode")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hvesalai/emacs-sbt-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lv9ridzk9x6rkf7lj21srnszypyq04vqg05vl10zhpz1yqlnbjd"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/hvesalai/emacs-sbt-mode")
    (synopsis "Basic functionality for interacting with sbt inside Emacs")
    (description
     "This mode provides basic functionality required for successfully
interacting with sbt inside Emacs.  The core functionality includes
interacting with the sbt shell and Scala console, compiling code and
navigation to errors.")
    (license license:gpl3+)))

(define-public emacs-9lc-mode
  (let ((commit "7871476488fc7b66e05714797a9a5b8275988662")
        (revision "1"))
    (package
      (name "emacs-9lc-mode")
      (version (git-version  "0.7" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/9lc-mode.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1kmx0c413yvvaq33v7lf3gzdjpxkr5faa1wj2j0m25lyyz8dsdm7"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/geoclue")
      (synopsis "Major mode for editing Fluke 9000 scripts")
      (description
       "This package provides a major mode for editing Fluke 9010a \"9LC\" files.")
      (license (list license:gpl3+)))))

(define-public emacs-tl1-mode
  (let ((commit "48d12893cc81d7f92dc7b603d3751d8512ed0eb0")
        (revision "1"))
    (package
      (name "emacs-tl1-mode")
      (version (git-version "1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/tl1-mode.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1mf0wqbn9h0353hkhcykzrm2dk1jvyijqs4hsvgj3kwp1whws7br"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/geoclue")
      (synopsis "Major mode for editing Fluke 9100 TL/1 source code")
      (description
       "This package provides a major mode for editing Fluke TL/1 source code.
TL/1 is a language used to control Fluke’s 9100 series of testing and
troubleshooting mainframes.")
      (license (list license:gpl3+)))))

(define-public emacs-scheme-complete
  ;; Upstream does not provide tags.  The commit below corresponds to the
  ;; exact version update.  Version is extracted from main file.
  (let ((commit "5c0a16684a3be7021d67067b2955f1c3e17a320a"))
    (package
      (name "emacs-scheme-complete")
      (version "0.9.9")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ashinn/scheme-complete")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1smxr5bkzbfrjx21vhrj1wagmqx5yd92i997dbgs16iaqbzzr7cz"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "make" "test")))
      (home-page "https://github.com/ashinn/scheme-complete")
      (synopsis "Smart tab completion for Scheme in Emacs")
      (description
       "This file provides a single function, @code{scheme-smart-complete},
which you can use for intelligent, context-sensitive completion for any Scheme
implementation in Emacs.  To use it just load this file and bind that function
to a key in your preferred mode.")
      (license license:public-domain))))

(define-public emacs-scel
  (let ((version "20170629")
        (revision "1")
        (commit "aeea3ad4be9306d14c3a734a4ff54fee10ac135b"))
    (package
      (name "emacs-scel")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/supercollider/scel")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0jvmzs1lsjyndqshhii2y4mnr3wghai26i3p75453zrpxpg0zvvw"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f ; No tests.
        #:modules '((guix build emacs-build-system)
                    ((guix build cmake-build-system) #:prefix cmake:)
                    (guix build utils))
        #:imported-modules `(,@%emacs-build-system-modules
                             (guix build cmake-build-system))
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'configure
              (lambda* (#:key outputs #:allow-other-keys)
                (substitute* "el/CMakeLists.txt"
                  (("share/emacs/site-lisp/SuperCollider")
                   (elpa-directory #$output)))
                ((assoc-ref cmake:%standard-phases 'configure)
                 #:outputs outputs
                 #:configure-flags '("-DSC_EL_BYTECOMPILE=OFF"))))
            (add-after 'expand-load-path 'add-el-dir-to-emacs-load-path
              (lambda _
                (setenv "EMACSLOADPATH"
                        (string-append (getcwd)
                                       "/el:"
                                       (getenv "EMACSLOADPATH")))))
            (replace 'install (assoc-ref cmake:%standard-phases 'install)))))
      (inputs
       (list supercollider))
      (native-inputs
       (list cmake-minimal))
      (home-page "https://github.com/supercollider/scel")
      (synopsis "SuperCollider Emacs interface")
      (description "@code{emacs-scel} is an Emacs interface to SuperCollider.
SuperCollider is a platform for audio synthesis and algorithmic composition.")
      (license license:gpl2+))))

(define-public emacs-soothe-theme
  ;; There is no named branch.
  (let ((commit "0786fe70c6c1b4ddcfb932fdc6862b9611cfc09b")
        (revision "0"))
    (package
     (name "emacs-soothe-theme")
     (version (git-version "20141027.2233" revision commit))
     (source
      (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsfodder/emacs-soothe-theme")
             (commit commit)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10gh1hvxq9gm29r6qzlnva7vjidd7n4kih4z2ihyvbvy9za20xqw"))))
     (build-system emacs-build-system)
     (home-page "https://github.com/emacsfodder/emacs-soothe-theme")
     (synopsis "Colorful, but muted theme for Emacs, dark background with light text")
     (description
      "Soothe theme is an amalgam of muted color tones and highlighted
backgrounds.  It has builtin support for Rainbow delimiters, Org mode,
Whitespace mode, ECB, Flyspell, Ido, Linum, highlight indentation, Show Paren
mode.")
     (license license:gpl3))))

(define-public emacs-company-auctex
  (let ((commit "48c42c58ce2f0e693301b0cb2d085055410c1b25")
        (revision "1"))
    (package
      (name "emacs-company-auctex")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alexeyr/company-auctex")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "10qn7frn5wcmrlci3v6iliqzj7r9dls87h9zp3xkgrgn4bqprfp8"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-before 'build 'set-home
             (lambda _ (setenv "HOME" "/tmp"))))))
      (propagated-inputs
       (list emacs-auctex emacs-company emacs-yasnippet))
      (home-page "https://github.com/alexeyr/company-auctex/")
      (synopsis "Completion for @code{AUCTeX}")
      (description
       "This package provides a group of backends permitting auto-completion
for @code{AUCTeX}.")
      (license license:gpl3+))))

(define-public emacs-mit-scheme-doc
  (package
    (name "emacs-mit-scheme-doc")
    (version "20140203")
    (source
     (origin
       (modules '((guix build utils)))
       (snippet
        ;; keep only file of interest
        '(begin
           (for-each delete-file '("dot-emacs.el" "Makefile"))
           (install-file "6.945-config/mit-scheme-doc.el" ".")
           (delete-file-recursively "6.945-config")))
       (file-name (string-append name "-" version ".tar.bz2"))
       (method url-fetch)
       (uri (string-append "http://groups.csail.mit.edu/mac/users/gjs/"
                           "6.945/dont-panic/emacs-basic-config.tar.bz2"))
       (sha256
        (base32
         "0dqidg2bd66pawqfarvwca93w5gqf9mikn1k2a2rmd9ymfjpziq1"))))
    (build-system emacs-build-system)
    (inputs (list mit-scheme))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure-doc
           (lambda* (#:key inputs #:allow-other-keys)
             (let* ((mit-scheme-dir (assoc-ref inputs "mit-scheme"))
                    (doc-dir (string-append mit-scheme-dir "/share/doc/"
                                            "mit-scheme-"
                                            ,(package-version mit-scheme))))
               (substitute* "mit-scheme-doc.el"
                 (("http://www\\.gnu\\.org/software/mit-scheme/documentation/mit-scheme-ref/")
                  (string-append "file:" doc-dir "/mit-scheme-ref/")))))))))
    (home-page "https://groups.csail.mit.edu/mac/users/gjs/6.945/dont-panic/")
    (synopsis "MIT-Scheme documentation lookup for Emacs")
    (description
     "This package provides a set of Emacs functions to search definitions of
identifiers in the MIT-Scheme documentation.")
    (license license:gpl2+)))

(define-public emacs-constants
  (package
    (name "emacs-constants")
    (version "2.11.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/constants-" version
                           ".tar"))
       (sha256
        (base32 "0n1wa9hr0841733s6w30x1n5mmis8fpjfzl5mn7s9q12djpp20fy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/cdominik/constants-for-Emacs")
    (synopsis "Enter definition of constants into an Emacs buffer")
    (description
     "This package provides functions for inserting the definition of natural
constants and units into an Emacs buffer.")
    (license license:gpl2+)))

(define-public emacs-tagedit
  (package
    (name "emacs-tagedit")
    (version "1.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magnars/tagedit")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0kq40g46s8kgiafrhdq99h79rz9h5fvgz59k7ralmf86bl4sdmdb"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'remove-spurious-require
                 (lambda _
                   (substitute* "tagedit.el"
                     (("\\(require 'assoc\\)") "")))))))
    (propagated-inputs
     (list emacs-dash emacs-s))
    (home-page "https://github.com/magnars/tagedit")
    (synopsis "Some Paredit-like features for HTML mode")
    (description
     "This package provides a collection of Paredit-like functions for editing
in HTML mode.")
    (license license:gpl3+)))

(define-public emacs-slime
  ;; Update together with sbcl-slime-swank.
  (package
    (name "emacs-slime")
    (version "2.31")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/slime/slime")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nv99wq2vz053p0rn9953rhmyz4g40zdl01mz7z9xbklxzbsx6x7"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "\\.lisp$" "\\.asd$"
                         "contrib"
                         "lib/hyperspec.el"
                         %default-include)
      #:exclude #~(list "^slime-tests.el" "^contrib/test/"
                        "^contrib/Makefile$" "^contrib/README.md$")
      #:tests? #f                       ; tests appear to require networking
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'configure
            (lambda* _
              (emacs-substitute-variables "slime.el"
                ("inferior-lisp-program" "sbcl"))))
          (add-before 'install 'install-doc
            (lambda _
              (let ((info-dir (string-append #$output "/share/info"))
                    (doc-dir (string-append #$output "/share/doc/"
                                            #$name "-" #$version))
                    (doc-files '("doc/slime-refcard.pdf"
                                 "README.md" "NEWS" "PROBLEMS"
                                 "CONTRIBUTING.md")))
                (with-directory-excursion "doc"
                  (substitute* "Makefile"
                    (("infodir=/usr/local/info")
                     (string-append "infodir=" info-dir)))
                  (invoke "make" "html/index.html")
                  (invoke "make" "slime.info")
                  (install-file "slime.info" info-dir)
                  (copy-recursively "html" (string-append doc-dir "/html")))
                (for-each (lambda (f)
                            (install-file f doc-dir)
                            (delete-file f))
                          doc-files)
                (delete-file-recursively "doc")))))))
    (propagated-inputs
     (list emacs-macrostep))
    (native-inputs
     (list texinfo))
    (home-page "https://github.com/slime/slime")
    (synopsis "Superior Lisp Interaction Mode for Emacs")
    (description
     "SLIME extends Emacs with support for interactive programming in
Common Lisp.  The features are centered around @command{slime-mode},
an Emacs minor mode that complements the standard @command{lisp-mode}.
While lisp-mode supports editing Lisp source files, @command{slime-mode}
adds support for interacting with a running Common Lisp process
for compilation, debugging, documentation lookup, and so on.")
    (license (list license:gpl2+ license:public-domain))))

(define-public emacs-popup
  (package
    (name "emacs-popup")
    (version "0.5.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/auto-complete/popup-el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "13ww7hld5pa32myj9krr6prmc99s7hnpsw8mw9krpxffykkblj2f"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "tests")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/auto-complete/popup-el")
    (synopsis "Visual Popup User Interface for Emacs")
    (description
     "Popup.el is a visual popup user interface library for Emacs.
This provides a basic API and common UI widgets such as popup tooltips
and popup menus.")
    (license license:gpl3+)))

(define-public emacs-popup-kill-ring
  (let ((commit "a45c9cf79c4e1207fdbdd662e161154ef224ad61")
        (revision "0"))
    (package
      (name "emacs-popup-kill-ring")
      (version (git-version "0.2.8" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/waymondo/popup-kill-ring")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0bpnsc4agy6mcnc79d9a6gi79jiiqrhf3a55pw0p4z16m86vwyqr"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-pos-tip emacs-popup))
      (home-page "https://github.com/waymondo/popup-kill-ring")
      (synopsis "Interactively insert item from kill-ring")
      (description "This Emacs package manages your Emacs kill-ring in an
autocomplete style popup menu.")
      (license license:gpl3+))))

(define-public emacs-popper
  (package
    (name "emacs-popper")
    (version "0.4.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/karthink/popper")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1x1nnc0li8jd609lnmmax2hl69wmbq84c6b2mdg0wb7zf0k29lba"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/karthink/popper")
    (synopsis "Emacs minor-mode to summon and dismiss buffers easily")
    (description
     "Popper is a minor-mode to tame the flood of ephemeral
windows Emacs produces, while still keeping them within arm’s reach.")
    (license license:gpl3+)))

(define-public emacs-pydoc
  ;; https://github.com/statmobile/pydoc/issues/31
  (let ((commit "c8b667e17bfe3e63221f822c5c4d58c8fb4fea90")
        (revision "0"))
    (package
      (name "emacs-pydoc")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/statmobile/pydoc")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "082ar5w28dknaa63mf587vdzr78xlnvh8lbxqq3hk6qa2c72akam"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
        (list
         #:phases
         #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-python-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "pydoc.el"
                  ("pydoc-python-command"
                    (search-input-file inputs "bin/python")))))
            (add-after 'unpack 'patch-lsof-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "pydoc.el"
                  (("\"lsof")
                   ;; Replace removed double quote in parsing of lsof executable.
                   (string-append "\"" (search-input-file inputs "bin/lsof")))))))))
      (inputs (list lsof python-wrapper))
      (propagated-inputs (list python-jedi))
      (home-page "https://github.com/statmobile/pydoc")
      (synopsis "Navigate Python documentation in Emacs")
      (description "This package provides an Emacs mode for navigating
Python documentation with @code{pydoc} in Emacs.")
      (license license:gpl3+))))

(define-public emacs-python-black
  (package
    (name "emacs-python-black")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wbolster/emacs-python-black")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1x6b67cs7kn8711fxr3fq8y9wcpf9g71asf9wiqfrk2mrfzli6a3"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-reformatter python-black-macchiato))
    (arguments `(#:tests? #f))
    (home-page "https://github.com/wbolster/emacs-python-black")
    (synopsis "Reformat Python code via @code{python-black}")
    (description
     "This package makes it easy to reformat Python code using
@code{python-black} and @code{python-black-macchiato} for entire and partial
buffers, respectively.")
    (license license:bsd-3)))

(define-public emacs-py-isort
  (package
    (name "emacs-py-isort")
    (version "2016.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/paetzke/py-isort.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "08i55gv392wc12x8v3dca0dmz8a8p9ljsqhyajsb6qv1k120wqhx"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f))     ;tests fail with "emacs: standard input is not a tty"
    (propagated-inputs
     (list python-isort))
    (home-page "https://github.com/paetzke/py-isort.el")
    (synopsis "Sort the imports in Python buffers")
    (description
     "This package provides commands and a minor mode to sort Python imports
using @code{python-isort}.")
    (license license:gpl3+)))

(define-public emacs-python-environment
  (package
    (name "emacs-python-environment")
    (version "0.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tkf/emacs-python-environment/")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0q6bib9nr6xiq6npzbngyfcjk87yyvwzq1zirr3z1h5wadm34lsk"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "--batch" "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-deferred))
    (home-page "https://github.com/tkf/emacs-python-environment")
    (synopsis "Provides a @code{virtualenv} API in Emacs Lisp")
    (description
     "This package permits automated installation of tools written in Python.")
    (license license:gpl3+)))

(define-public emacs-pythonic
  (let ((commit "9eff417654c1fc3eca367c357b5b2cddb3fd8ce4")
        (revision "1"))
    (package
      (name "emacs-pythonic")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/pythonic-emacs/pythonic")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "00rkab305iwbn61jspcbxhvbwryf91ly7jz1axa2fzdkfqaj6727"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; missing tests
      (propagated-inputs (list emacs-f emacs-s emacs-tramp))
      (home-page "https://github.com/pythonic-emacs/pythonic")
      (synopsis "Utility functions for writing Pythonic in Emacs")
      (description
       "The Pythonic Emacs package provides function for convenient running
Python on different platforms on local and remote hosts including Docker
containers and Vagrant virtual machines.  To use Pythonic with Docker you need
to install Docker Tramp Emacs package.")
      (license license:gpl3+))))

(define-public emacs-anaconda-mode
  (let ((commit "f900bd7656a03aa24ef3295251f266736f7756eb")
        (revision "0"))
    (package
      (name "emacs-anaconda-mode")
      (version (git-version "0.1.16" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/pythonic-emacs/anaconda-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1gricygbs9f210z7bnzdhcmqpwnpzs4mwbw8rvabfplcbiw7sg6r"))))
      (build-system emacs-build-system)
      (arguments
       (list #:include #~(cons "^anaconda-mode\\.py$" %default-include)
             #:tests? #f))              ; no tests
      (propagated-inputs (list emacs-dash
                               emacs-f
                               emacs-pythonic
                               emacs-s
                               emacs-tramp
                               emacs-xref))
      (home-page "https://github.com/pythonic-emacs/anaconda-mode")
      (synopsis
       "Python code navigation, documentation lookup and completion in Emacs")
      (description
       "This package provides Python code navigation, documentation lookup,
and code completion for Emacs.  It uses a lightweight Python backend to offer
features like jumping to definitions, finding references, and viewing
documentation, enhancing the Python development experience within Emacs.")
      (license license:gpl3+))))

(define-public emacs-jack
  (let ((commit "3b4ea97fcc107d0ffd201ea695129af52f390113")
        (revision "0"))
    (package
      (name "emacs-jack")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tonyaldon/jack")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1cizszj62ic41zc97glf2mdvm1kd95vdfg2dip3n2p2g0nlk2hjf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs"
                               "--batch"
                               "-l"
                               "jack-tests.el"
                               "-f"
                               "ert-run-tests-batch-and-exit")))
      (home-page "https://jack.tonyaldon.com")
      (synopsis "HTML generator library")
      (description
       "@code{jack} provides the function @code{jack-html} that takes a data
structure as input representing the HTML tree you want to generate and
generates it as a string.  Please see the homepage for usage examples.")
      (license license:gpl3+))))

(define-public emacs-jedi
  (package
    (name "emacs-jedi")
    (version "20250602.2107")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tkf/emacs-jedi/")
                    (commit "0a92f57dcfd76f1daf6d382d1e2eb437784a71e0")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0d88nyr689b311abi4zbjifm0llnyd16h3riwkq11y0vjkp5i6vq"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test" "CASK=")
      #:imported-modules `(,@%emacs-build-system-modules
                           (guix build python-build-system))
      #:modules '((guix build emacs-build-system)
                  ((guix build python-build-system) #:prefix python:)
                  (guix build emacs-utils)
                  (guix build utils))
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'avoid-server-installation-for-tests
            (lambda _
              (substitute* "Makefile"
                ;; Disable tox since it's only configured for python 3.8 and
                ;; python 3.9 by the project--that's ancient.
                (("tox")
                 "echo tox")
                (("env: .*$")
                 (string-append "env: " #$output "/bin/jediepcserver\n")))))
          (add-after 'unpack 'ensure-no-mtimes-pre-1980
            (assoc-ref python:%standard-phases
                       'ensure-no-mtimes-pre-1980))
          (add-before 'check 'setenv
            (lambda _
              (setenv "HOME" "/tmp")))
          (add-after 'ensure-no-mtimes-pre-1980 'relax-python-requirements
            (lambda _
              ;; Argparse should only be required for Python < 3.2
              ;; (see: https://github.com/tkf/emacs-jedi/issues/365).
              (substitute* "setup.py"
                ((".*argparse.*") ""))))
          (add-after 'relax-python-requirements 'python:add-install-to-pythonpath
            (assoc-ref python:%standard-phases 'add-install-to-pythonpath))
          (add-after 'python:add-install-to-pythonpath 'python:install
            ;; This is needed to get the Python-built 'jediepcserver' command.
            (lambda args
              (apply (assoc-ref python:%standard-phases 'install)
                     #:use-setuptools? #t ; make reproducible
                     args)))
          (add-after 'python:install 'python:wrap
            (assoc-ref python:%standard-phases 'wrap))
          (add-after 'python:wrap 'patch-jedi:server-command
            (lambda* (#:key outputs #:allow-other-keys)
              (emacs-substitute-variables "jedi-core.el"
                ("jedi:server-command"
                 `(list ,(search-input-file outputs "bin/jediepcserver")))))))))
    (native-inputs (list emacs-mocker python-wrapper))
    (inputs (list python-wrapper python-epc python-jedi)) ;wrapped
    (propagated-inputs
     (list emacs-auto-complete emacs-python-environment emacs-epc))
    (home-page "https://github.com/tkf/emacs-jedi")
    (synopsis "Provides Python completion in Emacs")
    (description
     "This package provides completion in Python buffers and also helps find
the locations of docstrings, arguments, and functions.")
    (license license:gpl3+)))

(define-public emacs-jira
  (package
    (name "emacs-jira")
    (version "2.11.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/unmonoqueteclea/jira.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ribcy8l3hpm7g2p05vcx94g0ylf2j30knlfxymhx7jkpjk5a67j"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; no tests
    (propagated-inputs (list emacs-magit
                             emacs-request
                             emacs-tablist
                             emacs-transient))
    (home-page "https://github.com/unmonoqueteclea/jira.el")
    (synopsis "Emacs Interface to Jira")
    (description "This package allows you to visualuze and manipulate Jira
issues from Emacs.")
    (license license:gpl3+)))

(define-public emacs-company-jedi
  (package
    (name "emacs-company-jedi")
    (version "0.04")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/syohex/emacs-company-jedi")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1ihqapp4dv92794rsgyq0rmhwika60cmradqd4bn9b72ss6plxs1"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ; no "check" target
    (propagated-inputs
     (list emacs-jedi emacs-company))
    (home-page "https://github.com/syohex/emacs-company-jedi")
    (synopsis "Provides Python completion in @code{company-mode}")
    (description
     "This package provides a Company backend for Python.")
    (license license:gpl3+)))

(define-public emacs-elquery
  (package
    (name "emacs-elquery")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/AdamNiederer/elquery")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "035zjzmd7yfw0rsjpaklc2wwiqw6brkjadch9x8n8n2gjyxg05mn"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs emacs-no-x
      #:phases #~(modify-phases %standard-phases
                   (add-after 'unpack 'fix-native-compilation
                     (lambda _
                       (substitute* "elquery.el"
                         (("\\(1- \\(/ length \\(match-data\\)\\) 2\\)")
                          "(1- (/ (length (match-data)) 2))"))))
                   (add-before 'check 'disable-failing-tests
                     (lambda _
                       (substitute* "test/elquery-test.el"
                         (("\\(ert-deftest elquery--write-test .*" all)
                          (string-append all "(skip-unless nil)\n"))))))))
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/AdamNiederer/elquery/")
    (synopsis "Read and manipulate HTML in Emacs")
    (description
     "Elquery is a library that lets you parse, query, set, and format HTML using
Emacs Lisp.  It implements most of the @code{querySelector} API, and can get
and set HTML attributes.")
    (license license:gpl3+)))

(define-public emacs-cov
  ;; XXX: Upstream made no release nor any tag so far.
  (let ((commit "cd3e1995c596cc227124db9537792d8329ffb696")
        (revision "0"))
    (package
      (name "emacs-cov")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/AdamNiederer/cov")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1gyc0si60czhgrkm7kink1p1zj1h5j5nzif4ivm5bg78l28skmpm"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:emacs emacs-no-x              ;for libxml
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'disable-failing-tests
              (lambda _
                (substitute* "test/cov-test.el"
                  (("\\(ert-deftest cov--load-coverage-test-mtime-check .*" all)
                   (string-append all "(skip-unless nil)\n"))))))))
      (native-inputs
       (list emacs-ert-runner emacs-mocker emacs-undercover))
      (propagated-inputs
       (list emacs-elquery emacs-f emacs-s))
      (home-page "https://github.com/AdamNiederer/cov/")
      (synopsis "Emacs extension for displaying coverage data")
      (description
       "Cov shows code coverage data for your program in Emacs.  It supports
currently @code{gcov}, @code{lcov}, @code{coverage.py}, and @code{clover}
output, as well as the Coveralls format produced by Undercover.")
      (license license:gpl3+))))

(define-public emacs-puppet-mode
  (package
    (name "emacs-puppet-mode")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/voxpupuli/puppet-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0c5q8qmbligzjsn05di4wh6ggpd3944j4yqb78vzd441b8ssq70i"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "test" "CASK=")))
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/voxpupuli/puppet-mode")
    (synopsis "Emacs major mode for the Puppet configuration language")
    (description
     "This package provides support for the Puppet configuration language,
including syntax highlighting, indentation of expressions and statements,
linting of manifests and integration with Puppet Debugger.")
    ;; Also incorporates work covered by the Apache License, Version 2.0
    (license license:gpl3+)))

(define-public emacs-purescript-mode
  ;; Retrieved on 2021-05-18.
  (let ((revision "0")
        (commit "0acd1af446424ba855153161fe07a20f67dc0a89"))
    (package
      (name "emacs-purescript-mode")
      (version (git-version "0.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/purescript-emacs/purescript-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0rxdsmx8826az4blhnnvqrx7bjky9hwph6gkyrh33sck26xhh3g5"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command (list "ert-runner" "tests"
                              "-l" "tests/haskell-sort-imports-tests.el"
                              "-l" "tests/haskell-str-tests.el")
         #:phases
         (modify-phases %standard-phases
           (add-before 'install 'make-info
             (lambda _
               (invoke "makeinfo" "--no-split"
                       "-o" "purescript-mode.info" "purescript-mode.texi"))))))
      (native-inputs
       (list emacs-ert-runner texinfo))
      (home-page "https://github.com/purescript-emacs/purescript-mode")
      (synopsis "Emacs major mode and related tools for Purescript")
      (description "This package provides an Emacs major mode for writing Purescript.")
      (license license:gpl3+))))

(define-public emacs-new-purescript-mode
  (let ((commit "9f7bb73e26340fcd2ea1946dbad165f0406eb3e1")
        (revision "0"))
    (package
      (name "emacs-new-purescript-mode")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/justinwoo/new-purescript-mode")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0b3499df0gfz8yrdxz9dpgwal21h50sciigwz25ri1hwv1c1i7k0"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/justinwoo/new-purescript-mode/")
      (synopsis "Simple PureScript mode for cheap syntax highlighting")
      (description "New PureScript mode is a simple PureScript Emacs mode that
just provides syntax highlighting.")
      (license license:expat))))

(define-public emacs-god-mode
  (package
    (name "emacs-god-mode")
    (version "2.19.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/god-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1b39lq1l7xa2i4l5ciry3pjaxgzs0xawadb5kbcfhqhd4xlgb04g"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "--no-init-file" "--batch"
                   "--eval=(require 'ecukes)" "--eval=(ecukes)")))
    (native-inputs (list emacs-ecukes))
    (home-page "https://github.com/emacsorphanage/god-mode")
    (synopsis "Minor mode for entering commands without modifier keys")
    (description
     "This package provides a global minor mode for entering Emacs commands
without modifier keys.  It's similar to Vim's separation of commands and
insertion mode.  When enabled all keys are implicitly prefixed with
@samp{C-} (among other helpful shortcuts).")
    (license license:gpl3+)))

(define-public emacs-jinja2-mode
  (package
    (name "emacs-jinja2-mode")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/paradoxxxzero/jinja2-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0l26wcy496k6xk7q5sf905xir0p73ziy6c44is77854lv3y0z381"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/paradoxxxzero/jinja2-mode")
    (synopsis "Major mode for jinja2")
    (description
     "Emacs major mode for jinja2 with: syntax highlighting,
sgml/html integration, and indentation (working with sgml).")
    (license license:gpl3+)))

(define-public emacs-jinx
  (package
    (name "emacs-jinx")
    (version "2.4")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/minad/jinx")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gwq5fv84bdp0yrk853dxmfrw3az6gyjnfk9ckyja9cnqjlbh0d3"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'expand-load-path 'build-jinx-mod
            (lambda* _
              (invoke
               "emacs" "--batch" "-L" "."
               "-l" "jinx.el"
               "-f" "jinx--load-module")))
          (add-after 'expand-load-path 'build-info
            (lambda _
              (invoke "emacs" "--batch"
                      "--eval=(require 'ox-texinfo)"
                      "--eval=(find-file \"README.org\")"
                      "--eval=(org-texinfo-export-to-info)")))
          (add-after 'build-jinx-mod 'patch-path-to-jinx-mod
            (lambda _
              (let ((file "jinx.el"))
                (emacs-substitute-sexps file
                  ("\"Compile and load dynamic module.\""
                   `(module-load
                     ,(string-append #$output
                                     "/lib/emacs/jinx-mod.so")))))))
          (add-after 'install 'install-jinx-mod
            (lambda _
              (install-file "jinx-mod.so"
                            (string-append #$output "/lib/emacs")))))))
    (inputs (list enchant))
    (propagated-inputs (list emacs-compat))
    (native-inputs (list pkg-config texinfo))
    (home-page "https://github.com/minad/jinx")
    (synopsis "Emacs spell checker based on Enchant library")
    (description "Jinx is a just-in-time spell-checker for Emacs
based on the Enchant library.  It lazily highlights misspelled words in the
text of the visible portion of the buffer by honouring window boundaries as
well as text folding, if any.")
    (license license:gpl3+)))

(define-public emacs-jit-spell
  (package
    (name "emacs-jit-spell")
    (version "0.5")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/jit-spell-"
                                  version ".tar"))
              (sha256
               (base32
                "0xdn4hm4d26vmqh75i2ghyissm2s2szgynwynpgmlvhr4q5nkswf"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/astoff/jit-spell")
    (synopsis "Just-in-time spell checking")
    (description
     "This package highlights all misspelled words in a window, just like a
word processor or web browser does.  This behavior is different from the
built-in Flyspell package, which only checks words as the cursor moves over
them.  Moreover, unlike Flyspell, Jit-spell communicates with the
spell-checking subprocess entirely asynchronously, which can lead to a
noticeable performance improvement.")
    (license license:gpl3+)))

(define-public emacs-company-cabal
  ;; The latest version is 0.3.0, but no release has been provided after 0.2.1.
  (let ((commit "62112a7259e24bd6c08885629a185afe512b7d3d")
        (revision "1"))
    (package
      (name "emacs-company-cabal")
      (version (git-version "0.3.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/iquiw/company-cabal/")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1gf45xwjzdm8i4q6c6khk4dbg1mmp2r0awz2sjr4dcr2dbd1n7mg"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company))
      (arguments
       `(#:include (cons "^tools\\/" %default-include)))
      (home-page "https://github.com/iquiw/company-cabal/")
      (synopsis "Company completion for Haskell Cabal files")
      (description
       "This package allows for completion of field names, section names,
field values, and more within @code{haskell-cabal-mode}.")
      (license license:gpl3+))))

(define-public emacs-rfc-mode
  (package
    (name "emacs-rfc-mode")
    (version "1.4.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/galdor/rfc-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0sym5pji4ba4jy79zfs7gb2n9kqa60ma4z622s0mz647g56z09f4"))))
    (build-system emacs-build-system)
    (arguments
     ;; No tests
     (list #:tests? #f))
    (home-page "https://github.com/galdor/rfc-mode")
    (synopsis "Emacs major mode to read and browse @acronym{RFC, Request for Comments} documents")
    (description "The @code{rfc-mode} Emacs major mode is a browser and reader
for @acronym{RFC, Request for Comments} documents.")
    (license license:isc)))

(define-public emacs-rfcview
  (package
    (name "emacs-rfcview")
    (version "0.13")
    (home-page "http://www.loveshack.ukfsn.org/emacs")
    (source (origin
              (method url-fetch)
              (uri "http://www.loveshack.ukfsn.org/emacs/rfcview.el")
              (sha256
               (base32
                "0ympj5rxig383zl2jf0pzdsa80nnq0dpvjiriq0ivfi98fj7kxbz"))))
    (build-system emacs-build-system)
    (synopsis "Prettify Request for Comments (RFC) documents")
    (description "The Internet Engineering Task Force (IETF) and the Internet
Society (ISOC) publish various Internet-related protocols and specifications
as \"Request for Comments\" (RFC) documents and Internet Standard (STD)
documents.  RFCs and STDs are published in a simple text form.  This package
provides an Emacs major mode, rfcview-mode, which makes it more pleasant to
read these documents in Emacs.  It prettifies the text and adds
hyperlinks/menus for easier navigation.  It also provides functions for
browsing the index of RFC documents and fetching them from remote servers or
local directories.")
    (license license:gpl3+)))

(define-public emacs-ffap-rfc-space
  (package
    (name "emacs-ffap-rfc-space")
    (version "12")
    (home-page "https://user42.tuxfamily.org/ffap-rfc-space/index.html")
    (source (origin
              (method url-fetch)
              (uri "http://download.tuxfamily.org/user42/ffap-rfc-space.el")
              (sha256
               (base32
                "1iv61dv57a73mdps7rn6zmgz7nqh14v0ninidyrasy45b1nv6gck"))))
    (build-system emacs-build-system)
    (synopsis "Make ffap recognize an RFC with a space before its number")
    (description "The Internet Engineering Task Force (IETF) and the
Internet Society (ISOC) publish various Internet-related protocols and
specifications as \"Request for Comments\" (RFC) documents.  The
built-in Emacs module \"ffap\" (Find File at Point) has the ability to
recognize names at point which look like \"RFC1234\" and \"RFC-1234\"
and load the appropriate RFC from a remote server.  However, it fails
to recognize a name like \"RFC 1234\".  This package enhances ffap so
that it correctly finds RFCs even when a space appears before the
number.")
    (license license:gpl3+)))

(define-public emacs-feature-mode
  (let ((version "20190801")
        (revision "1")
        (commit "11ae1671629bfedaa553c7b819676d64eb320992"))
    (package
      (name "emacs-feature-mode")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/michaelklishin/cucumber.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0yd4gkxz9xcbgibfgr8apsid3f83nmg5jgqk5nql0linj5gymc28"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons* "^features\\/" "snippets\\/" "^support\\/"
                          %default-include)
         ;; XXX: tests require gherkin (>= 2.11.8, < 4.0.0)
         #:tests? #f))
      (home-page "https://github.com/michaelklishin/cucumber.el/")
      (synopsis "Emacs mode for editing Gherkin plain text user stories")
      (description "Major mode for editing Gherkin (popularized by the
Cucumber tool) user stories.  Also known by the name @code{cucumber.el}.")
      (license license:gpl2+))))

(define-public emacs-org-bullets
  (package
    (name "emacs-org-bullets")
    (version "0.2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sabof/org-bullets")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10nr4sjffnqbllv6gmak6pviyynrb7pi5nvrq331h5alm3xcpq0w"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sabof/org-bullets")
    (synopsis "Show bullets in org-mode as UTF-8 characters")
    (description
     "This package provides an Emacs minor mode causing bullets in
@code{org-mode} to be rendered as UTF-8 characters.")
    (license license:gpl3+)))

(define-public emacs-org-appear
  (package
    (name "emacs-org-appear")
    (version "0.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/awth13/org-appear")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1hfhnzhmbxrw4kz977s48x4nbq86vda5dvj00s2ima2i22b8l2z4"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/awth13/org-appear")
    (synopsis "Make invisible parts of Org fragments appear visible")
    (description "This package enables automatic visibility toggling of
org-mode elements depending on cursor position.  Hidden fragment parts appear
when the cursor enters a fragment and disappear when it leaves.")
    (license license:expat)))

(define-public emacs-org-dailies
  ;; No tags or versions.
  (let ((commit "f2dfc221d3566c6241f87c331667f96569651ada")
        (revision "2"))
    (package
      (name "emacs-org-dailies")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.sr.ht/~ngraves/org-dailies")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1nwa2dp1b03smyg8pvwqql1cwmcs4qdszw13ik02d51m238a6wy5"))))
      (build-system emacs-build-system)
      (home-page "https://git.sr.ht/~ngraves/org-dailies")
      (synopsis "Bare-bones daily journaling with Emacs")
      (description
       "This package provides daily journaling helpers.  It is a bare-bones
copy of the org-roam-dailies extension without org-roam.")
      (license license:gpl3+))))

(define-public emacs-org-drill
  (package
    (name "emacs-org-drill")
    (version "2.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/phillord/org-drill")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "13y302lyscdqrba1sfx60yf5ji2xi7fbsvjsjbw7hiz63kg6rccy"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "--batch" "-l" "assess-discover"
                   "-L" "."
                   "--eval" "(assess-discover-run-and-exit-batch t)")))
    (propagated-inputs
     (list emacs-org emacs-persist))
    (native-inputs (list emacs-assess))
    (home-page "https://gitlab.com/phillord/org-drill")
    (synopsis "Flash card memorization system using Org mode")
    (description
     "This package uses spaced repetition algorithms to conduct interactive
drill sessions to aid in memorization.  In these sessions you are shown flash
cards created in Org mode.")
    (license license:gpl3+)))

(define-public emacs-anki-editor
  ;; Last release was in 2018.
  (let ((commit "546774a453ef4617b1bcb0d1626e415c67cc88df")
        (revision "0")
        (version "0.3.3"))
    (package
      (name "emacs-anki-editor")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/louietan/anki-editor")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1if610hq5j8rbjh1caw5bwbgnsn231awwxqbpwvrh966kdxzl4qf"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-request))
      (home-page "https://github.com/louietan/anki-editor")
      (synopsis "Minor mode for making Anki cards with Org mode")
      (description
       "This package is for people who use Anki as a spaced repetition system
(SRS) but would like to make cards in Org mode.")
      (license license:gpl3+))))

(define-public emacs-org-mime
  (package
    (name "emacs-org-mime")
    (version "0.3.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/org-mime/org-mime")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "12144hhiygvbx2ws01b47z4wqqd5jfbpxx4cn503mkqwcxzvpvgb"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-l" "org-mime.el"
                             "-l" "htmlize" "-l" "test/org-mime-tests.el")
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-before 'check 'set-home
                           (lambda _
                             (setenv "HOME" (getenv "TMPDIR")))))))
    (native-inputs (list emacs-htmlize))
    (home-page "https://github.com/org-mime/org-mime")
    (synopsis "Send HTML email using Org mode HTML export")
    (description
     "This program sends HTML email using Org-mode HTML export.
This approximates a WYSiWYG HTML mail editor from within Emacs, and can be
useful for sending tables, fontified source code, and inline images in
email.")
    (license license:gpl3+)))

(define-public emacs-org-msg
  ;; No git tags.  The commit below corresponds to the release of version 4.0.
  (let ((commit "60e22e446325a9b3387396459d98be7c1c52579d"))
    (package
      (name "emacs-org-msg")
      (version "4.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jeremy-compostella/org-msg")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "077g7gvn1k6i2x4m2kd3dkrznc89f5a5pd916wsmpy703pv0aca5"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-htmlize))
      (home-page "https://github.com/jeremy-compostella/org-msg")
      (synopsis "Mix Org mode and Message mode to compose emails")
      (description
       "OrgMsg is a GNU Emacs global minor mode mixing up Org mode and your
Mail User Agent Mode (Message, mu4e, or Notmuch) to compose and reply to
emails in a Outlook HTML friendly style.")
      (license license:gpl3+))))

(define-public emacs-org-superstar
  (package
    (name "emacs-org-superstar")
    (version "1.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/integral-dw/org-superstar-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1hz4m3axcnsvwmal0fsr2b3s6wa9gzxd5rkk4r74lmsz36x5yl0h"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-org))
    (home-page "https://github.com/integral-dw/org-superstar-mode")
    (synopsis "Prettify headings and plain lists in Org mode")
    (description "This package prettifies headings and plain lists in
Org mode.  It is a direct descendant of @code{org-bullets}, with most
of the code base completely rewritten.

Currently, this package prettifies Org heading lines by:
@itemize
@item replacing trailing bullets by UTF-8 bullets,
@item hiding leading stars, customizing their look or removing them from vision,
@item applying a custom face to the header bullet,
@item applying a custom face to the leading bullets,
@item using double-bullets for inline tasks,
@item (optional) using special bullets for TODO keywords.
@end itemize

It also prettifies Org plain list bullets by:
@itemize
@item replacing each bullet type (*, + and -) with UTF-8 bullets,
@item applying a custom face to item bullets.
@end itemize

Features degrade gracefully when viewed from terminal.")
    (license license:gpl3+)))

(define-public emacs-org-pandoc-import
  (let ((commit "db308f1a05be26ce5b287633637ce554599b1377")
        (revision "0"))
    (package
      (name "emacs-org-pandoc-import")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tecosaur/org-pandoc-import/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19z1qaairhpj8kyyqwx8yf53j3f03a9a1z1jfa348qmncnra5jmh"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include
         (cons* "^filters\\/" "^preprocessors" %default-include)
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'patch-exec-paths
             (lambda* (#:key inputs #:allow-other-keys)
               (emacs-substitute-variables "org-pandoc-import.el"
                 ("org-pandoc-import-executable"
                  (search-input-file inputs "bin/pandoc"))))))))
      (inputs
       (list pandoc))
      (home-page "https://github.com/tecosaur/org-pandoc-import/")
      (synopsis "Read and edit non-Org file types in Org")
      (description
       "This package uses Pandoc to convert selected file types to Org.  It can
convert supported non-Org files to an Org file with Pandoc.

It can also intercept requests for non-Org files it knows it can convert,
convert the file to a temporary Org file, and open this file instead.  On
save, it exports back to the original non-Org file.")
      (license license:gpl3+))))

(define-public emacs-org-pomodoro
  ;; Last release version was from 2016.
  (let ((commit "aa07c11318f91219336197e62c47bc7a3d090479")
        (revision "1"))
    (package
      (name "emacs-org-pomodoro")
      (version (git-version "2.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/marcinkoziej/org-pomodoro")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0nbprh2nhnmb7ngp9ndr6zr37ashcsvpi5slv7a37x1dl7j6w1k4"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-alert))
      (arguments
       (list
        #:include #~(cons "^resources\\/" %default-include)
        #:test-command
        #~(list "emacs" "--batch"
                "-l" "org-pomodoro-tests.el"
                "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'make-tests-writable
              (lambda _
                (make-file-writable "org-pomodoro-tests.el")))
            (add-before 'check 'add-require
              (lambda _
                (emacs-batch-edit-file "org-pomodoro-tests.el"
                  `(progn (progn (goto-char (point-min))
                                 (re-search-forward "ert-deftest")
                                 (beginning-of-line)
                                 (forward-line -1)
                                 (insert "(require 'org-pomodoro)"))
                          (basic-save-buffer))))))))
      (home-page "https://github.com/marcinkoziej/org-pomodoro")
      (synopsis "Pomodoro technique for org-mode")
      (description "@code{emacs-org-pomodoro} adds very basic support for
Pomodoro technique in Emacs org-mode.

Run @code{M-x org-pomodoro} for the task at point or select one of the
last tasks that you clocked time for.  Each clocked-in pomodoro starts
a timer of 25 minutes and after each pomodoro a break timer of 5
minutes is started automatically.  Every 4 breaks a long break is
started with 20 minutes.  All values are customizable.")
      (license license:gpl3+))))

(define-public emacs-org-sidebar
  (package
    (name "emacs-org-sidebar")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/org-sidebar")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gccih9wgi31m59flljw4cphfyhlfcqbjih91gkcnldq5z7n83nj"))
       (modules '((guix build utils)))
       (snippet #~(begin
                    (delete-file-recursively "images")
                    ;; Contents of makem package, but no tests.
                    (for-each delete-file
                              '("makem.sh" "Makefile"))))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash
           emacs-org
           emacs-org-ql
           emacs-org-super-agenda
           emacs-s))
    (home-page "https://github.com/alphapapa/org-sidebar")
    (synopsis "Helpful sidebar for Org buffers")
    (description "This package provides a sidebar for Org buffers.  At the
top is a chronological list of scheduled and deadlined tasks in the current
buffer (similar to the Org agenda ,but without all its features), and below
that is a list of all other non-done to-do items.  If the buffer is narrowed,
the sidebar only shows items in the narrowed portion; this allows seeing an
overview of tasks in a subtree.")
    (license license:gpl3+)))

(define-public emacs-org-trello
  (package
    (name "emacs-org-trello")
    (version "0.8.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/org-trello/org-trello")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "18y5zdjc7zh4jlwz6k1nl13i721rknqm0vp4mxfnmq0sc5a0qva0"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; Old incompatible version of dash is used.
           #:test-command #~(list "ert-runner")))
    (native-inputs (list emacs-ert-runner emacs-undercover))
    (propagated-inputs
     (list emacs-dash
           emacs-deferred
           emacs-f
           emacs-helm
           emacs-request
           emacs-s))
    (home-page "https://org-trello.github.io")
    (synopsis "Emacs minor mode for interacting with Trello")
    (description "This package provides an Emacs minor mode to extend
@code{org-mode} with Trello abilities.  Trello is an online project
organizer.")
    (license license:gpl3+)))

(define-public emacs-org-tanglesync
  (let ((commit "af83a73ae542d5cb3c9d433cbf2ce1d4f4259117")
        (revision "3"))
    (package
      (name "emacs-org-tanglesync")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/mtekman/org-tanglesync.el/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "11rfn0byy0k0321w7fjgpa785ik1nrk1j6d0y4j0j4a8gys5hjr5"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; no tests
        #:tests? #f))
      (home-page "https://gitlab.com/mtekman/org-tanglesync.el/")
      (synopsis "Sync Org source blocks with tangled external files")
      (description "This package automatically pulls changes from source code
to their corresponding tangled blocks.")
      (license license:gpl3+))))

(define-public emacs-company-flow
  (let ((commit "76ef585c70d2a3206c2eadf24ba61e59124c3a16")
        (revision "1"))
    (package
      (name "emacs-company-flow")
      (version (git-version "0.1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/aaronjensen/company-flow/")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0zs9cblnbkxa0dxw4lyllmybqizxcdx96gv8jlhx20nrjpi78piw"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company emacs-dash))
      (home-page "https://github.com/aaronjensen/company-flow/")
      (synopsis "Flow backend for @code{company-mode}")
      (description
       "This package provides completion for JavaScript files utilizing Flow.")
      (license license:gpl3+))))

(define-public emacs-habitica
  (let ((commit "c45c602ddf9d6cbb0e3baf5cb3e1b7ef90f2759d")
        (revision "1"))
    (package
      (name "emacs-habitica")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abrochard/emacs-habitica")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0wgnzn3z98bl28jgqi7xklw9fwx2wwgihj3mq0jb8ah4vn70d0j3"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/abrochard/emacs-habitica")
      (synopsis "Emacs interface for Habitica")
      (description "Emacs extension for @uref{https://habitica.com/, Habitica},
a RPG style habit tracker and todo list.")
      (license license:gpl3+))))

(define-public emacs-atom-one-dark-theme
  (let ((commit "1f1185bf667a38d3d0d180ce85fd4c131818aae2")
        (revision "0"))
    (package
     (name "emacs-atom-one-dark-theme")
     (version (git-version "0.4.0" revision commit))
     (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jonathanchu/atom-one-dark-theme")
                    (commit commit)))
              (sha256
               (base32
                "1alma16hg3mfjly8a9s3mrswkjjx4lrpdnf43869hn2ibkn7zx9z"))
              (file-name (git-file-name name version))))
     (build-system emacs-build-system)
     (home-page "https://github.com/jonathanchu/atom-one-dark-theme")
     (synopsis "Atom One Dark color theme for Emacs")
     (description "An Emacs port of the Atom One Dark theme from Atom.io.")
     (license license:gpl3+))))

(define-public emacs-atomic-chrome
  (let ((commit "072a137a19d7e6a300ca3e87c0e142a7f4ccb5fb")
        (revision "1"))
    (package
      (name "emacs-atomic-chrome")
      (version (git-version "2.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/alpha22jp/atomic-chrome")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0lfvqzndip8jxlc0j7pc4kxi9vi84qsqmkhaq14rj3krx79djqnq"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-websocket))
      (home-page "https://github.com/alpha22jp/atomic-chrome")
      (synopsis
       "Edit browser text area with Emacs using Atomic Chrome or Ghost Text")
      (description
       "This is an Emacs version of Atomic Chrome and Ghost Text,
which are extensions that allows you to edit text areas of the browser in
Emacs.

The input on Emacs is reflected to the browser instantly and continuously.
You can use both the browser and Emacs at the same time.  They are updated to
the same content bi-directionally.")
      (license license:gpl2+))))

(define-public emacs-zenburn-theme
  (package
    (name "emacs-zenburn-theme")
    (version "2.8.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/zenburn-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "00zyx2knfchxkml19kf4wfgigsbgzqf47mvbgrmk3nfznnnnyvmf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/bbatsov/zenburn-emacs")
    (synopsis "Low contrast color theme for Emacs")
    (description
     "Zenburn theme is a port of the popular Vim Zenburn theme for Emacs.
It is built on top of the custom theme support in Emacs 24 or later.")
    (license license:gpl3+)))

(define-public emacs-moe-theme
  (package
    (name "emacs-moe-theme")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kuanyui/moe-theme.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "14higsv6h0pka90gr25a3yxh95xn65l6qxb39mmdzkfdlnzsg664"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/kuanyui/moe-theme.el")
    (synopsis "Anime-inspired color themes")
    (description
     "This package provides vibrant color schemes with light and dark
variants.")
    (license license:gpl3+)))

(define-deprecated-package emacs-moe-theme-el
  emacs-moe-theme)

(define-public emacs-color-theme-sanityinc-tomorrow
  (package
    (name "emacs-color-theme-sanityinc-tomorrow")
    (version "1.18")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url
              "https://github.com/purcell/color-theme-sanityinc-tomorrow")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0r8q6ld2zma1bqq5pv61gpy99a4vx6bwx4v820ijzbymmi62vv3z"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "./run-tests.sh")))
    (home-page "https://github.com/purcell/color-theme-sanityinc-tomorrow")
    (synopsis "Emacs color themes based on Chris Kempson's 'tomorrow' themes")
    (description
     "An Emacs version of Chris Kempson's \"Tomorrow\" themes, with much more
extensive face definitions than the \"official\" Emacs variant.")
    (license license:gpl3+)))

(define-public emacs-solarized-theme
  (package
    (name "emacs-solarized-theme")
    (version "2.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/solarized-emacs/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nwyax9dikpw4fcplnk0az9k1pk02wnhkadvfp325s7rl2j8y23b"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; Tests require a standard tty.
           #:test-command #~(list "make" "run" "CASK=")))
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/bbatsov/solarized-emacs")
    (synopsis "Port of the Solarized theme for Emacs")
    (description
     "Solarized for Emacs is a port of the Solarized theme for Vim.  This
package provides a light and a dark variant.")
    (license license:gpl3+)))

(define-public emacs-color-theme-solarized
  ;; From 2017-10-24.  No releases available.
  (let ((commit "f3ca8902ea056fb8e46cb09f09c96294e31cd4ee")
        (revision "0"))
    (package
      (name "emacs-color-theme-solarized")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://github.com/sellout/emacs-color-theme-solarized")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "16d7adqi07lzzr0qipl1fbag9l8kiyr3xrqxi528pimcisbg85d3"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f                ; no tests
             #:phases
             #~(modify-phases %standard-phases
                 ;; These are intended for old versions of Emacs and do not
                 ;; compile with emacs>=24.
                 (add-before 'install 'remove-color-theme
                   (lambda _
                     (delete-file "./color-theme-solarized.el")
                     (delete-file "./color-theme-solarized-pkg.el"))))))
      (home-page "https://github.com/sellout/emacs-color-theme-solarized")
      (synopsis "Solarized color scheme for Emacs")
      (description
       "This package provides Emacs highlighting using Ethan Schoonover’s
Solarized color scheme.")
      (license license:expat))))

(define-public emacs-color-identifiers-mode
  (let ((commit "a26d00d898e0a3295cb7da9323046397223ea1fe")
        (revision "0"))
    (package
      (name "emacs-color-identifiers-mode")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ankurdave/color-identifiers-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1kky827f922ziiwasrfnv97vqdf62fp9yml36x1fjsm2h6qw0c8v"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-dash))
      (home-page "https://github.com/ankurdave/color-identifiers-mode")
      (synopsis "Minor mode for coloring identifiers based on their names")
      (description
       "This package provides an Emacs minor mode to highlight each source
code identifier uniquely based on its name.")
      (license license:gpl3+))))

(define-public emacs-poet-theme
  (let ((commit "16eb694f0755c04c4db98614d0eca1199fddad70")
        (revision "1"))
    (package
      (name "emacs-poet-theme")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kunalb/poet")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0zm8jbviddyj7jnyssh77jx43jghbpjwr77n9s3cjp3bmadwkrv5"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/kunalb/poet/")
      (synopsis "Emacs theme for prose")
      (description
       "Emacs has very good support for multiple fonts in a single file.  Poet
uses this support to make it much more convenient to write prose within Emacs,
with particular attention paid to @code{org-mode} and @code{markdown-mode}.
Code blocks, tables, etc are formatted in monospace text with the appropriate
backgrounds.")
      (license license:expat))))

(define-public emacs-ahungry-theme
  (package
    (name "emacs-ahungry-theme")
    (version "1.10.0")
    (source
     (origin (method url-fetch)
             (uri (string-append "https://elpa.gnu.org/packages/ahungry-theme-"
                                 version ".tar"))
             (sha256
              (base32
               "14q5yw56n82qph09bk7wmj5b1snhh9w0nk5s1l7yn9ldg71xq6pm"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ahungry/color-theme-ahungry")
    (synopsis "Ahungry color theme for Emacs")
    (description "Ahungry theme for Emacs provides bright and bold colors.
If you load it from a terminal, you will be able to make use of the
transparent background.  If you load it from a GUI, it will default to a
dark background.")
    (license license:gpl3+)))

(define-public emacs-color-theme-modern
  ;; No release since October 2019
  (let ((commit "74ad69bbca6fcfff3c0960d888c7c9c1f9f3e2e8")
        (revision "1"))
    (package
      (name "emacs-color-theme-modern")
      (version (git-version "0.0.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacs-jp/replace-colorthemes.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "13ff4s372wsl5x13vh4vywhi6qcc54gybhp6rxl0r1l4wxidanwn"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacs-jp/replace-colorthemes")
      (synopsis "Emacs color themes implemented via built-in customization")
      (description "This package contains several themes that were originally
implemented with the venerable @code{color-themes} package, ported to Emacs'
built-in custom themes.")
      (license license:gpl3+))))

(define-public emacs-gruvbox-theme
  (package
    (name "emacs-gruvbox-theme")
    (version "1.30.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/greduan/emacs-theme-gruvbox")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1bnmp9nbpsrnxhn6v81533xcb9hx043wf86n5hwj9mpacl5ic33y"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-autothemer))
    (home-page "https://github.com/greduan/emacs-theme-gruvbox")
    (synopsis "Gruvbox is a retro groove color scheme ported from Vim")
    (description
     "Gruvbox is heavily inspired by badwolf, jellybeans and solarized.

Designed as a bright theme with pastel 'retro groove' colors and light/dark
mode switching in the way of solarized.  The main focus when developing gruvbox
is to keep colors easily distinguishable, contrast enough and still pleasant
for the eyes.")
    (license license:expat))) ; MIT license

(define-public emacs-spacegray-theme
  (let ((commit "9826265c2bceb2ebc1c5e16a45021da0253ace97")
        (revision "0"))
    (package
      (name "emacs-spacegray-theme")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/bruce/emacs-spacegray-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0aplwmm17ypbns5blc4rf5rr6dasj0zp5ibykpfl43fh4bd8z89n"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/bruce/emacs-spacegray-theme")
      (synopsis "Port of Sublime Text's Spacegray theme for Emacs")
      (description
       "@code{spacegray-theme} is an Emacs port of the Spacegray theme from
Sublime Text.  It features a dark blue/gray background and soft blue, green,
orange and red as accent colors.")
      (license license:expat)))) ; MIT license

(define-public emacs-org-cv
  ;; There are no tagged releases.
  (let ((commit "24bcd82348d441d95c2c80fb8ef8b5d6d4b80d95")
        (revision "0"))
    (package
      (name "emacs-org-cv")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/Titan-C/org-cv")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0zcnbxvlwi4d6vzsm3ag7z74qphdigmx303gppb9d614jnsfsdg2"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ox-hugo))
      (home-page "https://titan-c.gitlab.io/org-cv/")
      (synopsis "Collection of export backends for Org to generate a CV")
      (description
       "This project exports an Org file with reasonably structured items into
a LaTeX file, which compiles into a nice CV.  In the same spirit, the Org file
may export to Markdown so that it can be used for a web based CV.")
      (license license:gpl3+))))

(define-public emacs-ox-gfm
  (package
    (name "emacs-ox-gfm")
    (version "1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/larstvei/ox-gfm")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0drdypmgxk3238hmkqw9s3cw9wv94cyfqar5ar0bv0k69s92pxj8"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/larstvei/ox-gfm")
    (synopsis "Github Flavored Markdown Back-End for Org Export Engine")
    (description "This package is a small exporter based on the Markdown
exporter already existing in Org mode.  It supports the Github flavored
markdown features.")
    (license license:gpl3+)))

(define-public emacs-2048-game
  (package
    (name "emacs-2048-game")
    (version "20151026.1233")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://melpa.org/packages/2048-game-"
                           version ".el"))
       (sha256
        (base32
         "0gy2pvz79whpavp4jmz8h9krzn7brmvv3diixi1d4w51pcdvaldd"))))
    (build-system emacs-build-system)
    (home-page "https://hg.sr.ht/~zck/game-2048")
    (synopsis "Implementation of the game 2048 in Emacs Lisp")
    (description
     "This program is an implementation of 2048 for Emacs.
The goal of this game is to create a tile with value 2048.  The size of the
board and goal value can be customized.")
    (license license:gpl3+)))

(define-public emacs-chess
  (package
    (name "emacs-chess")
    (version "2.0.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "chess-" version ".tar"))
       (sha256
        (base32 "1a4iwjdh6k348df6qywjws9z9f862d62m0b2sz57z4xhywiyxpr7"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-pieces
            (lambda _
              (copy-recursively
               "pieces"
               (string-append (elpa-directory #$output) "/pieces")))))))
    (home-page "https://elpa.gnu.org/packages/chess.html")
    (synopsis "Play chess in GNU Emacs")
    (description
     "Chess is an Emacs Lisp library and several clients on top of the
underlying library functionality for performing various activities related to
the game of chess.")
    (license license:gpl3+)))

(define-public emacs-4clojure
  ;; There is no release.  Base version is extracted from Version keyword in
  ;; the main file.
  (let ((commit "4eccf8c7d4341a36c269451838114b27836699f9")
        (revision "1"))
    (package
      (name "emacs-4clojure")
      (version (git-version "0.2.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/4clojure")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19x653lzc1dxil4ix257hciidbdmbhaxhs6qhlkwi9ygjrlrgvnk"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-request))
      (home-page "https://github.com/emacsorphanage/4clojure/")
      (synopsis "Open and evaluate 4clojure questions in Emacs")
      (description "Emacs 4clojure interacts with
@url{http://www.4clojure.com, 4clojure} problems.  You can open a specific
question and move to the next or previous one.  You can also verify your
answers.")
      (license license:gpl3+))))

(define-public emacs-base16-theme
  (package
    (name "emacs-base16-theme")
    (version "3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tinted-theming/base16-emacs")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mdnm6xam1md9yiy6y14yp59j2864brazqszm7vklgb40xpxaxsq"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons "^build\\/.*\\.el$" %default-include)
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'install 'mv-themes
                 (lambda _
                   (use-modules (ice-9 regex))
                   (let ((theme-dir (string-append (elpa-directory #$output)
                                                   "/build")))
                     (for-each (lambda (theme)
                                 (rename-file
                                  theme
                                  (regexp-substitute #f
                                                     (string-match "build\\/"
                                                                   theme)
                                                     'pre 'post)))
                               (find-files theme-dir "\\.el$"))
                     (delete-file-recursively theme-dir)))))))
    (home-page "https://github.com/tinted-theming/base16-emacs")
    (synopsis "Base16 color themes for Emacs")
    (description
     "Base16 provides carefully chosen syntax highlighting and a default set
of sixteen colors suitable for a wide range of applications.  Base16 is not a
single theme but a set of guidelines with numerous implementations.")
    (license license:expat)))

(define-public emacs-solaire-mode
  (package
    (name "emacs-solaire-mode")
    (version "2.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hlissner/emacs-solaire-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "164qqzmj1321rkvpiwpr5xnm1nbniibjkymfw5az32m2acdwk52j"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/hlissner/emacs-solaire-mode")
    (synopsis "Change background of file-visiting buffers in Emacs")
    (description
     "@code{solaire-mode} is inspired by editors which visually distinguish
code-editing windows from sidebars, popups, terminals, ecetera.  It changes the
background of file-visiting buffers (and certain aspects of the UI) to make
them easier to distinguish from other, less important buffers.")
    (license license:expat)))

(define-public emacs-embark
  (package
    (name "emacs-embark")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/oantolin/embark")
             (commit version)))
       (sha256
        (base32 "1361jvwr3wjbpmq6dfkrhhhv9vrmqpkp1j18syp311g6h8hzi3hg"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs
     (list emacs-avy emacs-consult))
    (home-page "https://github.com/oantolin/embark")
    (synopsis "Emacs mini-buffer actions rooted in keymaps")
    (description
     "This package provides a sort of right-click contextual menu for Emacs
offering you relevant @emph{actions} to use on a @emph{target} determined by
the context.

In the minibuffer, the target is the current best completion candidate.  In
the @code{*Completions*} buffer the target is the completion at point.  In
a regular buffer, the target is the region if active, or else the file, symbol
or URL at point.

The type of actions offered depend on the type of the target.  For files you
get offered actions like deleting, copying, renaming, visiting in another
window, running a shell command on the file, etc.  For buffers the actions
include switching to or killing the buffer.  For package names the actions
include installing, removing or visiting the homepage.")
    (license license:gpl3+)))

(define-public emacs-prescient
  (package
    (name "emacs-prescient")
    (version "6.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/raxod502/prescient.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0f4wi8aq3yfykxfza4y4c5yhcs50cs3gpfj0qrmvfq9hvkhzj52w"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (propagated-inputs
     (list emacs-company emacs-corfu emacs-ivy emacs-selectrum emacs-vertico))
    (home-page "https://github.com/raxod502/prescient.el/")
    (synopsis "Emacs library for sorting and filtering candidates")
    (description
     "Prescient is a library for sorting and filtering, as well as extensions
for Ivy and Company that make use of the library.")
    (license license:expat)))

(define-public emacs-selectrum
  (package
    (name "emacs-selectrum")
    (version "3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/raxod502/selectrum")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "02jrki6vzyfyi1bbslki5pk2348flh9dz18jkc4y7p60bvbr52cb"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/raxod502/selectrum/")
    (synopsis "Incremental narrowing in Emacs")
    (description "Selectrum is a solution for incremental narrowing in
Emacs, replacing Helm, Ivy, and IDO.  Its design philosophy is based
on choosing the right abstractions and prioritizing consistency and
predictability over special-cased improvements for particular cases.
As such, Selectrum follows existing Emacs conventions where they exist
and are reasonable, and it declines to implement features which have
marginal benefit compared to the additional complexity of a new
interface.")
    (license license:expat)))

(define-public emacs-orderless
  (package
    (name "emacs-orderless")
    (version "1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/oantolin/orderless")
             (commit version)))
       (sha256
        (base32 "0cgklam29vsfrl70n3cqv1dxbsnpzjylfxabfs9v1yz02q27nggv"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/oantolin/orderless")
    (synopsis
     "Emacs completion style that matches multiple regexps in any order")
    (description "This package provides an orderless completion style that
divides the pattern into space-separated components, and matches candidates
that match all of the components in any order.  Each component can match in
any one of several ways: literally, as a regexp, as an initialism, in the flex
style, or as multiple word prefixes.")
    (license license:gpl3+)))

(define-public emacs-consult
  (package
    (name "emacs-consult")
    (version "2.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/consult")
             (commit version)))
       (sha256
        (base32 "0fxz7wi1fvyc1ma2wx8mh24bnkbda434k43xz90aw8r0gr79qz05"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; there are no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/consult")
    (synopsis "Consulting completing-read")
    (description "This package provides various handy commands based on the
Emacs completion function completing-read, which allows quickly selecting from a
list of candidates.")
    (license license:gpl3+)))

(define-public emacs-consult-bibtex
  ;; XXX: Upstream contains a single commit, which matches the version below.
  (let ((commit "2f870d6eefb54a53216d90a82cff0ff97ba54725"))
    (package
      (name "emacs-consult-bibtex")
      (version "0.1")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mohkale/consult-bibtex")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0jxjvpg3j8zk77sfhyy27fd1zbj2zz7xayavan3hhj4853q92kwq"))))
      (build-system emacs-build-system)
      (inputs (list emacs-consult emacs-embark emacs-org-roam-bibtex))
      (home-page "https://github.com/mohkale/consult-bibtex")
      (synopsis "Consulting-read interface for BibTeX completion")
      (description "This package provides a read interface for BibTeX
completion using Consult.")
      (license license:gpl3+))))

(define-public emacs-consult-denote
  (package
    (name "emacs-consult-denote")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/protesilaos/consult-denote/")
              (commit version)))
       (sha256
        (base32 "1glkb9jz2549x8n9wfkzg654gqkpgx2imq1iwv9c4l0bryk47cg6"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-consult emacs-denote))
    (home-page "https://github.com/protesilaos/consult-denote")
    (synopsis "Consult interface for Denote")
    (description
     "Consult Denote provides commands to interact with Emacs Denote using
a Completing Read interface.")
    (license license:gpl3+)))

(define-public emacs-consult-dir
  (package
    (name "emacs-consult-dir")
    (version "0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/karthink/consult-dir")
                    (commit (string-append "v" version))))
              (sha256
               (base32 "1cff4ssrn1mw2s5n090pdmwdirnfih8idg5f0ll2bi2djc4hq5kn"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page "https://github.com/karthink/consult-dir")
    (synopsis "Insert paths into minibuffer prompts in Emacs")
    (description "Consult-dir allows you to easily insert directory
paths into the minibuffer prompt in Emacs.

When using the minibuffer, you can switch---with completion and filtering
provided by your completion setup---to any directory you’ve visited recently,
or to a project or bookmarked directory.  The minibuffer prompt will be
replaced with the directory you choose.")
    (license license:gpl3+)))

(define-public emacs-consult-mu
  (let ((commit "e1dc63674b924698b30a9ecc0400a05864711c85")
        (revision "0"))
    (package
      (name "emacs-consult-mu")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/armindarvish/consult-mu/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "17ad0901xbg2vrgdvpp67kia2r7gqsvbkqqb44f4pwakr7zwiz2y"))))
      (build-system emacs-build-system)
      (arguments
       '(#:phases (modify-phases %standard-phases
                    (add-after 'unpack 'move-source-files
                      (lambda _
                        (let ((el-files (find-files "./extras" ".*\\.el$")))
                          (for-each (lambda (f)
                                      (rename-file f
                                                   (basename f))) el-files)))))))
      (propagated-inputs (list emacs-consult emacs-embark mu))
      (home-page "https://github.com/armindarvish/consult-mu/")
      (synopsis "Search mu4e emails with Consult")
      (description "This package provides a query interface for mu4e using
Consult.")
      (license license:gpl3+))))

(define-public emacs-consult-notes
  (let ((commit "7c9cd970c75fae9a6140ca1beefed9532d8e1b96")
        (revision "0"))
    (package
      (name "emacs-consult-notes")
      (version (git-version "0.7" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/mclear-tools/consult-notes/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1lccpnqqaai6vsjn9v65xhpzs0bmhrsyflaxg3n3iszigmsxrfaz"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))      ;no tests
      (propagated-inputs (list emacs-consult emacs-dash emacs-s))
      (home-page "https://github.com/mclear-tools/consult-notes/")
      (synopsis "Management of personal notes with @code{emacs-consult}")
      (description
       "This package allows selecting notes easily.  Its most basic use is to
integrate directories of files (notes) and to provide easy narrowing via
@code{emacs-consult}.  @code{consult-notes} can be used with any directory (or
directories) of note files.  It easily integrates with note systems like
@code{emacs-zk}, @code{emacs-denote} or @code{emacs-org-roam}.  Additionally, it
may also search org headings in a set of specified files.")
      (license license:gpl3+))))

(define-public emacs-consult-notmuch
  (package
    (name "emacs-consult-notmuch")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/jao/consult-notmuch")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1yx33bzj251igsagdphlxa84wb07ynlz4rf1nplpk19m5lfkj54c"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-consult emacs-notmuch))
    (home-page "https://codeberg.org/jao/consult-notmuch")
    (synopsis "Search and preview Notmuch emails using Consult")
    (description
     "This package provides two commands using Consult to query Notmuch emails
and present results either as single emails or full trees.")
    (license license:gpl3+)))

(define-public emacs-consult-org-roam
  (let* ((commit "2ca42a1c1641a29f1447d35be01bd1fda368a9e2")
         (revision "1"))
    (package
      (name "emacs-consult-org-roam")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jgru/consult-org-roam")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "142fra7wap6dfwd4c82j7z3nk1yw78slrwhjx6vkiql8ylbiw5fi"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-consult emacs-org-roam))
      (home-page "https://github.com/jgru/consult-org-roam")
      (synopsis "Consult integration for Org Roam")
      (description
       "This is a set of functions to use Org Roam with Consult.  This
packages replaces Org Roam's own completing read functions with equivalent
versions utilizing Consult's internal API.")
      (license license:gpl3+))))

(define-public emacs-consult-eglot
  (package
    (name "emacs-consult-eglot")
    (version "0.5.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/mohkale/consult-eglot")
                    (commit (string-append "v" version))))
              (sha256
               (base32
                "1xx5g4z4l0kanf2mh3f798gw8ydfzbx15wfyqrnhwhiljz796xis"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-consult emacs-eglot))
    (home-page "https://github.com/mohkale/consult-eglot")
    (synopsis "Consulting-read interface for eglot")
    (description "This package acts as a parallel of consult-lsp for eglot and
provides a front-end interface for the workspace/symbols LSP procedure
call.")
    (license license:gpl3+)))

(define-public emacs-consult-flycheck
  (package
    (name "emacs-consult-flycheck")
    (version "1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/minad/consult-flycheck")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1yi2qa4gbxlyhwc4rj3iidgr1dpdij68gbkgkk55l53p3yl1p2ww"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-consult emacs-flycheck))
    (home-page "https://github.com/minad/consult-flycheck")
    (synopsis "Consult integration for Flycheck")
    (description
     "This package provides the @code{consult-flycheck} command for Emacs,
 which integrates @code{Consult} with @code{Flycheck}.")
    (license license:gpl3+)))

(define-public emacs-eglot-tempel
  (package
    (name "emacs-eglot-tempel")
    (version "0.8.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/fejfighter/eglot-tempel")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "00v94h3zvl2pm1yizjmdfqgmzwqq8aghjixdcb23x703inq5p82x"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "-batch"
                             "-l" "eglot-tempel-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'skip-failing-test
            (lambda _
              (substitute* "eglot-tempel-tests.el"
                (("\\(ert-deftest test-named .*" all)
                 (string-append all " (skip-unless nil)"))))))))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs (list emacs-eglot emacs-peg emacs-tempel))
    (home-page "https://github.com/fejfighter/eglot-tempel")
    (synopsis "Bridge for Tempel templates with Eglot")
    (description "This package is an adapter to use the Tempel templating
library with Eglot instead of Yasnippet.")
    (license license:gpl3+)))

(define-public emacs-eglot-jl
  (package
    (name "emacs-eglot-jl")
    (version "2.4.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/non-Jedi/eglot-jl")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1xy6lssg5x8m2d5802in2b5nl5wrcxz4pilw85kk0mc8640kg2ma"))))
    (build-system emacs-build-system)
    (arguments (list #:include #~(cons "\\.(jl|toml)$" %default-include)))
    (propagated-inputs (list emacs-eglot))
    (home-page "https://github.com/non-Jedi/eglot-jl")
    (synopsis "Julia support for Eglot")
    (description
     "This package adds support for Eglot to the Julia language.")
    (license license:cc0)))

(define-public emacs-consult-xdg-recent-files
  (let ((commit "593023ffb99a368152ebd4e739488fa560bdfdea")
        (revision "0"))
    (package
      (name "emacs-consult-xdg-recent-files")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hrehfeld/consult-xdg-recent-files")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0nd23n67dmlflw52dc1rbhy04mc9ymydnsmvfr75hqb7sznn3343"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-consult))
      (home-page "https://github.com/hrehfeld/consult-xdg-recent-files")
      (synopsis "Include files used by other programs than Emacs in Consult")
      (description
       "This package provides the ability to include files used by other
programs in the candidate lists of commands like @code{consult-recent-file}
and @code{consult-buffer}.  This allows using the same interface for file
opening.

On systems that comply with the XDG specification, these files are listed in
the file @file{recently-used.xbel}, which is found in the directory
@file{~/.local/share} or the location described by the environment variable
@code{XDG_DATA_HOME}.")
      (license license:gpl3+))))

(define-public emacs-consult-yasnippet
  (let ((commit "ae0450889484f23dc4ec37518852a2c61b89f184")
        (revision "0"))
    (package
      (name "emacs-consult-yasnippet")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mohkale/consult-yasnippet")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13hmmsnmh32vafws61sckzzy354rq0nslqpyzhw97iwvn0fpsa35"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-consult emacs-yasnippet))
      (home-page "https://github.com/mohkale/consult-yasnippet")
      (synopsis "Consulting-read interface for Yasnippet")
      (description
       "This package allows you to expand Yasnippet' snippets through
a completing-read interface.  It supports previewing the current snippet
expansion and overwriting the marked region with a new snippet completion.")
      (license license:gpl3+))))

(define-public emacs-marginalia
  (package
    (name "emacs-marginalia")
    (version "2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/marginalia")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0m2yhk63xmib30vvw1sx7sv39cn21ji4c2dn96z5r20hrxmcj8h2"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/minad/marginalia")
    (synopsis "Marginalia in the minibuffer completions")
    (description
     "This package provides Marginalia mode which adds marginalia to the
minibuffer completions.  Marginalia are marks or annotations placed at the
margin of the page of a book or in this case helpful colorful annotations
placed at the margin of the minibuffer for your completion candidates.")
    (license license:gpl3+)))

(define-public emacs-smartparens
  (let ((commit "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
        (revision "1"))
    (package
      (name "emacs-smartparens")
      (version (git-version "1.11.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Fuco1/smartparens")
               (commit commit)))
         (file-name (git-file-name name version))
         (modules '((guix build utils)
                    (ice-9 ftw)
                    (srfi srfi-26)))
         (snippet
          '(begin
             ;; Taken from nextpnr package.
             (define (delete-all-but directory . preserve)
               (with-directory-excursion directory
                 (let* ((pred
                         (negate (cut member <> (append '("." "..") preserve))))
                        (items (scandir "." pred)))
                   (for-each delete-file items))))
             ;; Only activate basic tests.
             (delete-all-but "test"
                             "test-helper.el"
                             "smartparens-advice-test.el"
                             "smartparens-delete-pair-test.el"
                             "smartparens-elisp-test.el"
                             "smartparens-framework-test.el"
                             "smartparens-get-comment-bounds-test.el"
                             "smartparens-get-paired-expression-elisp-test.el"
                             "smartparens-get-prefix-test.el"
                             "smartparens-get-stringlike-expression-elisp-test.el"
                             "smartparens-get-stringlike-expression-python-test.el"
                             "smartparens-get-stringlike-expression-test.el"
                             "smartparens-get-suffix-test.el"
                             "smartparens-insertion-specification-parser-test.el"
                             "smartparens-markdown-test.el"
                             "smartparens-movement-test.el"
                             "smartparens-org-test.el"
                             "smartparens-region-ok-test.el"
                             "smartparens-rst-test.el"
                             "smartparens-search-fn-test.el"
                             "smartparens-settings-sp-pair-test.el"
                             "smartparens-skip-closing-pair-test.el")))
         (sha256
          (base32 "1nfd10kxd1l8bmxhaghhxphl424yg5qn6xcqaligwc3b406b566w"))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-ert-runner emacs-yasnippet))
      (propagated-inputs
       (list emacs-dash emacs-markdown-mode))
      (home-page "https://github.com/Fuco1/smartparens")
      (synopsis "Paredit-like insertion, wrapping and navigation with user
defined pairs")
      (description
       "Smartparens is a minor mode for Emacs that deals with parens pairs
and tries to be smart about it.  It started as a unification effort to
combine functionality of several existing packages in a single,
compatible and extensible way to deal with parentheses, delimiters, tags
and the like.  Some of these packages include autopair, textmate,
wrap-region, electric-pair-mode, paredit and others.  With the basic
features found in other packages it also brings many improvements as
well as completely new features.")
      (license license:gpl3+))))

(define-public emacs-dumbparens
  ;; There are no releases.
  (let ((commit "59bb5aeb85bdc0772a7a21d1194be87aae6f2b7b")
        (revision "1"))
    (package
      (name "emacs-dumbparens")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/radian-software/dumbparens")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0c5zw9qcq5n33212p8fcnjvgn6z582178dnv0jhnrl887h5xr9w2"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "test")))
      (home-page "https://github.com/radian-software/dumbparens")
      (synopsis "Minor mode that provides improvements on Smartparens")
      (description
       "@code{emacs-dumbparens} is a minor mode for Emacs that deals with parens
pairs and doesn't try to be smart about it.")
      (license license:expat))))

(define-public emacs-highlight-symbol
  ;; We prefer a more recent commit that provides an option to squelch
  ;; echo-area alerts that can drown out useful information like eldoc
  ;; messages.
  (let ((commit "7a789c779648c55b16e43278e51be5898c121b3a")
        (version "1.3")
        (revision "1"))
    (package
      (name "emacs-highlight-symbol")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nschum/highlight-symbol.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19cgyk0sh8nsmf3jbi92i8qsdx4l4yilfq5jj9zfdbj9p5gvwx96"))))
      (build-system emacs-build-system)
      (home-page "https://nschum.de/src/emacs/highlight-symbol/")
      (synopsis "Automatic and manual symbol highlighting for Emacs")
      (description
       "Use @code{highlight-symbol} to toggle highlighting of the symbol at
point throughout the current buffer.  Use @code{highlight-symbol-mode} to keep
the symbol at point highlighted.

The functions @code{highlight-symbol-next}, @code{highlight-symbol-prev},
@code{highlight-symbol-next-in-defun} and
@code{highlight-symbol-prev-in-defun} allow for cycling through the locations
of any symbol at point.  Use @code{highlight-symbol-nav-mode} to enable key
bindings @code{M-p} and @code{M-p} for navigation.  When
@code{highlight-symbol-on-navigation-p} is set, highlighting is triggered
regardless of @code{highlight-symbol-idle-delay}.

@code{highlight-symbol-query-replace} can be used to replace the symbol.")
      (license license:gpl2+))))

(define-public emacs-symbol-overlay
  (package
    (name "emacs-symbol-overlay")
    (version "4.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wolray/symbol-overlay")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xqzn4j27xny3gmjan9phcl60zipp49p79nv57i7mpz8y0qahc59"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/wolray/symbol-overlay")
    (synopsis "Highlight symbols and perform various search operations on them")
    (description
     "This package provides functions for highlighting and navigating
between symbols.")
    (license license:gpl3+)))

(define-public emacs-hl-todo
  (package
    (name "emacs-hl-todo")
    (version "3.9.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tarsius/hl-todo")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1gzrlf151hbascalch8mar2l7ppgax7l6633ikw79g3ygf37fbrd"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/tarsius/hl-todo")
    (synopsis "Emacs mode to highlight TODO and similar keywords")
    (description
     "This package provides an Emacs mode to highlight TODO and similar
keywords in comments and strings.  This package also provides commands for
moving to the next or previous keyword and to invoke @code{occur} with a
regexp that matches all known keywords.")
    (license license:gpl3+)))

(define-public emacs-pde
  (package
    (name "emacs-pde")
    (version "0.2.17")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "mirror://cpan/authors/id/Y/YE/YEWENBIN/Emacs-PDE-v"
                           version ".tar.gz"))
       (modules '((guix build utils)))
       (snippet '(begin
                   ;; Delete pre-generated Texinfo and HTML documentation.
                   (for-each delete-file '("lisp/doc/pde.info"
                                           "lisp/doc/pde.html"))
                   (delete-file-recursively "lisp/doc/pde")))
       (sha256
        (base32 "1i82isha839c8lx73kgp43v7gxr2adsr1yfw1glyxvi62w5ab9qz"))))
    (build-system perl-build-system)
    (arguments
     (list
      #:imported-modules `(,@%emacs-build-system-modules
                           ,@%perl-build-system-modules)
      #:modules '((guix build perl-build-system)
                  (guix build emacs-utils)
                  (guix build utils))
      #:module-build-flags
      #~(list (string-append "--elispdir=" #$output
                             "/share/emacs/site-lisp/pde")
              "--verbose")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-commands
            (lambda* (#:key inputs #:allow-other-keys)
              (with-directory-excursion "lisp"
                (for-each make-file-writable
                          '("pde-vars.el" "perlcritic.el" "perldoc.el"
                            "perltidy.el"))
                (emacs-substitute-variables "pde-vars.el"
                  ("pde-perl-program"
                   (search-input-file inputs "bin/perl"))
                  ("pde-perl-version"
                   #$(package-version (this-package-input "perl")))
                  ("pde-perldoc-program"
                   (search-input-file inputs "bin/perldoc"))
                  ("pde-find-program"
                   (search-input-file inputs "bin/find")))
                (emacs-substitute-variables "perlcritic.el"
                  ("perlcritic-program"
                   (search-input-file inputs "bin/perlcritic")))
                (emacs-substitute-variables "perldoc.el"
                  ("perldoc-cache-el"
                   "(expand-file-name \"~/.cache/perldoc-cache.el\"")
                  ("perldoc-pod2man"
                   (search-input-file inputs "bin/pod2man")))
                (emacs-substitute-variables "perltidy.el"
                  ("perltidy-program"
                   (search-input-file inputs "bin/perltidy")))
                (substitute* "tools/perldoc-cache.pl"
                  (("`perldoc")
                   (string-append
                    "`" (search-input-file inputs "bin/perldoc")))))))
          (add-after 'build 'generate-doc
            (lambda _
              (invoke "./Build" "info")))
          (add-after 'install 'move-doc
            (lambda _
              (let ((info (string-append #$output "/share/info/pde.info")))
                (mkdir-p (dirname info))
                (rename-file (string-append
                              #$output
                              "/share/emacs/site-lisp/pde/doc/pde.info")
                             info)))))))
    (native-inputs (list emacs-minimal perl-module-build texinfo))
    (inputs (list findutils perl perl-critic))
    (home-page "https://metacpan.org/release/Emacs-PDE")
    (synopsis "Perl Development Environment for Emacs")
    (description "Emacs::PDE is a collection of Emacs Lisp extensions to
facilitate Perl programming.  CPerl Mode has provided an excellent environment
for coding; Emacs::PDE provides other common tools such as creating files
using templates, smart compiling, @command{perldoc}, @command{perltidy},
debugger, tags tree view and so on.  PDE also provides an easy configuration
for Perl programming, and a tutorial for novices to start using Emacs.")
    (license license:perl-license)))

(define-public emacs-perspective
  (package
    (name "emacs-perspective")
    (version "2.20")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nex3/perspective-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "108n8xgyxf0mxv6l0mbqb9s0v20bdnj4xcd2mi0zbl46r48cq6gp"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("emacs" "-Q" "-batch" "-L" "."
                        "-l" "test/test-perspective.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/nex3/perspective-el")
    (synopsis "Switch between named \"perspectives\"")
    (description
     "This package provides tagged workspaces in Emacs, similar to workspaces in
windows managers such as Awesome and XMonad.  @code{perspective.el} provides
multiple workspaces (or \"perspectives\") for each Emacs frame.  Each
perspective is composed of a window configuration and a set of buffers.
Switching to a perspective activates its window configuration, and when in a
perspective only its buffers are available by default.")
    ;; This package is released under the same license as Emacs (GPLv3+) or
    ;; the Expat license.
    (license license:gpl3+)))

(define-public emacs-persp-mode
  (package
    (name "emacs-persp-mode")
    (version "3.0.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Bad-ptr/persp-mode.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0fi07h5q0srjasjxn7rzzd8zahl15agspm6q9hs2rzd0m8x3zp52"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "buttercup" "-L" "." "-L" "tests")
           #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'tests-add-lexical-bindings
                 (lambda _
                   (substitute* "tests/test-persp-mode.el"
                     (("\\(require 'buttercup-init\\)" all)
                      (string-append ";;; -*- lexical-binding: t; -*-\n"
                                     all))))))))
    (native-inputs (list emacs-buttercup))
    (home-page "https://github.com/Bad-ptr/persp-mode.el")
    (synopsis "Switch between named \"perspectives\" shared among frames")
    (description
     "This package extends @code{perspective.el} to enable perspectives that
can be saved to and restored from a file.")
    (license license:gpl2+)))

(define-public emacs-eyebrowse
  ;; XXX: Upstream has no tagged release.  Version is extracted from keyword
  ;; in main file.
  (let ((commit "88c7b59aa7c5c93bc23812217213adfa238f977b")
        (revision "0"))
    (package
      (name "emacs-eyebrowse")
      (version (git-version "0.7.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://depp.brause.cc/eyebrowse.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "09s07mvg5bz3dm9sxgn40c7z6d6ry1sdjzsxwgmy825f3xm66avs"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://depp.brause.cc/eyebrowse/")
    (synopsis "Simple-minded way to manage window configs in Emacs")
    (description
     "Eyebrowse is a global minor mode for Emacs that allows you to manage
your window configurations in a simple manner, just like tiling window
managers like i3wm with their workspaces do.  It displays their current state
in the modeline by default.")
    (license license:gpl3+))))

(define-public emacs-test-simple
  (package
    (name "emacs-test-simple")
    (version "1.3.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/test-simple-"
                           version ".el"))
       (sha256
        (base32
         "1yd61jc9ds95a5n09052kwc5gasy57g4lxr0jsff040brlyi9czz"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/rocky/emacs-test-simple")
    (synopsis "Simple unit test framework for Emacs Lisp")
    (description
     "Test Simple is a simple unit test framework for Emacs Lisp.  It
alleviates the need for context macros, enclosing specifications or required
test tags.  It supports both interactive and non-interactive use.")
    (license license:gpl3+)))

(define-public emacs-load-relative
  (package
    (name "emacs-load-relative")
    (version "1.3.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/load-relative-"
                           version ".tar"))
       (sha256
        (base32 "1fwa51jp0sq5l69y98l2zyj0iq9s6rj1rnqrmvncif61smma8fd7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/rocky/emacs-load-relative")
    (synopsis "Emacs Lisp relative file loading related functions")
    (description
     "Provides functions which facilitate writing multi-file Emacs packages
and running from the source tree without having to \"install\" code or fiddle
with @code{load-path}.

The main function, @code{load-relative}, loads an Emacs Lisp file relative to
another (presumably currently running) Emacs Lisp file.")
    (license license:gpl3+)))

(define-public emacs-loc-changes
  (package
    (name "emacs-loc-changes")
    (version "1.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/loc-changes-"
                           version ".el"))
       (sha256
        (base32
         "1x8fn8vqasayf1rb8a6nma9n6nbvkx60krmiahyb05vl5rrsw6r3"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/rocky/emacs-loc-changes")
    (synopsis "Keeps track of positions even after buffer changes")
    (description
     "This Emacs package provides a mean to track important buffer positions
after buffer changes.")
    (license license:gpl3+)))

(define-public emacs-loccur
  (let ((commit "01b7afa62589432a98171074abb8c5a1e089034a")
        (revision "1"))
    (package
      (name "emacs-loccur")
      (version (git-version "1.2.5" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/fourier/loccur/")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1b1x1xsiwqzsiss1jc6w990v1vfvbn5d5w67yzmx59s9ldjmdqq2"))))
    (build-system emacs-build-system)
      (home-page "https://github.com/fourier/loccur")
      (synopsis "Perform an occur-like folding in current buffer")
      (description
       "Loccur is a tool to quickly navigate a file.  It is a minor mode for
Emacs acting like occur but w/o creating a new window.  It just hides all the
text excepting lines containing matches.")
      (license license:gpl3+))))

(define-public emacs-realgud
  (package
    (name "emacs-realgud")
    (version "1.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/realgud/realgud/")
             (commit version)))
       (sha256
        (base32
         "1d3s23jk0i34wpyxfajydgyyvsxnpbqrfl0mgydsq7zw2c75ylnq"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'fix-realgud:run-process-void-error
            ;; See: https://github.com/realgud/realgud/issues/269.
            (lambda _
              (substitute* '("realgud/debugger/gdb/gdb.el"
                             "realgud/debugger/gub/gub.el")
                (("^\\(require 'load-relative\\).*" anchor)
                 (string-append anchor
                                "(require-relative-list \
'(\"../../common/run\") \"realgud:\")\n")))))
          (add-after 'expand-load-path 'fix-autogen-script
            (lambda _
              (substitute* "autogen.sh"
                (("./configure") "sh configure"))))
          (add-after 'fix-autogen-script 'autogen
            (lambda _
              (setenv "CONFIG_SHELL" "sh")
              (invoke "sh" "autogen.sh")))
          (add-after 'fix-autogen-script 'set-home
            (lambda _
              (setenv "HOME" (getenv "TMPDIR"))))
          (add-before 'patch-el-files 'patch-more-el-files
            (lambda _
              ;; XXX: Some tests/assumptions in this file are
              ;; not valid on Emacs@30.
              (delete-file "test/test-regexp-perldb.el")
              ;; FIXME: `patch-el-files' crashes on this file with error:
              ;; unable to locate "bashdb".
              (delete-file "./test/test-regexp-bashdb.el"))))
      #:include #~(cons* ".*\\.el$" %default-include)))
    (native-inputs
     (list autoconf automake emacs-test-simple))
    (propagated-inputs
     (list emacs-load-relative emacs-loc-changes))
    (home-page "https://github.com/realgud/realgud/")
    (synopsis
     "Modular front-end for interacting with external debuggers")
    (description
     "RealGUD is a modular, extensible GNU Emacs front-end for interacting
with external debuggers.  It integrates various debuggers such as gdb, pdb,
ipdb, jdb, lldb, bashdb, zshdb, etc. and allows visually steping through code in the
sources.  Unlike GUD, it also supports running multiple debug sessions in
parallel.")
    (license license:gpl3+)))

(define-public emacs-rmsbolt
  ;; There is no release tag. Version is extracted from main file.
  (let ((commit "ff496660cc52a6dd33d358ef0acc6d4bb70cc340")
        (revision "0")
        (version "0.1.2"))
    (package
      (name "emacs-rmsbolt")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/jgkamat/rmsbolt")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "05i0101238yy1da6z543nr9x5gpvgdxrrdn3sw5dibcn6z62ml3p"))))
      (build-system emacs-build-system)
      (home-page "https://gitlab.com/jgkamat/rmsbolt")
      (synopsis "Emacs viewer for compiler output")
      (description
       "RMSBolt is a package to provide assembly or bytecode output for
a source code input file.")
      (license license:agpl3+))))

(define-public emacs-request
  ;; We prefer a more recent commit that has support for auth-source,
  ;; and has some bug fixes for Emacs 28.
  (let ((commit "3336eaa97de923f74b90dda3e35985e122d40805")
        (revision "1"))
    (package
      (name "emacs-request")
      (version (git-version "0.3.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/tkf/emacs-request")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0jckwy5zhz95d6l3lz8b9b34pppcjjzy97fg1wn8mqzhf3h460ac"))))
      (build-system emacs-build-system)
      (arguments
       `(#:tests? #f))                  ; requires network access.
      (propagated-inputs
       (list emacs-deferred))
      (home-page "https://github.com/tkf/emacs-request")
      (synopsis "Package for speaking HTTP in Emacs Lisp")
      (description "This package provides a HTTP request library with multiple
backends.  It supports url.el which is shipped with Emacs and the curl command
line program.")
      (license license:gpl3+))))

(define-public emacs-http-post-simple
  (let ((commit "f53697fca278c741051aeb668b00466b5e0fd3fe")
        (revision "0"))
    (package
      (name "emacs-http-post-simple")
      ;; Upstream does not provide a version number. The package is very old,
      ;; feature-complete and not likely to be updated. So, we assume a
      ;; version of 1.0.0.
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/http-post-simple")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0krdbvvvzn323vx554yw7947nddl3icfjk4wf5kfx7fim5v3mdn6"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f ;no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-obsolete-functions
              (lambda _
                ;; Replace obsolete functions from 'cl.
                (substitute* "http-post-simple.el"
                  (("\\(require 'url\\)")
                   "(require 'cl-lib)\n(require 'cl-macs)\n(require 'url)")
                  (("\\(destructuring-bind")
                   "(cl-destructuring-bind")
                  (("\\(values")
                   "(cl-values")))))))
      (home-page "https://github.com/emacsorphanage/http-post-simple")
      (synopsis "HTTP POST requests using the url library")
      (description "@code{emacs-http-post-simple} provides a simple HTTP POST
requests library that uses the url library.")
      (license license:gpl2+))))

(define-public emacs-ruby-electric
  (let ((revision "0")
        (commit "c53376da891713e0c49f01aad2ff64d4fbb0b812"))
    (package
      (name "emacs-ruby-electric")
      (version (git-version "2.3.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ruby/elisp-ruby-electric")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "14grv2gwr6lyjlcp8h1frvipyisakkw2q0jpv4h5rd5bzky7m8w0"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/ruby/elisp-ruby-electric")
      (synopsis "Minor mode for electrically editing Ruby code")
      (description
       "Ruby Electric mode accelerates code writing in Ruby by making some keys
electric and automatically supplying with closing parentheses and @code{end}
as appropriate.")
      (license license:ruby))))

(define-public emacs-rudel
  (package
    (name "emacs-rudel")
    (version "0.3.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/rudel-"
                           version ".tar"))
       (sha256
        (base32 "03hcvpp6ykavidwn5x48gs986w1i5icvh7ks6p74pdaagpgw4jmk"))))
    (build-system emacs-build-system)
    (home-page "https://rudel.sourceforge.net/")
    (synopsis "Collaborative editing framework")
    (description
     "Rudel is a collaborative editing environment for GNU Emacs.  Its purpose
is to share buffers with other users in order to edit the contents of those
buffers collaboratively.  Rudel supports multiple backends to enable
communication with other collaborative editors using different protocols,
though currently Obby (for use with the Gobby editor) is the only
fully-functional one.")
    (license license:gpl3+)))

(define-public emacs-wakib-keys
  (package
    (name "emacs-wakib-keys")
    (version "1.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/darkstego/wakib-keys.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0fr70jmrcnyyl16h0k6kj3gcd50422ggqps688wa7x51dk6f9cvr"))))
    (build-system emacs-build-system)
    (synopsis "Make C-c, C-v and C-x clipboard keys work reliably in Emacs")
    (description "This package provides an Emacs minor mode that provides
modern, efficient and easy to learn keybindings (especially C-c, C-x and C-v
work and provide clipboard action).")
    (home-page "https://github.com/darkstego/wakib-project")
    (license license:gpl3+)))

(define-public emacs-hydra
  (package
    (name "emacs-hydra")
    (version "0.15.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/abo-abo/hydra")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0fapvhmhgc9kppf3bvkgry0cd7gyilg7sfvlscfrfjxpx4xvwsfy"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "test")))
    (home-page "https://github.com/abo-abo/hydra")
    (synopsis "Make Emacs bindings that stick around")
    (description
     "This package can be used to tie related commands into a family of short
bindings with a common prefix---a Hydra.  Once you summon the Hydra (through
the prefixed binding), all the heads can be called in succession with only a
short extension.  Any binding that isn't the Hydra's head vanquishes the
Hydra.  Note that the final binding, besides vanquishing the Hydra, will still
serve its original purpose, calling the command assigned to it.  This makes
the Hydra very seamless; it's like a minor mode that disables itself
automatically.")
    (license license:gpl3+)))

(define-public emacs-pretty-hydra
  (package
    (name "emacs-pretty-hydra")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jerrypnz/major-mode-hydra.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "08a15knkdq35pzjq82imff016fbfdib5q4glg2xmdy2b5fnk7jqa"))
       (modules '((guix build utils)))
       (snippet #~(begin (substitute* "test/pretty-hydra-test.el"
                           (("\\(c1 \\(quote foo\\)\\)") "(c1 'foo)"))))))
    (build-system emacs-build-system)
    (arguments
     (list #:exclude #~(cons "^major-mode-hydra\\.el" %default-exclude)))
    (propagated-inputs
     (list emacs-dash emacs-hydra emacs-s))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/jerrypnz/major-mode-hydra.el")
    (synopsis "Major mode keybindings managed by Hydra")
    (description
     "This package offers an hydra-based method of managing major
mode-specific key bindings.  It is intended for use as a library only; see
package @code{emacs-major-mode-hydra} for a user-friendly interface.")
    (license license:gpl3+)))

(define-public emacs-interleave
  (package
    (name "emacs-interleave")
    (version "1.4.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/rudolfochrist/interleave")
         (commit (string-append "interleave-" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0l5b681mrpk12lx5c16m7kc13p29z6zismwg1llsjg7cdmrmsrcb"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "--no-init-file" "--batch"
                   "--eval=(require 'ecukes)" "--eval=(ecukes)")))
    (native-inputs (list emacs-ecukes))
    (home-page "https://github.com/rudolfochrist/interleave")
    (synopsis "Emacs minor mode to interleave notes and text books")
    (description
     "Interleave is a minor mode that presents a document viewer side
by side to an Org buffer with your notes relevant to the current page.")
    (license license:gpl3+)))

(define-public emacs-major-mode-hydra
  (package
    (inherit emacs-pretty-hydra)
    (name "emacs-major-mode-hydra")
    (propagated-inputs
     (list emacs-dash emacs-pretty-hydra))
    (arguments
     `(#:exclude (cons "^pretty-hydra\\.el" %default-exclude)))
    (synopsis "Create nice-looking hydras")
    (description
     "This package provides the macro @code{pretty-hydra-define} to define
hydras with one column per group of heads.")))

(define-public emacs-ivy
  (package
    (name "emacs-ivy")
    (version "0.15.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/ivy-" version ".tar"))
       (sha256
        (base32 "12ni3n8h7316hv4nrx4kbjah58n8zdxkf1v8fi0w39da1aqn3r0p"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Incremental vertical completion for Emacs")
    (description
     "This package provides @code{ivy-read} as an alternative to
@code{completing-read} and similar functions.  No attempt is made to determine
the best candidate.  Instead, the user can navigate candidates with
@code{ivy-next-line} and @code{ivy-previous-line}.  The matching is done by
splitting the input text by spaces and re-building it into a regular
expression.")
    (license license:gpl3+)))

(define-public emacs-counsel
  (package
    (name "emacs-counsel")
    (version "0.15.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "counsel-" version ".tar"))
       (sha256
        (base32 "1sgaph2wb4mkxlfq6448i1kymaxhs7h37nrn7vzbp9fhik634rhc"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy emacs-swiper))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Various completion functions using Ivy")
    (description
     "Just call one of the interactive functions in a file to complete the
corresponding thing using Ivy.

The following completions are currently available:
@itemize
@item Symbol completion for Elisp, Common Lisp, Python, Clojure, C, C++.
@item Describe functions for Elisp: function, variable, library, command,
@item bindings, theme.
@item Navigation functions: imenu, ace-line, semantic, outline.
@item Git utilities: git-files, git-grep, git-log, git-stash, git-checkout.
@item Grep utilities: grep, ag, pt, recoll, ack, rg.
@item System utilities: process list, rhythmbox, linux-app.
@item Many more.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-sway
  (let ((commit "84eae5e16a643eb00b0a422ded751cceb17cc8f0")
        (revision "0"))
    (package
      (name "emacs-sway")
      (version (git-version "0.7" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/thblt/sway.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "194plzc6rg7a5j3f68say0znix34yp8421cdlkwnw345czh52mjn"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/thblt/sway.el")
      (synopsis "Communication with the Sway window manager")
      (description
       "This is a basic library to control the Sway window manager from Emacs.
Its main use case is in combination with popup managers like Shackle, to
use frames instead of windows while still giving focus to existing frames
instead of duplicating them.")
      (license license:gpl3+))))

(define-public emacs-sweet-theme
  (let ((commit "78f741806ecebe01224bf54d09ad80e306652508")
        (revision "0"))
    (package
      (name "emacs-sweet-theme")
      (version (git-version "4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/2bruh4me/sweet-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1yqz15l6xa1vkll4gaa3jpr30vq3yjgbgadjilsmz5p8mblawhyx"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/2bruh4me/sweet-theme")
      (synopsis "Emacs theme inspired by the GTK theme Sweet")
      (description "Sweet is an Emacs theme inspired by the GTK theme with
the same name.")
      (license license:gpl3+))))

(define-public emacs-swiper
  (package
    (name "emacs-swiper")
    (version "0.15.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/swiper-" version ".tar"))
       (sha256
        (base32 "0m70jgcdsbrj6i5b1srrdgzkwavzi098532fv6vi2051nl42snvz"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Isearch with an overview")
    (description
     "This package gives an overview of the current regex search candidates.
The search regex can be split into groups with a space.  Each group is
highlighted with a different face.

It can double as a quick `regex-builder', although only single lines will be
matched.")
    (license license:gpl3+)))

(define-public emacs-ivy-xref
  (let ((commit "1a35fc0f070388701b05b0a455cbe262e924d547")
        (revision "1"))
    (package
      (name "emacs-ivy-xref")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alexmurray/ivy-xref")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0d71nm9d9ajp5i6dnl8h1hw9jqp8gd1ajgninb1h13i80rplzl9k"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ivy))
      (home-page "https://github.com/alexmurray/ivy-xref")
      (synopsis "Ivy interface for @code{xref}")
      (description "This package provides an Ivy interface for selecting from
@code{xref} results.")
      (license license:gpl3))))

(define-public emacs-ivy-pass
  (let ((commit "5b523de1151f2109fdd6a8114d0af12eef83d3c5")
        (revision "1"))
    (package
      (name "emacs-ivy-pass")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ecraven/ivy-pass")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "18crb4zh2pjf0cmv3b913m9vfng27girjwfqc3mk7vqd1r5a49yk"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ivy emacs-password-store))
      (home-page "https://github.com/ecraven/ivy-pass")
      (synopsis "Ivy interface to the @code{pass} password store")
      (description
       "This package provides an Ivy interface for working with the password
store (@code{pass}) in Emacs.")
      (license license:gpl3))))

(define-public emacs-ivy-yasnippet
  (let ((commit "32580b4fd23ebf9ca7dde96704f7d53df6e253cd")
        (revision "2"))
    (package
      (name "emacs-ivy-yasnippet")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mkcms/ivy-yasnippet")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1wfg6mmd5gl1qgvayyzpxlkh9s7jgn20y8l1vh1zbj1czvv51xp8"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ivy emacs-yasnippet emacs-dash))
      (home-page "https://github.com/mkcms/ivy-yasnippet")
      (synopsis "Preview @code{yasnippets} with @code{ivy}")
      (description "This package allows you to select @code{yasnippet}
snippets using @code{ivy} completion.  When current selection changes in the
minibuffer, the snippet contents are temporarily expanded in the buffer.  To
use it, call @code{M-x ivy-yasnippet} (but make sure you have enabled
@code{yas-minor-mode} first).")
      (license license:gpl3+))))

(define-public emacs-ivy-rich
  (package
    (name "emacs-ivy-rich")
    (version "0.1.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Yevgnen/ivy-rich")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0fn3v6221750hk6hs5rrrr894d53ibgj3yza9rismmj321xwbrh5"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy))
    (home-page "https://github.com/Yevgnen/ivy-rich")
    (synopsis "More friendly interface for @code{ivy}")
    (description
     "This package extends Ivy by showing more information in the minibuffer
for each candidate.  It adds columns showing buffer modes, file sizes,
docstrings, etc.  If @code{emacs-all-the-icons} is installed, it can show
icons as well.")
    (license license:gpl3+)))

(define-public emacs-avy
  (package
    (name "emacs-avy")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/abo-abo/avy")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09qdni1s74i5pv8741szl5g4ynj8fxn0x65qmwa9rmfkbimnc0fs"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "test")))
    (home-page "https://github.com/abo-abo/avy")
    (synopsis "Tree-based completion for Emacs")
    (description
     "This package provides a generic completion method based on building a
balanced decision tree with each candidate being a leaf.  To traverse the tree
from the root to a desired leaf, typically a sequence of @code{read-key} can
be used.

In order for @code{read-key} to make sense, the tree needs to be visualized
appropriately, with a character at each branch node.  So this completion
method works only for things that you can see on your screen, all at once,
such as the positions of characters, words, line beginnings, links, or
windows.")
    (license license:gpl3+)))

(define-public emacs-ace-window
  (package
    (name "emacs-ace-window")
    (version "0.10.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/abo-abo/ace-window")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0f3r40d5yxp2pm2j0nn86s29nqj8py0jxjbj50v4ci3hsd92d8jl"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-avy))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/abo-abo/ace-window")
    (synopsis "Quickly switch windows in Emacs")
    (description
     "@code{ace-window} is meant to replace @code{other-window}.
In fact, when there are only two windows present, @code{other-window} is
called.  If there are more, each window will have its first character
highlighted.  Pressing that character will switch to that window.")
    (license license:gpl3+)))

(define-public emacs-windsize
  ;; There is no proper release.  The base version is extracted from the
  ;; "Version" keyword in the main file.
  (let ((revision "1")
        (commit "62c2846bbe95b0a73e996c75e4a644d05f57aaaa"))
    (package
      (name "emacs-windsize")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/grammati/windsize")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13kfrmv3vmkfanxv9nym5v43hx5p7xkgqmx65zcxh4gcbaham1mi"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/grammati/windsize")
      (synopsis "Easy resizing of Emacs windows")
      (description
       "This package allows moving the borders of the active window
with the arrow keys.  It prefers to move the right or bottom border when
possible, and falls back to moving the left or top border otherwise.")
      (license license:gpl3+))))

(define-public emacs-window-purpose
  (package
    (name "emacs-window-purpose")
    (version "1.8.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bmag/emacs-purpose.git")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1cw513mh3gyl21qpmgwqjgpi8kwddmd4n69l4ax5a5pv3vvwrcx9"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "sh" "-c" "ert-runner < test/user-input.txt")
           #:include #~(list "^[^/]+.el$"
                             "^[^/]+.el.in$"
                             "^dir$"
                             "^[^/]+.info$"
                             "^[^/]+.texi$"
                             "^[^/]+.texinfo$"
                             "^doc/dir$"
                             "^doc/[^/]+.info$"
                             "^doc/[^/]+.texi$"
                             "^doc/[^/]+.texinfo$"
                             "^layouts$")
           #:exclude #~(list "^.dir-locals.el$"
                             "^test.el$"
                             "^tests.el$"
                             "^[^/]+-test.el$"
                             "^[^/]+-tests.el$")
           #:phases #~(modify-phases %standard-phases
                        (add-after 'unpack 'number-tests
                          (lambda _
                            (ert-number-tests "test/switch-test.el"
                                              "purpose-test-temp-actions-1")))
                        (add-after 'unpack 'create-test-file
                          (lambda _
                            (call-with-output-file "test/user-input.txt"
                              (const #t)))))))
    (propagated-inputs
     (list emacs-let-alist emacs-imenu-list))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/bmag/emacs-purpose")
    (synopsis "Purpose-based window management for Emacs")
    (description "Purpose is a package that introduces the concept of a
\"purpose\" for windows and buffers, and then helps you maintain a robust
window layout easily.")
    (license license:gpl3+)))

(define-public emacs-iedit
  (package
    (name "emacs-iedit")
    (version "0.9.9.9.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/victorhge/iedit")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "02jdyrff88n69d4kadjaac38gwcv28lhiqqa93rlqzdvmgqsbwak"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "--batch" "-l" "iedit-tests.el"
                   "-f" "ert-run-tests-batch-and-exit")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'skip-failing-test
                 (lambda _
                   (substitute* "iedit-tests.el"
                     (("\\(ert-deftest iedit-batch-compile-test .*" all)
                      (string-append all "(skip-unless nil)"))))))))
    (home-page "https://www.emacswiki.org/emacs/Iedit")
    (synopsis "Edit multiple regions in the same way simultaneously")
    (description
     "This package is an Emacs minor mode and allows you to edit one
occurrence of some text in a buffer (possibly narrowed) or region, and
simultaneously have other occurrences edited in the same way.

You can also use Iedit mode as a quick way to temporarily show only the buffer
lines that match the current text being edited.  This gives you the effect of
a temporary @code{keep-lines} or @code{occur}.")
    (license license:gpl3+)))

(define-public emacs-zop-to-char
  (package
    (name "emacs-zop-to-char")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/thierryvolpiatto/zop-to-char")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "14waf3g7b92k3qd5088w4pn0wcspxjfkbswlzf7nnkjliw1yh0kf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/thierryvolpiatto/zop-to-char")
    (synopsis "Visual zap-to-char command for Emacs")
    (description
     "This package provides a visual zap-to-char command for Emacs.")
    (license license:gpl3+)))

(define-public emacs-zoutline
  (package
    (name "emacs-zoutline")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/abo-abo/zoutline")
             (commit version)))
       (sha256
        (base32
         "1w0zh6vs7klgivq5r030a82mcfg1zwic4x3fimyiqyg5n8p67hyx"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://github.com/abo-abo/zoutline")
    (synopsis "Simple outline library")
    (description
     "This library provides helpers for outlines.  Outlines allow users to
navigate code in a tree-like fashion.")
    (license license:gpl3+)))

(define-public emacs-lispy
  ;; No release since May 2019 and tons of fixes have landed on master.
  ;; https://github.com/abo-abo/lispy/issues/513
  (let ((commit "df1b7e614fb0f73646755343e8892ddda310f427"))
    (package
      (name "emacs-lispy")
      (version (git-version "0.27.0" "3" commit))
      (home-page "https://github.com/abo-abo/lispy")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/abo-abo/lispy")
                      (commit commit)))
                (sha256
                 (base32
                  "02pmnn9cqslahnvllqzawp2j5icmb3wgkrk4qrfxjds68jg7pjj4"))
                (patches
                 (search-patches "emacs-lispy-fix-thread-last-test.patch"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ace-window emacs-hydra emacs-iedit emacs-swiper
             emacs-zoutline))
      (native-inputs
       (list which emacs-clojure-mode emacs-undercover))
      (arguments
       (list
        #:include #~(cons* "^lispy-clojure\\.clj$"
                           "^lispy-python\\.py$"
                           %default-include)
        #:phases
        ;; XXX: Some failing tests
        #~(modify-phases %standard-phases
            (add-before 'check 'make-test-writable
              (lambda _
                (make-file-writable "lispy-test.el")))
            (add-before 'check 'fix-tests
              (lambda _
                (ert-number-tests "lispy-test.el" "lispy-outline-add")
                (ert-number-tests "lispy-test.el" "lispy-ace-subword")
                (emacs-batch-edit-file "lispy-test.el"
                  `(progn
                    (dolist (test '("lispy-eval-python-str"
                                    "lispy-outline-add-0"
                                    "lispy--clojure-dot-object"
                                    "lispy--pretty-args"
                                    "lispy-flatten"
                                    "lispy-move-up"
                                    "lispy-move-down" ; XXX: defined twice?
                                    "lispy-move-down"))
                            (goto-char (point-min))
                            (re-search-forward
                             (concat "ert-deftest " test))
                            (beginning-of-line)
                            (kill-sexp))
                    (basic-save-buffer))))))
        ;; Set BEMACS to prevent the test suite from loading straight.el.
        #:test-command #~(list "make" "test" "BEMACS=emacs -batch")))
      (synopsis "Modal S-expression editing")
      (description
       "Due to the structure of Lisp syntax it's very rare for the programmer
to want to insert characters right before \"(\" or right after \")\".  Thus
unprefixed printable characters can be used to call commands when the point is
at one of these special locations.  Lispy provides unprefixed keybindings for
S-expression editing when point is at the beginning or end of an
S-expression.")
      (license license:gpl3+))))

(define-public emacs-lispyville
  (let ((commit "89316f01822b2135e52ca27fd308d207ef618052")
        (revision "3"))
    (package
      (name "emacs-lispyville")
      (version (git-version "0.1" revision commit))
      (home-page "https://github.com/noctuid/lispyville")
      (source (origin
                (method git-fetch)
                (uri (git-reference (url home-page) (commit commit)))
                (sha256
                 (base32
                  "10k3hxxpx2v2k4dyad7j1bzmr1q7rzvv4y6c67pa9zcqyaw8m91v"))
                (file-name (git-file-name name version))))
      (propagated-inputs
       (list emacs-evil emacs-lispy))
      (native-inputs (list emacs-ert-runner))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "ert-runner" "tests")))
      (synopsis "Minor mode for integrating Evil with lispy")
      (description
       "LispyVille's main purpose is to provide a Lisp editing environment
suited towards Evil users.  It can serve as a minimal layer on top of lispy
for better integration with Evil, but it does not require the use of lispy’s
keybinding style.  The provided commands allow for editing Lisp in normal
state and will work even without lispy being enabled.")
      (license license:gpl3+))))

(define-public emacs-function-args
  ;; The latest release is from August 21, 2017.
  (let ((commit "beba049751fed78666c87bd146a6f1cf149bb819")
        (revision "0"))
    (package
      (name "emacs-function-args")
      (version (git-version "0.6.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/function-args")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1j92ll2afvcp891fxra3sawxg000cs3ra01wxksiil2dg5zpzzkn"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; XXX: tests need a TTY?
      (propagated-inputs (list emacs-ivy))
      (home-page "https://github.com/abo-abo/function-args")
      (synopsis "C/C++ completion for GNU Emacs")
      (description
       "This package provides a way of showing an inline arguments hint for
the C/C++ function at point.")
      (license license:gpl3+))))

(define-public emacs-lpy
  ;; There is no proper release/tag.
  (let ((commit "fa95b11e1023704510cc7dd2897bf8bcc3027cbb")
        (revision "6"))
    (package
      (name "emacs-lpy")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/lpy")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "18kx2mfmxy8s8csnp0iaiirl2z9baicq9f2w7rxlgkxww5511v7d"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-function-args emacs-lispy emacs-zoutline))
      (home-page "https://github.com/abo-abo/lpy")
      (synopsis "Modal editing for Python")
      (description
       "This package provides a minor mode for Python that binds useful
commands to unprefixed keys, such as @code{j} or @code{e}, under certain
circumstances, and leaves the keys untouched outside of those situations,
allowing unprefixed keys to insert their respective characters as expected.")
      (license license:gpl3+))))

(define-public emacs-clojure-mode
  (package
    (name "emacs-clojure-mode")
    (version "5.20.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clojure-emacs/clojure-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "123x8rwv4nb30h1rz7avshvr00xjfjjsmzrqsyxhgdm3f0rhac5w"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-buttercup emacs-dash emacs-paredit emacs-s))
    (arguments
     `(#:test-command '("buttercup")))
    (home-page "https://github.com/clojure-emacs/clojure-mode")
    (synopsis "Major mode for Clojure code")
    (description
     "This Emacs package provides font-lock, indentation, navigation and basic
refactoring for the @uref{http://clojure.org, Clojure programming language}.
It is recommended to use @code{clojure-mode} with Paredit or Smartparens.")
    (license license:gpl3+)))

(define-public emacs-clj-deps-new
  (let ((commit "e1cf65eb040f5a2e9a3eca970044ba71cc53fb27")
        (revision "0"))
    (package
      (name "emacs-clj-deps-new")
      (version (git-version "1.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jpe90/emacs-clj-deps-new")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "03db3l5klc20wgdaj44scgjfi2mha85bip07ls6pwbi039ls7rvx"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jpe90/emacs-clj-deps-new")
      (synopsis "Create Clojure projects from templates")
      (description
       "This is a small wrapper around the
@uref{https://github.com/seancorfield/deps-new, deps-new} and
@uref{https://github.com/seancorfield/clj-new, clj-new} tools for creating
Clojure projects from templates.")
      (license license:gpl3+))))

(define-public emacs-clj-refactor
  (package
    (name "emacs-clj-refactor")
    (version "3.12.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clojure-emacs/clj-refactor.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mha1wqn5hd9g8y0fp35qkhlnxlrwli62x7mbifman279h16gaml"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "buttercup" "-L" "." "-L" "test")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'enable-lexical-binding
                 (lambda _
                   (emacs-batch-edit-file "tests/unit-test.el"
                     '(progn
                       (add-file-local-variable-prop-line 'lexical-binding t)
                       (basic-save-buffer))))))))
    (propagated-inputs
     (list emacs-cider
           emacs-clojure-mode
           emacs-hydra
           emacs-inflections
           emacs-multiple-cursors
           emacs-paredit
           emacs-parseedn
           emacs-yasnippet))
    (native-inputs (list emacs-buttercup))
    (home-page "https://github.com/clojure-emacs/clj-refactor.el")
    (synopsis "Powerful refactoring functionality for Clojure projects")
    (description "This Emacs package complements the refactoring functionality
you'd find in Clojure mode and CIDER.")
    (license license:gpl3+)))

(define-public emacs-clojure-snippets
  ;; Use latest commit (2018) since latest tagged release is too old and is
  ;; missing important changes.
  (let ((version "1.0.1")
        (revision "0")
        (commit "6068dca90467a0f4ebc2cd39338a173d6f5ddc04"))
    (package
      (name "emacs-clojure-snippets")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mpenet/clojure-snippets")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vvadcydpsz4b17dlm1jd4fbddzfqibh3mlzv3k4gvp67vv10cqy"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons* "^.*\\/" %default-include)))
      (propagated-inputs
       (list emacs-yasnippet))
      (home-page "https://github.com/mpenet/clojure-snippets")
      (synopsis "Yasnippets for Clojure")
      (description
       "This package provides Yasnippets snippets for Clojure.")
      (license license:gpl3+))))

(define-public emacs-anakondo
  ;; This particular commit introduces bug fixes above latest release.
  (let ((version "0.2.1")
        (revision "0")
        (commit "c48518560815c49d8d78fb9069906d17e883385e"))
    (package
      (name "emacs-anakondo")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/didibus/anakondo")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1fzsqd150gpmrj8kz3zy9cd78x9vank7ra720mljhyf04z0h1mj6"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/didibus/anakondo")
      (synopsis "Clojure[Script] editing facilities based on clj-kondo")
      (description
       "This package makes use of clj-kondo's analysis data to provide code
editing facilities related to Clojure, ClojureScript and cljc source.")
      (license license:expat))))

(define-public emacs-epl
  (package
    (name "emacs-epl")
    (version "0.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cask/epl")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0d3z5z90ln8ipk1yds1n1p8fj9yyh2kpspqjs7agl38indra3nb4"))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/cask/epl")
    (synopsis "Emacs Package Library")
    (description
     "A package management library for Emacs, based on @code{package.el}.

The purpose of this library is to wrap all the quirks and hassle of
@code{package.el} into a sane API.")
    (license license:gpl3+)))

(define-public emacs-counsel-jq
  (package
    (name "emacs-counsel-jq")
    (version "1.1")
    (home-page "https://github.com/200ok-ch/counsel-jq")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit "aaf33fc2447096cd0d03b77395fe2a95c9fe1481")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10rz0qm8a4bl0m86kx19zq8lri047p4sxqyny08bgm9pbam0wvwn"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-swiper jq))
    (synopsis "Live preview @code{jq} queries using counsel")
    (description
     "This Emacs package provides the ability to live preview @code{jq}
queries using counsel.")
    (license license:gpl3+)))

(define-public emacs-counsel-notmuch
  ;; Upstream provides no release.  Extract version for main file.
  (let ((commit "a4a1562935e4180c42524c51609d1283e9be0688")
        (revision "0"))
    (package
      (name "emacs-counsel-notmuch")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/fuxialexander/counsel-notmuch")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "01k1321d961kc2i660a5595bqk0d85f16snsxngsn5si6y83kqr7"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'locate-notmuch
             (lambda* (#:key inputs #:allow-other-keys)
               (make-file-writable "counsel-notmuch.el")
               (emacs-substitute-variables "counsel-notmuch.el"
                 ("counsel-notmuch-path"
                  (search-input-file inputs "/bin/notmuch"))))))))
      (inputs
       (list emacs-counsel notmuch emacs-s))
      (propagated-inputs
       (list emacs-notmuch))
      (home-page "https://github.com/fuxialexander/counsel-notmuch")
      (synopsis "Search emails in Notmuch asynchronously with Ivy")
      (description
       "This package can be used to search emails in Notmuch
asynchronously, with Counsel and Ivy.  Simply call
@code{counsel-notmuch} and input your Notmuch query.")
      (license license:gpl3+))))

(define-public emacs-counsel-projectile
  (package
    (name "emacs-counsel-projectile")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ericdanan/counsel-projectile")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vp39r5njfzchkqv9g0w77whazp070anh9gmbkp3z4n3xxbik27f"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-counsel emacs-projectile))
    (home-page "https://github.com/ericdanan/counsel-projectile")
    (synopsis "Enhance Projectile with Ivy")
    (description
     "This package uses Ivy to provide additional actions for Projectile
commands and replacements for existing functions.")
    (license license:gpl3+)))

(define-public emacs-qml-mode
  (package
    (name "emacs-qml-mode")
    (version "0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/coldnew/qml-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1sncsvzjfgmhp4m8w5jd4y51k24n2jfpgvrkd64wlhhzbj3wb947"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/coldnew/qml-mode/")
    (synopsis "Qt Modeling Language (QML) mode for Emacs")
    (description "This package provides the @code{qml-mode} major Emacs mode
for editing source files written in the Qt Modeling Language (QML) user
interface markup language.  It provides syntax highlighting and basic
navigation commands.  @code{qml-mode} is derived from code{js-mode}, the Emacs
builtin JavaScript mode.")
    (license license:gpl2+)))

(define-public emacs-qt-pro-mode
  (package
    (name "emacs-qt-pro-mode")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/qt-pro-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xprnq3y74hfm931a80wcj35faafzqc59j3vavx95wzv4z4yfgdm"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/emacsorphanage/qt-pro-mode")
    (synopsis "Emacs major mode for Qt build-system files")
    (description
     "This package provides a major mode for editing Qt build-system files.")
    (license license:gpl2+)))

(define-public emacs-queue
  (package
    (name "emacs-queue")
    (version "0.2")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/queue-"
                                  version ".el"))
              (sha256
               (base32
                "0cx2848sqnnkkr4zisvqadzxngjyhmb36mh0q3if7q19yjjhmrkb"))))
    (build-system emacs-build-system)
    (home-page "https://www.dr-qubit.org/emacs_data-structures.html")
    (synopsis "Queue data structure for Emacs")
    (description
     "This Emacs library provides queue data structure.  These queues can be
used both as a first-in last-out (FILO) and as a first-in first-out (FIFO)
stack, i.e. elements can be added to the front or back of the queue, and can
be removed from the front.  This type of data structure is sometimes called an
\"output-restricted deque\".")
    (license license:gpl3+)))

(define-public emacs-quickrun
  (package
    (name "emacs-quickrun")
    (version "2.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/quickrun")
             (commit version)))
       (sha256
        (base32 "0a1n2v09h0n7d9p2izflqqang4ny0b46dlqvmxvkkik4bb6f4wcz"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-L" "."
                             "-l" "test/test-quickrun.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (native-inputs (list python-wrapper))
    (home-page "https://github.com/emacsorphanage/quickrun")
    (synopsis "Execute editing buffer and show its output quickly")
    (description
     "This package evaluates the content of a buffer, or region, and displays
the result.  Quickrun executes not only script languages (Perl, Ruby, Python
etc), but also compiling languages (C, C++, Go, Java etc) and markup
languages.")
    (license license:gpl3+)))

(define-public emacs-pkg-info
  (package
    (name "emacs-pkg-info")
    (version "0.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lunaryorn/pkg-info.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nk12dcppdyhav6m6yf7abpywyd7amxd4237zsfd32w4zxsx39k1"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; tests appear to require cask
    (propagated-inputs (list emacs-epl))
    (home-page "https://github.com/lunaryorn/pkg-info.el")
    (synopsis "Information about Emacs packages")
    (description
     "This library extracts information from the installed Emacs packages.")
    (license license:gpl3+)))

(define-public emacs-spinner
  (package
    (name "emacs-spinner")
    (version "1.7.4")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/spinner-"
                                  version ".tar"))
              (sha256
               (base32 "140kss25ijbwf8hzflbjz67ry76w2cyrh02axk95n6qcxv7jr7pv"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/spinner.el")
    (synopsis "Emacs mode-line spinner for operations in progress")
    (description
     "This Emacs package adds spinners and progress-bars to the mode-line for
ongoing operations.")
    (license license:gpl3+)))

(define-public emacs-sparql-mode
  (package
    (name "emacs-sparql-mode")
    (version "4.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ljos/sparql-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0hqp8r24wvzrkl630wbm0lynrcrnawv2yn2a3xgwqwwhwgva35rn"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; XXX: Fails with wrong number of arguments.
           #:test-command #~(list "ert-runner")))
    (native-inputs
     (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-company))
    (home-page "https://github.com/ljos/sparql-mode")
    (synopsis "SPARQL mode for Emacs")
    (description
     "This package is a major mode for Emacs that provides syntax highlighting
for SPARQL.  It can also execute queries against a SPARQL HTTP endpoint, such
as Fuseki or DBPedia.")
    (license license:gpl3+)))

(define-public emacs-sphinx-doc
  (let ((commit "1eda612a44ef027e5229895daa77db99a21b8801")
        (revision "1"))
    (package
      (name "emacs-sphinx-doc")
      (version (git-version "0.3.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/naiquevin/sphinx-doc.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0q72i95yx3xa57jlgr7dik6prf20hi8bp8xf3f5c6ificv7i5378"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "-Q" "--batch"
                               "-l" "sphinx-doc-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs (list emacs-dash emacs-s))
      (home-page "https://github.com/naiquevin/sphinx-doc.el")
      (synopsis
       "Generate Sphinx friendly docstrings for Python functions in Emacs")
      (description
       "Sphinx Doc is an Emacs minor mode for inserting docstring skeletons
for Python functions and methods.  The structure of the docstring is as per
the equirement of the Sphinx documentation generator.")
      (license license:expat))))

(define-public emacs-better-defaults
  (package
    (name "emacs-better-defaults")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~technomancy/better-defaults")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1rxznx2l0cdpiz8mad8s6q17m1fngpgb1cki7ch6yh18r3qz8ysr"))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~technomancy/better-defaults")
    (synopsis "Better defaults for Emacs")
    (description
     "Better defaults attempts to address the most obvious deficiencies of the
Emacs default configuration in uncontroversial ways that nearly everyone can
agree upon.")
    (license license:gpl3+)))

(define-public emacs-uniquify-files
  (package
    (name "emacs-uniquify-files")
    (version "1.0.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/uniquify-files-"
                           version ".tar"))
       (sha256
        (base32 "0xw2l49xhdy5qgwja8bkiq2ibdppl45xzqlr17z92l1vfq4akpzp"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/uniquify-files.html")
    (synopsis "Disambiguate files with the same basename")
    (description "This package helps differentiate files with the same name
but in different directories when displayed in Emacs buffers or completion
interfaces.

Generally, you probably want to use emacs' builtin uniquify instead--which
makes unique buffer names.  Only if you want to programmatically generate
unique file names you need this package here.")
    (license license:gpl3+)))

(define-public emacs-undohist
  (package
    (name "emacs-undohist")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/undohist")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1s1574q85lflik7w983v859qgxy1sn6i09hspa78smiawfva1855"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f))  ; No tests.
    (home-page "https://github.com/emacsorphanage/undohist")
    (synopsis "Save undo history between sessions")
    (description "This package allows persistent use of undo history for
individual file buffers.")
    (license license:gpl3+)))

(define-deprecated-package emacs-undohist-el
  emacs-undohist)

(define-public emacs-eprime
  (let ((commit "17a481af26496be91c07139a9bfc05cfe722506f"))
    (package
      (name "emacs-eprime")
      (version (string-append "20140513-" (string-take commit 7)))
      (source (origin
                (method url-fetch)
                (uri (string-append "https://raw.githubusercontent.com"
                                    "/AndrewHynes/eprime-mode/"
                                    commit "/eprime-mode.el"))
                (file-name (string-append "eprime-" version ".el"))
                (sha256
                 (base32
                  "0v68lggkyq7kbcr9zyi573m2g2x251xy3jadlaw8kx02l8krwq8d"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/AndrewHynes/eprime-mode")
      (synopsis "E-prime checking mode for Emacs")
      (description "This package provides an E-prime checking mode for Emacs
that highlights non-conforming text.  The subset of the English language called
E-Prime forbids the use of the \"to be\" form to strengthen your writing.")
      (license license:gpl3+))))

(define-public emacs-julia-mode
  (let ((commit "7fc071eb2c383d44be6d61ea6cef73b0cc8ef9b7")
        (revision "0"))
    (package
      (name "emacs-julia-mode")
      (version (git-version "1.0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/JuliaEditorSupport/julia-emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1dfls9ggn192xblfyjrbxi007hg4yd25s2cl8zh0v40akpqclhqc"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include
        #~(cons* "^make-julia-latexsubs\\.jl" %default-include)
        #:test-command #~(list "emacs" "--batch"
                               "-l" "julia-mode-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/JuliaEditorSupport/julia-emacs")
      (synopsis "Major mode for Julia")
      (description "This Emacs package provides a mode for the Julia
programming language.")
      (license license:expat))))

(define-public emacs-julia-repl
  (package
    (name "emacs-julia-repl")
    (version "1.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tpapp/julia-repl")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "11vpqqnxqj9nxh8kccj4y6h3f8lib6jxnsk6vxc2j2fqw6alnafm"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tpapp/julia-repl")
    (synopsis "Minor mode for interacting with a Julia REPL")
    (description "This package provides a minor mode for interacting with a
Julia REPL running inside Emacs.  The julia process is started in an ANSI
terminal (term), which allows text formatting and colors, and interaction with
the help system and the debugger.  It is recommended that you use this minor
mode with the package emacs-julia-mode.")
    (license license:expat)))

(define-public emacs-julia-snail
  (package
    (name "emacs-julia-snail")
    (version "1.3.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/gcv/julia-snail")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1jphpyhg52c2gm8dkz42s3nsyb4b1bg9n4vx8qncn1flclczkgcz"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include
      #~(cons* "^JuliaSnail\\.jl" "extensions" %default-include)))
    (inputs
     (list emacs-dash emacs-s emacs-spinner emacs-xref))
    (propagated-inputs
     (list libvterm
           emacs-julia-mode             ;required by parser
           emacs-parsec                 ;required by parser
           emacs-popup
           emacs-vterm
           julia-tokenize
           julia-cstparser))
    (home-page "https://github.com/gcv/julia-snail")
    (synopsis "Development environment and REPL interaction package for Julia")
    (description "This package provides a development environment and REPL
interaction package for Julia in the spirit of Common Lisp’s SLIME and
Clojure’s CIDER.  It enables convenient and dynamic REPL-driven development.")
    (license license:gpl3)))

(define-public emacs-smex
  (package
    (name "emacs-smex")
    (version "3.0")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://raw.githubusercontent.com"
                                  "/nonsequitur/smex/" version "/smex.el"))
              (file-name (string-append "smex-" version ".el"))
              (sha256
               (base32
                "0ar310zx9k5y4i1vl2rawvi712xj9gx77160860jbs691p77cxqp"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nonsequitur/smex/")
    (synopsis "M-x interface with Ido-style fuzzy matching")
    (description
     "Smex is a M-x enhancement for Emacs.  Built on top of Ido, it provides a
convenient interface to your recently and most frequently used commands.  And
to all the other commands, too.")
    (license license:gpl3+)))

(define-public emacs-js2-mode
  (package
    (name "emacs-js2-mode")
    (version "20231224")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mooz/js2-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "11ppp1m7hl4ii79zjw62bqvksyzh5xmp3q1qw21wlj2s47mkpm73"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "test")))
    (home-page "https://github.com/mooz/js2-mode/")
    (synopsis "Improved JavaScript editing mode for Emacs")
    (description
     "Js2 mode provides a JavaScript major mode for Emacs that is more
advanced than the built-in javascript-mode.  Features include accurate syntax
highlighting using a recursive-descent parser, on-the-fly reporting of syntax
errors and strict-mode warnings, smart line-wrapping within comments and
strings, and code folding.")
    (license license:gpl3+)))

(define-public emacs-js-comint
  (package
    (name "emacs-js-comint")
    (version "1.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://stable.melpa.org/packages/"
                           "js-comint-" version ".el"))
       (sha256
        (base32 "1qin0hclm3ly62nl5ddiim64bcd2k74b1yqsqqc61cf9k2q8k287"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/redguardtoo/js-comint")
    (synopsis "Interacting with a JavaScript interpreter")
    (description
     "This program is a comint mode for Emacs which allows you to run a
compatible JavaScript REPL, such as node, SpiderMonkey or Rhino.
It also defines a few functions for sending JavaScript input to this REPL from
an Emacs buffer.")
    (license license:gpl3+)))

(define-public emacs-nodejs-repl
  (package
    (name "emacs-nodejs-repl")
    (version "0.2.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/abicky/nodejs-repl.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "06in0nnynrj6ciwbch4x8s65n6d750ikarvrdcjypi0cb0vscwsk"))))
    (build-system emacs-build-system)
    (inputs
     (list node-lts))
    (native-inputs
     (list emacs-ert-expectations))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'set-shell
            ;; Setting the SHELL environment variable is required for the tests
            ;; to find sh.
            (lambda _
              (setenv "SHELL" (which "sh"))))
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((node (search-input-file inputs "/bin/node")))
                ;; Specify the absolute file names of the various
                ;; programs so that everything works out-of-the-box.
                (emacs-substitute-variables "nodejs-repl.el"
                  ("nodejs-repl-command" node))))))
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-L" "."
                             "-l" "test/test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/abicky/nodejs-repl.el")
    (synopsis "Node.js REPL inside Emacs")
    (description
     "This program is derived from comint-mode and provides the following
features:

@itemize
@item TAB completion same as Node.js REPL
@item file name completion in string
@item incremental history search
@end itemize")
    (license license:gpl3+)))

(define-public emacs-typescript-mode
  (package
    (name "emacs-typescript-mode")
    (version "0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ananthakumaran/typescript.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "186bpvqxx87kp3857mq0mzn1ddsvzmpijix810k6bdz8522x7zdw"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-l" "typescript-mode-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/ananthakumaran/typescript.el")
    (synopsis "Emacs major mode for editing Typescript code")
    (description
     "This is based on Karl Landstrom's barebones @code{typescript-mode}.
This is much more robust and works with @code{cc-mode}'s comment
filling (mostly).  The modifications to the original @code{javascript.el} mode
mainly consisted in replacing \"javascript\" with \"typescript\"

The main features of this Typescript mode are syntactic highlighting (enabled
with @code{font-lock-mode} or @code{global-font-lock-mode}), automatic
indentation and filling of comments and C preprocessor fontification.")
    (license license:gpl3+)))

(define-public emacs-tide
  (package
    (name "emacs-tide")
    (version "5.1.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ananthakumaran/tide")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "01chyr71b8893jxgf4wncpskfmg9iwfpcaxq0vfc6yaij46yfhky"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-l" "tide-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-before 'check 'set-home
                           (lambda _
                             (setenv "HOME" (getenv "TMPDIR"))))
                         (add-before 'check 'skip-package-refresh
                           (lambda _
                             (emacs-batch-edit-file "tide-tests.el"
                               '(progn (search-forward "dolist (p")
                                       (beginning-of-line)
                                       (kill-sexp)
                                       (basic-save-buffer)))))
                         (add-before 'check 'skip-failing-tests
                           (lambda _
                             (substitute* "tide-tests.el"
                               (("tide-list-servers/.*" all)
                                (string-append all " (skip-unless nil)"))))))))
    (propagated-inputs
     (list emacs-dash emacs-flycheck emacs-s emacs-typescript-mode))
    (native-inputs (list node))
    (home-page "https://github.com/ananthakumaran/tide")
    (synopsis "Typescript IDE for Emacs")
    (description
     "Tide is an Interactive Development Environment (IDE) for Emacs which
provides the following features:

@itemize
@item ElDoc
@item Auto complete
@item Flycheck
@item Jump to definition, Jump to type definition
@item Find occurrences
@item Rename symbol
@item Imenu
@item Compile On Save
@item Highlight Identifiers
@item Code Fixes
@item Code Refactor
@item Organize Imports
@end itemize")
    (license license:gpl3+)))

(define-public emacs-tinysegmenter
  (let ((commit "872134704bd25c13a4c59552433da4c6881b5230"))
    (package
      (name "emacs-tinysegmenter")
      (version "0.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/myuhe/tinysegmenter.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1n8cn6mr26hgmsm2mkbj5gs6dv61d0pap8ija4g0n1vsibfhzd8j"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/myuhe/tinysegmenter.el")
      (synopsis "Compact Japanese tokenizer in Emacs Lisp")
      (description
       "This package provides functions for tokenizing Japanese text in
Emacs buffers.")
      (license license:bsd-3))))

(define-public emacs-markdown-mode
  (package
    (name "emacs-markdown-mode")
    (version "2.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jrblevin/markdown-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1w6y18bg0fpvb5xwr827ynzbj0f0nh3dms3n0xq6hg38dcyly46b"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")
                     #:tests? #f))      ; XXX: 5 unexpected results
    (home-page "https://jblevins.org/projects/markdown-mode/")
    (synopsis "Emacs Major mode for Markdown files")
    (description
     "Markdown-mode is a major mode for editing Markdown-formatted text files
in Emacs.")
    (license license:gpl3+)))

(define-public emacs-evil-markdown
  (let ((commit "685d7fbb81bc02fa32779d2a127b99a0c8c7436b")
        (revision "2"))
    (package
      (name "emacs-evil-markdown")
      (version (git-version "0.0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Somelauw/evil-markdown")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1z1sjn6dcqv8mmkh6nfcwhnql2z6xr9yx3hs77bfxj79pf3c466p"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-evil emacs-markdown-mode))
      (home-page "https://github.com/Somelauw/evil-markdown/")
      (synopsis "Evil keybindings for @code{markdown-mode}")
      (description
       "This package provides custom text objects and bindings for
@code{markdown-mode}.")
      (license license:gpl3+))))

(define-public emacs-edit-indirect
  (package
    (name "emacs-edit-indirect")
    (version "0.1.13")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fanael/edit-indirect")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1qjnhhf8c00hnn0b8icq71l73fa1blxfx9q0ahnvpd32wh6i0bql"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/edit-indirect")
    (synopsis "Edit regions in separate buffers")
    (description "This package allows you to edit regions in separate buffers,
like @code{org-edit-src-code} but for arbitrary regions.")
    (license license:bsd-2)))

(define-public emacs-projectile
  (package
    (name "emacs-projectile")
    (version "2.9.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/projectile")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "15wc2ivmac0kgbdgsaaxngmcffgd3227zsb4n7inhn14cqwr6qxd"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "buttercup" "-L" ".")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'fix-failing-test
            (lambda _
              (substitute* "test/projectile-test.el"
                (("user-emacs-directory") "\".\"")))))))
    (native-inputs
     (list emacs-buttercup))
    (propagated-inputs
     (list emacs-dash emacs-pkg-info))
    (home-page "https://github.com/bbatsov/projectile")
    (synopsis "Manage and navigate projects in Emacs easily")
    (description
     "This library provides easy project management and navigation.  The
concept of a project is pretty basic: just a folder containing special file.
Currently Git, Mercurial and Bazaar repositories are considered projects by
default.  If you want to mark a folder manually as a project just create an
empty @file{.projectile} file in it.")
    (license license:gpl3+)))

(define-public emacs-skeletor
  (let ((commit "47c5b761aee8452716c97a69949ac2f675affe13")
        (revision "1"))
    (package
      (name "emacs-skeletor")
      (version (git-version "1.6.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/chrisbarrett/skeletor.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "12bdgykfh4mwsqdazxjdvha62h3q3v33159ypy91f6x59y01fi0n"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(cons "^project-skeletons\\/" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            ;; XXX: one failing test involving initializing a git repo.
            (add-before 'check 'remove-git-test
              (lambda _
                (emacs-batch-edit-file "test/skeletor-test.el"
                  `(progn
                    (goto-char (point-min))
                    (re-search-forward "ert-deftest initialises-git-repo")
                    (beginning-of-line)
                    (kill-sexp)
                    (basic-save-buffer))))))))
      (native-inputs
       (list emacs-ert-runner))
      (propagated-inputs
       (list emacs-dash emacs-f emacs-let-alist emacs-s))
      (home-page "https://github.com/chrisbarrett/skeletor.el")
      (synopsis "Project skeletons for Emacs")
      (description "This package provides project templates and automates the
mundane parts of setting up a new project, such as version control, licenses,
and tooling.")
      (license license:gpl3+))))

(define-public emacs-elfeed
  (package
    (name "emacs-elfeed")
    (version "3.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skeeto/elfeed")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0yq93abyadzrmcd40pi06wcr4jg9ddhlz2phg0wjypprqvv4q49z"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "test")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-program-calls
           (lambda* (#:key inputs #:allow-other-keys)
             (emacs-substitute-variables "elfeed-curl.el"
               ("elfeed-curl-program-name"
                (search-input-file inputs "/bin/curl"))))))))
    (inputs
     (list curl))
    (home-page "https://github.com/skeeto/elfeed")
    (synopsis "Atom/RSS feed reader for Emacs")
    (description
     "Elfeed is an extensible web feed reader for Emacs, supporting both Atom
and RSS, with a user interface inspired by notmuch.")
    (license license:gpl3+)))

(define-public emacs-elfeed-goodies
  (let ((commit "544ef42ead011d960a0ad1c1d34df5d222461a6b"))
    (package
      (name "emacs-elfeed-goodies")
      (version commit)
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jeetelongname/elfeed-goodies")
               (commit version)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "147pwqx2maf430qhigzfd6lqk7a5sbrydf9a4c5bvsw8jv7wzb6l"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list
        emacs-elfeed
        emacs-popwin
        emacs-powerline
        emacs-link-hint))
      (home-page "https://github.com/jeetelongname/elfeed-goodies")
      (synopsis
       "Various bits and pieces to enhance the Elfeed user experience")
      (description
       "This package enhances the vanilla Elfeed user experience with:
@itemize @bullet
@item
An adaptive, powerline-based header for the @code{*elfeed-search*} and
@code{*elfeed-entry*} buffers, with a matching entry format.

@item
Split pane setup.

@item
A function to toggle the @code{*elfeed-log*} buffer in a popup window.
@end itemize")
      (license license:gpl3+))))

(define-public emacs-elfeed-org
  (let ((commit "1197cf29f6604e572ec604874a8f50b58081176a")
        (version "20250104.0")
        (revision "0"))
    (package
      (name "emacs-elfeed-org")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/remyhonig/elfeed-org")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0giwnzlqk2s5hb6fs8a0l4dxcmn2fvkngpj1fayzwj0qnvds1kri"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("ert-runner" "-L" "org-mode/lisp")))
      (propagated-inputs (list emacs-elfeed))
      (native-inputs (list emacs-ert-runner emacs-xtest))
      (home-page "https://github.com/remyhonig/elfeed-org")
      (synopsis "Configure Elfeed with an Org-mode file")
      (description
       "@code{elfeed-org} lets you manage your Elfeed subscriptions
in Org-mode.  Maintaining tags for all RSS feeds is cumbersome using
the regular flat list, where there is no hierarchy and tag names are
duplicated a lot.  Org-mode makes the book keeping of tags and feeds
much easier.")
      (license license:gpl3+))))

(define-public emacs-elfeed-protocol
  (package
    (name "emacs-elfeed-protocol")
    (version "0.9.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/fasheng/elfeed-protocol")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1n5bns7181j6n603a626jsv26v06s3wm86ml7vixlp234p0frypp"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-elfeed))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/fasheng/elfeed-protocol")
    (synopsis "Fever/NewsBlur/ownCloud/tt-RSS protocols for Elfeed")
    (description
     "Elfeed-protocol provides extra protocols to make self-hosting RSS
readers like Fever, NewsBlur, ownCloud News and Tiny TIny RSS work
with Elfeed.")
    (license license:gpl3+)))

(define-public emacs-elfeed-score
  (package
    (name "emacs-elfeed-score")
    (version "1.2.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sp1ff/elfeed-score")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "14f5m81ik8w3yi2dc3mff88v63abkcjs5fcp5d2zbg35adbqrb7l"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #false                   ;FIXME: How to run tests properly?
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'make-info
            (lambda _
              (with-directory-excursion "doc"
                (invoke "makeinfo" "--no-split"
                        "-o" "elfeed-score.info" "elfeed-score.texi")))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-elfeed))
    (home-page "https://github.com/sp1ff/elfeed-score")
    (synopsis "Gnus-style scoring for Elfeed")
    (description
     "Elfeed-score is an add-on for Elfeed, an RSS reader for Emacs.  It
brings Gnus-style scoring to your RSS feeds.  Elfeed, by default, displays
feed entries by date.  This package allows you to setup rules for assigning
numeric scores to entries, and sorting entries with higher scores ahead of
those with lower, regardless of date.  The idea is to prioritize content
important to you.")
    (license license:gpl3+)))

(define-public emacs-elfeed-tube
  (package
    (name "emacs-elfeed-tube")
    (version "0.15")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/karthink/elfeed-tube")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vsrsnvz0ysd36a99zk7n2giv0gxznlnls8zq6lcc0hwqw78i5cq"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-elfeed emacs-aio emacs-mpv))
    (home-page "https://github.com/karthink/elfeed-tube/")
    (synopsis "YouTube integration for Elfeed")
    (description
     "@code{elfeed-tube} is an extension for Elfeed that enhances Youtube RSS
feed subscriptions.")
    (license license:unlicense)))

(define-public emacs-el-x
  (package
    (name "emacs-el-x")
    (version "0.3.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/sigma/el-x")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1i6j44ssxm1xdg0mf91nh1lnprwsaxsx8vsrf720nan7mfr283h5"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f                      ; no tests
       #:phases
       (modify-phases %standard-phases
         ;; Move the source files to the top level, which is included in
         ;; the EMACSLOADPATH.
         (add-after 'unpack 'move-source-files
           (lambda _
             (let ((el-files (find-files "./lisp" ".*\\.el$")))
               (for-each (lambda (f)
                           (rename-file f (basename f)))
                         el-files))
             #t)))))
    (home-page "https://github.com/sigma/el-x")
    (synopsis "Emacs Lisp extensions")
    (description "@command{emacs-el-x} defines the @code{dflet} macro to
provide the historic behavior of @code{flet}, as well as
@code{declare-function} stub for older Emacs.")
    (license license:gpl2+)))

(define-public emacs-epithet
  ;; No tags.
  (let ((commit "cc42338376c2c58da561214c554be8e8856f6a2b"))
    (package
      (name "emacs-epithet")
      (version "0.1")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/oantolin/epithet")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "06irgshgcgmm09nswrny8mam6l660ai71rgn0l3rmyp9li8n97j0"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/oantolin/epithet")
      (synopsis "Rename Emacs buffers with descriptive names")
      (description
       "This package provides a function---@code{epithet-rename-buffer}---to
rename the current buffer with a descriptive name.  The name suggestion is
governed by the @code{epithet-suggesters} hook variable: each hook should
return either a name suggestion or @code{nil}, they are called in turn and the
first non-nil suggestion is taken.")
      (license license:gpl3+))))

(define-public emacs-eterm-256color
  (package
    (name "emacs-eterm-256color")
    (version "0.3.13")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/dieggsy/eterm-256color")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0ysxblc90kjcz84siprnyxwh94scflivqbxylzkvjm7hbx93rsh1"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-f emacs-xterm-color))
    (home-page "https://github.com/dieggsy/eterm-256color")
    (synopsis
     "Customizable 256 colors for Emacs @code{term} and @code{ansi-term}")
    (description "This package uses @code{emacs-xterm-color} to add
customizable 256 color support to @code{term} and @code{ansi-term}.")
    (license license:gpl3+)))

(define-public emacs-centaur-tabs
  (package
    (name "emacs-centaur-tabs")
    (version "3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ema2159/centaur-tabs")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1z7b3s29xb0n25bfbbm1wrcap9dvig5zi5fcnvlyrl9si9565948"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-all-the-icons emacs-powerline))
    (home-page "https://github.com/ema2159/centaur-tabs")
    (synopsis "Modern looking tabs plugin for Emacs")
    (description
     "This projects aims to become an aesthetic, functional and
efficient tabs plugin for Emacs with a lot of customization options.")
    (license license:gpl3+)))

(define-public emacs-org-remark
  (package
    (name "emacs-org-remark")
    (version "1.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/nobiot/org-remark")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0npw7niqjhxspnaw4f2wnrjz5wr7qfkib0865hcri3aq8ccd46xr"))
              (modules '((guix build utils)))
              (snippet #~(begin (for-each delete-file-recursively
                                          '("docs/resources" "resources"))))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f))  ; No proper tests.
    (propagated-inputs (list emacs-org))
    (home-page "https://nobiot.github.io/org-remark/")
    (synopsis "Highlight & annotate text using Org mode")
    (description "Org-remark lets you highlight and annotate text files,
websites, EPUB books and Info documentation using Org mode.

Features:

@itemize
@item Highlight and annotate any text file.  The highlights and notes are kept
in an Org file as the plain text database.  This lets you easily manage your
marginal notes and use the built-in Org facilities on them – e.g. create a
sparse tree based on the category of the notes
@item Create your your own highlighter pens with different colors, type (e.g.
underline, squiggle, etc. optionally with Org’s category for search and filter
on your highlights and notes)
@item Have the same highlighting and annotating functionality for websites
(when browsing with EWW), EPUB books with @code{nov.el}, Info documentation
@end itemize")
    (license license:gpl3+)))

(define-public emacs-mocker
  (package
    (name "emacs-mocker")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sigma/mocker.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1dc514cqbfmg33sb3j90s5jmw6jnm3wzvs0zhw3maz13bp7w6z48"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-el-x))
    (home-page "https://github.com/sigma/mocker.el")
    (synopsis "Mocking framework for Emacs Lisp")
    (description "Mocker.el is a framework for writing tests in Emacs Lisp.
It uses regular Lisp rather than a domain specific language (DSL), which
maximizes flexibility (at the expense of conciseness).")
    (license license:gpl2+)))

(define-public emacs-find-file-in-project
  (package
    (name "emacs-find-file-in-project")
    (version "6.2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/technomancy/find-file-in-project")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0crr4597naffxa4cli6flzjrz3x73nml50kgv6x2i5bspxjzkv27"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("ert-runner" "tests")))
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/technomancy/find-file-in-project")
    (synopsis "File/directory finder for Emacs")
    (description "@code{find-file-in-project} finds files or
directories quickly in the current project.  The project root is detected
automatically when Git, Subversion or Mercurial are used.  It also provides
functions to assist in reviewing changes on files.")
    (license license:gpl3+)))

(define-public emacs-popwin
  ;; Last release is from 2020.
  (let ((commit "213e462c4aa23c9aa78105b78a8fb27c8bbc3c9c")
        (revision "0"))
    (package
      (name "emacs-popwin")
      (version (git-version "1.0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/emacsorphanage/popwin")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13gn96h0f4z9g1dg65hiq24srjq75jnndd0khzx8j2xv7d5fmmyk"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "-Q" "-batch"
                "-l" "test/popwin-test.el"
                "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            ;; Ran 42 tests, 33 results as expected, 0 unexpected, 9 skipped.
            (add-before 'check 'skip-tests
              (lambda _
                (emacs-batch-edit-file "test/popwin-test.el"
                  '(progn
                    (let ((tests (list "find-file-interactively"
                                       "display-buffer-interactively"
                                       "find-file-tail-interactively"
                                       "popup-at-bottom-with-three-columes"
                                       "popup-at-top-with-three-columes.*"
                                       "popup-buffer-interactively"
                                       "popup-buffer-tail-interactively"
                                       "popwin-side-window"
                                       "popup-from-minibuffer")))
                      (dolist (test tests)
                              (save-excursion
                               (re-search-forward (format "%s ()" test))
                               (insert "\n(skip-unless nil)")))
                      (basic-save-buffer)))))))))
      (native-inputs
       (list emacs-ert-runner))
      (home-page "https://github.com/emacsorphanage/popwin")
      (synopsis "Popup window manager for Emacs")
      (description
       "This package provides utilities for treating certain windows as
@dfn{pop up windows}, which close automatically when quitting a command or
selecting another window.")
      (license license:gpl3+))))

(define-public emacs-pyvenv
  (package
    (name "emacs-pyvenv")
    (version "1.21")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jorgenschaefer/pyvenv")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "055sgk8zf4wb5nqsf3qasf5gg861zlb1831733f1qcrd2ij5gzxx"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         ;; This phase incorrectly attempts to substitute "activate" and fails
         ;; doing so.
         (delete 'patch-el-files)
         (add-after 'unpack 'ert-number-tests
             (lambda _
               (ert-number-tests "test/pyvenv-hook-dir-test.el"
                                 "pyvenv-hook-dir"))))))
    (native-inputs
     (list emacs-ert-runner emacs-mocker))
    (home-page "https://github.com/jorgenschaefer/pyvenv")
    (synopsis "Python virtual environment interface for Emacs")
    (description "pyvenv.el is a minor mode to support using Python virtual
environments (virtualenv) inside Emacs.")
    (license license:gpl3+)))

(define-public emacs-highlight-indent-guides
  (let ((version "0.8.5") ; from package metadata
        (revision "0")
        (commit "c2c9de4d01edfb89609c91d4d7f1d81312015a2c"))
    (package
      (name "emacs-highlight-indent-guides")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/DarthFennec/highlight-indent-guides")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "10chvqnmdmkx6i9sigqframr85ziyafiz44glwhvhjajfkv42ad2"))))
      (build-system emacs-build-system)
      (home-page
       "https://github.com/DarthFennec/highlight-indent-guides")
      (synopsis "Minor mode to highlight indentation")
      (description
       "This package provides a minor mode to highlight indentation levels via
font-lock.  Indent widths are dynamically discovered, which means this
correctly highlights in any mode, regardless of indent width, even in
languages with non-uniform indentation such as Haskell.  This mode works
properly around hard tabs and mixed indentation and behaves well in large
buffers.")
      (license license:expat))))

(define-public emacs-highlight-indentation
  ;; Last release version is from 2015.
  (let ((commit "d03803f2c06749c430443a3d24e039cbafc9c58f")
        (revision "1"))
    (package
      (name "emacs-highlight-indentation")
      (version (git-version "0.7.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/antonj/Highlight-Indentation-for-Emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1jq0gf4kcx9hvrw40rnw5c2qynjpjw1vsjbi2i4lqjbsnfnxn4wz"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/antonj/Highlight-Indentation-for-Emacs/")
      (synopsis "Highlighting indentation for Emacs")
      (description "This package provides two minor modes to highlight
indentation guides in Emacs:

@enumerate
@item @code{highlight-indentation-mode}, which displays guidelines
  indentation (space indentation only).
@item @code{highlight-indentation-current-column-mode}, which displays
  guidelines for the current-point indentation (space indentation only).
@end enumerate")
      (license license:gpl2+))))

(define-public emacs-elpy
  ;; Using the latest commit fixes outstanding bugs such as the following:
  ;; https://github.com/jorgenschaefer/elpy/issues/1824
  ;; https://github.com/jorgenschaefer/elpy/pull/1951
  ;; https://github.com/jorgenschaefer/elpy/issues/1940.
  (let ((commit "0b381f55969438ab2ccc2d1a1614045fcf7c9545")
        (revision "3"))
    (package
      (name "emacs-elpy")
      (version (git-version "1.35.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jorgenschaefer/elpy")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0398zwzq5c33fi8icyy2x50q7rs819i5xkpmhbfm1s34m6prv46a"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons* "^elpy/[^/]+\\.py$" "^snippets\\/" %default-include)
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'disable-broken-tests
             ;; Some tests are known to have problems with Python 3.9; disable
             ;; them (see:
             ;; https://github.com/jorgenschaefer/elpy/issues/1856).
             ;; Aggressively remove the modules where failing tests were
             ;; discovered, as they are similar and fail in a nondeterministic
             ;; way.
             (lambda _
               (with-directory-excursion "test"
                 (for-each delete-file
                           (append (find-files "." "elpy-refactor")
                                   (find-files "." "elpy-multiedit")
                                   (find-files "." "elpy-pdb")
                                   (find-files "." "elpy-promise")))
                 ;; These test fail since upgrading Emacs from version 27 to
                 ;; 28.1 (see:
                 ;; https://github.com/jorgenschaefer/elpy/issues/1982).
                 (delete-file "elpy-project-find-git-root-test.el")
                 (substitute* "elpy-company-backend-test.el"
                   (("elpy-company-backend-should-add-shell-candidates.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 (substitute* "elpy-eldoc-documentation-test.el"
                   (("elpy-eldoc-documentation-should-show-object-onelinedoc.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 (substitute* "elpy-shell-send-file-test.el"
                   (("elpy-shell-send-file-should-accept-large-strings.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 (substitute* "elpy-shell-echo-inputs-and-outputs-test.el"
                   (("elpy-shell-should-echo-outputs.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 ;; This test started failing with Emacs 29 (see:
                 ;; https://github.com/jorgenschaefer/elpy/issues/2032).
                 (substitute* "elpy-folding-fold-blocks-test.el"
                   (("elpy-fold-at-point-should-NOT-fold-and-unfold-functions\
-from-after.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 ;; These tests started failing with Emacs 30.
                 ;; (TODO: report upstream)
                 (substitute* "elpy-company-backend-test.el"
                   (("elpy-company-backend-should-find-.*-prefix-string.*" all)
                    (string-append all "  :expected-result :failed\n")))
                 (substitute* "elpy-format-code-test.el"
                   (("elpy-should-format-code-with-default-formatter.*" all)
                    (string-append all "  :expected-result :failed\n"))))))
           ;; The default environment of the RPC uses Virtualenv to install
           ;; Python dependencies from PyPI.  We don't want/need this in Guix.
           (add-before 'check 'do-not-use-virtualenv
             (lambda _
               (setenv "ELPY_TEST_DONT_USE_VIRTUALENV" "1")
               (substitute* "elpy-rpc.el"
                 (("defcustom elpy-rpc-virtualenv-path 'default")
                  "defcustom elpy-rpc-virtualenv-path 'system"))))
           (add-before 'check 'build-doc
             (lambda _
               (with-directory-excursion "docs"
                 (invoke "make" "info" "man"))
               ;; Move .info file at the root so that it can installed by the
               ;; 'move-doc phase.
               (rename-file "docs/_build/texinfo/Elpy.info" "Elpy.info")))
           (add-after 'build-doc 'install-manpage
             (lambda* (#:key outputs #:allow-other-keys)
               (let* ((out  (assoc-ref outputs "out"))
                      (man1 (string-append out "/share/man/man1")))
                 (mkdir-p man1)
                 (copy-file "docs/_build/man/elpy.1"
                            (string-append man1 "/elpy.1"))))))))
      (propagated-inputs
       (list emacs-company
             emacs-find-file-in-project
             emacs-highlight-indentation
             emacs-yasnippet
             emacs-pyvenv
             emacs-s
             ;; The following are recommended Python dependencies that make
             ;; Elpy much more useful.  Installing these avoids Elpy prompting
             ;; to install them from PyPI using pip.
             python-autopep8
             python-black
             python-flake8
             python-jedi
             python-yapf))
      (native-inputs
       (list emacs-ert-runner
             emacs-f
             python-wrapper
             ;; For documentation.
             python-sphinx
             texinfo))
      (home-page "https://github.com/jorgenschaefer/elpy")
      (synopsis "Python development environment for Emacs")
      (description "Elpy brings powerful Python editing to Emacs.  It combines
and configures a number of other packages written in Emacs Lisp as well as
Python, together offering features such as navigation, documentation,
completion, interactive development and more.")
      (license license:gpl3+))))

(define-public emacs-railscasts-theme
  (let ((commit "1340c3f6c2717761cab95617cf8dcbd962b1095b")
        (revision "0"))
    (package
      (name "emacs-railscasts-theme")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mikenichols/railscasts-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "021x1l5kzsbm0qj5a3bngxa7ickm4lbwsdz81a2ks9pi1ivmw205"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/mikenichols/railscasts-theme")
      (synopsis "Railscasts is a color theme for Emacs")
      (description "Railscasts is a color theme for Emacs.")
      (license license:expat))))

(define-public emacs-rainbow-delimiters
  (package
    (name "emacs-rainbow-delimiters")
    (version "2.1.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Fanael/rainbow-delimiters")
                    (commit version)))
              (file-name (git-file-name name version))
              ;; Fix tests for Emacs 29
              ;; https://github.com/Fanael/rainbow-delimiters/pull/78
              (modules '((guix build utils)))
              (snippet '(substitute* "rainbow-delimiters-test.el"
                          (("category c-type " all)
                           (string-append all "c-<>-c-types-set "))))
              (sha256
               (base32
                "179mzsd8nvlr0ym9zf9fgdngsgxj3kdgbjblynliirsyk05ssrwc"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/rainbow-delimiters")
    (arguments
     `(#:test-command '("emacs" "-Q" "-batch"
                        "-l" "rainbow-delimiters-test.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (synopsis "Highlight brackets according to their depth")
    (description
     "Rainbow-delimiters is a \"rainbow parentheses\"-like mode for Emacs which
highlights parentheses, brackets, and braces according to their depth.  Each
successive level is highlighted in a different color, making it easy to spot
matching delimiters, orient yourself in the code, and tell which statements
are at a given level.")
    (license license:gpl3+)))

(define-public emacs-rainbow-identifiers
  (package
    (name "emacs-rainbow-identifiers")
    (version "0.2.2")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://raw.githubusercontent.com/Fanael"
                                  "/rainbow-identifiers/" version
                                  "/rainbow-identifiers.el"))
              (file-name (string-append "rainbow-identifiers-" version ".el"))
              (sha256
               (base32
                "0325abxj47k0g1i8nqrq70w2wr6060ckhhf92krv1s072b3jzm31"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/rainbow-identifiers")
    (synopsis "Highlight identifiers in source code")
    (description
     "Rainbow identifiers mode is an Emacs minor mode providing highlighting of
identifiers based on their names.  Each identifier gets a color based on a hash
of its name.")
    (license license:bsd-2)))

(define-public emacs-rainbow-mode
  (package
    (name "emacs-rainbow-mode")
    (version "1.0.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "rainbow-mode-" version ".tar"))
       (sha256
        (base32 "04v73cm1cap19vwc8lqsw0rmfr9v7r3swc4wgxnk9dnzxi9j2527"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/rainbow-mode.html")
    (synopsis "Colorize color names in buffers")
    (description
     "This minor mode sets background color to strings that match color
names, e.g., @samp{#0000ff} is displayed in white with a blue background.")
    (license license:gpl3+)))

(define-public emacs-colorful-mode
  (package
    (name "emacs-colorful-mode")
    (version "1.2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DevelopmentCool2449/colorful-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1cm5bpw2x15h6pf5vxcp2f7jf1rkpnq7qq8idlv9n9p5nnxwik1d"))))
    (build-system emacs-build-system)
    ;; No automated tests.  The test directory contains sample files for
    ;; visual inspection.
    (arguments (list #:tests? #f))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/DevelopmentCool2449/colorful-mode")
    (synopsis "Highlight color strings in buffers")
    (description
     "@code{colorful-mode} is a minor mode to highlight any color
format, such as hex codes or HTML color names, in buffers in real time.  It is
inspired by @code{rainbow-mode} but uses overlays instead of text properties
to support a different feature set.  It also supports conversion of color
strings between formats.")
    (license license:gpl3+)))

(define-public emacs-indent-bars
  (package
    (name "emacs-indent-bars")
    (version "0.9.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/indent-bars-"
                           version ".tar"))
       (sha256
        (base32 "030haxxla7m6p2zks9g50dj8rr8grm67n2ig7zd3k20h1yrfm6q0"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;No tests.
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/jdtsmith/indent-bars")
    (synopsis "Highlight indentation with bars")
    (description
     "Indent Bars highlights indentation with configurable vertical graphical
bars, using stipples.  The color and appearance (weight, pattern, position
within the character, zigzag, etc.) are all configurable.  Indent Bars works
in any mode using fixed tab or space-based indentation.  In the terminal (or
on request) it uses vertical bar characters instead of stipple patterns.
Optional Treesitter support is also available.")
    (license license:gpl3+)))

(define-public emacs-ryo-modal
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "a10f564474cc8fa28a74b04e3b15375315223c44")
        (revision "0"))
    (package
      (name "emacs-ryo-modal")
      (version (git-version "0.45" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Kungsgeten/ryo-modal")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ypm1rnyry6hb4znb8sgwfi0la6q46ihm8k99kisk0mkgz7im93d"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Kungsgeten/ryo-modal")
      (synopsis "Emacs minor mode for defining modal editing environments")
      (description "RYO modal provides a convenient way of defining modal
keybindings in Emacs, and does not come with any predefined bindings.")
      (license license:expat))))

(define-public emacs-valign
  (package
    (name "emacs-valign")
    (version "3.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/casouri/valign")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "11ks6z532i7vxi6f9g32zhimvikhsqywa2bd5fnnj2ahfx3msa95"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; "no effect on non-graphical display"
    (home-page "https://github.com/casouri/valign")
    (synopsis "Pixel-perfect visual alignment for Org and Markdown tables")
    (description
     "Valign provides visual alignment for Org mode, Markdown and Table.el
tables on GUI Emacs.  It can properly align tables containing variable-pitch
font, CJK characters and images.  Meanwhile, the text-based alignment
generated by Org mode (or Markdown mode) is left untouched.")
    (license license:gpl3+)))

(define-public emacs-visual-fill-column
  (package
    (name "emacs-visual-fill-column")
    (version "2.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/joostkremers/visual-fill-column")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0sy01jx8z229ival3y4bj0jrb3w2ys8kiw3bmy6ssjwbl7xlyxxj"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch"
                             "-l" "test/visual-fill-column-test.el"
                             "-l" "test/test-helper.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://codeberg.org/joostkremers/visual-fill-column")
    (synopsis "Fill-column for visual-line-mode")
    (description
     "@code{visual-fill-column-mode} is a small Emacs minor mode that mimics
the effect of @code{fill-column} in @code{visual-line-mode}.  Instead of
wrapping lines at the window edge, which is the standard behaviour of
@code{visual-line-mode}, it wraps lines at @code{fill-column}.  If
@code{fill-column} is too large for the window, the text is wrapped at the
window edge.")
    (license license:gpl3+)))

(define-public emacs-visual-replace
  (let ((commit "17d693fd5b5ba0597230a3cdc78f5e6a285d4700")
        (revision "1"))
    (package
      (name "emacs-visual-replace")
      ;; XXX: when updating version, please ensure substitution in install-info
      ;; phase is still accurate.
      (version (git-version "1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/szermatt/visual-replace")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1jn94ivfalgiw6lfx8hqgq08qffrsq6lcydcxv6b41k04gkwm0yr"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases #~(modify-phases %standard-phases
                     (add-before 'check 'add-test-dir-to-emacs-load-path
                       (lambda _
                         (setenv "EMACSLOADPATH"
                                 (string-append (getcwd) "/test:"
                                                (getenv "EMACSLOADPATH")))))
                     (add-after 'install 'install-info
                       (lambda _
                         (let ((info-dir (string-append #$output "/share/info")))
                           (invoke "makeinfo" "--no-split"
                                   "-o" "visual-replace.info"
                                   "visual-replace.texi")
                           (install-file "./visual-replace.info" info-dir)))))
        #:test-command #~(list "eldev" "--use-emacsloadpath" "-dtTC" "test")))
      (native-inputs (list emacs-eldev emacs-turtles texinfo))
      (home-page "https://github.com/szermatt/visual-replace")
      (synopsis
       "Alternate interface for @code{replace-string} and @code{query-replace}")
      (description
       "@code{visual-replace} provides an alternate interface for search and
replacement commands that supports previews.  The interface also allows one to
edit both the query-text and its replacement in the same minibuffer prompt.
The interface covers the following commands:

@enumerate
@item @code{replace-string}
@item @code{replace-regexp}
@item @code{query-replace}
@item @code{query-replace-regexp}
@end enumerate")
      (license license:gpl3+))))

(define-public emacs-writeroom
  (package
    (name "emacs-writeroom")
    (version "3.11")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joostkremers/writeroom-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0y4jcja9kml1lq88r8b9myk39dgaggh7q7f3a43sj828hvzlccb7"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-visual-fill-column))
    (home-page "https://github.com/joostkremers/writeroom-mode")
    (synopsis "Distraction-free writing for Emacs")
    (description
     "This package defines a minor mode for distraction-free writing.  Some of
the default effects include entering fullscreen, deleting other windows of the
current frame, disabling the mode line, and adding margins to the buffer that
restrict the text width to 80 characters.")
    (license license:bsd-3)))

(define-public emacs-wucuo
  (package
    (name "emacs-wucuo")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/wucuo")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ivy3jaj9jml10jn020mma6x92j8q75q7wzbd23m9jl4w60bpqlq"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "test")
       #:phases (modify-phases %standard-phases
                  ;; The files auto-generated by `emacs-build-system' cause
                  ;; the Makefile target `compile' to fail (due to missing
                  ;; `lexical-binding' directives in the generated files).
                  ;; Since `emacs-build-system' already byte-compiles the
                  ;; source files (to `.elc' files), `make compile' is not
                  ;; needed anyway. Additionally, the `clean' target must be
                  ;; inhibited as it deletes all `.elc' files in the source
                  ;; directory, which, however, are part of the installation.
                  (add-after 'unpack 'patch-makefile
                    (lambda _
                      (substitute* "Makefile"
                        (("test: compile clean")
                         "test:"))))
                  ;; Set HOME, otherwise tests fail on loading aspell dict.
                  (add-before 'check 'set-home
                    (lambda _ (setenv "HOME" (getcwd)))))))
    (native-inputs
     ;; For tests.
     (list aspell aspell-dict-en))
    (home-page "https://github.com/redguardtoo/wucuo")
    (synopsis "Fast spell checker for camel case code or plain text")
    (description
     "Wucuo provides a spell checker on top of either Aspell or Hunspell, and
relies on Flyspell internally.  It operates on the current region or buffer,
a file, or a complete directory.")
    (license license:gpl3+)))

(define-public emacs-ido-completing-read+
  (package
    (name "emacs-ido-completing-read+")
    (version "4.14")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://raw.githubusercontent.com"
                                  "/DarwinAwardWinner/ido-ubiquitous/v"
                                  version "/ido-completing-read+.el"))
              (file-name (string-append "ido-completing-read+-" version ".el"))
              (sha256
               (base32
                "1wn94nkfv6qyyj6clvms7m7ncqf09bgszv67may530y75kylivav"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'disable-native-comp
                 (lambda _
                   ;; Native compilation of this package may crash your system,
                   ;; see <https://bugs.gnu.org/57878>.
                   (for-each
                    (lambda (file)
                      (make-file-writable file)
                      (emacs-batch-disable-compilation file #:native? #t))
                    (find-files "." "\\.el$")))))))
    (propagated-inputs
     (list emacs-s))
    (home-page "https://github.com/DarwinAwardWinner/ido-ubiquitous")
    (synopsis "Replacement for completing-read using ido")
    (description
     "The ido-completing-read+ function is a wrapper for ido-completing-read.
Importantly, it detects edge cases that ordinary ido cannot handle and either
adjusts them so ido can handle them, or else simply falls back to the standard
Emacs completion function instead.")
    (license license:gpl3+)))

(define-public emacs-ido-ubiquitous
  (package
    (name "emacs-ido-ubiquitous")
    (version "4.13")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://raw.githubusercontent.com"
                                  "/DarwinAwardWinner/ido-ubiquitous/v"
                                  version "/ido-ubiquitous.el"))
              (file-name (string-append "ido-ubiquitous-" version ".el"))
              (sha256
               (base32
                "08iwvqknicqlffda7ixwgzw7q9g2g4j4nsxdw6544r85vaysi4cc"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ido-completing-read+))
    (home-page "https://github.com/DarwinAwardWinner/ido-ubiquitous")
    (synopsis "Use ido (nearly) everywhere")
    (description
     "Ido-ubiquitous enables ido-style completion for almost every function
that uses the standard completion function completing-read.")
  (license license:gpl3+)))

(define-public emacs-yaml
  (package
    (name "emacs-yaml")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/zkry/yaml.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "131g2nv18fjcqgc9v17b0a7zyw2m6ydbhj6riahihd340bci2s6w"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch" "-Q"
                             "-l" "yaml.el"
                             "-l" "yaml-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/zkry/yaml.el")
    (synopsis "YAML parser in Elisp")
    (description
     "@code{yaml.el} is a YAML parser written in Emacs Lisp without any
external dependencies.  It provides an interface similar to the Emacs JSON
parsing utility.")
    (license license:gpl3+)))

(define-public emacs-yaml-mode
  (package
    (name "emacs-yaml-mode")
    (version "0.0.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/yoshiki/yaml-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jqg2hmh7qsgqywwd6fy3k8z8j45nqhpdzr3hw4hd5s2hry3zhg1"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/yoshiki/yaml-mode")
    (synopsis "Major mode for editing YAML files")
    (description
     "Yaml mode is an Emacs major mode for editing files in the YAML data
serialization format.  As YAML and Python share the fact that indentation
determines structure, this mode provides indentation and indentation command
behavior very similar to that of Python mode.")
    (license license:gpl3+)))

(define-public emacs-yari
  (let ((revision "0")
        (commit "de61285ceb21f56c29f4be12e2e65b2aa2bccf56"))
    (package
      (name "emacs-yari")
      (version (git-version "0.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hron/yari.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0sik21rifw0q1rw4wrffnnwynsmgrv6w323gz3fw89cz6n8kqsgn"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "ert-runner")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'set-program-names
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "yari.el"
                  ("yari-ri-program-name"
                   (search-input-file inputs "/bin/ri"))
                  ("yari-ruby-program-name"
                   (search-input-file inputs "/bin/ruby"))))))))
      (native-inputs (list emacs-ert-runner))
      (inputs (list ruby))
      (home-page "https://github.com/hron/yari.el")
      (synopsis "Yet Another RI interface for Emacs")
      (description
       "This package provides an Emacs frontend to Ruby's @code{ri}
documentation tool, and offers lookup and completion.  The main
function you should use as interface to @code{ri} is @samp{M-x yari}.")
      (license license:gpl3+))))

(define-public emacs-gitlab-ci-mode
  (package
    (name "emacs-gitlab-ci-mode")
    (version "20190824.12.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/joewreschnig/gitlab-ci-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "16fb4r3vq8xkzl911v7gaky95w1agfxjlpaxpjmidwx48rbcar59"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "tests")))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-yaml-mode))
    (home-page "https://gitlab.com/joewreschnig/gitlab-ci-mode/")
    (synopsis "Emacs mode for editing GitLab CI files")
    (description
     "@code{gitlab-ci-mode} is an Emacs major mode for editing GitLab CI
files.  It provides syntax highlighting and completion for keywords and
special variables.  An interface to GitLab’s CI file linter is also provided
via @code{gitlab-ci-lint}.")
    (license license:gpl3+)))

(define-public emacs-gitlab-snip-helm
  (package
    (name "emacs-gitlab-snip-helm")
    (version "0.0.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/sasanidas/gitlab-snip-helm.git")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1c5js19zyb1z61hapvbfcl5jhrjqij46cxldgqij6al0scw44dga"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-helm))
    (home-page "https://gitlab.com/sasanidas/gitlab-snip-helm/")
    (synopsis "GitLab snippet API interaction for Emacs")
    (description "This package provides GitLab snippet API interaction for
Emacs.")
    (license license:gpl3+)))

(define-public emacs-web-mode
  (package
    (name "emacs-web-mode")
    (version "17.3.20")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/fxbois/web-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lvixg4c5apwrpqljj11b3yrq8nklz4ky4njnh8y6h1j5bisx40p"))))
    (build-system emacs-build-system)
    (synopsis "Major mode for editing web templates")
    (description "Web mode is an Emacs major mode for editing web templates
aka HTML files embedding parts (CSS/JavaScript) and blocks (pre rendered by
client/server side engines).  Web mode is compatible with many template
engines: PHP, JSP, ASP, Django, Twig, Jinja, Mustache, ERB, FreeMarker,
Velocity, Cheetah, Smarty, CTemplate, Mustache, Blade, ErlyDTL, Go Template,
Dust.js, React/JSX, Angularjs, ejs, etc.")
    (home-page "https://web-mode.org/")
    (license license:gpl3+)))

(define-public emacs-templatel
  (package
    (name "emacs-templatel")
    (version "0.1.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clarete/templatel")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "03n7amd2mfr4jmc4s1ar5ckm86knr7qarxxlkdhbnw3svy5kbc57"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'number-tests
                 (lambda _
                   (ert-number-tests "templatel-tests.el"
                                     "render-expr-math-sub"))))))
    (home-page "https://clarete.li/templatel")
    (synopsis "Jinja inspired template language for Emacs Lisp")
    (description
     "templatel is the modern templating language.  It provides variable
substitution and control flow through a clean and powerful language inspired
by Python's Jinja.")
    (license license:gpl3+)))

(define-public emacs-wgrep
  (package
    (name "emacs-wgrep")
    (version "3.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/mhayashi1120/Emacs-wgrep")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "16qg5dpg7hms5dmh92ksnjahf6010pw97ggi7sb0mfafd6iwps0a"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch" "-Q"
                             "-l" "wgrep-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (native-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/mhayashi1120/Emacs-wgrep")
    (synopsis "Edit a grep buffer and apply those changes to the files")
    (description
     "Emacs wgrep allows you to edit a grep buffer and apply those changes
to the file buffer.  Several backends are supported beside the classic grep:
ack, ag, helm and pt.")
    (license license:gpl3+)))

(define-public emacs-helm
  (package
    (name "emacs-helm")
    (version "4.0.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-helm/helm")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0bcwy60wqfhxvxkhc0rl7bkasf0y1pm5kwg90qh9y23ri69z08zx"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no test suite
    (propagated-inputs
     (list emacs-async emacs-popup))
    (home-page "https://emacs-helm.github.io/helm/")
    (synopsis
     "Incremental completion and selection narrowing framework for Emacs")
    (description
     "Helm is an incremental completion and selection narrowing framework for
Emacs.  It will help steer you in the right direction when you're looking for
stuff in Emacs (like buffers, files, etc).")
    (license license:gpl3+)))

(define-public emacs-helm-org
  (let ((commit "8457e1e46227bf87726e05c42cec5a4b51c2ef7b")
        (revision "3"))
    (package
      (name "emacs-helm-org")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-helm/helm-org")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0kcjhwwi492n9m2w894hvdavfvhj45zygy7bwvx103wvpay5h6h6"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm))
      (home-page "https://github.com/emacs-helm/helm-org")
      (synopsis "Helm interface to the Silver Searcher")
      (description
       "This package provides a frontend for grepping tools like ag and ack,
as well as features for editing search results.")
      (license license:gpl3+))))

(define-public emacs-helm-swoop
  (package
    (name "emacs-helm-swoop")
    (version "3.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/helm-swoop")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1qjay0fvryxa8n1ws6r1by512p2fylb2nj7ycm1497fcalb0d706"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (native-inputs (list emacs-buttercup))
    (home-page "https://github.com/emacsorphanage/helm-swoop")
    (synopsis "Filter and jump to lines in an Emacs buffer using Helm")
    (description
     "This package builds on the Helm interface to provide several commands
for search-based navigation of buffers.")
    (license license:gpl2+)))

(define-public emacs-helm-ag
  (package
    (name "emacs-helm-ag")
    (version "0.64")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-helm-ag")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ml9yp3qaiwn7iixyxvsj3fxn7gw913qxisr47df57q4ka912law"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-l" "test/test-util.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-helm))
    (home-page "https://github.com/syohex/emacs-helm-ag")
    (synopsis "Helm interface to the Silver Searcher")
    (description
     "This package provides a frontend for grepping tools like ag and ack,
as well as features for editing search results.")
    (license license:gpl3+)))

(define-public emacs-helm-projectile
  (package
    (name "emacs-helm-projectile")
    (version "1.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/helm-projectile")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19zafd0l2mcd53q83bd2mxinadzsp90q5znfcm9fq0m88lpcmg94"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-projectile))
    (home-page "https://github.com/bbatsov/helm-projectile")
    (synopsis "Helm integration for Projectile")
    (description
     "This Emacs library provides a Helm interface for Projectile.")
    (license license:gpl3+)))

(define-public emacs-hexrgb
  (let ((commit "90e5f07f14bdb9966648977965094c75072691d4"))
    (package
      (name "emacs-hexrgb")
      (version "0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacsmirror/hexrgb")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0y5l6hrzm5j2jfrm5jp5zrxhxgvf930m2k4nyvk0rllpx0i1271z"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/hexrgb.el")
      (synopsis "Emacs functions to convert color formats")
      (description
       "HexRGB provides functions for converting between RGB (red, green, blue)
color components and HSV (hue, saturation, value) color components.  More
accurately, it converts Emacs color components (whole numbers from 0 through
65535), RGB and HSV floating-point components (0.0 through 1.0), Emacs
color-name strings (such as \"blue\") and hex RGB color strings (such as
\"#FC43A7912\").")
      (license license:gpl2+))))

(define-public emacs-taskrunner
  (let ((commit "3afd4a546d42339543d3d4e51b175fc3e82b3358")
        (revision "1"))
    (package
      (name "emacs-taskrunner")
      (version (git-version "0.6" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-taskrunner/emacs-taskrunner")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1lkdvmjn3alhqxq2i64sdr977sbw3g0b2670d9bwyzi67qh0jxrv"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-async emacs-projectile))
      (home-page "https://github.com/emacs-taskrunner/emacs-taskrunner")
      (synopsis "Retrieve tasks from various build systems and task-runners")
      (description "This package parses Makefiles and build-system files for
multiple project types.")
      (license license:gpl3+))))

(define-public emacs-tp
  (package
    (name "emacs-tp")
    (version "0.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://codeberg.org/martianh/tp.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1hv0j4dzwamhm2gp5123j415mq13347v5lsbxlrksha5nw9h7kds"))))
    (build-system emacs-build-system)
    (home-page "https://codeberg.org/martianh/tp.el")
    (synopsis "Utilities to create transient menus for POSTing to an API")
    (description
     "This package provides functions, classes and methods to make it easier
to create transient menus that send complex POST, PUT, or PATCH requests to
JSON APIs.")
    (license license:gpl3+)))


(define-public emacs-ivy-taskrunner
  (let ((commit "75d8d67cfe3c29663fe0f5508a887adf40ed5162")
        (revision "1"))
    (package
      (name "emacs-ivy-taskrunner")
      (version (git-version "0.9" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-taskrunner/ivy-taskrunner")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1wf4s4k0ap21f7g5w6128an8nsvbja7f5n889vcml5b6gjz058db"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ivy emacs-taskrunner emacs-projectile))
      (home-page "https://github.com/emacs-taskrunner/ivy-taskrunner")
      (synopsis "Retrieve build-system tasks using Ivy")
      (description "This package provides an Ivy interface for selecting
Makefile targets.")
      (license license:gpl3+))))

(define-public emacs-helm-taskrunner
  (let ((commit "1910dac19cbc7bd4fd08b0faf9affd455339fbea")
        (revision "1"))
    (package
      (name "emacs-helm-taskrunner")
      (version (git-version "0.9" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-taskrunner/helm-taskrunner")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "182lmr858fx6rdhp1fy7kv8dvrhzcnxzwfck1q22s6xs8x85d5q7"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-taskrunner emacs-projectile))
      (home-page "https://github.com/emacs-taskrunner/helm-taskrunner")
      (synopsis "Retrieve build-system tasks using Helm")
      (description "This package provides a Helm interface for selecting
Makefile targets.")
      (license license:gpl3+))))

(define-public emacs-helm-make
  (let ((commit "ebd71e85046d59b37f6a96535e01993b6962c559")
        (revision "0"))
    (package
      (name "emacs-helm-make")
      (version (git-version "0.2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/helm-make")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "14jvhhw4chl94dgfwbyy7yirwchvcz5zrsgr9w6qy4z0fhqba41a"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-helm emacs-ivy emacs-projectile))
      (home-page "https://github.com/abo-abo/helm-make")
      (synopsis "Select a Makefile target with helm")
      (description "@code{helm-make} or @code{helm-make-projectile} will give
you a @code{helm} selection of directory Makefile's targets.  Selecting a
target will call @code{compile} on it.")
      (license license:gpl3+))))

(define-public emacs-islisp-mode
  (package
    (name "emacs-islisp-mode")
    (version "0.3.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/sasanidas/islisp-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1s6alrv1hfi1plj5lh826j0h71xvm2v092kglj3yvy34g73dgrna"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "\\.lsp$" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          ;; Move the extensions source files to the top level, which is
          ;; included in the EMACSLOADPATH.
          (add-after 'unpack 'move-source-files
            (lambda _
              (for-each (lambda (dir)
                          (let ((files (find-files dir "\\.(lsp|el)$")))
                            (for-each (lambda (f)
                                        (rename-file f (basename f)))
                                      files)))
                        '("advance" "implementations/easy-islisp"))))
          (add-after 'move-source-files 'patch-eisl-variables
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "easy-islisp.el"
                ("easy-islisp-executable"
                 (search-input-file inputs "/bin/eisl"))
                ("easy-islisp-library-directory"
                 `(or (getenv "EASY_ISLISP")
                      ,(search-input-directory inputs "share/eisl/library")))))))))
    (native-inputs (list emacs-ert-runner))
    (inputs (list eisl))
    (home-page "https://gitlab.com/sasanidas/islisp-mode")
    (synopsis "ISLisp support for Emacs")
    (description
     "This package provides support for programming with ISLisp in Emacs.  It
features a major mode with syntax highlighting, symbol autocompletion and
documentation search, among other features.  It also includes an inferior mode
with REPL integration.  Currently it only supports the Easy ISLisp (eisl)
implementation.")
    (license license:gpl3+)))

(define-public emacs-cider
  (package
    (name "emacs-cider")
    (version "1.19.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clojure-emacs/cider")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0limw27arkc8bn0zzj0jzhdsax78qm1lz5jfgy8zgf971llhf5qc"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "^lein\\.sh$" "^clojure\\.sh$" %default-include)
      #:exclude                        ;don't exclude 'cider-test.el'
      #~(list "^\\.dir-locals\\.el$" "^test/")
      #:test-command
      #~(list "eldev" "--use-emacsloadpath" "-dtT" "-p" "test")
      #:phases
      ;; XXX: file "test/cider-tests.el" contains a bogus "/bin/command"
      ;; string, and `patch-el-files' phase chokes on it (even though the
      ;; file is excluded from installation).  Remove the phase altogether
      ;; since there is no "/bin/executable" to replace in the code base
      ;; anyway.
      #~(modify-phases %standard-phases
          (delete 'patch-el-files)
          (add-before 'check 'skip-failing-tests
            (lambda _ ;; Require network.
              (delete-file "test/cider-jar-tests.el"))))))
    (native-inputs (list emacs-buttercup emacs-eldev))
    (propagated-inputs
     (list emacs-clojure-mode
           emacs-parseedn
           emacs-pkg-info
           emacs-queue
           emacs-sesman
           emacs-spinner))
    (home-page "https://cider.mx/")
    (synopsis "Clojure development environment for Emacs")
    (description
     "CIDER (Clojure Interactive Development Environment that Rocks) aims to
provide an interactive development experience similar to the one you'd get
when programming in Emacs Lisp, Common Lisp (with SLIME or Sly), Scheme (with
Geiser) and Smalltalk.

CIDER is the successor to the now deprecated combination of using SLIME +
swank-clojure for Clojure development.

There are plenty of differences between CIDER and SLIME, but the core ideas
are pretty much the same (and SLIME served as the principle inspiration for
CIDER).")
    (license license:gpl3+)))

(define-public emacs-cider-eval-sexp-fu
  (let ((commit "7fd229f1441356866aedba611fd0cf4e89b50921")) ;version bump
    (package
      (name "emacs-cider-eval-sexp-fu")
      (version "1.2")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/clojure-emacs/cider-eval-sexp-fu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "01gky548v3758fyr317lkwsc9aacab6m9d9vk1mrr3qyvmciwd51"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-eval-sexp-fu))
      (home-page "https://github.com/clojure-emacs/cider-eval-sexp-fu")
      (synopsis "Eval Sexp-fu extensions for CIDER")
      (description
       "This package provides tiny improvements to expression evaluation,
e.g., the expression you've just evaluated would briefly flash and so on.")
      (license license:gpl3+))))

(define-public emacs-sly
  ;; Update together with sbcl-slynk.
  (let ((commit "9c43bf65b967e12cef1996f1af5f0671d8aecbf4")
        (revision "9"))
    ;; Versions are not always tagged.  Besides, latest master contains
    ;; important fixes.
    (package
      (name "emacs-sly")
      (version (git-version "1.0.43" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/joaotavora/sly")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "15nyr02ykkws4q79jcmxcawddg8sgq9v5l8k7jv7gg3hnpzxjlb2"))))
      (build-system emacs-build-system)
      (native-inputs
       (list sbcl texinfo))
      (arguments
       (list
        #:include #~(cons* "^contrib\\/" "^lib\\/" "^slynk\\/" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (delete 'make-autoloads) ; The package provides autoloads.
            (add-before 'install 'install-doc
              (lambda _
                (let* ((info-dir (string-append #$output "/share/info"))
                       (doc-dir (string-append #$output "/share/doc/"
                                               #$name "-" #$version))
                       (doc-files '( ;; "doc/sly-refcard.pdf" ; See sly-refcard.pdf below.
                                    "README.md" "NEWS.md" "PROBLEMS.md"
                                    "CONTRIBUTING.md")))
                  (with-directory-excursion "doc"
                    (substitute* "Makefile"
                      (("infodir=/usr/local/info")
                       (string-append "infodir=" info-dir))
                      ;; Don't rebuild contributors.texi since we are not in
                      ;; the git repo.
                      (("contributors.texi: Makefile texinfo-tabulate.awk")
                       "contributors.texi:"))
                    (invoke "make" "html/index.html")
                    (invoke "make" "sly.info")
                    ;; TODO: We need minimal texlive with "preprint" package
                    ;; (for fullpage.sty).  (invoke "make" "sly-refcard.pdf")
                    (install-file "sly.info" info-dir)
                    (copy-recursively "html" (string-append doc-dir "/html")))
                  (for-each (lambda (f)
                              (install-file f doc-dir)
                              (delete-file f))
                            doc-files)
                  (delete-file-recursively "doc"))))
            (add-before 'check 'patch-tests
              (lambda _
                (setenv "HOME" (dirname (getcwd)))
                (substitute* "test/sly-stickers-tests.el"
                  (("\
\\(define-sly-ert-test stickers-when-invalid-dont-stick .*" all)
                   (string-append all "  (skip-unless nil)\n"))))))))
      (home-page "https://github.com/joaotavora/sly")
      (synopsis "Sylvester the Cat's Common Lisp IDE")
      (description
       "SLY is Sylvester the Cat's Common Lisp IDE.  SLY is a fork of SLIME, and
contains the following improvements over it:

@enumerate
@item A full-featured REPL based on Emacs's @code{comint.el}.  Everything
can be copied to the REPL;
@item Stickers, or live code annotations that record values as code traverses them.
@item Flex-style completion out-of-the-box, using Emacs's completion API.
Company, Helm, and other supported natively, no plugin required;
@item An interactive Trace Dialog;
@item Multiple inspectors and multiple REPLs, with independent history.
@item Regexp-capable @code{M-x sly-apropos}.
@item Cleanly ASDF-loaded by default, including contribs, enabled out-of-the-box;
@item \"Presentations\" replaced by interactive backreferences, which
highlight the object and remain stable throughout the REPL session;
@end enumerate

SLY tracks SLIME's bugfixes and all its familiar features (debugger, inspector,
xref, etc.) are still available, but with better integration.")
      (license license:gpl3+))))

(define-public emacs-sly-quicklisp
  (let ((commit "01ebe3976a244309f2e277c09206831135a0b66c")
        (revision "1"))
    (package
      (name "emacs-sly-quicklisp")
      (version (git-version "0.0.0" revision commit))
      (home-page "https://github.com/joaotavora/sly-quicklisp")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1vfqmvayf35g6y3ljsm3rlzv5jm50qikhh4lv2zkkswj6gkkb1cv"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-sly))
      (arguments
       `(#:include (cons* "\\.lisp$" "\\.asd$" %default-include)
         #:phases
         ;; The package provides autoloads.
         (modify-phases %standard-phases
           (delete 'make-autoloads)
           (delete 'enable-autoloads-compilation))))
      (synopsis "Quicklisp support for SLY")
      (description
       "@command{sly-quicklisp} is an external contrib for SLY that provides a
sly-quickload command that prompts the user for a package to install.")
      (license license:gpl3+))))

(define-public emacs-sly-asdf
  (package
    (name "emacs-sly-asdf")
    (version "0.2.0")
    (home-page "https://github.com/mmgeorge/sly-asdf")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0gncp8xv33s4wx594bgd35vr1455bcggv1bg28qv75mhv41nzw97"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-sly emacs-popup))
    (arguments
     '(#:include (cons* "\\.lisp$" "\\.asd$" %default-include)))
    (synopsis "ASDF contrib for SLY")
    (description
     "@command{sly-asdf} is an external contrib for SLY that provides
additional support for working with ASDF projects.")
    (license license:gpl3+)))

(define-public emacs-sly-named-readtables
  (let ((commit "a5a42674ccffa97ccd5e4e9742beaf3ea719931f")
        (revision "1"))
    (package
      (name "emacs-sly-named-readtables")
      (version (git-version "0.1" revision commit))
      (home-page "https://github.com/joaotavora/sly-named-readtables")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "16asd119rzqrlclps2q6yrkis8jy5an5xgzzqvb7jdyq39zxg54q"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-sly))
      (arguments
       '(#:include (cons* "\\.lisp$" "\\.asd$" %default-include)
         #:phases
         ;; The package provides autoloads.
         (modify-phases %standard-phases
           (delete 'make-autoloads)
           (delete 'enable-autoloads-compilation))))
      (synopsis "Named-readtables support for SLY")
      (description
       "@command{sly-named-readtables} is an external contrib for SLY that
enables different readtables to be active in different parts of the same
file.")
      (license license:gpl3+))))

(define-public emacs-sly-macrostep
  (let ((commit "5113e4e926cd752b1d0bcc1508b3ebad5def5fad")
        (revision "2"))
    (package
      (name "emacs-sly-macrostep")
      (version (git-version "0.1" revision commit))
      (home-page "https://github.com/joaotavora/sly-macrostep")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1nxf28gn4f3n0wnv7nb5sgl36fz175y470zs9hig4kq8cp0yal0r"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-sly emacs-macrostep))
      (arguments
       '(#:include (cons* "\\.lisp$" "\\.asd$" %default-include)
         #:phases
         ;; The package provides autoloads.
         (modify-phases %standard-phases
           (delete 'make-autoloads)
           (delete 'enable-autoloads-compilation))))
      (synopsis "Expand Common Lisp macros inside source files with SLY")
      (description
       "@command{sly-macrostep} is a SLY contrib for expanding CL macros right
inside the source file.")
      (license license:gpl3+))))

(define-public emacs-sly-stepper
  (let ((commit "da84e3bba8466c2290c2dc7c27d7f4c48c27b39e"))
    (package
      (name "emacs-sly-stepper")
      (version (git-version "0.0.0" "2" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/joaotavora/sly-stepper")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "07p0k797fagn1qha191p6g2b55hsqqkcj59mh0ms9id0ildydil0"))
         (modules '((guix build utils)))
         (snippet #~(for-each delete-file
                              (find-files "." ".*-autoloads\\.elc?$")))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include
        #~(cons* "\\.lisp$" "\\.asd$" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'expand-load-path 'expand-sly-contrib
              (lambda _
                (setenv "EMACSLOADPATH"
                        (string-append (elpa-directory
                                        #$(this-package-input "emacs-sly"))
                                       "/contrib:" (getenv "EMACSLOADPATH")))))
            (add-after 'install 'find-agnostic-lizard
              (lambda* (#:key inputs #:allow-other-keys)
                (let ((file (string-append (elpa-directory #$output)
                                           "/slynk-stepper.lisp")))
                  ;; agnostic-lizard is found at runtime.
                  (emacs-substitute-sexps file
                    ("(require :asdf)"
                     `(funcall (read-from-string "asdf:load-asd")
                               ,(search-input-file inputs "\
share/common-lisp/systems/agnostic-lizard.asd"))))))))))
      (inputs (list cl-agnostic-lizard))
      (propagated-inputs (list emacs-sly))
      (home-page "https://github.com/joaotavora/sly-stepper")
      (synopsis "Portable Common Lisp stepper interface for Emacs")
      (description
       "This package features a new, portable, visual stepping facility for
Common Lisp, realized as an extension to SLY.")
      (license license:gpl3+))))

(define-public emacs-sly-package-inferred
  (let ((commit "800e71e2be631422277e2ec77e6d6f6ea20e95ef")
        (revision "1"))
    (package
      (name "emacs-sly-package-inferred")
      (version (git-version "0.1" revision commit))
      (home-page "https://github.com/40ants/sly-package-inferred")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1216idyp034nkqddhw4p53jkhhdxa6xnjjmsvijpf4rxqnfqvapg"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-sly))
      (arguments
       '(#:include (cons* "\\.lisp$" "\\.asd$" %default-include)
         #:phases
         ;; The package provides autoloads.
         (modify-phases %standard-phases
           (delete 'make-autoloads))))
      (synopsis "Improved package inferred systems support for SLY")
      (description
       "@command{sly-package-inferred} is an external contrib for SLY that
replaces its completion with a function which is better suited for systems
using package inferred style.")
      (license license:gpl3+))))

(define-public emacs-lua-mode
  (let ((commit "d074e4134b1beae9ed4c9b512af741ca0d852ba3")
        (revision "1"))
    (package
      (name "emacs-lua-mode")
      (version (git-version "20221027" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/immerrr/lua-mode/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "00gvrmw8pll0cl7srygh2kmbf0g44sk9asj5sm77qvhr8jz4xkkq"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "buttercup" "-l" "lua-mode.el")
        #:phases
        #~(modify-phases %standard-phases
            ;; XXX: These tests are not compatible with Buttercup, and cause
            ;; build to fail.  Remove them until they are fixed by upstream.
            (add-after 'unpack 'remove-faulty-tests
              (lambda _
                (delete-file "test/test-indentation.el")
                (delete-file "test/test-fill.el"))))))
      (native-inputs
       (list emacs-buttercup lua))
      (home-page "https://github.com/immerrr/lua-mode/")
      (synopsis "Major mode for Lua")
      (description
       "This Emacs package provides a mode for @uref{https://www.lua.org/,
Lua programming language}.")
      (license license:gpl2+))))

(define-public emacs-ebuild-mode
  (package
    (name "emacs-ebuild-mode")
    (version "1.79")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://dev.gentoo.org/~ulm/emacs/"
             "ebuild-mode-" version ".tar.xz"))
       (file-name (string-append name "-" version ".tar.xz"))
       (sha256
        (base32 "1w1axpgcchp6mry5vnpkcl4h6sbbhpdl22bygbqmf31xihcri3j4"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-doc
            (lambda _
              (invoke "make" "ebuild-mode.info")
              (install-file "ebuild-mode.info"
                            (string-append #$output "/share/info")))))))
    (native-inputs
     (list texinfo))
    (home-page "https://devmanual.gentoo.org")
    (synopsis "Major modes for Gentoo package files")
    (description
     "This Emacs package provides modes for ebuild, eclass, eblit, GLEP42
news items, openrc and runscripts.")
    (license license:gpl2+)))

(define-public emacs-ebuku
  ;; Upstream has no tagged release.
  (let ((revision "1")
        (commit "0c6cf404a49bd68800221446df186fffa0139325"))
    (package
      (name "emacs-ebuku")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/flexibeast/ebuku")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "09fkzmcvzdbdjaa167wiybj0kir7y12pcq2varjywshvq2l7niz4"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/flexibeast/ebuku")
      (synopsis "Emacs interface to the buku Web bookmark manager")
      (description
       "Ebuku provides a basic interface to the @code{buku} Web bookmark
manager.")
      (license license:gpl3+))))

(define-public emacs-evil
  ;; Commit message claims this is 1.15.0, but there's no tag for it, so we
  ;; use full git-version instead
  (let ((commit "008a6cdb12f15e748979a7d1c2f26c34c84dedbf")
        (revision "0"))
    (package
      (name "emacs-evil")
      (version (git-version "1.15.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-evil/evil")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1hxhw1rsm0wbrhz85gfabncanijpxd47g5yrdnl3bbm499z1gsvg"))))
      (arguments
       `(#:test-command (list "make" "test")
         #:phases
         (modify-phases %standard-phases
           (add-before 'check 'fix-test-helpers
             (lambda _
               (substitute* "evil-test-helpers.el"
                 (("\\(undo-tree-mode 1\\)") ""))
               #t))
           (add-before 'install 'make-info
             (lambda _
               (with-directory-excursion "doc/build/texinfo"
                   (invoke "makeinfo" "--no-split"
                           "-o" "evil.info" "evil.texi")))))))
      (build-system emacs-build-system)
      (native-inputs (list texinfo))
      (home-page "https://github.com/emacs-evil/evil")
      (synopsis "Extensible Vi layer for Emacs")
      (description
       "Evil is an extensible vi layer for Emacs.  It emulates the
main features of Vim, and provides facilities for writing custom
extensions.")
      (license license:gpl3+))))

(define-public emacs-evil-collection
  (package
    (name "emacs-evil-collection")
    (version "0.0.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-evil/evil-collection")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09hnxb8nh3g0hi93fz9f1y164gv9iyh5994wfn6fsq2v1xdz8phm"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "^modes\\/" %default-include)
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-L" "."
                             "-L" "./test"
                             "-l" "evil-collection-test.el"
                             "-l" "evil-collection-magit-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'skip-failing-tests
            (lambda _
              (substitute* "test/evil-collection-magit-tests.el"
                (("\\(ert-deftest evil-collection-magit-section-maps-accounted-for .*" all)
                 (string-append all " (skip-unless nil)"))))))))
    (native-inputs
     (list emacs-magit))
    (propagated-inputs
     (list emacs-annalist emacs-evil))
    (home-page "https://github.com/emacs-evil/evil-collection")
    (synopsis "Collection of Evil bindings for many major and minor modes")
    (description "This is a collection of Evil bindings for the parts of
Emacs that Evil does not cover properly by default, such as @code{help-mode},
@code{M-x calendar}, Eshell and more.")
    (license license:gpl3+)))

(define-public emacs-evil-goggles
  (let ((commit "08a22058fd6a167f9f1b684c649008caef571459")
        (version "0.0.1")
        (revision "0"))
    (package
      (name "emacs-evil-goggles")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/edkolev/evil-goggles")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1p3vjrij63v9nrcyj3b5jsqzv9y7dgv9i1inx1q7x3s90vndavac"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command #~(list "ert-runner" "test")
             #:phases
             #~(modify-phases %standard-phases
                 (add-before 'check 'skip-failing-test
                   (lambda _
                     (substitute* "test/evil-goggles-test.el"
                       (("\\(ert-deftest evil-test-last-insert-register.*" all)
                        (string-append all " (skip-unless nil)"))))))))
      (propagated-inputs
       (list emacs-evil))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/edkolev/evil-goggles")
      (synopsis "Displays visual hints when editing with evil")
      (description "Creates a visual pulse to indicate the region that is
being deleted, changed, yanked, or pasted when using evil commands")
      (license license:gpl3+))))

(define-public emacs-goggles
  (package
    (name "emacs-goggles")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/goggles")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1fczxygg1blfmlwswck49rllww77rc7qn91wqw1kvjwfz31sk8z4"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" ".")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/minad/goggles")
    (synopsis "Pulse modified region")
    (description "Goggles highlights the modified region using Pulse.
Currently the commands undo, yank, kill and delete are supported.")
    (license license:gpl3+)))

(define-public emacs-goto-chg
  (package
    (name "emacs-goto-chg")
    (version "1.7.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-evil/goto-chg")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0rgdzhan4n5bd78wvivacqkp0g7jvnwzgh0571p2m4yra09a36mv"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacs-evil/goto-chg")
    (synopsis "Go to the last change in the Emacs buffer")
    (description
     "This package provides @code{M-x goto-last-change} command that goes to
the point of the most recent edit in the current Emacs buffer.  When repeated,
go to the second most recent edit, etc.  Negative argument, @kbd{C-u -}, is
used for reverse direction.")
    (license license:gpl2+)))

(define-public emacs-evil-owl
  (let ((commit "24c5f43df375194386344e69bc720ea3986c9510")
        (revision "3"))
    (package
      (name "emacs-evil-owl")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mamapanda/evil-owl")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0bqzch14whlmrcasakah3psrzswvkzd7mmi8hx5s64kfp29wbdhi"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "test")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'skip-failing-test
              (lambda _
                (substitute* "test/evil-owl-test.el"
                  (("\\(ert-deftest evil-owl-test-mark-string.*" all)
                   (string-append all " (skip-unless nil)"))))))))
      (propagated-inputs
       (list emacs-evil))
      (home-page "https://github.com/mamapanda/evil-owl")
      (synopsis "Preview candidates when using Evil registers and marks")
      (description
       "This package supplements Evil's register- and mark-based commands with
a popup window for previewing candidates.")
      (license license:gpl3+))))

(define-public emacs-evil-paredit
  (let ((commit "e058fbdcf9dbf7ad6cc77f0172d7517ef233d55f"))
    (package
      (name "emacs-evil-paredit")
      (version "0.0.2")                 ; says 0.0.2 in evil-paredit.el
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/roman/evil-paredit")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0b08y4spapl4g2292j3l4cr84gjlvm3rpma3gqld4yb1sxd7v78p"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-evil emacs-paredit))
      (home-page "https://github.com/roman/evil-paredit")
      (synopsis "Evil extension to integrate nicely with Paredit")
      (description
       "This package helps you to not screw up your Paredit setup when using
Evil mode.  Whenever you try to use a modifier command like @kbd{d}, @kbd{c},
@kbd{y} to modify the Paredit buffer, it will stop you to do so in the case
you break the parity of parenthesis.")
      (license license:expat))))

(define-public emacs-evil-args
  (let ((commit "758ad5ae54ad34202064fec192c88151c08cb387")
        (revision "1"))
    (package
      (name "emacs-evil-args")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/wcsmith/evil-args")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0k35glgsirc3cph8v5hhjrqfh4ndwh8a28qbr03y3jl8s453xcj7"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/wcsmith/evil-args")
      (synopsis "Motions and text objects for delimited arguments in Evil")
      (description
       "This package provides motions and text objects for delimited
arguments, such as arguments separated by commas and semicolons.")
      (license license:expat))))

(define-public emacs-evil-escape
  (package
    (name "emacs-evil-escape")
    (version "3.16")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/emacsorphanage/evil-escape")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1z30v59igndqzxg9gcx4bsbf5jkh11wp936il8azkrz3qdryaj4a"))))
    (propagated-inputs
     (list emacs-evil))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsorphanage/evil-escape")
    (synopsis "Escape from insert state and everything else in Emacs")
    (description
     "Evil escape provides a customizable key sequence to escape from insert
state and everything else in Emacs.")
    (license license:gpl3+)))

(define-public emacs-evil-exchange
  (let ((commit "47691537815150715e64e6f6ec79be7746c96120")
        (version "0.41")
        (revision "1"))
    (package
      (name "emacs-evil-exchange")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Dewdrops/evil-exchange")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0bjpn4yqig17ddym6wqq5fm1b294q74hzcbj9a6gs97fqiwf88xa"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (native-inputs (list emacs-ert-runner))
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-before 'check 'fix-makefile
             (lambda _
               (substitute* "Makefile"
                 (("cask exec ") ""))
               #t)))
         #:test-command '("make" "test")))
      (home-page "https://github.com/Dewdrops/evil-exchange")
      (synopsis "Exchange text easily within Evil")
      (description
       "This package, a port of @code{vim-exchange}, provides an Evil operator
for exchanging text.")
      (license license:gpl3+))))

(define-public emacs-evil-replace-with-register
  (let ((commit "91cc7bf21a94703c441cc9212214075b226b7f67")
        (version "0.1")
        (revision "1"))
    (package
      (name "emacs-evil-replace-with-register")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Dewdrops/evil-ReplaceWithRegister")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "14rpn76qrf287s3y2agmddcxi27r226i53ixjvd694ss039g0r11"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/Dewdrops/evil-ReplaceWithRegister")
      (synopsis "Quickly replace text with the contents of a register")
      (description
       "This package provides an Evil operator for replacing text with the
contents of a register.")
      (license license:gpl3+))))

(define-public emacs-evil-indent-plus
  (let ((commit "0c7501e6efed661242c3a20e0a6c79a6455c2c40")
        (version "1.0.0")
        (revision "1"))
    (package
      (name "emacs-evil-indent-plus")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/TheBB/evil-indent-plus")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1g6r1ydscwjvmhh1zg4q3nap4avk8lb9msdqrh7dff6pla0r2qs6"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/TheBB/evil-indent-plus")
      (synopsis "Text objects based on indentation")
      (description
       "This package adds new text objects for @code{evil-mode} based on
blocks having the same or higher indentation, including or excluding
surrounding lines.")
      (license license:gpl2+))))

(define-public emacs-evil-text-object-python
  (let ((commit "9a064fe6475429145cbcc3b270fcc963b67adb15")
        (version "1.0.1")
        (revision "1"))
    (package
      (name "emacs-evil-text-object-python")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/wbolster/evil-text-object-python")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "074zpm6mmr1wfl6d5xdf8jk1fs4ccpbzf4ahhkwga9g71xiplszv"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/wbolster/evil-text-object-python")
      (synopsis "Text objects for Python")
      (description
       "This package provides @code{evil-mode} text objects for Python.")
      (license license:gpl3+))))

(define-public emacs-evil-lion
  (let ((commit "6b03593f5dd6e7c9ca02207f9a73615cf94c93ab")
        (revision "1"))
    (package
      (name "emacs-evil-lion")
      (version (git-version "0.0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/edkolev/evil-lion")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1a162hynp0jcsn50c1w5a02mrw9w3q05c7lkqzqd25px3d0p772q"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (arguments
       `(#:test-command '("make" "test")))
      (home-page "https://github.com/edkolev/evil-lion")
      (synopsis "Align operator for @code{evil-mode}")
      (description
       "This package, a port of @code{vim-lion}, provides an operator for
aligning text objects based on separators.")
      (license license:gpl3+))))

(define-public emacs-evil-expat
  (let ((commit "f4fcd0aa3edc359adb5c986b5dd9188d220d84e2")
        (revision "1"))
    (package
      (name "emacs-evil-expat")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/edkolev/evil-expat")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0872ix682hkdz0k8pn6sb54rqkx00rz5fxpd5j2snx406yagpaxz"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (arguments
       `(#:test-command '("make" "test")))
      (home-page "https://github.com/edkolev/evil-expat")
      (synopsis "Extra @code{ex} commands for @code{evil-mode}")
      (description
       "This package provides additional commands for the @code{ex} command
line, including functions for version control with Git and for copying and
pasting into and from @code{tmux} paste buffers.")
      (license license:gpl3+))))

(define-public emacs-evil-nerd-commenter
  (package
    (name "emacs-evil-nerd-commenter")
    (version "3.6.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/evil-nerd-commenter")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1xi4sd75pzhgcd9lzhx18hlzbrwh5q9gbscb1971qn94mzxwd60r"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")
                     #:tests? #f        ; XXX: broken docstring
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-after 'unpack 'patch-Makefile
                           (lambda _
                             (substitute* "Makefile"
                               (("-Q") "")
                               (("-L [^.]*") "")
                               (("deps/") "")
                               ((" deps") "")))))))
    (propagated-inputs (list emacs-evil))
    (native-inputs (list emacs-web-mode))
    (home-page "https://github.com/redguardtoo/evil-nerd-commenter")
    (synopsis "Comment and uncomment lines efficiently")
    (description
     "This package provides text objects and operators for comments within
@code{evil-mode}.")
    (license license:gpl3+)))

(define-public emacs-evil-visual-replace
  (package
    (name "emacs-evil-visual-replace")
    (version "0.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/troyp/evil-visual-replace")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1gfyrq7xfzmzh3x8k5f08n027dlbwi0pkkxf9c39fkxp4jngibsz"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/troyp/evil-visual-replace")
    (synopsis "Replacement commands for @code{evil-mode} visual blocks")
    (description
     "This package provides versions of @code{query-replace} and
@code{replace-regexp} that work for @code{evil-mode} visual blocks.")
    (license license:gpl2+)))

(define-public emacs-evil-visualstar
  (let ((commit "06c053d8f7381f91c53311b1234872ca96ced752")
        (version "0.2.0")
        (revision "1"))
    (package
      (name "emacs-evil-visualstar")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/bling/evil-visualstar")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0mkbzw12fav945icibc2293m5haxqr3hzkyli2cf4ssk6yvn0x4c"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/bling/evil-visualstar")
      (synopsis "Instantly search using the visual selection")
      (description
       "This package provides @code{evil-mode} functions for using selected text
to search.")
      (license license:gpl3+))))

(define-public emacs-monky
  (package
    (name "emacs-monky")
    (version "0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ananthakumaran/monky")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1fgn7al4zwz2k5wb5dy3byqg9lsrjk9fra341mxh5ma2pfwxjgps"))))
    (build-system emacs-build-system)
    (home-page "https://ananthakumaran.in/monky/index.html")
    (arguments
     `(#:test-command '("emacs" "--batch"
                        "-l" "test/monky-unit-test.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (synopsis "Interactive interface for the Mercurial version control system")
    (description
     "Monky provides an Emacs interface for Mercurial (Hg).  Using Monky, you
can selectively commit files, view the diffs, and other things.")
    (license license:gpl3+)))

(define-public emacs-monroe
  (package
    (name "emacs-monroe")
    (version "0.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sanel/monroe")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "101lfrykdbv37spkbw7zihhx26bc1lhjyxbanrcp9880bxj04jiy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sanel/monroe")
    (synopsis "Clojure nREPL client for Emacs")
    (description
     "Monroe is a nREPL client for Emacs, focused on simplicity and easy
distribution, primarily targeting Clojure users")
    (license license:gpl3+)))

(define-public emacs-rail
  (package
    (name "emacs-rail")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Sasanidas/Rail")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1i07zv0z6r46jpg22x99a1izyfp6536xf951ibyr9kis5bql5jz9"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; tests require networking
    (home-page "https://github.com/Sasanidas/Rail")
    (synopsis "Generic nREPL client for Emacs")
    (description
     "Rail is a nREPL client based on monroe with similar features, but aims
to be a more complete implementation.")
    (license license:gpl3+)))

(define-public emacs-orgalist
  (package
    (name "emacs-orgalist")
    (version "1.16")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "orgalist-" version ".tar"))
       (sha256
        (base32 "0j78g12q66piclraa2nvd1h4ri8d6cnw5jahw6k5zi4xfjag6yx3"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/orgalist.html")
    (synopsis "Manage Org-like lists in non-Org buffers")
    (description "Orgalist writes and manages Org mode's plain lists in
non-Org buffers.  More specifically, it supports the syntax of Org mode for
numbered, unnumbered, description items, checkboxes, and counter cookies.

The library also implements radio lists, i.e., lists written in Org syntax
later translated into the host format, e.g., LaTeX or HTML.")
    (license license:gpl3+)))

(define-public emacs-writegood-mode
  (package
    (name "emacs-writegood-mode")
    (version "2.2.0")
    (home-page "https://github.com/bnbeckwith/writegood-mode")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit (string-append "v" version))))
              (sha256
               (base32
                "1a3gmaaa344kigr209b6wnjiw9ikkmw1j5jda04h3g8f9817njyv"))
              (file-name (string-append name "-checkout"))))
    (build-system emacs-build-system)
    (synopsis "Polish up poor writing on the fly")
    (description
     "This minor mode tries to find and highlight problems with your writing
in English as you type.  It primarily detects \"weasel words\" and abuse of
passive voice.")
    (license license:gpl3+)))

(define-public emacs-writefreely
  (let ((commit "cfbba9c3a34f580f39c0796966ea76b0cf98a23e")
        (revision "0"))
    (package
      (name "emacs-writefreely")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dangom/writefreely.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "02gy3kg28igqcg7ai8n2p19q8m4xpgp5wn34n2fwz2bjymgf9g4s"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-ox-hugo emacs-request))
      (home-page "https://github.com/dangom/writefreely.el")
      (synopsis "Emacs interface to the WriteFreely API")
      (description
       "This library publishes Org mode files as posts to any instance of the
federated blogging platform WriteFreely.")
      (license license:gpl3+))))

(define-public emacs-neotree
  (package
    (name "emacs-neotree")
    (version "0.6.0")
    (home-page "https://github.com/jaypei/emacs-neotree")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url home-page)
                     (commit version)))
              (sha256
               (base32
                "1rwm8j48ks9fa5q3g8crpfzbikxfjj5m13w9ylimg34xniycrlq2"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "test-batch")))
    (synopsis "Folder tree view for Emacs")
    (description "This Emacs package provides a folder tree view.")
    (license license:gpl3+)))

(define-public emacs-org
  (package
    (name "emacs-org")
    (version "9.7.35")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.savannah.gnu.org/git/emacs/org-mode")
             (commit (string-append "release_" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1w3hb9zxi1li0mwawfmcmpmi2adlyx3cf0fskq43kpdcbh172766"))))
    (build-system emacs-build-system)
    (outputs (list "out" "test"))
    (arguments
     (list
      #:test-command #~(list "make" "test-dirty")
      #:phases
      #~(modify-phases %standard-phases
          (replace 'expand-load-path
            ;; Make sure `load-path' includes "lisp" directory, otherwise
            ;; byte-compilation fails.
            (lambda args
              (with-directory-excursion "lisp"
                (apply (assoc-ref %standard-phases 'expand-load-path) args))))
          (add-after 'expand-load-path 'bootstrap
            ;; XXX: Generate "org-loaddefs.el".
            (lambda _
              (invoke "make" "autoloads")))
          (add-before 'check 'fix-tests
            (lambda* (#:key inputs #:allow-other-keys)
              ;; XXX: Running tests updates ID locations.  The process expects
              ;; a file to be writeable in "~/.emacs.d/".
              (setenv "HOME" (getcwd))
              (mkdir-p ".emacs.d")
              ;; These files are modified during testing.
              (with-directory-excursion "testing/examples"
                (for-each make-file-writable
                          '("babel.org"
                            "ob-awk-test.org"
                            "ob-sed-test.org"))
                ;; Specify where sh executable is.
                (let ((sh (search-input-file inputs "/bin/sh")))
                  (substitute* "babel.org"
                    (("/bin/sh") sh))))
              ;; XXX: Fix failure in ob-tangle/collect-blocks.  The test
              ;; assumes that ~/../.. corresponds to /.  This isn't true in
              ;; our case.
              (substitute* "testing/lisp/test-ob-tangle.el"
                ((" ~/\\.\\./\\.\\./")
                 (string-append " ~"
                                ;; relative path from ${HOME} to / during
                                ;; build
                                (string-join
                                 (map-in-order
                                  (lambda (x)
                                    (if (equal? x "") "" ".."))
                                  (string-split (getcwd) #\/)) "/")
                                "/")))
              ;; XXX: Skip failing tests.
              (substitute* "testing/lisp/test-ob-shell.el"
                (("ob-shell/remote-with-stdin-or-cmdline .*" all)
                 (string-append all "  (skip-unless nil)\n")))
              (substitute* "testing/lisp/test-org.el"
                (("test-org/org-(encode-time|time-string-to-time) .*" all)
                 (string-append all "  (skip-unless nil)\n")))))
          (replace 'build
            (lambda args
              (with-directory-excursion "lisp"
                (apply (assoc-ref %standard-phases 'build) args))))
          (replace 'install
            (lambda _
              (let ((elpa (elpa-directory #$output))
                    (info (string-append #$output "/share/info")))
                (substitute* "local.mk"
                  (("^lispdir.*") (string-append "lispdir = " elpa))
                  (("^datadir.*") (string-append "datadir = " elpa "/etc"))
                  (("^infodir.*") (string-append "infodir = " info))))
              (invoke "make" "install" (string-append "ORGVERSION=" #$version))))
          (add-after 'install 'install-org-test
            (lambda _
              (with-directory-excursion "testing"
                (copy-recursively "."
                                  (string-append (elpa-directory #$output:test))))))
          (add-after 'install 'install-org-news
            ;; Install ORG-NEWS files in doc directory.
            (lambda _
              (install-file "etc/ORG-NEWS"
                            (string-append #$output "/share/doc/"
                                           #$name "-" #$version)))))))
    (native-inputs
     (list texinfo))
    (home-page "https://orgmode.org/")
    (synopsis "Outline-based notes management and organizer")
    (description "Org is an Emacs mode for keeping notes, maintaining TODO
lists, and project planning with a fast and effective lightweight markup
language.  It also is an authoring system with unique support for literate
programming and reproducible research.  If you work with the LaTeX output
capabilities of Org-mode, you may want to install the
@code{emacs-org-texlive-collection} meta-package, which propagates the TexLive
components required by the produced @file{.tex} file.")
    (license license:gpl3+)))

(define-public emacs-org-contrib
  (package
    (name "emacs-org-contrib")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~bzg/org-contrib")
             (commit (string-append "release_" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1mjgfpjs32hnsj631mvmwrwxqvdb6clj3j077xmfrrp80r25gvqx"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f                  ;no tests
           #:lisp-directory "lisp"))
    (home-page "https://git.sr.ht/~bzg/org-contrib")
    (synopsis "Unmaintained add-ons for Org mode")
    (description
     "This package contains add-ons to Org.  Be warned that these libraries
receive little if no maintenance and there is no guaranty that they are
compatible with the Org stable version.")
    (license license:gpl3+)))

(define-public emacs-org-count-words
  ;; No releases.
  (let ((commit "df4f06905e3020106d6ceaada854ebd7f9a231d2")
        (revision "0"))
    (package
      (name "emacs-org-count-words")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/Elilif/org-count-words.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "12yxgkqv33i8hcgc5z033fhrar5l937kpsi36v4jffw6lr3wrlbv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Elilif/org-count-words")
      (synopsis "Word count in org-mode")
      (description "This package calculates a precise word count in org-mode
by excluding unwanted elements such as code blocks, options, and drawers.  The
results are displayed on the modeline.")
      (license license:gpl3+))))

(define-public emacs-org-texlive-collection
  (package
    (name "emacs-org-texlive-collection")
    (source #f)
    (version (package-version emacs-org))
    (build-system trivial-build-system)
    (arguments (list #:builder #~(mkdir #$output)))
    (native-inputs '())
    (inputs '())
    (propagated-inputs
     (list texlive-capt-of
           ;; The latexrecommended collection provides fontspec, amsmath,
           ;; hyperref, graphicx, tools, etc.
           texlive-collection-latexrecommended
           texlive-soul
           texlive-standalone
           texlive-ulem
           texlive-wrapfig))
    (home-page (package-home-page emacs-org))
    (synopsis "Basic TeX Live packages for Org mode LaTeX export")
    (description "This meta-package propagates the TeX Live packages minimally
required by the LaTeX output produced by Org mode.")
    (license (license:fsf-free "https://www.tug.org/texlive/copying.html"))))

(define-public emacs-org-contacts
  ;; XXX: Upstream does not tag version bumps. Commit below matches latest
  ;; version bump.
  (let ((commit "217ba04c9d638067a6ccb0829cf1885f54c1d568"))
    (package
      (name "emacs-org-contacts")
      (version "1.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://repo.or.cz/org-contacts")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0f0vjdvx0hffj2xvyrya8yfl77djmzmpxdxsx58ym4lmdvwyb6x3"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-org))
      (home-page "https://repo.or.cz/org-contacts")
      (synopsis "Contacts management system for Org mode")
      (description "Manage your contacts from Org mode.  You can auto
complete email addresses, export contacts to a vCard file, put birthdays
in your Org Agenda, and more.")
      (license license:gpl3+))))

(define-public emacs-org-vcard
  (package
    (name "emacs-org-vcard")
    (version "0.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/pinoaffe/org-vcard")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "06w4w3wxsrbv67ssnlpk8sj4jg4qvgc87cyaiin8h9f4az3yivkz"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "ert-runner" "tests"
                                  "-l" "tests/org-vcard-tests.el")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/pinoaffe/org-vcard")
    (synopsis "Org mode support for vCard export and import")
    (description
     "This package exports and imports vCard files from within GNU Emacs' Org
mode.")
    (license license:gpl3+)))

(define-public emacs-org-pretty-table
  ;; There is no release yet.
  (let ((commit "1331c600b83d95b28730b1bfcb48369ac1cf12ef")
        (revision "0"))
    (package
      (name "emacs-org-pretty-table")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Fuco1/org-pretty-table")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0yvqxh66y400n2n5ykmb1zrzd80bakffpwn6nmf37728x4cj8krh"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Fuco1/org-pretty-table")
      (synopsis "Make tables in Org mode and OrgTbl mode prettier")
      (description
       "This package displays tables in Org mode and OrgTbl mode using Unicode
characters.")
      (license license:gpl3+))))

(define-public emacs-ob-sclang
  (let ((commit "cd3f3c847d8149cd4ce4a775942dac88ba92c772")
        (revision "1"))
    (package
      (name "emacs-ob-sclang")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://repo.or.cz/ob-sclang")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0dr8va2v0262plqxd63yxymqiffkql9klci7wsp5i7xgpka8925q"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-org emacs-scel))
      (home-page "https://repo.or.cz/ob-sclang")
      (synopsis "Org Babel support for SuperCollider")
      (description "This package adds support for evaluating @code{sclang} Org
mode source blocks.")
      (license license:gpl3+))))

(define-public emacs-org-edna
  (package
    (name "emacs-org-edna")
    (version "1.1.2")
    (source (origin
              (method bzr-fetch)
              (uri (bzr-reference
                    (url "bzr://bzr.savannah.nongnu.org/org-edna-el")
                    (revision version)))
              (file-name (string-append name "-" version "-checkout"))
              (sha256
               (base32
                "01dblddgx0yid5hrgl4swbr4grhv057kfbdy122wihzqpsrgq86n"))))
    (build-system emacs-build-system)
    (home-page "https://savannah.nongnu.org/projects/org-edna-el/")
    (synopsis "Manage Org task dependencies")
    (description "This package provides an extensible means of specifying
conditions which must be fulfilled before a task can be completed and actions
to take once it is.  Org Edna runs when either the BLOCKER or TRIGGER
properties are set on a heading, and when it is changing from a TODO state to
a DONE state.")
    (license license:gpl3+)))

(define-public emacs-toodoo
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file, and commit below matches version bump.
  (package
    (name "emacs-toodoo")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ChanderG/toodoo.el")
             (commit "149a563863c2f728c5f903475dbce50547c51000")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "00q7aym0kl03j9m66pivgy0snxcjjg402049b2wdy18kgyypfvx8"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/ChanderG/toodoo.el")
    (synopsis "Magit-like interface for a Todo workflow built on top of Org")
    (description "This package provides a minor mode for fast and easy management of Todos
using Org mode and transients.")
    (license license:asl2.0)))

(define-public emacs-flx
  (package
    (name "emacs-flx")
    (version "0.6.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/lewang/flx")
              (commit (string-append "v" version))))
       (sha256
        (base32
         "0sjybrcnb2sl33swy3q664vqrparajcl0m455gciiih2j87hwadc"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f        ; tests require a TTY
                     #:test-command #~(list "make" "test")))
    (home-page "https://github.com/lewang/flx")
    (synopsis "Fuzzy matching for Emacs")
    (description
     "Flx provides fuzzy matching for emacs a la sublime text.
The sorting algorithm is a balance between word beginnings (abbreviation)
and contiguous matches (substring).  The longer the substring match,
the higher it scores.  This maps well to how we think about matching.
Flx has support for ido (interactively do things) through flx-ido.")
    (license license:gpl3+)))

(define-public emacs-afternoon-theme
  (let ((commit "89b1d778a1f8b385775c122f2bd1c62f0fbf931a")
        (revision "0"))
    (package
      (name "emacs-afternoon-theme")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "http://github.com/osener/emacs-afternoon-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19d5d6qs5nwmpf26rsb86ranb5p4236qp7p2b4i88cimcmzspylb"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/osener/emacs-afternoon-theme")
      (synopsis "Dark color theme with a deep blue background")
      (description
       "Afternoon theme is a dark color theme with a deep blue background.")
      (license license:gpl3+))))

(define-public emacs-cyberpunk-theme
  (package
    (name "emacs-cyberpunk-theme")
    (version "1.22")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/n3mo/cyberpunk-theme.el/")
              (commit version)))
       (sha256
        (base32
         "06nff38pcy5rgz13svkajsg0jjk73qy4a8m7p9f76yxcywxlgxlc"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://github.com/n3mo/cyberpunk-theme.el")
    (synopsis "Cyberpunk theme for Emacs built-in color theme support")
    (description
     "Cyberpunk color theme for the Emacs 24+ built-in color theme support
known loosely as deftheme.  Many mode-specific customizations are included.")
    (license license:gpl3+)))

(define-public emacs-dart-mode
  (package
    (name "emacs-dart-mode")
    (version "1.0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bradyt/dart-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vql8m4nj0brmv58b6lkbhykik8n6j4i7d3nylcls78y7ihc2cz8"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     ;; XXX: test-font-lock has one unexpected failure.
                     #~(list "emacs" "--batch" "-l" "dart-mode"
                             ;; "-l" "test/test-font-lock.el"
                             "-l" "test/test-indentation.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-dash emacs-flycheck emacs-s))
    (home-page "https://github.com/bradyt/dart-mode")
    (synopsis "Emacs mode for the Dart programming language")
    (description
     "Dart mode is an Emacs major mode for editing Dart files.  It provides
basic syntax highlighting and indentation.")
    (license license:gpl3+)))

(define-public emacs-danneskjold-theme
  (let ((commit "b3335e44f468c019c95a8210ce1ed9fe23c65735")) ;version bump
    (package
      (name "emacs-danneskjold-theme")
      (version "20231110.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rails-to-cosmos/danneskjold-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19lncwxzxyi73cn7439rk8cvgcj6l4x1kj6fykmw3b18s7rj555f"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'delete-screenshots
              (lambda _
                (delete-file-recursively "screenshots"))))))
      (home-page "https://github.com/rails-to-cosmos/danneskjold-theme")
      (synopsis "High-contrast Emacs theme")
      (description
       "@code{danneskjold-theme} is a high-contrast theme for Emacs.")
      (license license:gpl3+))))

(define-public emacs-dream-theme
  (let ((commit "62caa37d5f1ddb1187ee0b9e7dd9833679cc5eb5")) ;version bump
    (package
      (name "emacs-dream-theme")
      (version "1.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/djcb/dream-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "13ziwd6cw8s8gyzbklxlvpvbx5dbchvvhlxq9pi8vn3zlzpprd6h"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/djcb/dream-theme")
      (synopsis "High-contrast Emacs theme")
      (description
       "@code{dream-theme} is a dark, clean theme for Emacs.  It is inspired
by zenburn, sinburn and similar themes, but slowly diverging from them.")
      (license license:gpl3+))))

(define-public emacs-dracula-theme
  (package
    (name "emacs-dracula-theme")
    (version "1.8.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dracula/emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vv00hgik7pvj1p0ii8g6bcyvfjzwhh33hjh0gfgsh8gxm1lfij8"))))
    (build-system emacs-build-system)
    (home-page "https://draculatheme.com/")
    (synopsis "Dark theme for Emacs")
    (description
     "Dracula is a dark color theme for many editors, shells and more.  This
package provides the Emacs theme.")
    (license license:expat)))

(define-public emacs-auto-complete
  (package
    (name "emacs-auto-complete")
    (version "1.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/auto-complete/auto-complete")
              (commit (string-append "v" version))))
       (sha256
        (base32
         "04i9b11iksg6acn885wl3qgi5xpsm3yszlqmd2x21yhprndlz7gb"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "tests")))
    (propagated-inputs
     (list emacs-popup))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/auto-complete/auto-complete")
    (synopsis "Intelligent auto-completion extension for Emacs")
    (description
     "Auto-Complete is an intelligent auto-completion extension for Emacs.
It extends the standard Emacs completion interface and provides an environment
that allows users to concentrate more on their own work.  Its features are:
a visual interface, reduce overhead of completion by using statistic method,
extensibility.")
    (license license:gpl3+)))

(define-public emacs-auto-dark
  (package
    (name "emacs-auto-dark")
    (version "0.13.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/LionyxML/auto-dark-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1jmh27fkf1pivavv0qwwbb1fhdaycj3gpbbgsd917flsp6pfw55x"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/LionyxML/auto-dark-emacs")
    (synopsis "Dark/light automatic Emacs theme switcher")
    (description "This package provides the @code{auto-dark-mode} minor mode,
which enables automatic switching between two user-defined (customizable)
themes.  This transition occurs seamlessly in response to dark mode being
enabled or disabled in the desktop preferences (such as in GNOME).  It uses
DBus to query the system configured value.  To enable it, put the following
snippet to your Emacs configuration file:
@lisp
(require auto-dark)
(auto-dark-mode t)
@end lisp
To customize the themes used, visit @samp{M-x customize-group auto-dark}.")
    (license license:gpl2+)))

(define-public emacs-autocrypt
  (let ((commit "dc0223f11daf526621fda206b38bf06c29759c94")) ;version bump
    (package
      (name "emacs-autocrypt")
      (version "0.4.2")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.sr.ht/~pkal/autocrypt")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0p4fmmldsypb5v4h3p1dfi1qdbk4i6w03465b3hb0x0qnj49l695"))))
      (build-system emacs-build-system)
      (home-page "https://git.sr.ht/~pkal/autocrypt")
      (synopsis "Autocrypt implementation for Emacs")
      (description "Autocrypt package is an implementation of
Autocrypt (@url{https://autocrypt.org/}) for various Emacs MUAs,
a cryptographic protocol for email clients aiming to simplify key exchange and
encryption.")
      (license license:gpl3+))))

(define-public emacs-nginx-mode
  (package
    (name "emacs-nginx-mode")
    (version "1.1.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ajc/nginx-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1zal05l3lnb41pvfxwkzrcf39g7amqbaaffxn3wz7qa45gvvc6fw"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ajc/nginx-mode")
    (synopsis "Emacs major mode for editing nginx config files")
    (description "This package provides an Emacs major mode for
editing nginx config files.")
    (license license:gpl2+)))

(define-public emacs-stream
  (package
    (name "emacs-stream")
    (version "2.4.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "stream-" version ".tar"))
       (sha256
        (base32 "16wl1q7wikk0wyzfwjz16azq025dx4wdh1j9q0nadi68ygxi172b"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/stream.html")
    (synopsis "Implementation of streams for Emacs")
    (description "This library provides an implementation of streams for Emacs.
Streams are implemented as delayed evaluation of cons cells.")
    (license license:gpl3+)))

(define-public emacs-cl-print
  (let ((commit "1a70c553dfb04352afb5b8696fe0cef8acc8f991")
        (revision "1"))
    (package
      (name "emacs-cl-print")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/cl-print")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "164zbnsi5mssvcpy0158fm7fw5cmd1r5nkpn29fmd2b2scy3gm79"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsmirror/cl-print")
      (synopsis "CL-style generic printing")
      (description "This package provides a generic function,
@code{cl-print-object}, to which the programmer can add any method they
please.")
      (license license:gpl3+))))

(define-public emacs-el-search
  (let ((commit "07bed84dd8ae9e4c6c648834224b1d33fdbd51e0")
        (revision "2"))
    (package
      (name "emacs-el-search")
      (version (git-version "1.12.6.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/el-search")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "10w1ldgijdhfsrazp0y3bm76jv5wvdn94k1yp0pmc2m1896b58ak"))))
      (build-system emacs-build-system)
      (inputs
       (list emacs-stream emacs-cl-print))
      (home-page "https://github.com/emacsmirror/el-search")
      (synopsis "Expression based interactive search for emacs-lisp-mode")
      (description "This package provides expression based interactive search
procedures for emacs-lisp-mode.")
      (license license:gpl3+))))

(define-public emacs-ht
  (package
    (name "emacs-ht")
    (version "2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/ht.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0can9v336lgnq0q2ha3js0565jzp3dlwwqxhcbx5swk5kp148f07"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash))
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/Wilfred/ht.el")
    (synopsis "Hash table library for Emacs")
    (description
     "This package simplifies the use of hash tables in elisp.  It also
provides functions to convert hash tables from and to alists and plists.")
    (license license:gpl3+)))

(define-public emacs-log4e
  (package
    (name "emacs-log4e")
    (version "0.4.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/aki2o/log4e")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1x08dz18zhifkhrwdbh57izzidaf6vy1vb865f4xrqs6blgfiwj4"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f                      ; tests require el-expectations
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'remove-tests
           ;; Guile builder complains about null characters in some
           ;; strings of test files.  Remove "test" directory (it is not
           ;; needed anyway).
           (lambda _
             (delete-file-recursively "test"))))))
    (home-page "https://github.com/aki2o/log4e")
    (synopsis "Logging framework for elisp")
    (description
     "This package provides a logging framework for elisp.  It allows
you to deal with multiple log levels.")
    (license license:gpl3+)))

(define-public emacs-denote
  (package
    (name "emacs-denote")
    (version "4.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/protesilaos/denote")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1shxv5wyyg2djpkmi933kvsg7yby2syk96arqqx74jxh2mxba4b7"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases #~(modify-phases %standard-phases
                   (add-after 'unpack 'build-info-manual
                     (lambda _
                       (invoke "emacs"
                               "--batch"
                               "--eval=(require 'ox-texinfo)"
                               "--eval=(find-file \"README.org\")"
                               "--eval=(org-texinfo-export-to-info)"))))
      #:test-command #~(list "emacs" "--batch"
                             "-l" "tests/denote-test.el"
                             "--eval"
                             "(ert-run-tests-batch-and-exit
             `(not ,(rx (or \"make-denote-directory\" \"date-convert\"
\"--denote-directory\" \"get-identifier\" \"identifier-p\"))))")))
    (native-inputs (list texinfo))
    (home-page "https://protesilaos.com/emacs/denote/")
    (synopsis "Simple notes for Emacs")
    (description
     "Denote is a simple note-taking tool for Emacs.  It is based on the idea
that notes should follow a predictable and descriptive file-naming scheme.
The file name must offer a clear indication of what the note is about, without
reference to any other metadata.  Denote basically streamlines the creation of
such files while providing facilities to link between them.")
    (license license:gpl3+)))

(define-public emacs-denote-journal
  (package
    (name "emacs-denote-journal")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/denote-journal-"
                           version ".tar"))
       (sha256
        (base32 "0pg471rfmc0i08igx2d8qp27qfz78c2zy07c19y5hks6iw0bayvr"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-denote))
    (home-page "https://github.com/protesilaos/denote-journal")
    (synopsis "Convenience functions for daily journaling with Denote")
    (description "The denote-journal package makes it easier to use Denote for
journaling.  While it is possible to use the generic @code{denote} command
(and related) to maintain a journal, this package defines extra functionality
to streamline the journaling workflow.")
    (license license:gpl3+)))

(define-public emacs-denote-markdown
  (package
    (name "emacs-denote-markdown")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/denote-markdown-"
                           version ".tar"))
       (sha256
        (base32 "0y1lnzv2x6wnw06gx9jb38wwpd4cyn1f8r430wg26zc6grb4fmsz"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-denote))
    (home-page "https://github.com/protesilaos/denote-markdown")
    (synopsis "Extensions that better integrate Denote with Markdown")
    (description "This package provides some convenience functions to better
integrate Markdown with Denote.")
    (license license:gpl3+)))

(define-public emacs-denote-silo
  (package
    (name "emacs-denote-silo")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/denote-silo-"
                           version ".tar"))
       (sha256
        (base32 "10n4xv179dl6zz1k28lcbrgyqx8k3hfh3isd7q3qg1vcahlw04vl"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-denote))
    (home-page "https://github.com/protesilaos/denote-silo")
    (synopsis "Convenience functions for using Denote in multiple silos")
    (description "The denote-silo package makes it easier to work with
multiple silos.  A silo is a localised denote-directory that is not connected
to the default/global denote-directory and other silos.")
    (license license:gpl3+)))

(define-public emacs-denote-menu
  (package
    (name "emacs-denote-menu")
    (version "1.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/namilus/denote-menu")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15kaf45ndyg4xvgnpn8qwapkgcswasykcqfpkr0mny35a3jhdgrq"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))    ; no tests
    (propagated-inputs (list emacs-denote))
    (home-page "https://www.scss.tcd.ie/~sulimanm/posts/denote-menu.html")
    (synopsis "View and filter Denote files in a tabulated list")
    (description "This package provides an interface for viewing your
Denote files that goes beyond using the standard Dired Emacs command to
view your Denote directory.")
    (license license:gpl3+)))

(define-public emacs-denote-org
  (package
    (name "emacs-denote-org")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/denote-org-" version
                           ".tar"))
       (sha256
        (base32 "05jyy4gmd4nhgbh0cfjnjspwjzdkrljgl12wygqlai4d4hpv54mr"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs (list emacs-denote))
    (home-page "https://github.com/protesilaos/denote-org")
    (synopsis "Denote extensions for Org mode")
    (description "This package contains extra features that better integrate
Denote with Org mode.")
    (license license:gpl3+)))

(define-public emacs-denote-sequence
  (package
    (name "emacs-denote-sequence")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/denote-sequence-"
                           version ".tar"))
       (sha256
        (base32 "0i0vm1n48aw7j4y6laa8fvs0av5smimdky980qgp69pha6hcvph5"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-denote))
    (home-page "https://github.com/protesilaos/denote-sequence")
    (synopsis "Sequence notes or Folgezettel with Denote")
    (description "This package provides an optional extension to denote for
naming files with a sequencing scheme.  The idea is to establish hiearchical
relationships between files, such that the contents of one logically follow or
complement those of another.")
    (license license:gpl3+)))

(define-public emacs-denote-explore
  (package
    (name "emacs-denote-explore")
    (version "4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/pprevos/denote-explore")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04lc5fw11wixbjdkzbl63g03rdybv6q4mh1dc6c9y322g8qq3r0k"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-denote emacs-dash))
    (arguments
     (list
      #:tests? #f ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda* (#:key outputs #:allow-other-keys)
              (invoke "emacs"
                      "--batch"
                      "--eval=(require 'ox-texinfo)"
                      "--eval=(find-file \"denote-explore.org\")"
                      "--eval=(org-texinfo-export-to-info)"))))))
    (native-inputs (list texinfo))
    (home-page "https://github.com/pprevos/denote-explore")
    (synopsis "Analyse and visualise a collection of Denote notes")
    (description
     "The Denote Explore package provides auxiliary functions to
maintain and explore your collection of Denote files.  Denote Explore provides
four groups of Emacs commands:
@enumerate
@item Summary statistics: Count and visualize notes, attachments and keywords.
@item Random walks: Generate new ideas using Serendipity.
@item Janitor: Manage your Denote collection.
@item Visualisations: Visualise your Denote network as a network
graph.  (Optional dependencies GraphViz, D3js, to be acquired separately!)
@end enumerate")
    (license license:gpl3+)))

(define-public emacs-logos
  (package
    (name "emacs-logos")
    (version "1.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/protesilaos/logos")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0yjhvmzdzyi9hy46420i2zp00m0p89lca3bjs749i8izpllv8kxr"))))
    (native-inputs (list texinfo))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (home-page "https://protesilaos.com/emacs/logos")
    (synopsis "Simple focus mode for Emacs")
    (description "This package provides a simple focus mode which can be
applied to any buffer for reading, writing, or even doing a presentation.  The
buffer can be divided in pages using the @code{page-delimiter}, outline
structure, or any other pattern.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ; GFDLv1.3+ for the manual

(define-public emacs-tmr
  (package
    (name "emacs-tmr")
    (version "1.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/protesilaos/tmr")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1x7brjlmyxzdbixzc8fldyvmc8qyvi5s5is8s7zcv6fvxbm2dp1a"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((ffplay (search-input-file inputs "/bin/ffplay")))
                (substitute* "tmr.el"
                  (("\"ffplay") (string-append "\"" ffplay))))
              (emacs-substitute-variables "tmr.el"
                ("tmr-sound-file"
                 (search-input-file
                  inputs
                  "share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")))))
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (inputs (list ffmpeg sound-theme-freedesktop))
    (home-page "https://protesilaos.com/emacs/tmr/")
    (synopsis "Set timers using a convenient notation")
    (description
     "TMR is an Emacs package that provides facilities for setting timers
using a convenient notation.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ;GFDLv1.3+ for the manual

(define-public emacs-beframe
  (let ((commit "c3f4583b0767e7f8c38c83ed29af40af8ba3bdfa")) ;version bump
    (package
      (name "emacs-beframe")
      (version "1.4.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/protesilaos/beframe")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1j9v85wxahnm2h828c8dbjm0f81j9pxlf54dgcw443cl0kwcda9c"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ;no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'install 'makeinfo
              (lambda _ (emacs-makeinfo))))))
      (native-inputs
       (list texinfo))
      (home-page "https://protesilaos.com/emacs/beframe")
      (synopsis "Isolate Emacs buffers per frame")
      (description
       "Beframe enables a frame-oriented Emacs workflow where each frame has
access to the list of buffers visited therein.  In the interest of brevity, we
call buffers that belong to frames ``beframed''.  Producing multiple frames
does not generate multiple buffer lists.  There still is only one global list
of buffers.  Beframing them simply filters the list.")
      (license (list license:gpl3+
                     license:fdl1.3+))))) ; GFDLv1.3+ for the manual

(define-public emacs-gn-mode
  (package
    (name "emacs-gn-mode")
    (version "0.4.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lashtear/gn-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0dz5kgzbgsssr38z2kg6m915cvfys42ag1k42bsra3la2pixywfx"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/lashtear/gn-mode")
    (synopsis "Emacs major mode for editing GN (ninja generator) config files")
    (description
     "GN mode is a major mode for editing @acronym{GN,Ninja Generator} config
files in Emacs.  Files of this type (e.g., @file{BUILD.gn} or @file{*.gni})
are common in Chromium-derived projects.")
    (license license:bsd-3)))

(define-public emacs-gnosis
  (package
    (name "emacs-gnosis")
    (version "0.5.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://git.thanosapollo.org/gnosis")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nzyys00jdh1d7sv8jigaxb1h1ghvkc9d1r0603rsmfkrsfq229p"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")
                     #:emacs emacs   ; tests require built-in SQLite support
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-before 'check 'set-home
                           (lambda _
                             (setenv "HOME" (getenv "TMPDIR"))
                             (mkdir-p (string-append (getenv "HOME")
                                                     "/.emacs.d"))))
                         (add-before 'install 'make-info
                           (lambda _ (invoke "make" "doc"))))))
    (native-inputs (list texinfo))
    (propagated-inputs
     (list emacs-compat emacs-emacsql emacs-org-gnosis emacs-transient))
    (home-page "https://thanosapollo.org/projects/gnosis")
    (synopsis "Spaced repetition system for GNU Emacs")
    (description
     "Gnosis is a spaced repetition system for note-taking and self-testing
where notes are formatted as Question/Answer/Explanation.  Notes are reviewed
at spaced intervals based on the success or failure in recalling the answer to
each question.")
    (license license:gpl3+)))

(define-public emacs-drag-stuff
  (package
    (name "emacs-drag-stuff")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rejeep/drag-stuff")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jrr59iazih3imkl9ja1lbni9v3xv6b8gmqs015g2mxhlql35jka"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "-l" "ecukes"
                             "--batch" "--eval"
                             (string-append
                              "(let ((ecukes-exclude-tags"
                              "'(\"only-in-emacs-23\" \"not-in-emacs-24.5\")))"
                              "(ecukes))"))))
    (native-inputs (list emacs-ecukes emacs-evil))
    (home-page "https://github.com/rejeep/drag-stuff")
    (synopsis "Drag stuff around in Emacs")
    (description
"Drag Stuff is a minor mode for Emacs that makes it possible to drag
stuff (words, region, lines) around in Emacs.")
    (license license:gpl3+)))

(define-public emacs-bazel
  ;; From 2021-11-21.
  ;; No releases available.
  (let ((commit "cdb2643dba39fe2bd64ba3b190b94d1ef1d83b18")
        (revision "0"))
    (package
      (name "emacs-bazel")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/bazelbuild/emacs-bazel-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32 "0ln06dprnivx9zxm6n23ppyx7x4kbn0f85pxwvkq32aq7wnqz82m"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; tests appear to require bazel
      (home-page "https://github.com/bazelbuild/emacs-bazel-mode")
      (synopsis "Bazel support for Emacs")
      (description
       "This package provides support for the Bazel build system.  See
@uref{https://bazel.build/} for background on Bazel.")
      (license license:asl2.0))))

(define-public emacs-clue
  ;; There are no releases so far.
  (let ((commit "41895da52cf76f964d97cb8204406ab9828c4839")
        (revision "0"))
    (package
      (name "emacs-clue")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/AmaiKinono/clue")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32 "08xpdpac82v5vwqqqgbh5imakl4pys6bpfacfk05pk88lw925ql8"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://github.com/AmaiKinono/clue/")
      (synopsis "Connecting clues while reading code")
      (description
       "Clue is a tool for helping you take notes while reading code.

Code reading is all about finding connections between different locations in
a project.  With Clue, you can take notes about these connections in plain
text (or your favorite markup language), and insert links to take you to these
locations.")
      (license license:gpl3+))))

(define-public emacs-gntp
  (package
    (name "emacs-gntp")
    (version "0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tekai/gntp.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nvyjjjydrimpxy4cpg90si7sr8lmldbhlcm2mx8npklp9pn5y3a"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tekai/gntp.el")
    (synopsis "Growl Notification Protocol for Emacs")
    (description
     "This package implements the Growl Notification Protocol GNTP
described at @uref{http://www.growlforwindows.com/gfw/help/gntp.aspx}.
It is incomplete as it only lets you send but not receive
notifications.")
    (license license:bsd-3)))

(define-public emacs-alert
  (package
    (name "emacs-alert")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jwiegley/alert")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lc0p5cl4hfrzw1z2ghb11k1lvljn5m08jw5fmgwgxv667kwh49r"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-gntp emacs-log4e))
    (home-page "https://github.com/jwiegley/alert")
    (synopsis "Growl-style notification system for Emacs")
    (description
     "Alert is a Growl-workalike for Emacs which uses a common notification
interface and multiple, selectable \"styles\", whose use is fully
customizable by the user.")
    (license license:gpl2+)))

(define-public emacs-zones
  (package
    (name "emacs-zones")
    (version "2023.6.11")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "zones-" version ".tar"))
       (sha256
        (base32 "1znz720s9pchc7r9g1mpz9jcnz122bppimmh09g1rn94fh3m6vm3"))))
    (build-system emacs-build-system)
    (home-page "https://www.emacswiki.org/emacs/Zones")
    (synopsis "Define and act on multiple zones of buffer text")
    (description
     "Library @file{zones.el} lets you easily define and subsequently act on
multiple zones of buffer text.  You can think of this as enlarging the notion
of region.  In effect, it can remove the requirement of target text being
a contiguous sequence of characters.  A set of buffer zones is, in effect,
a (typically) noncontiguous set of text.")
    (license license:gpl3+)))

(define-public emacs-mu4e-alert
  (let ((commit "d36eb0c1842dea51ee0465bb3751948c8886617c")
        (revision "1"))
    (package
      (name "emacs-mu4e-alert")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/xzz53/mu4e-alert")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "039kfpwgw0vi6fv2p4ixdh9qx9hdsahl48yl1niq00zmsp7rgg07"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (propagated-inputs
       (list emacs-alert emacs-ht emacs-s mu))
      (home-page "https://github.com/xzz53/mu4e-alert")
      (synopsis "Desktop notifications and mode line display for mu4e")
      (description
       "This package provides desktop notifications for mu4e.
Additionally it can display the number of unread emails in the mode line.")
      (license license:gpl3+))))

(define-public emacs-org-notify
  (package
    (name "emacs-org-notify")
    (version "0.1.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/org-notify-" version
                           ".tar"))
       (sha256
        (base32 "1vg0h32x5lc3p5n71m23q8mfdd1fq9ffmy9rsm5rcdphfk8s9x5l"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/p-m/org-notify")
    (synopsis "Notifications for Org-mode")
    (description
     "This package allows you to get notifications when there is something
to do (for org mode).

Sometimes, you need a reminder a few days before a deadline, e.g. to buy a
present for a birthday, and then another notification one hour before to have
enough time to choose the right clothes.

For other events, e.g. rolling the dustbin to the roadside once per week, you
probably need another kind of notification strategy.

This package tries to satisfy the various needs.

In order to activate this package, you must add the following code into your
.emacs or .emacs.d configuration:

@lisp
(require org-notify)
(org-notify-start)
@end lisp")
    (license license:gpl3+)))

(define-public emacs-mu4e-column-faces
  (package
   (name "emacs-mu4e-column-faces")
   (version "20221213.2206")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://github.com/Alexander-Miller/mu4e-column-faces.git")
           (commit "1bbb646ea07deb1bd2daa4c6eb36e0f65aac40b0")))
     (file-name (git-file-name name version))
     (sha256
      (base32 "12cb37lj8j1fd5kp3gbnzgknb57j5l8xgrnhb60ysff66m1mbrr7"))))
   (build-system emacs-build-system)
   (propagated-inputs
    (list mu))
   (home-page "https://github.com/Alexander-Miller/mu4e-column-faces")
   (synopsis "Faces for individual mu4e columns")
   (description
    "This package provides a minor mode for individual column faces in mu4e's
mail overview.")
   (license license:gpl3+)))

(define-public emacs-mu4e-jump-to-list
  (let ((commit "358bba003543b49ffa266e503e54aebd0ebe614b")
        (revision "1"))
    (package
      (name "emacs-mu4e-jump-to-list")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/wavexx/mu4e-jump-to-list.el.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "00y9nap61q1z2cdql4k9g7fgi2gdgd9iy5s5lzrd9a4agbx6r7sv"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list mu))
      (home-page "https://gitlab.com/wavexx/mu4e-jump-to-list.el")
      (synopsis "Select and view mailing lists in mu4e")
      (description
        "@code{mu4e-jump-to-list} allows you to select and view mailing lists
automatically using existing List-ID headers in your mu database.  Just press
\"l\" in the headers view and any mailing list you've subscribed to will be
automatically discovered and presented in recency order.")
      (license license:gpl3+))))

(define-public emacs-url-scgi
  (package
    (name "emacs-url-scgi")
    (version "0.9")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/"
                                  "url-scgi-" version ".tar"))
              (sha256
               (base32
                "0mfbqr03302gk38aamlg1lgdznd6y3blcc3zizfb72ppb87j78mc"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/skangas/url-scgi/")
    (synopsis "SCGI support for url.el")
    (description
     "This library add support for SCGI URLs to Emacs.  It is based on url.el,
which is shipped with Emacs.")
    (license license:gpl3+)))

(define-public emacs-mentor
  (package
    (name "emacs-mentor")
    (version "0.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.nongnu.org/nongnu/mentor-"
                           version ".tar"))
       (sha256
        (base32
         "1kkzm881fxhc5hb83x0j12lv22b72nzw45qrypbl1jf2siispz9l"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-async emacs-url-scgi emacs-xml-rpc))
    (home-page "https://elpa.nongnu.org/nongnu/mentor.html")
    (synopsis "Emacs front-end for the rTorrent bittorrent client")
    (description
     "Mentor is a GNU Emacs frontend for the rTorrent bittorrent client.

By default, it will start and run rTorrent from within Emacs but can also be
configured to use an external rTorrent instance over XML-RPC.

This project aims to provide a feature complete and customizable interface,
that will feel familiar to Emacs users.  Key bindings are chosen to be as
close to the vanilla rTorrent curses interface as possible.")
    (license license:gpl3+)))

(define-public emacs-message-view-patch
  (let ((commit "40bc2e554fc1d0b6f0c403192c0a3ceaa019a78d")
        (revision "2"))
    (package
      (name "emacs-message-view-patch")
      (version (git-version "0.2.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/seanfarley/message-view-patch")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0cmkiggrl42sjx31dwnzac32bs3q2ksmamkq1pjjl8fwshp4g8sv"))))
      (build-system emacs-build-system)
      (inputs (list emacs-magit))
      (home-page "https://github.com/seanfarley/message-view-patch")
      (synopsis "Colorize patch-like emails in mu4e or gnus")
      (description
       "Extension for mu4e or gnus to colorize patch-like emails with diff-mode.
This is based on Frank Terbeck's @code{gnus-article-treat-patch.el} but has
been adapted to also work with mu4e.")
      (license license:gpl3+))))

(define-deprecated-package emacs-mu4e-patch
  emacs-message-view-patch)

(define-public emacs-pretty-mode
  (package
    (name "emacs-pretty-mode")
    (version "2.0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/akatov/pretty-mode/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "013fig9i4fyx16krp2vfv953p3rwdzr38zs6i50af4pqz4vrcfvh"))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/akatov/pretty-mode")
    (synopsis "Redisplay parts of the buffer as Unicode symbols")
    (description
     "Emacs minor mode for redisplaying parts of the buffer as pretty symbols.")
    (license license:gpl3+)))

(define-public emacs-tempel
  (package
    (name "emacs-tempel")
    (version "1.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/minad/tempel")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1ly38zv73z8y3pwa3wqabxy6qv84w72yqzxywcqpyqfxmzg42dg3"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list texinfo))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/minad/tempel")
    (synopsis "Simple templates for Emacs")
    (description
     "Tempel is a tiny template package for Emacs, which uses the syntax of
the Emacs Tempo library.  You may also write your templates in Lisp.")
    (license license:gpl3+)))

(define-public emacs-tempel-collection
  (let ((commit "b2fd7929bd767db9d31b2782168f91dcdc75af5b")
        (revision "2"))
    (package
      (name "emacs-tempel-collection")
      (version (git-version "0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/Crandel/tempel-collection")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0m52k8fx88ry9ay6xs5xaq6j56rx2lykb1jgxmia26xyf4h5ykd9"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(cons "^templates\\/" %default-include)))
      (propagated-inputs (list emacs-tempel))
      (home-page "https://github.com/Crandel/tempel-collection")
      (synopsis "Collection of TempEl templates")
      (description "This package provides a collection of templates for
the Emacs TempEl package.")
      (license license:gpl3+))))

(define-public emacs-yasnippet
  (let ((commit "dd570a6b22364212fff9769cbf4376bdbd7a63c5"))
    (package
      (name "emacs-yasnippet")
      ;; Missing Git tags, version bumped in package file.
      (version "0.14.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/joaotavora/yasnippet")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1s7zsdw83v5v7alsnzzrrr3m177qnm7x4hr8w7f84a4lamd0h6s3"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list
           "emacs" "--batch"
           "-l" "yasnippet-tests.el"
           ;; XXX: one test is broken…
           "--eval"
           "(ert-run-tests-batch-and-exit
             '(not yas-org-native-tab-in-source-block-emacs-lisp))")
        #:phases
        #~(modify-phases %standard-phases
            ;; Set HOME, otherwise test-rebindings fails.
            (add-before 'check 'set-home
              (lambda _
                (setenv "HOME" (getcwd)))))))
      (home-page "https://github.com/joaotavora/yasnippet")
      (synopsis "Yet another snippet extension for Emacs")
      (description "YASnippet is a template system for Emacs.  It allows you to
type an abbreviation and automatically expand it into function templates.")
      (license license:gpl3+))))

(define-public emacs-yasnippet-snippets
  (package
    (name "emacs-yasnippet-snippets")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/AndreaCrotti/yasnippet-snippets")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0p38k8a3l9vpph1g2a6wz40y30wb2nhp770rv8947bxzjc5xc0gf"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "^snippets\\/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'build 'set-home
            (lambda _
              (setenv "HOME" (getcwd)))))))
    (propagated-inputs
     (list emacs-yasnippet))
    (home-page "https://github.com/AndreaCrotti/yasnippet-snippets")
    (synopsis "Collection of YASnippet snippets for many languages")
    (description "This package provides an extensive collection of YASnippet
snippets.  When this package is installed, the extra snippets it provides are
automatically made available to YASnippet.")
    (license license:gpl3+)))

(define-public emacs-doom-snippets
  ;; Use the latest commit, as there are no tagged releases.  Version is
  ;; extracted from main file.
  (let ((release "1.1.0")
        (revision "0")
        (commit "bc613f448eed1bd363e61c41691a61e9fd139534"))
    (package
      (name "emacs-doom-snippets")
      (version (git-version release revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hlissner/doom-snippets")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0n4b2pr0gpn8vb2n1rckdq4jk9sj995a62yxk6z2ygw5ad7pkj8f"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons* "^.*\\/" %default-include)))
      (propagated-inputs
       (list emacs-yasnippet))
      (home-page "https://github.com/hlissner/doom-snippets")
      (synopsis "Doom Emacs' snippet library")
      (description
       "This package provides Yasnippets snippets for Doom Emacs.  It also
exposes a small API to assist in writing your own snippets.")
      (license license:expat))))

(define-public emacs-helm-c-yasnippet
  (let ((commit "c5880e740da101fde7a995e94a7b16c330e57583")
        (revision "2"))
    (package
      (name "emacs-helm-c-yasnippet")
      (version (git-version "0.6.7" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacs-jp/helm-c-yasnippet")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "026i2cywf3gvhbvnc996i76vv1pqzi21j6v8zwm198dj1f1wg4kw"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-l" "test/helm-yasnippet-test.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-helm emacs-yasnippet))
      (home-page "https://github.com/emacs-jp/helm-c-yasnippet")
      (synopsis "Helm integration for Yasnippet")
      (description
       "This Emacs library provides Helm interface for Yasnippet.")
      (license license:gpl2+))))

(define-public emacs-helm-system-packages
  (package
    (name "emacs-helm-system-packages")
    (version "1.10.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-helm/helm-system-packages")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32 "13a8jpj4wwm0yjv8hnsizgjf8wi3r2ap87lyvw7g4c7snp2dydwa"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs #:allow-other-keys)
             (substitute* "helm-system-packages-guix.el"
               (("recsel")
                (search-input-file inputs "bin/recsel"))))))))
    (inputs (list recutils))
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/emacs-helm/helm-system-packages")
    (synopsis "Helm System Packages is an interface to your package manager")
    (description
     "List all available packages in Helm (with installed
packages displayed in their own respective face).  Fuzzy-search, mark and
execute the desired action over any selections of packages: Install,
uninstall, display packages details (in Org Mode) or insert details at point,
find files owned by packages...  And much more, including performing all the
above over the network.")
    (license license:gpl3+)))

(define-public emacs-helm-org-rifle
  (package
    (name "emacs-helm-org-rifle")
    (version "1.7.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/helm-org-rifle")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0pm6va26kadjvbai4qsnjc2bk379w2nk6h3b5f0c2yv3q5na0p49"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "buttercup" "-L" ".")))
    (native-inputs
     (list emacs-buttercup))
    (propagated-inputs
     (list emacs-dash emacs-f emacs-helm emacs-org emacs-s))
    (home-page "https://github.com/alphapapa/helm-org-rifle")
    (synopsis "Rifle through Org files")
    (description "This package searches both headings and contents of entries
in Org buffers and displays matching entries.")
    (license license:gpl3+)))

(define-public emacs-dired-git-info
  ;; Upstream has no proper release.  The base version is extracted from the
  ;; "Version" keyword in the main file.
  (let ((commit "91d57e3a4c5104c66a3abc18e281ee55e8979176")
        (revision "0"))
    (package
      (name "emacs-dired-git-info")
      (version (git-version "0.3.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/clemera/dired-git-info")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1dr4iv95s4barxxj56znqkl9z0lg5jw731jmjr01s6vn8ar69gik"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/clemera/dired-git-info/")
      (synopsis "Show git info in Emacs Dired")
      (description "This Emacs package provides a minor mode which shows git
information inside the Dired buffer.")
      (license license:gpl3+))))

(define-public emacs-dired-quick-sort
  (package
    (name "emacs-dired-quick-sort")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://gitlab.com/xuhdev/dired-quick-sort/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0wk29rqaczlz1r42xygphpyvhfcrkzilrz9xd4ps0qjybnx9dsgq"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page "https://gitlab.com/xuhdev/dired-quick-sort/")
    (synopsis "Automatic sorting of Dired buffers")
    (description
     "@{dired-quick-sort} provides persistent quick sorting of Dired buffers
in various ways with @code{hydra}.")
    (license license:gpl3+)))

(define-public emacs-diss
  (let ((commit "8a99a1b34de4575087da49fe1e19bcf33ac49f46")
        (revision "1"))
    (package
      (name "emacs-diss")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/diss.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "06xvl85dkp3c2cw41f2gy7db2d7fy5pv5w1wr7vd7ccdlg3fq4gc"))))

      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/diss")
      (synopsis "Dired Image Slideshow")
      (description "Diss is a full-featured image slideshow for Emacs, based
on Dired and image-mode.")
      (license (list license:gpl3+)))))

(define-public emacs-dired-toggle-sudo
  (let ((commit "13bbe52c54893f5aa3e56228450ffdd0c9e1d169")
        (revision "0"))
    (package
      (name "emacs-dired-toggle-sudo")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/renard/dired-toggle-sudo")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1fw1pb1z6krqd1pfxxhr6rrfr9ckkcb0zsjzbjk0i2i1q5cg6car"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/renard/dired-toggle-sudo")
      (synopsis "Browse directory with @code{sudo} privileges")
      (description "This package allows for the use of @code{dired} with
@code{sudo} privileges.")
      (license license:wtfpl2))))

(define-public emacs-diredfl
  (package
    (name "emacs-diredfl")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/purcell/diredfl")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "125a49ibbaicp6kxv0ja9mz9paryqgz30xhl0pk3kvnm8z40hlr6"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/purcell/diredfl/")
    (synopsis "Extra Emacs font lock rules for a more colourful Dired")
    (description "This library enables additional font locking in Dired mode.
This is adapted from the extra font lock rules provided by Drew Adams' Dired+
package.")
    (license license:gpl3+)))

(define-public emacs-memoize
  (package
    (name "emacs-memoize")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skeeto/emacs-memoize")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04qgnlg4x6va7x364dhj1wbjmz8p5iq2vk36mn9198k2vxmijwzk"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("emacs" "--batch"
                        "-l" "memoize-test.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/skeeto/emacs-memoize")
    (synopsis "Emacs lisp memoization library")
    (description "@code{emacs-memoize} is an Emacs library for
memoizing functions.")
    (license license:unlicense)))

(define-public emacs-memory-usage
  (package
    (name "emacs-memory-usage")
    (version "0.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/memory-usage-"
                           version ".el"))
       (sha256
        (base32 "03qwb7sprdh1avxv3g7hhnhl41pwvnpxcpnqrikl7picy78h1gwj"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/memory-usage.html")
    (synopsis "Analyze the memory usage of Emacs in various ways")
    (description
     "This package provides the command @code{memory-usage}, which lists all
buffers and how much memory they use.")
    (license license:gpl3+)))

(define-public emacs-linum-relative
  (package
    (name "emacs-linum-relative")
    (version "0.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/coldnew/linum-relative")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0b3n1gk2w1p72x0zfdz9l70winq2fnjpjrgq0awxx730xk7ypp5n"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/coldnew/linum-relative")
    (synopsis "Relative line numbering for Emacs")
    (description "@code{emacs-linum-relative} displays the relative line
number on the left margin in Emacs.")
    (license license:gpl2+)))

(define-public emacs-lin
  (package
    (name "emacs-lin")
    (version "1.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/protesilaos/lin")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "00l74ldkv0nb58v6la12k36b43y3qxlcgccygpph5fhzj47v1gn4"))))
    (native-inputs (list texinfo))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (home-page "https://protesilaos.com/emacs/lin")
    (synopsis "Make Hl Line mode more suitable for selection UIs")
    (description
     "Lin is a stylistic enhancement for Emacs’ built-in Hl Line mode.  It
remaps the @code{hl-line} face (or equivalent) buffer-locally to a style that is
optimal for major modes where line selection is the primary mode of
interaction.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ; GFDLv1.3+ for the manual

;; Package has no releases or tags.  Version is extracted from "Version:"
;; keyword in main file.
(define-public emacs-idle-highlight
  (let ((commit "f9091c907d41e7b12d99d108a194229b8dbfc5ae")
        (revision "0"))
    (package
      (name "emacs-idle-highlight")
      (version (git-version "1.1.4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://codeberg.org/ideasman42/emacs-idle-highlight-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0757x4iy7q0mj1rshlxr00hbc78g5hzijgzyqs36nrw6bn65fb93"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/ideasman42/emacs-idle-highlight-mode")
      (synopsis "Highlights all occurrences of the word the point is on")
      (description
       "This Emacs package provides @code{idle-highlight-mode} that sets
 an idle timer to highlight all occurrences in the buffer of the word under
 the point.")
      (license license:gpl3+))))

(define-public emacs-ox-twbs
  (package
    (name "emacs-ox-twbs")
    (version "1.1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/marsmining/ox-twbs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nffy7ivs8fw0dj3s66hbsby0riz5wrv7xzm8g9mrfvhki938pqa"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/marsmining/ox-twbs")
    (synopsis "Export org-mode docs as HTML compatible with Twitter Bootstrap")
    (description
     "This Emacs package outputs your org-mode docs with a simple, clean and
modern look.  It implements a new HTML back-end for exporting org-mode docs as
HTML compatible with Twitter Bootstrap.  By default, HTML is exported with
jQuery and Bootstrap resources included via osscdn.")
    (license license:gpl3+)))

(define-public emacs-highlight-sexp
  (package
    (name "emacs-highlight-sexp")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/daimrod/highlight-sexp")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "12cyk2q5g6p4ac2hykw1cag7dp1prjjnck5f7nalwwaklmy62y79"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/daimrod/highlight-sexp")
    (synopsis "Minor mode that highlights the s-exp at the current position")
    (description
     "This Emacs package highlights the s-exp at the current position.")
    (license license:gpl3+)))

(define-public emacs-highlight-stages
  (let ((commit "29cbc5b78261916da042ddb107420083da49b271")
        (revision "1"))
    (package
      (name "emacs-highlight-stages")
      (version (string-append "1.1.0" "-" revision "." (string-take commit 7)))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zk-phi/highlight-stages")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0r6nbcrr0dqpgm8dir8ahzjy7rw4nrac48byamzrq96r7ajlxlv0"))
         (patches
          (search-patches "emacs-highlight-stages-add-gexp.patch"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/wigust/highlight-stages")
      (synopsis "Minor mode that highlights (quasi-quoted) expressions")
      (description "@code{highlight-stages} provides an Emacs minor mode that
highlights quasi-quoted expressions.")
      (license license:gpl3+))))

(define-public emacspeak
  (package
    (name "emacspeak")
    (version "60.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tvraman/emacspeak")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nry9qklhxwqpbqvhms0p25sz49s291rk2a8vf23fp4h5p37cxfh"))))
    (build-system gnu-build-system)
    (arguments
     (list
      #:make-flags #~(list (string-append "prefix=" #$output))
      #:phases
      #~(modify-phases %standard-phases
          (replace 'configure
            (lambda* (#:key inputs outputs #:allow-other-keys)
              (setenv "SHELL" (which "sh"))
              ;; Ensure the tclespeak.so binary is found in the correct location
              ;; by adding the path to the Tclx library to the Tcl $auto_path
              ;; variable.
              (with-fluids ((%default-port-encoding "ISO-8859-1"))
                (substitute* "servers/espeak"
                  (("package require Tclx")
                   (string-append "set auto_path [linsert $auto_path 0 "
                                  #$tclx
                                  "/lib]\n"
                                  "package require Tclx"))))
              ;; Configure Emacspeak according to etc/install.org.
              (invoke "make" "config")))
          (add-after 'build 'build-espeak
            (lambda _
              (invoke "make" "espeak")))
          (replace 'install
            (lambda* (#:key inputs outputs #:allow-other-keys)
              (let* ((out (assoc-ref outputs "out"))
                     (bin (string-append out "/bin"))
                     (lisp (string-append out "/share/emacs/site-lisp/emacspeak"))
                     (info (string-append out "/share/info"))
                     (emacs (search-input-file inputs "/bin/emacs")))
                ;; According to etc/install.org, the Emacspeak directory should
                ;; be copied to its installation destination.
                (for-each
                 (lambda (file)
                   (copy-recursively file (string-append lisp "/" file)))
                 '("etc" "info" "js" "lisp" "media" "servers" "sounds"
                   "stumpwm" "xsl"))
                ;; Make sure emacspeak is loaded from the correct directory.
                (substitute* "run"
                  (("\\./lisp/emacspeak-setup.el")
                   (string-append lisp "/lisp/emacspeak-setup.el")))
                ;; Install the convenient startup script.
                (mkdir-p bin)
                (copy-file "run" (string-append bin "/emacspeak"))))))
      #:tests? #f))                     ; no check target
    (inputs
     (list emacs espeak-ng perl tcl tclx))
    (home-page "https://emacspeak.sourceforge.net")
    (synopsis "Audio desktop interface for Emacs")
    (description
     "Emacspeak is a speech interface that allows visually impaired users to
interact independently and efficiently with the computer.  Audio
formatting---a technique pioneered by AsTeR---and full support for W3C's Aural
CSS (ACSS) allows Emacspeak to produce rich aural presentations of electronic
information.  By seamlessly blending all aspects of the Internet such as
Web-surfing and messaging, Emacspeak speech-enables local and remote
information via a consistent and well-integrated user interface.")
    (license license:gpl2+)))

(define-public emacs-adaptive-wrap
  (package
    (name "emacs-adaptive-wrap")
    (version "0.8")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "adaptive-wrap-" version ".tar"))
       (sha256
        (base32 "1dz5mi21v2wqh969m3xggxbzq3qf78hps418rzl73bb57l837qp8"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/adaptive-wrap.html")
    (synopsis "Smart line-wrapping with wrap-prefix")
    (description
     "This Emacs package provides the @code{adaptive-wrap-prefix-mode}
minor mode which sets the wrap-prefix property on the fly so that
single-long-line paragraphs get word-wrapped in a way similar to what
you'd get with @kbd{M-q} using @code{adaptive-fill-mode}, but without
actually changing the buffer's text.")
    (license license:gpl3+)))

(define-public emacs-diff-hl
  (package
    (name "emacs-diff-hl")
    (version "1.10.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dgutov/diff-hl")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0vfqyhzf3lyrhn788fbyc4p3lf36fkh8qnxvg6vddg4bxmqcjnsw"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/dgutov/diff-hl")
    (synopsis "Highlight uncommitted changes using VC")
    (description
     "Diff Hl mode highlights uncommitted changes on the side of the
window (using the fringe, by default), allows you to jump between the hunks
and revert them selectively.")
    (license license:gpl3+)))

(define-public emacs-diminish
  ;; XXX: Upstream did not tag last release.
  (let ((commit "fd486ef76e4c1d8211ae337a43b8bba106d4bca7")
        (revision "1"))
    (package
      (name "emacs-diminish")
      (version (git-version "0.46" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/myrjola/diminish.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1vlgn7swwfzy6yr880698h3qsmfcqprcb1jvffkzmbvhvf458szf"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/myrjola/diminish.el")
      (synopsis "Diminish minor modes with no modeline display")
      (description "@code{emacs-diminish} implements hiding or
abbreviation of the mode line displays (lighters) of minor modes.")
      (license license:gpl3+))))

(define-public emacs-use-package
  ;; XXX: Upstream did not tag latest release.  Using commit matching exact
  ;; version bump.
  (let ((commit "942617d26e11d80d879ff23d2a8b477bd074a734"))
    (package
      (name "emacs-use-package")
      (version "2.4.4")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jwiegley/use-package")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1zpf9xv65jg813k90x8g9k4lja896nqfh48pjinicmz1rn0rf51a"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-l" "use-package-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'install 'install-manual
              (lambda _
                (let ((info-dir (string-append #$output "/share/info")))
                  (install-file "use-package.info" info-dir))))
            (add-before 'install-manual 'build-manual
              (lambda _
                (invoke "makeinfo" "use-package.texi"))))))
      (native-inputs
       (list texinfo))
      (propagated-inputs
       (list emacs-diminish))
      (home-page "https://github.com/jwiegley/use-package")
      (synopsis "Declaration for simplifying your .emacs")
      (description "The use-package macro allows you to isolate package
configuration in your @file{.emacs} file in a way that is both
performance-oriented and tidy.")
      (license license:gpl2+))))

(define-public emacs-leaf
  (package
    (name "emacs-leaf")
    (version "4.5.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "leaf-" version ".tar"))
       (sha256
        (base32 "1rdbrf84ijapiqhq72gy8r5xgk54sf0jy31pgd3w4rl1wywh5cas"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'skip-failing-tests
                 (lambda _
                   (emacs-batch-edit-file "leaf-tests.el"
                     '(progn (search-forward-regexp
                              "leaf-key .* (lambda () \"color-moccur\"")
                             (beginning-of-line)
                             (kill-sexp)
                             (basic-save-buffer))))))))
    (home-page "https://github.com/conao3/leaf.el")
    (synopsis "Simplify your init.el configuration, extended use-package")
    (description
     "This package provides macros that allows you to declaratively configure
settings typical of an Elisp package with various keywords.  The syntax is
similar, but not identical to use-package -- overall, leaf aims at a cleaner
and more predictable implementation.")
    (license license:agpl3+)))

(define-public emacs-strace-mode
  (let* ((commit "6a69b4b06db6797af56f33eda5cb28af94e59f11")
         (revision "1"))
    (package
      (name "emacs-strace-mode")
      (version (string-append "0.0.2-" revision "." (string-take commit 7)))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/pkmoore/strace-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1lbk2kzdznf2bkfazizfbimaxxzfzv00lrz1ran9dc2zqbc0bj9f"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/pkmoore/strace-mode")
      (synopsis "Emacs major mode to highlight strace outputs")
      (description "@code{emacs-strace-mode} provides an Emacs major mode
 highlighting strace outputs.")
      (license license:gpl3+))))

(define-public emacs-defaultencrypt
  (package
    (name "emacs-defaultencrypt")
    (version "5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/lechten/defaultencrypt")
             (commit (string-append "vs" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1hkcikfms0y5xbr169b3bb00kbjf0zyfby0gipay054jns7y4i5z"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/lechten/defaultencrypt")
    (synopsis "Automatically encrypt or sign Gnus messages in Emacs")
    (description
     "DefaultEncrypt is designed to be used with Gnus in Emacs.  It
automatically encrypts messages that you send (e.g., email) when public keys
for all recipients are available, and it protects you from accidentally
sending un-encrypted messages.  It can also be configured to automatically
sign messages that you send.  For details and instructions on how to use
DefaultEncrypt, please refer to the home page or read the comments in the
source file, @file{jl-encrypt.el}.")
    (license license:gpl3+)))

(define-deprecated-package emacs-default-encrypt
  emacs-defaultencrypt)

(define-public emacs-deflate
  (package
    (name "emacs-deflate")
    (version "0.0.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/skuro/deflate")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "15zrjv3wqnqzscjy7vny6j13dy12vzri1i9zzmj2jii3x7wdkv4b"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "ert-runner" "test/")))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/skuro/deflate")
    (synopsis "Elisp implementation of the DEFLATE algorithm")
    (description
     "This Emacs library implements the DEFLATE algorithm specified in RFC 1951.

While the scope of this project is to write a full implementation of the
algorithm, there is currently no interest of developing the best compression
ratios on the planet, but rather being able to support DEFLATE (and a little
bit of zlib) in Emacs in a portable fashion.")
    (license license:gpl3+)))

;; Package has no release.  Version is extracted from "Version:" keyword in
;; main file.
(define-public emacs-exotica-theme
  (let ((commit "ff3ef4f6fa38c93b99becad977c7810c990a4d2f")
        (revision "0"))
    (package
      (name "emacs-exotica-theme")
      (version (git-version "1.0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/zenobht/exotica-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1kp6q55g3dcya4y79x877vqwxa4z2rkkvhs49pkwr3wljf4af2pd"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/zenobht/exotica-theme")
      (synopsis "Dark theme for Emacs with vibrant colors")
      (description
       "A dark opinionated theme with vibrant colors for Emacs.  Inspired by
@code{Molokai} and @code{Dracula} themes.")
      (license license:gpl3+))))

(define-public emacs-extend-smime
  (package
    (name "emacs-extend-smime")
    (version "3.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://informationelle-selbstbestimmung-im-internet.de"
             "/emacs/jl-smime" version "/jl-smime.el"))
       (file-name (string-append "jl-smime-" version ".el"))
       (sha256
        (base32
         "1iv8s2wjmv3v5qfwlcy9hvvrmxxvp3f8m1krlr789q7bbh35jynh"))))
    (build-system emacs-build-system)
    (home-page
     "https://informationelle-selbstbestimmung-im-internet.de/Emacs.html")
    (synopsis "Improved S/MIME support for Gnus in Emacs")
    (propagated-inputs
     (list emacs-default-encrypt))
    (description
     ;; TRANSLATORS: ExtendSMIME, DefaultEncrypt, and emacs-default-encrypt
     ;; should not be translated.  The name "emacs-default-encrypt" refers to
     ;; the Guix package that provides DefaultEncrypt.
     "ExtendSMIME is designed to be used with Gnus in Emacs.  It enhances
DefaultEncrypt (emacs-default-encrypt) to support S/MIME (Secure/Multipurpose
Internet Mail Extensions) via LDAP (Lightweight Directory Access Protocol).
Before a message (e.g., email) is sent, ExtendSMIME searches for missing
certificates via LDAP and imports them into @code{gpgsm}.  When certificates
for all recipients are available, DefaultEncrypt automatically encrypts the
message.  For details and instructions on how to use ExtendSMIME, please refer
to the home page or read the comments in the source file,
@file{jl-smime.el}.")
    (license license:gpl3+)))

(define-public emacs-htmlize
  (package
    (name "emacs-htmlize")
    (version "1.59")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hniksic/emacs-htmlize")
             (commit (string-append "release/" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1kdria0h5pmrgdrrxrhf2wlxsmk4drq0byj7mnx4h73sd2ynhhr7"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #false))  ;no tests
    (home-page "https://github.com/hniksic/emacs-htmlize")
    (synopsis "Convert buffer text and decorations to HTML")
    (description "@code{emacs-htmlize} converts the buffer text and
the associated decorations to HTML.  Output to CSS, inline CSS and
fonts is supported.")
    (license license:gpl2+)))

(define-public emacs-xmlgen
  (package
    (name "emacs-xmlgen")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/philjackson/xmlgen")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "096i29v0badx0a6339h9ckdz78zj59gbjdp7vj7vhkq9d830392s"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("emacs" "--batch"
                        "-l" "xmlgen-test.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/philjackson/xmlgen")
    (synopsis "S-expression to XML domain specific language (DSL) in
Emacs Lisp")
    (description "@code{emacs-xmlgen} provides S-expression to XML
conversion for Emacs Lisp.")
    (license license:gpl2+)))

(define-public emacs-cdlatex
  (let ((commit "fac070f0164ac9f5859cb4cccba7d29a65c337f3")) ;version bump
    (package
      (name "emacs-cdlatex")
      (version "4.18.5")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/cdominik/cdlatex")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1851nf6bghgzh9nbv8x92yzgdc9rl2jiiwqw2kpninr5myk7fh9y"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-auctex))
      (home-page "https://github.com/cdominik/cdlatex")
      (synopsis "Fast Emacs input methods for LaTeX environments and
math")
      (description "CDLaTeX is an Emacs minor mode supporting fast
insertion of environment templates and math in LaTeX.  Similar
commands are also offered as part of the AUCTeX package, but it is not
the same - CDLaTeX focuses on speediness for inserting LaTeX
constructs.")
      (license license:gpl3+))))

(define-public emacs-cnfonts
  (package
    (name "emacs-cnfonts")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tumashu/cnfonts")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0k0mh653sjwhli6hxdyzvcqdmpxdsx1s0fwzsw69dfr6nxr7f1dv"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tumashu/cnfonts")
    (synopsis "Emacs Chinese fonts setup tool")
    (description "Cnfonts is a Chinese fonts setup tool, allowing for easy
configuration of Chinese fonts.")
    (license license:gpl2+)))

(define-public emacs-cal-china-x
  (let ((revision "0")
        (commit  "94005e678a1d2522b7a00299779f40c5c77286b8"))
    (package
      (name "emacs-cal-china-x")
      (version (git-version "2.6b" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/xwl/cal-china-x")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0dy9awy5y990wz925rdn95gn23ywarwbvkqq0l0xms1br1v8kxc6"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/xwl/cal-china-x")
      (synopsis "Chinese localization, lunar/horoscope/zodiac info and more")
      (description
       "Cal-China-X provides additional features for Emacs' Cal-China package:

@itemize
@item Chinese localizations.
@item Display holiday, lunar, horoscope, zodiac, solar term info on mode line.
@item Define holidays using holiday-lunar, holiday-solar-term.
@item Highlight holidays based on different priorities.
@item Add cal-china-x-chinese-holidays, cal-china-x-japanese-holidays.
@item custom week diary (like weeks in school).
@end itemize")
      (license license:gpl3+))))

(define-public emacs-boon
  (package
    (name "emacs-boon")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jyp/boon")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jmmxav45sbch9prdxipd04rdmyh5ca1r9lpdlj61b5c4vlm4282"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; tests require networking
    (propagated-inputs
     (list emacs-dash emacs-expand-region emacs-multiple-cursors
           emacs-powerline emacs-spaceline))
    (home-page "https://github.com/jyp/boon")
    (synopsis "Ergonomic command mode for Emacs")
    (description "Boon is a complete package for modal editing with a focus on
ergonomics and modularity.  Spacial allocation of keys comes first, mnemonics
second.  Most common operations are mapped to the home row, common editing
commands are bound to keys reachable with the left hand and movement keys are
reached with the right hand.")
    (license license:gpl3+)))

(define-public emacs-cc-mode
  (package
   (name "emacs-cc-mode")
   (version "5.35")
   (source
    (origin
     (method hg-fetch)
     (uri (hg-reference
           (url "http://hg.code.sf.net/p/cc-mode/cc-mode")
           (changeset
            (string-append "Release_"
                           (string-replace-substring version "." "_")))))
     (file-name (hg-file-name name version))
     (sha256
      (base32 "03cvl61baccx57zd62nz2wy4hvij5hl2syg7byaxgrs4c7grr414"))))
   (build-system emacs-build-system)
   (arguments
    '(#:test-command '("make" "test")
      #:phases
      (modify-phases %standard-phases
        (add-before 'install 'make-info
          (lambda _
            (invoke "make" "info"))))))
   (native-inputs
    (list texinfo))
   (home-page "https://cc-mode.sourceforge.net/")
   (synopsis "Framework for creating major modes for C-style languages")
   (description
    "CC Mode is an Emacs and XEmacs mode for editing C and other languages with
similar syntax; currently C++, Objective-C, Java, CORBA's IDL, Pike, and AWK.")
   (license license:gpl3+)))

(define-public emacs-csharp-mode
  (package
    (name "emacs-csharp-mode")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/josteink/csharp-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1d0pf236xi4c7fazv67a53yrac24lilnkzp9pb55xm88gig7rfmz"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/josteink/csharp-mode")
    (synopsis "Major mode for C# code")
    (description
     "This is a C# editing mode for Emacs, based on CC mode.  It handles
syntax coloring, indentation, insertion of matched pairs of curly braces and
documentation generation.  In addition, it provides menu-based navigation
using Imenu, and Compilation mode support for MSBuild, devenv and xbuild.")
    (license license:gpl3+)))

(define-public emacs-vala-mode
  ;; Upstream has no tagged release.
  (let ((commit "d696a8177e94c81ea557ad364a3b3dcc3abbc50f")
        (revision "0"))
    (package
      (name "emacs-vala-mode")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rrthomas/vala-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0g5pdq757z9d8rk489n5ilhqipdc4i4sfkjwwrxyvgjlapjc04c0"))))
      (build-system emacs-build-system)
      (arguments
       '(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'disable-multiline-support
             (lambda* (#:key inputs #:allow-other-keys)
               (make-file-writable "vala-mode.el")
               (emacs-batch-edit-file "vala-mode.el"
                 '(progn
                   (require 'thingatpt) ;; beginning-of-thing, end-of-thing
                   (goto-char (point-min))
                   (save-excursion
                    (re-search-forward ";; Support multiline strings")
                    (goto-char (match-beginning 0))
                    (kill-sexp)
                    (insert ";; FIXME: Support multiline strings
(c-lang-defconst c-multiline-string-start-char vala nil)"))
                   (save-excursion
                    (re-search-forward "(defcustom vala-multiline-strings")
                    (goto-char (match-beginning 0))
                    (insert ";; FIXME: Support multiline strings\n")
                    (comment-region (beginning-of-thing 'sexp)
                                    (end-of-thing 'sexp)))
                   (basic-save-buffer))))))))
      (home-page "https://github.com/rrthomas/vala-mode")
      (synopsis "Vala mode for Emacs")
      (description
       "This package provides a major mode for editing .vala and .vapi files
in Emacs.")
      (license license:gpl2+))))

(define-public emacs-php-mode
  (package
    (name "emacs-php-mode")
    (version "1.27.0")
    (home-page "https://github.com/emacs-php/php-mode")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pkvqpzzy7wmbd99gvphfaz2ds79n5fcx4n7f772mgz8x5f9xq1b"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "../tests/php-mode-test.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'prepare-testing-bed
            (lambda _
              ;; This file is necessary for `php-project-root' test.
              (call-with-output-file "tests/project/1/.git"
                (const #t))))
          (add-after 'prepare-testing-bed 'enter-source-directory
            (lambda _
              (chdir "lisp"))))))
    (propagated-inputs (list emacs-projectile))
    (synopsis "Major mode for editing PHP code")
    (description
     "PHP mode is a major mode for editing PHP source code.  It's an extension
of C mode; thus it inherits all C mode's navigation functionality.  But it
colors according to the PHP grammar and indents according to the PEAR coding
guidelines.  It also includes a couple handy IDE-type features such as
documentation search and a source and class browser.")
    (license license:gpl3+)))

(define-public emacs-composer
  (let ((commit "791a7104be2ef2748757a186094c1e8f7f531a01")
        (revision "0"))
    (package
      (name "emacs-composer")
      (version (git-version "0.2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zonuexe/composer.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "01kb74nlkp4fvpbz6wdx776q3v7jfknhax1qmg85kj2ilkadfrd0"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://github.com/zonuexe/composer.el")
      (synopsis "Emacs interface for managing PHP dependencies with Composer")
      (description
       "This package provides an Emacs interface for working with PHP
 dependencies managed by Composer.  It allows users to run Composer commands
 directly from Emacs, including installing and updating packages, and managing
 Composer configurations.  The package aims to streamline the development
 workflow for PHP projects within Emacs.")
      (license license:gpl3+))))

(define-public emacs-pippel
  (let ((commit "cb194952ee150e77601d3233dabdb521b976ee79")
        (revision "0"))
    (package
      (name "emacs-pippel")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/arifer612/pippel")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "17606l24yyrjxa4rc0p2zj50lfbayqldw4phhi59yqf61289d520"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(cons "^pippel\\.py$" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'substitute-pippel-package-path
              (lambda _
                (emacs-substitute-variables "pippel.el"
                  ("pippel-package-path" (elpa-directory #$output)))))
            (add-after 'unpack 'substitute-python-path
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "pippel.el"
                  ("pippel-python-command"
                   (search-input-file inputs "/bin/python"))))))))
      (inputs
       (list python-wrapper))
      (propagated-inputs
       (list emacs-dash emacs-s))
      (home-page "https://github.com/arifer612/pippel")
      (synopsis "Emacs frontend to Python package manager Pip")
      (description
       "Pippel is an Emacs frontend for the Python package manager Pip.  As
Pippel also uses Tabulated List mode, it provides a similar package menu like
@code{package-list-packages}.")
      (license license:gpl3+))))

(define-public emacs-pos-tip
  (package
    (name "emacs-pos-tip")
    (version "0.4.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/pitkali/pos-tip")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1k6r59jhbyiknhsl7df0zafyc4d9r3vk953x6sdxgz92kx6hxpfy"))))
    (build-system emacs-build-system)
    ;; The following functions and variables needed by emacs-pos-tip are
    ;; not included in emacs-minimal:
    ;; x-display-pixel-width, x-display-pixel-height, x-show-tip
    (arguments `(#:emacs ,emacs))
    (home-page "https://github.com/pitkali/pos-tip")
    (synopsis "Show tooltip at point")
    (description "The standard library tooltip.el provides a function for
displaying a tooltip at the mouse position.  However, locating a tooltip at an
arbitrary buffer position in a window is not easy.  Pos-tip provides such a
function to be used by other frontend programs.")
    (license license:gpl2+)))

(define-public emacs-pyim-basedict
  ;; XXX: The commit below points to the latest (un-tagged) release.
  (let ((commit "55d9b324831b0fc79ff62f1c6f21aad72341a114"))
    (package
      (name "emacs-pyim-basedict")
      (version "0.5.5")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tumashu/pyim-basedict")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "15hd6zffc2s9rdxdjrybggf355risw60l4skqm8hc0xx0kmss9x2"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(cons "pyim-basedict.pyim" %default-include)))
      (propagated-inputs
       (list emacs-pyim))
      (home-page "https://github.com/tumashu/pyim-basedict")
      (synopsis "Input method dictionary of pyim")
      (description "Pyim-basedict is the default pinyin input method dictionary,
containing words from the Rime project.")
      (license license:gpl2+))))

(define-public emacs-pyim
  (package
    (name "emacs-pyim")
    (version "5.3.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/pyim-" version ".tar"))
       (sha256
        (base32 "0axi8vizr2pdswdnnkr409k926h9k7w3c18nbmb9j3pfc32inkjs"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; tests require emacs-pyim-basedict
    (propagated-inputs
     (list emacs-async emacs-posframe emacs-xr))
    (home-page "https://github.com/tumashu/pyim")
    (synopsis "Chinese input method")
    (description
     "This package provides a Chinese input method which supports quanpin,
shuangpin, wubi and cangjie.")
    (license license:gpl2+)))

(define-public emacs-pinyinlib
  (package
    (name "emacs-pinyinlib")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cute-jumper/pinyinlib.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1nwj4c3y0kdlkf3jqd2dnibaiazrq6qcj533xk2qw4wmx072yij0"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/cute-jumper/pinyinlib.el")
    (synopsis "Convert first letter of Pinyin to Chinese characters")
    (description
     "This Emacs library provides functionality for converting the first
letter of Pinyin to Simplified/Traditional Chinese characters.")
    (license license:gpl3+)))

(define-public emacs-reverse-im
  (package
    (name "emacs-reverse-im")
    (version "0.0.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/a13/reverse-im.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1h4gpyqir0kqf6a7ni8dbqwd4mr33imay0fmprrpfpfqxj0lj7c1"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/a13/reverse-im.el")
    (synopsis "Reverse mapping for non-default system layouts")
    (description
     "Reverse IM provides a minor mode that toggles translations for all input
methods from a given list.")
    (license license:gpl3+)))

(define-public emacs-cyrillic-dvorak-im
  (package
    (name "emacs-cyrillic-dvorak-im")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xFA25E/cyrillic-dvorak-im")
             (commit version)))
       (sha256
        (base32 "12adszd4p9i9glx2chasgq68i6cnxcrwbf5c268jjb5dw4q7ci0n"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://github.com/xFA25E/cyrillic-dvorak-im")
    (synopsis "Cyrillic input method for dvorak layout")
    (description "Cyrillic input method for dvorak layout.")
    (license license:gpl3+)))

(define-public emacs-mini-echo
  (package
    (name "emacs-mini-echo")
    (version "0.15.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/liuyinz/mini-echo.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1fgh93xzf4y3fhi7nby0h1vnay78sc2hv06ai5x3j972qz5b0v5v"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-hide-mode-line))
    (home-page "https://github.com/liuyinz/mini-echo.el")
    (synopsis "Echo buffer status in minibuffer window")
    (description "This package lets you show buffer status in the echo area,
so you can get rid of the mode-line.")
    (license license:gpl3+)))

(define-public emacs-mini-frame
  (let ((commit "60838f3cab438dcbda8eaa15ab3e5d1af88910e9")
        (revision "0"))
    (package
      (name "emacs-mini-frame")
      (version (git-version "1.19" revision commit))
      (source
       (origin
         (uri (git-reference
               (url "https://github.com/muffinmad/emacs-mini-frame.git")
               (commit commit)))
         (method git-fetch)
         (sha256
          (base32 "0q01iymz657bg3mcmq7vcl8r0ypsa1pqj1p6gxs7ywx1d33lan4d"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/muffinmad/emacs-mini-frame")
      (synopsis "Show minibuffer in child frame")
      (description
       "@dfn{mini-frame-mode} adds an advice around @code{read-from-minibuffer}
to show the minibuffer as a child frame on top of the current frame.
@code{find-file} and similar functions associated mini-buffers may appear at
the center of the screen and not at the bottom.")
      (license license:gpl3+))))

(define-public emacs-posframe
  (package
    (name "emacs-posframe")
    (version "1.4.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "posframe-" version ".tar"))
       (sha256
        (base32 "18cvfr2jxwsnsdg9f8wr0g64rkk6q1cc4gchrw76lnnknanidpk7"))))
    (build-system emacs-build-system)
    ;; emacs-minimal does not include the function font-info.
    (arguments
     `(#:emacs ,emacs))
    (home-page "https://github.com/tumashu/posframe")
    (synopsis "Pop a posframe (a child frame) at point")
    (description
     "Posframe can pop a posframe at point.  A posframe is a child frame
displayed within its root window's buffer.  Posframe is fast and works well
with CJK languages.")
    (license license:gpl3+)))

(define-public emacs-el2org
  (package
    (name "emacs-el2org")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tumashu/el2org")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mzddqny6wpg1fv99xrvlv7rxmaifvmy5bvj4in4pldhm4cx4q1b"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tumashu/el2org")
    (synopsis "Convert Emacs-lisp file to org file")
    (description "El2org is a simple tool, which can convert Emacs-lisp file
to org file, you can use this tool to write orgify commentary.")
    (license license:gpl2+)))

(define-public emacs-muse
  (package
    (name "emacs-muse")
    (version "3.20.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "muse-" version ".tar"))
       (sha256
        (base32 "0g2ff6x45x2k5dnkp31sk3bjj92jyhhnar7l5hzn8vp22l0rv8wn"))))
    (build-system emacs-build-system)
    (home-page "https://www.gnu.org/software/emacs-muse")
    (synopsis "Authoring and publishing environment for Emacs")
    (description
     "Emacs Muse (also known as Muse) is an authoring and publishing
environment for Emacs.  It simplifies the process of writing documents and
publishing them to various output formats such as HTML, LaTeX, or PDF.")
    (license license:gpl3+)))

(define-public emacs-mustache
  (package
    (name "emacs-mustache")
    (version "0.23")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/mustache.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1n2ymd92qpvsby6ms0l3kjhdzzc47rri2aiscc6bs07hm4mjpr9q"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "-Q" "-batch" "-L" "." "-l" "mustache-tests"
                   "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-dash emacs-ht emacs-s))
    (home-page "https://github.com/Wilfred/mustache.el")
    (synopsis "Mustache templating library for Emacs")
    (description "Mustache templating library for Emacs, mustache is
a simple web template system, which is described as a logic-less system
because it lacks any explicit control flow statements, both looping and
conditional evaluation can be achieved using section tags processing lists
and lambdas.")
    (license license:gpl3+)))

(define-public emacs-org2web
  (package
    (name "emacs-org2web")
    (version "0.9.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tumashu/org2web")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "103fzmadgd93x1y0c6xsdjx70z0jkwpvj0xnkybdancxz4ba8p9l"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'build 'fix-byte-compilation
            ;; XXX: The fix below was integrated upstream and can be removed
            ;; in next release.
            (lambda _
              (substitute* "org2web-el2org.el"
                (("(define-obsolete-function-alias .*)\\)" _ lead)
                 (string-append lead " \"0.1\")"))))))))
    (propagated-inputs
     (list emacs-dash
           emacs-el2org
           emacs-ht
           emacs-mustache
           emacs-simple-httpd))
    (home-page "https://github.com/tumashu/org2web")
    (synopsis "Static site generator based on Org mode")
    (description "Org2web is a static site generator based on Org mode, which
code derived from Kelvin H's Org page.")
    (license license:gpl2+)))

(define-public emacs-meow
  (package
    (name "emacs-meow")
    (version "1.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/meow-edit/meow")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gfvqzp00vwbhxgp2wdcm4waba0r280dx0qbb7vpzyx93bqiplig"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/meow-edit/meow")
    (synopsis "Yet another modal editing on Emacs")
    (description "Meow is yet another modal editing mode for Emacs.  It aims
to blend modal editing into Emacs with minimum interface with its original
key-bindings, avoiding most if not all the hassle introduced by key-binding
conflicts.")
    (license license:gpl3+)))

(define-public emacs-xelb
  (package
    (name "emacs-xelb")
    (version "0.21")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-exwm/xelb")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1xzjpbzfyb32xhsjbibv4rb4kd3rwrms6xaiag3irdralkkcvyca"))))
    (build-system emacs-build-system)
    ;; The following functions and variables needed by emacs-xelb are
    ;; not included in emacs-minimal:
    ;; x-display-screens, x-keysym-table, x-alt-keysym, x-meta-keysym
    ;; x-hyper-keysym, x-super-keysym, libxml-parse-xml-region
    ;; x-display-pixel-width, x-display-pixel-height
    (arguments
     (list
      #:emacs emacs
      #:tests? #f                       ; no test suite
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'expand-load-path 'regenerate-el-files
            (lambda* (#:key inputs native-inputs #:allow-other-keys)
              (substitute* "xelb-gen"
                (("/usr/bin/env") (which "env")))
              (let ((xcb-proto #$(this-package-native-input "xcb-proto"))
                    (emacs (search-input-file (or native-inputs inputs)
                                              "/bin/emacs")))
                (invoke "make"
                        (format #f "PROTO_PATH=~a/share/xcb" xcb-proto))))))))
    (native-inputs (list xcb-proto))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/emacs-exwm/xelb")
    (synopsis "X protocol Emacs Lisp binding")
    (description "@code{emacs-xelb} is a pure Emacs Lisp implementation of the
X11 protocol based on the XML description files from the XCB project.  It
features an object-oriented API and permits a certain degree of concurrency.
It should enable you to implement low-level X11 applications.")
    (license license:gpl3+)))

(define-public emacs-exwm
  (package
    (name "emacs-exwm")
    (version "0.34")
    (synopsis "Emacs X window manager")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-exwm/exwm")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "12v3f67qji3dqn7bs2kgwkbmv8l9in17d6pq0mkwc5hcd692z7zd"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-compat emacs-xelb))
    (inputs
     (list xhost dbus))
    ;; The following functions and variables needed by emacs-exwm are
    ;; not included in emacs-minimal:
    ;; scroll-bar-mode, fringe-mode
    ;; x-display-pixel-width, x-display-pixel-height
    (arguments
     (list
      #:emacs emacs
      #:tests? #f                       ;No test suite.
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'build 'install-xsession
            (lambda* (#:key inputs #:allow-other-keys)
              (let* ((xsessions (string-append #$output "/share/xsessions"))
                     (bin (string-append #$output "/bin"))
                     (exwm-executable (string-append bin "/exwm")))
                ;; Add a .desktop file to xsessions
                (mkdir-p xsessions)
                (mkdir-p bin)
                (make-desktop-entry-file
                 (string-append xsessions "/exwm.desktop")
                 #:name #$name
                 #:comment #$synopsis
                 #:exec exwm-executable
                 #:try-exec exwm-executable)
                ;; Add a shell wrapper to bin
                (with-output-to-file exwm-executable
                  (lambda _
                    (format #t "#!~a ~@
                     ~a +SI:localuser:$USER ~@
                     exec ~a --exit-with-session ~a \"$@\" --eval '~s' ~%"
                            (search-input-file inputs "/bin/sh")
                            (search-input-file inputs "/bin/xhost")
                            (search-input-file inputs "/bin/dbus-launch")
                            (search-input-file inputs "/bin/emacs")
                            '(cond
                              ((file-exists-p "~/.exwm")
                               (load-file "~/.exwm"))
                              ((not (featurep 'exwm))
                               (require 'exwm)
                               (exwm-enable)
                               (message
                                "exwm configuration not found.
Falling back to minimal configuration.
An example configuration can be found here:
https://github.com/emacs-exwm/exwm/wiki/Configuration-Example"))))))
                (chmod exwm-executable #o555)))))))
    (home-page "https://github.com/emacs-exwm/exwm")
    (description
     "EXWM is a full-featured tiling X window manager for Emacs built on top
of XELB.")
    (license license:gpl3+)))

(define-public emacs-xelb-no-x-toolkit
  (package
    (inherit emacs-xelb)
    (name "emacs-xelb-no-x-toolkit")
    (arguments
     (substitute-keyword-arguments (package-arguments emacs-xelb)
       ((#:emacs emacs) `,emacs-no-x-toolkit)))))

(define-public emacs-exwm-no-x-toolkit
  (package
    (inherit emacs-exwm)
    (name "emacs-exwm-no-x-toolkit")
    (synopsis "Emacs X window manager (without an X toolkit)")
    (propagated-inputs
     (list emacs-xelb-no-x-toolkit))
    (arguments
     (substitute-keyword-arguments (package-arguments emacs-exwm)
       ((#:emacs emacs) `,emacs-no-x-toolkit)))))

(define-public emacs-switch-window
  (package
    (name "emacs-switch-window")
    (version "1.6.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dimitri/switch-window")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0rci96asgamr6qp6nkyr5vwrnslswjxcjd96yccy4aivh0g66yfg"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/dimitri/switch-window")
    (synopsis "Emacs window switch tool")
    (description "Switch-window is an emacs window switch tool, which
offer a visual way to choose a window to switch to, delete, split or
other operations.")
    (license license:wtfpl2)))

(define-public emacs-exwm-x
  (package
    (name "emacs-exwm-x")
    (version "2.0.2")
    (synopsis "Derivative window manager based on EXWM")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tumashu/exwm-x")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0h248mma7kky30jr9bbhmp95wchl2cx5p6kh0gxmzpbc247dn2cc"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-counsel emacs-exwm emacs-switch-window emacs-use-package))
    (inputs
     (list xhost dbus))
    ;; Need emacs instead of emacs-minimal,
    ;; for emacs's bin path will be inserted into bin/exwm-x file.
    (arguments
     `(#:emacs ,emacs
       #:phases
       (modify-phases %standard-phases
         (add-after 'build 'install-xsession
           (lambda* (#:key inputs outputs #:allow-other-keys)
             (let* ((out (assoc-ref outputs "out"))
                    (xsessions (string-append out "/share/xsessions"))
                    (bin (string-append out "/bin"))
                    (exwm-executable (string-append bin "/exwm-x")))
               ;; Add a .desktop file to xsessions
               (mkdir-p xsessions)
               (mkdir-p bin)
               (with-output-to-file
                   (string-append xsessions "/exwm-x.desktop")
                 (lambda _
                   (format #t "[Desktop Entry]~@
                     Name=~a~@
                     Comment=~a~@
                     Exec=~a~@
                     TryExec=~@*~a~@
                     Type=Application~%" ,name ,synopsis exwm-executable)))
               ;; Add a shell wrapper to bin
               (with-output-to-file exwm-executable
                 (lambda _
                   (format #t "#!~a ~@
                     ~a +SI:localuser:$USER ~@
                     exec ~a --exit-with-session ~a \"$@\" --eval '~s' ~%"
                           (search-input-file inputs "/bin/sh")
                           (search-input-file inputs "/bin/xhost")
                           (search-input-file inputs "/bin/dbus-launch")
                           (search-input-file inputs "/bin/emacs")
                           '(require 'exwmx-loader))))
               (chmod exwm-executable #o555)
               #t))))))
    (home-page "https://github.com/tumashu/exwm-x")
    (description "EXWM-X is a derivative window manager based on EXWM, with focus
on mouse-control.")
    (license license:gpl3+)))

(define-public emacs-gnugo
  (package
    (name "emacs-gnugo")
    (version "3.1.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/gnugo-"
                           version ".tar"))
       (sha256
        (base32
         "138gzdyi8scqimvs49da66j8f5a43bhgpasn1bxzdj2zffwlwp6g"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs #:allow-other-keys)
             (emacs-substitute-variables "gnugo.el"
               ("gnugo-xpms" "#'gnugo-imgen-create-xpms" (as-display))
               ("gnugo-program" (search-input-file inputs "/bin/gnugo"))))))))
    (inputs (list gnugo))
    (propagated-inputs
     (list emacs-ascii-art-to-unicode emacs-xpm))
    (home-page "https://elpa.gnu.org/packages/gnugo.html")
    (synopsis "Emacs major mode for playing GNU Go")
    (description "This package provides an Emacs based interface for GNU Go,
which can be started via @samp{M-x gnugo}.  It has a graphical mode where the
board and stones are drawn using XPM images and supports the use of a mouse.
You can switch to the graphical mode by running @samp{M-x
gnugo-image-display-mode}.")
    (license license:gpl3+)))

(define-public emacs-gnuplot
  (package
    (name "emacs-gnuplot")
    (version "0.11")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/gnuplot-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17kh2mpbm5rir4bfrl2hmf8hic6v09z13y6svbf22fm0nkfvic1p"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "test"
                                  ;; XXX: Do not load gnuplot-debug-context,
                                  ;; because it requires gnuplot-test-context.
                                  "LOAD=-l gnuplot -l gnuplot-context \
                                        -l gnuplot-gui -l gnuplot-tests \
                                        -l gnuplot-test-context")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'number-tests
                 (lambda _
                   ;; variant of ert-number-tests
                   (define (gnuplot-number-tests file test-name)
                     (emacs-batch-edit-file file
                       `(let ((i 0))
                          (while (re-search-forward
                                  ,(string-append "gnuplot-test-comment "
                                                  test-name)
                                  nil t)
                            (goto-char (match-beginning 0))
                            (kill-region (match-beginning 0) (match-end 0))
                            (insert (format "gnuplot-test-comment %s-%d"
                                            ,test-name i))
                            (setq i (+ i 1)))
                          (basic-save-buffer))))
                   (gnuplot-number-tests
                    "gnuplot-tests.el"
                    "gnuplot-comment-with-single-quotes"))))))
    (home-page "https://github.com/emacsorphanage/gnuplot-mode")
    (synopsis "Emacs major mode for interacting with Gnuplot")
    (description
     "Emacs Gnuplot is an Emacs major mode for interacting with Gnuplot.")
    (license license:gpl2+)))

(define-public emacs-transpose-frame
  (package
    (name "emacs-transpose-frame")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/transpose-frame")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0m9jmfwwhgkwxbq3y000ymx7parbgqr7gq3yjm2wh1ll747gv51y"))))
    (build-system emacs-build-system)
    (home-page "https://www.emacswiki.org/emacs/TransposeFrame")
    (synopsis "Transpose window arrangement in current frame")
    (description "@code{emacs-transpose-frame} provides some interactive
functions which allows users to transpose windows arrangement in currently
selected frame.")
    (license license:bsd-2)))

(define-public emacs-transpose-mark
  ;; XXX: Upstream made no release so far, and did not add a Version keyword.
  (let ((commit "667327602004794de97214cf336ac61650ef75b7")
        (revision "0"))
    (package
      (name "emacs-transpose-mark")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kwrooijen/transpose-mark")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "03wc50vn1kmrgnzzhs06pwpap2p2rx84wwzxw0hawsg1f1l35m2x"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/kwrooijen/transpose-mark")
      (synopsis "Library for transposing lines and regions")
      (description "Transpose mark provides some commands that makes
transposing lines and regions easier.  You can mark a line and transpose it
with a line at point, or mark a region and transpose it with another region
a point.  The plugin provides visual feedback for marked regions.")
      (license license:gpl3+))))

(define-public emacs-key-chord
  (package
    (name "emacs-key-chord")
    (version "0.8.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/key-chord")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1lr5vgkcn13vq0lhyxl4lvwqnmvyf3kk5fs705qrv56l2hl4k2rm"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; no tests.
    (home-page "https://www.emacswiki.org/emacs/key-chord.el")
    (synopsis "Map pairs of simultaneously pressed keys to Emacs commands")
    (description "@code{emacs-key-chord} provides @code{key-chord-mode}, a
mode for binding key chords to commands.  A key chord is defined as two keys
pressed simultaneously or a single key quickly pressed twice.")
    (license license:gpl2+)))

(define-public emacs-evil-surround
  (package
    (name "emacs-evil-surround")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-evil/evil-surround")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gfgmr4909m36gknprcam6q4rkcqfbi6w43ky7x6jnlmgb6mxggg"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-evil))
    (arguments
     `(#:test-command '("make" "test")))
    (home-page "https://github.com/emacs-evil/evil-surround")
    (synopsis "Easily modify surrounding parentheses and quotes")
    (description "@code{emacs-evil-surround} allows easy deletion, change and
addition of surrounding pairs, such as parentheses and quotes, in evil mode.")
    (license license:gpl3+)))

(define-public emacs-evil-commentary
  (package
    (name "emacs-evil-commentary")
    (version "2.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/linktohack/evil-commentary")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1l8zi9wlg1f7ffm8gh92qwk3q7h6cdl8b8zkd9hcda53mq6klpjr"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-evil))
    (home-page "https://github.com/linktohack/evil-commentary")
    (synopsis "Comment out code in evil mode")
    (description "@code{emacs-evil-commentary} adds keybindings to easily
comment out lines of code in evil mode.  It provides @code{gcc} to comment out
lines, and @code{gc} to comment out the target of a motion.")
    (license license:gpl3+)))

(define-public emacs-eglot
  (package
    (name "emacs-eglot")
    (version "1.19")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/eglot-" version
                           ".tar"))
       (sha256
        (base32
         "0bsz3grw41nh5r76brfdb4gb3hncs5chlhwsqm6qqg0ach69m7zi"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-eldoc
           emacs-external-completion
           emacs-flymake
           emacs-jsonrpc
           emacs-project
           emacs-xref))
    (home-page "https://github.com/joaotavora/eglot")
    (synopsis "Client for Language Server Protocol (LSP) servers")
    (description
     "Emacs Polyglot, or Eglot, is an Emacs @acronym{Language Server Protocol,
LSP} client that stays out of the way.  It guesses the LSP program to start
for the current file, using the major mode as a hint.  It prompts you to enter
one if it fails.")
    (license license:gpl3+)))

(define-public emacs-eglot-x
  ;; Not tagged.
  (let ((commit "8e872efd3d0b7779bde5b1e1d75c8e646a1f729f")
        (revision "1"))
    (package
      (name "emacs-eglot-x")
      (version (git-version "0.6" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/nemethf/eglot-x")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0s2p22w0b5a3b97x99qybhfgicvkzkcma6lfbi0nda54v25a8skb"))))
      (build-system emacs-build-system)
      (inputs (list emacs-eglot))
      (home-page "https://github.com/nemethf/eglot-x")
      (synopsis "Protocol extensions for Eglot")
      (description
       "This package adds support for some LSP extensions to
@code{emacs-eglot}.")
      (license license:gpl3+))))

(define-public emacs-eglot-booster
  ;; Not tagged
  (let ((commit "3f9159a8b7fe87e2f01280a2c4c98ca6dab49d13"))
    (package
      (name "emacs-eglot-booster")
      (version "0.0.2")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jdtsmith/eglot-booster")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1aq5fpfasgm5lz8hk476c1zqyj33m024nx8w9qv4qrg88y5mq5n9"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jdtsmith/eglot-booster")
      (synopsis "Configuration to use LSP-booster with Eglot")
      (description
       "This package adds configuration to simplify using Emacs LSP booster
with Eglot.")
      (license license:gpl3+))))

(define-public emacs-jabber
  (package
    (name "emacs-jabber")
    (version "0.9.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://codeberg.org/emacs-jabber/emacs-jabber")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0ain52p79sxll0bnsb4llfp1h4pqcqx3l6im4ibia06lg2aiqhpv"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "lisp"
      #:emacs emacs                   ;requires gnutls
      #:test-command #~(list "ert-runner" "../tests")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'make-info
            (lambda _
              (invoke "makeinfo" "../jabber.texi"))))))
    (native-inputs (list emacs-ert-runner texinfo))
    (propagated-inputs (list emacs-fsm emacs-srv gnutls))
    (home-page "https://codeberg.org/emacs-jabber/emacs-jabber")
    (synopsis "XMPP (Jabber) client for Emacs")
    (description
     "@code{jabber.el} is an XMPP client for Emacs.  XMPP (also known as
\"Jabber\") is an instant messaging system; see @url{https://xmpp.org} for
more information.")
    (license license:gpl2+)))

(define-public emacs-jarchive
  (package
    (name "emacs-jarchive")
    (version "0.11.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.sr.ht/~dannyfreeman/jarchive")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1v8a2bbjgkn95pxq8x9251znj03m5n0f6bngbf4a63pxa2il3r8n"))))
    (build-system emacs-build-system)
    (home-page "https://sr.ht/~dannyfreeman/jarchive")
    (synopsis "Jarchive teaches Emacs how to navigate to files inside JARs")
    (description "Jarchive makes Emacs handle Java and LSP URIs pointing to
 source inside JARs.")
    (license license:gpl3+)))

(define-public emacs-eldoc
  (package
    (name "emacs-eldoc")
    (version "1.16.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/eldoc-" version ".tar"))
       (sha256
        (base32 "08dnvfyz6qkjx3fcggp628qacbxvac1agl7kgbkg6kiq4axwmifb"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/eldoc.html")
    (synopsis "Show function arglist or variable docstring in echo area")
    (description
     "This program was inspired by the behavior of the ``mouse documentation
window'' on many Lisp Machine systems; as you type a function's symbol name as
part of a sexp, it will print the argument list for that function.  Behavior
is not identical; for example, you need not actually type the function name,
you need only move point around in a sexp that calls it.  Also, if point is
over a documented variable, it will print the one-line documentation for that
variable instead, to remind you of that variable's meaning.")
    (license license:gpl3+)))

(define-public emacs-eldoc-box
  (package
    (name "emacs-eldoc-box")
    (version "1.14.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/casouri/eldoc-box")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0hk716pym15crmnviwikwrdqzhs74widjlz5zrp5107klqgxicwn"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://github.com/casouri/eldoc-box")
    (synopsis "Childframe doc for eglot and anything that uses eldoc")
    (description
     "This package displays ElDoc documentations in a childframe.  The
childfrme is selectable and scrollable with mouse, even thought the cursor is
hidden.")
    (license license:gpl3+)))

(define-public emacs-doctest
  (let ((commit "0620ab6283a4e4302761ac415354b0b2b889dcda")
        (revision "0"))
    (package
      (name "emacs-doctest")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url "https://github.com/ag91/doctest.git")
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1g759f1ypw00vqbbcxa8yxf51bdmlrfdxybgjf4fmzzhvfbcpc4d"))))
      (build-system emacs-build-system)
      (synopsis "emacs-doctest")
      (description "This package provides doctests for emacs elisp.")
      (home-page "https://github.com/ag91/doctest")
      (license license:gpl3+))))

(define-public emacs-xtest
  (package
    (name "emacs-xtest")
    (version "1.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/promethial/xtest")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1wqx6hlqcmqiljydih5fx89dw06g8w728pyn4iqsap8jwgjngb09"))))
    (arguments
     `(#:exclude '()))
    (build-system emacs-build-system)
    (home-page "https://github.com/promethial/xtest/")
    (synopsis "Simple testing with Emacs")
    (description "This package provides a simple testing library for Emacs.")
    (license license:gpl3+)))

(define-public emacs-org-transclusion
  (let ((commit "e6e638710e90198070c9b07ebdaa345a79f74706")) ;version bump
    (package
      (name "emacs-org-transclusion")
      (version "1.4.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nobiot/org-transclusion")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "18v64vgr93yqx57m92hsj6s6ib315gq06dk3ib34s966iz96yi4a"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-l" "org-transclusion.el"
                               "-l" "test/unit-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://nobiot.github.io/org-transclusion/")
      (synopsis "Enable transclusion with Org Mode")
      (description "Org-transclusion lets you insert a copy of text content via
a file link or ID link within an Org file.  It lets you have the same content
present in different buffers at the same time without copy-and-pasting it.
Edit the source of the content, and you can refresh the transcluded copies to
the up-to-date state.  Org-transclusion keeps your files clear of the
transcluded copies, leaving only the links to the original content.")
      (license license:gpl3+))))

(define-public emacs-disable-mouse
  (package
    (name "emacs-disable-mouse")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/disable-mouse")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0l6mai68ns3qw3rlvjvzsnqwdy7bxqiy0vdwflq0l1plxb1vazyc"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/disable-mouse")
    (synopsis "Disable mouse commands globally")
    (description
     "Provides @code{disable-mouse-mode} and @code{global-disable-mouse-mode},
pair of minor modes which suppress all mouse events by intercepting them and
running a customisable handler command (@code{ignore} by default).")
    (license license:gpl3+)))

(define-public emacs-json-reformat
  (package
    (name "emacs-json-reformat")
    (version "0.0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gongo/json-reformat")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gaifz1brh7yh1wk1c02gddwis4ab6bggv27gy7gcd2s861f8bkx"))
       (patches (search-patches "emacs-json-reformat-fix-tests.patch"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-before 'check 'make-tests-writable
           (lambda _
             (for-each make-file-writable (find-files "test"))))
         (add-before 'check 'delete-json-objects-order-test
           (lambda _
             (emacs-batch-edit-file "test/json-reformat-test.el"
               `(progn (progn (goto-char (point-min))
                              (re-search-forward
                               "ert-deftest json-reformat-test:json-reformat-region")
                              (beginning-of-line)
                              (kill-sexp))
                       (basic-save-buffer)))))
         (add-before 'check 'delete-json-reformat-region-occur-error-test
           (lambda _
             (emacs-batch-edit-file "test/json-reformat-test.el"
               `(progn (goto-char (point-min))
                       (re-search-forward
                        "ert-deftest json-reformat-test:json-reformat-region-occur-error")
                       (beginning-of-line)
                       (kill-sexp)
                       (basic-save-buffer))))))))
    (native-inputs
     (list emacs-dash emacs-ert-runner emacs-shut-up))
    (propagated-inputs
     (list emacs-undercover))
    (home-page "https://github.com/gongo/json-reformat")
    (synopsis "Reformatting tool for JSON")
    (description "@code{json-reformat} provides a reformatting tool for
@url{http://json.org/, JSON}.")
    (license license:gpl3+)))

(define-public emacs-json-snatcher
  (package
    (name "emacs-json-snatcher")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Sterlingg/json-snatcher")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "05zsgnk7grgw9jzwl80h5sxfpifxlr37b4mkbvx7mjq4z14xc2jw"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sterlingg/json-snatcher")
    (synopsis "Grabs the path to JSON values in a JSON file")
    (description "@code{emacs-json-snatcher} grabs the path to JSON values in
a @url{http://json.org/, JSON} file.")
    (license license:gpl3+)))

(define-public emacs-json-mode
  (package
    (name "emacs-json-mode")
    (version "1.9.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joshwnj/json-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "16jf8nrbxgwr7a5sgx088j9ymyvh4r6hnc65nqr0vgdjb6w1h598"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-json-snatcher))
    (home-page "https://github.com/joshwnj/json-mode")
    (synopsis "Major mode for editing JSON files")
    (description "@code{json-mode} extends the builtin js-mode syntax
highlighting.")
    (license license:gpl3+)))

(define-public emacs-jsonrpc
  ;; Commit refers to a commit in the Emacs repository, as jsonrpc.el was
  ;; upstreamed.  By convention, it should refer to a commit in which
  ;; jsonrpc.el was actually touched.  In order to find this, you can refer to
  ;; <https://git.savannah.gnu.org/cgit/emacs.git/log/?qt=grep&q=jsonrpc>.
  (let ((commit "4e8e877c377e41d72705235922f97b69d81d0267")) ;version bump
    (package
      (name "emacs-jsonrpc")
      (version "1.0.25")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.savannah.gnu.org/git/emacs/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1vwk5pwmf61d7yb49wp0ljim3aw002bjdnpw45cpjcbqhbhkgsc6"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (replace 'unpack
                   (lambda* (#:key source #:allow-other-keys)
                     (mkdir "source")
                     (chdir "source")
                     (copy-file (string-append source "/lisp/jsonrpc.el")
                                "jsonrpc.el"))))))
      (home-page "https://elpa.gnu.org/packages/jsonrpc.html")
      (synopsis "JSON-RPC library")
      (description
       "This library implements the JSONRPC 2.0 specification as
described in @url{http://www.jsonrpc.org/}.  As the name suggests,
JSONRPC is a generic Remote Procedure Call protocol designed around
JSON objects.")
      (license license:gpl3+))))

(define-public emacs-jsonnet-mode
  (package
    (name "emacs-jsonnet-mode")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tminor/jsonnet-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "14nxfa91yg2243v4d5kvynp2645x3811ispmhmpgil3x9qbl9jg9"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/tminor/jsonnet-mode")
    (synopsis "Major mode for editing jsonnet files")
    (description "This package provides syntax highlighting, indenting,
formatting, and utility methods for jsonnet files.")
    (license license:gpl3+)))

(define-public emacs-restclient
  (let ((commit "1fb570643b08ba66eb70831b6f874f52546917f1")
        (version "0")
        (revision "4"))               ;Guix package revision,
                                        ;upstream doesn't have official releases
    (package
      (name "emacs-restclient")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/pashky/restclient.el")
                      (commit commit)))
                (sha256
                 (base32
                  "0npij1p1yw4p1f1yrx6bl8q18nav5p2xvbp7qhzhn7lb2fdn5jqv"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-jq-mode))
      (home-page "https://github.com/pashky/restclient.el")
      (synopsis "Explore and test HTTP REST webservices")
      (description
       "This tool allows for testing and exploration of HTTP REST Web services
from within Emacs.  Restclient runs queries from a plan-text query sheet,
displays results pretty-printed in XML or JSON with @code{restclient-mode}")
      (license license:public-domain))))

(define-public emacs-jq-mode
  (package
    (name "emacs-jq-mode")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ljos/jq-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xk0if5i9cz4w06lx8v1vdm112pn1ybqgfw048sx15yyvfzgril1"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ljos/jq-mode")
    (synopsis "Major mode for editing jq queries")
    (description
     "Jq mode is an Emacs major mode for editing jq-scripts.")
    (license license:gpl3+)))

(define-public emacs-whitespace-cleanup-mode
  (let ((commit "0c9b795d78e2b230c426684af59c71794f2fc8b0")
        (revision "2"))
    (package
      (name "emacs-whitespace-cleanup-mode")
      (version (git-version "0.10" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/purcell/whitespace-cleanup-mode")
                      (commit commit)))
                (sha256
                 (base32
                  "0jarh37z5ahjm493c4n0f7fm0zjd2p0isaw331gv7ybc5adfm4pl"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; no actual tests
      (home-page "https://github.com/purcell/whitespace-cleanup-mode")
      (synopsis "Intelligently call @code{whitespace-cleanup} on save")
      (description
       "This package provides a minor mode that calls
@code{whitespace-cleanup} before saving the current buffer only if the
whitespace in the buffer was initially clean.")
      (license license:gpl3+))))

(define-public emacs-eimp
  (let ((version "1.4.0")
        (commit "2e7536fe6d8f7faf1bad7a8ae37faba0162c3b4f")
        (revision "1"))
    (package
      (name "emacs-eimp")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nicferrier/eimp")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "154d57yafxbcf39r89n5j43c86rp2fki3lw3gwy7ww2g6qkclcra"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'configure
             (lambda* (#:key inputs #:allow-other-keys)
               ;; eimp.el is read-only in git.
               (chmod "eimp.el" #o644)
               (emacs-substitute-variables "eimp.el"
                 ("eimp-mogrify-program"
                  (search-input-file inputs "bin/mogrify"))))))))
      (inputs
       (list imagemagick))
      (home-page "https://github.com/nicferrier/eimp")
      (synopsis "Interactive image manipulation utility for Emacs")
      (description "@code{emacs-eimp} allows interactive image manipulation
from within Emacs.  It uses the @code{mogrify} utility from ImageMagick to do
the actual transformations.")
      (license license:gpl2+))))

(define-public emacs-dired-hacks
  (let ((commit "d1a2bda6aa8f890cb367297ed93aee6d3b5ba388")
        (revision "3"))
    (package
      (name "emacs-dired-hacks")
      (version (git-version "0.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/Fuco1/dired-hacks")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "12m81a9kjhs4cyq3lym0vp5nx6z3sfnypyzrnia76x6rjvixjf6y"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-eimp emacs-f emacs-s))
      (home-page "https://github.com/Fuco1/dired-hacks")
      (synopsis
       "Collection of useful dired additions")
      (description
       "This package provides the following collection of Emacs dired mode
additions:

@itemize
@item dired-avfs
@item dired-columns
@item dired-filter
@item dired-hacks-utils
@item dired-images
@item dired-list
@item dired-narrow
@item dired-open
@item dired-rainbow
@item dired-ranger
@item dired-subtree
@item dired-tagsistant
@end itemize\n")
      (license license:gpl3+))))

(define-public emacs-dired-sidebar
  (package
    (name "emacs-dired-sidebar")
    (home-page "https://github.com/jojojames/dired-sidebar")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0f9cikyb53ybsawkm9g1sja2wsz2lmnc9zq63sx2h8d86acza2cp"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dired-hacks))
    (native-inputs (list emacs-ert-runner))
    (synopsis "Sidebar for Emacs using Dired")
    (description
     "This package provides a sidebar for Emacs similar to @code{NeoTree}
or @code{treemacs}, but leveraging @code{Dired} to do the job of display.")
    (license license:gpl3+)))

(define-public emacs-dirvish
  (package
    (name "emacs-dirvish")
    (version "2.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/alexluigit/dirvish")
                    (commit version)))
              (sha256
               (base32
                "1x79j3xlvhrvigh38vqhfrzqvdnpzaivbxsjzfi0pnx00y8czs5q"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; no actual tests
      #:phases
      #~(modify-phases %standard-phases
          ;; Move the extensions source files to the top level, which
          ;; is included in the EMACSLOADPATH.
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./extensions" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files)))))))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/alexluigit/dirvish")
    (synopsis "Improved version of the Emacs package Dired")
    (description
     "Dirvish is an improved version of the Emacs inbuilt package Dired.  It
not only gives Dired an appealing and highly customizable user interface, but
also comes together with almost all possible parts required for full usability
as a modern file manager.")
    (license license:gpl3+)))

(define-public emacs-which-key
  (package
    (name "emacs-which-key")
    (version "3.6.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/which-key-" version
                           ".tar"))
       (sha256
        (base32 "0p1vl7dnd7nsvzgsff19px9yzcw4w07qb5sb8g9r8a8slgvf3vqh"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/which-key.html")
    (synopsis "Display available keybindings in popup")
    (description
     "@code{emacs-which-key} is a minor mode for Emacs that displays the key
bindings following your currently entered incomplete command (a prefix) in a
popup.  For example, after enabling the minor mode if you enter C-x and wait
for the default of 1 second, the minibuffer will expand with all of the
available key bindings that follow C-x (or as many as space allows given your
settings).")
    (license license:gpl3+)))

;; Tagged release upstream is from before the package was orphaned.
;; The base version is extracted from the "Version" keyword in the main file
;; with "-git" suffix removed.
(define-public emacs-which-key-posframe
  (let ((commit "e4a9ce9a1b20de550fca51f14d055821980d534a")
        (revision "0"))
    (package
      (name "emacs-which-key-posframe")
      (version (git-version "0.2.0.50" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://github.com/emacsorphanage/which-key-posframe")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0kgc29pb5k6cb2m13cz1yhys1k8l4dpx6wjjgldpdlg9qw2i1b53"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-posframe emacs-which-key))
      (home-page "https://github.com/emacsorphanage/which-key-posframe")
      (synopsis "Display which-key popup in a posframe (a child frame)")
      (description
       "This package is a @code{which-key} extension, which uses posframe
(a child frame) to show @code{which-key} popups.")
      (license license:gpl3+))))

(define-public emacs-display-wttr
  (package
    (name "emacs-display-wttr")
    (version "2.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.sr.ht/~josegpt/display-wttr")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1hmawlnd2l89p48pviwn4khvjs0iry8x67cyqw70r10dd0ybn851"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "--batch"
                                  "-l" "display-wttr-test.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://git.sr.ht/~josegpt/display-wttr")
    (synopsis "Display wttr (weather) in the mode line")
    (description "This package contains a minor mode that can be toggled.  It
fetches weather information based on your location or on a given location from
@uref{https://wttr.in} and then displays it on the mode line.")
    (license license:gpl3+)))

(define-public emacs-ffi
  (package
    (name "emacs-ffi")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-ffi/emacs-ffi")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "05crpgscpbzkg4k0ylbfjz2wyw2r8lki8q9w2kmdpljsqrpdrwl0"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? (not (%current-target-system))
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-module-load
            (lambda _
              (make-file-writable "src/ffi.el")
              (emacs-substitute-sexps "src/ffi.el"
                ("(require 'ffi-module nil t)"
                 `(module-load
                   ,(string-append #$output "/lib/ffi-module.so"))))))
          (add-before 'check 'build-emacs-module
            (lambda _
              ;; Compile the shared object file.
              (invoke "make"
                      #$(string-append "CC="
                                       (cc-for-target)))
              ;; Copy the build artifacts to root and let the install phase do
              ;; its thing
              (copy-recursively "build/lib" ".")
              ;; Install the shared object file into /lib.
              (install-file "build/lib/ffi-module.so"
                            (string-append #$output "/lib"))))
          (add-before 'install 'installinfo
            (lambda _
              (install-file "build/doc/emacs-ffi.info"
                            (string-append #$output "/share/info")))))))
    (inputs (list emacs-compat libltdl libffi))
    (native-inputs (list texinfo))
    (home-page "https://emacs-ffi.github.io/emacs-ffi/")
    (synopsis "FFI for Emacs based on libffi")
    (description
     "This package provides an FFI for Emacs.  It is based on
libffi and relies on the dynamic module support in order to be loaded into
Emacs.  It is relatively full-featured, but for the time being low-level.")
    (license license:gpl3+)))

(define-public emacs-free-keys
  (package
    (name "emacs-free-keys")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/Fuco1/free-keys")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xgifa7s9n882f9ymyyz9gc11xfbj3vfpnxiq1fqfm5hmwx9pwbc"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fuco1/free-keys")
    (synopsis "Show free keybindings for modkeys or prefixes in Emacs")
    (description
     "Free-keys shows available key bindings in the current Emacs buffer.")
    (license license:gpl3+)))

(define-public emacs-hercules
  (package
    (name "emacs-hercules")
    (version "0.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/jjzmajic/hercules.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1rp37rhkj8jm07dwr74vc68dhrbvyvrxjdavpb0h073ps9vl9dsc"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-which-key))
    (home-page "https://gitlab.com/jjzmajic/hercules.el")
    (synopsis "Call a chain of related commands without repeated prefix keys")
    (description
     "This package provides sticky-key-like functionality to obviate the need
for repeated prefix-key sequences, and can reuse existing keymaps.  The list
of commands is displayed in a handy popup.")
    (license license:gpl3+)))

(define-public emacs-ws-butler
  (let ((commit "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
        (revision "0"))
    (package
      (name "emacs-ws-butler")
      (version (git-version "1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.savannah.gnu.org/git/emacs/nongnu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ivpgib2bxv7x6cp04mj8crc1a60d7c77jcc59sj14scq4jqbmjb"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command
                       #~(list "emacs" "--batch" "-L" "."
                               "-l" "tests/run-test.el")))
      (home-page "https://elpa.nongnu.org/nongnu/ws-butler.html")
      (synopsis "Unobtrusively remove trailing whitespace")
      (description
       "ws-butler automatically trims trailing whitespace characters on save.
In contrast with other whitespace cleanup solutions, only modified lines are
trimmed.")
      (license license:gpl3+))))

(define-public emacs-opencl-mode
  (package
    (name "emacs-opencl-mode")
    (version "2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/salmanebah/opencl-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32 "1x3h187r7waibrx5llsk6irb5afhqsrddb1f9hm3f9saks6n1ldv"))))
    (build-system emacs-build-system)
    (synopsis "Emacs major mode for editing OpenCL kernels")
    (description "This Emacs package provides the @code{opencl-mode} major
mode for editing OpenCL kernels.  It supports syntax highlighting and online
access to the OpenCL documentation through the @code{opencl-lookup} function.")
    (home-page "https://github.com/salmanebah/opencl-mode")
    (license license:gpl3+)))

(define-public emacs-openwith
  ;; There is no release tag. Version is extracted from main file.
  (let ((version "20120531")
        (revision "0")
        (commit "5fe01dee520d24c839ad5ee18822667457d9f352"))
    (package
      (name "emacs-openwith")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/garberw/openwith")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1scbawhlzmj5nhix779rlqf462g37q84vpq205qhg4qyscvfx6bi"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/garberw/openwith")
      (synopsis "Open external applications for files with Emacs")
      (description
       "This package enables you to associate file name patterns with external
applications that are automatically invoked when you use commands like
@code{find-file}.  For example, you can have it open @code{png} files with
@code{feh} and @code{mp4} files with @code{mpv}.  This is especially useful
when browsing files with Dired.")
      (license license:gpl2+))))

(define-public emacs-org-edit-latex
  (package
    (name "emacs-org-edit-latex")
    (version "0.8.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/et2010/org-edit-latex")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1w0lyz71dq8x28ira4hig1b70bqn1dr53w3k5dgch9szcf6xa86y"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-before 'build 'set-home
           (lambda _ (setenv "HOME" "/tmp"))))))
    (propagated-inputs
     (list emacs-auctex emacs-org))
    (home-page "https://github.com/et2010/org-edit-latex")
    (synopsis "Edit a LaTeX fragment just like editing a source block")
    (description
     "Org Edit LaTeX is an extension for Org mode.  It lets you edit a LaTeX
fragment in a dedicated buffer just like editing a source block.")
    (license license:gpl3+)))

(define-public emacs-emamux
  (package
    (name "emacs-emamux")
    (version "0.14")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-emamux")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19y69qw79miim9cz5ji54gwspjkcp9g2c1xr5s7jj2fiabnxax6b"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-L" "."
                             "-l" "test/emamux-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/syohex/emacs-emamux")
    (synopsis "Manipulate Tmux from Emacs")
    (description
     "@code{emacs-emamux} lets Emacs interact with the @code{tmux} terminal
multiplexer.")
    (license license:gpl3+)))

(define-public emacs-plz
  (package
    (name "emacs-plz")
    (version "0.9.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/plz.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xigrw84wbkr8ny6apfq1a8rws198my4ycr3grdwk5mvdx75h5qr"))))
    (build-system emacs-build-system)
    (inputs (list curl))
    (arguments
     (list
      #:tests? #f                       ;require internet access
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'substitute-curl-path
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "plz.el"
                ("plz-curl-program" (search-input-file inputs "/bin/curl"))))))))
    (home-page "https://github.com/alphapapa/plz.el")
    (synopsis "HTTP library for Emacs")
    (description
     "This package provides HTTP library for Emacs.  It uses Curl as a backend,
which avoids some of the issues with using Emacs’s built-in Url library.")
    (license license:gpl3+)))

(define-public emacs-plz-media-type
  (package
    (name "emacs-plz-media-type")
    (version "0.2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/r0man/plz-media-type")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1g9j12p8ifkp2k0lss5nx3mr1nfjsakj4d3mcq9gvzgj7qg8aw2d"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-plz))
    (arguments (list #:tests? #f))
    (home-page "https://github.com/r0man/plz-media-type")
    (synopsis "HTTP media type extension for plz.el")
    (description
     "The @code{plz-media-type} library enhances MIME type handling for HTTP
requests within Emacs.  It leverages the Plz HTTP library for networking calls
and introduces a mechanism to process responses based on the content type
header.  This library defines various classes and methods for parsing and
processing standard MIME types, including JSON, XML, HTML, and binary data, in
a streaming and non-streaming way.")
    (license license:gpl3+)))

(define-public emacs-plz-event-source
  (package
    (name "emacs-plz-event-source")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/r0man/plz-event-source")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bh61gcnznvcs0dmqpai5pnxkapdcgb51d5zjqvzvpr2i84cwgv9"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-plz-media-type))
    (arguments (list #:tests? #f))
    (home-page "https://github.com/r0man/plz-event-source")
    (synopsis "Server Sent Events extension for Plz")
    (description
     "The @code{plz-event-source} library provides a @code{plz-media-type},
a parser, and an event source implementation for the @acronym{SSE, Server Sent
Event} protocol.")
    (license license:gpl3+)))

(define-public emacs-ement
  (package
    (name "emacs-ement")
    (version "0.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/ement.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nskmygjhg01dz4jwvs8ixxk0dn3wa9sx7vym6dbs1i11pd761xn"))))
    (build-system emacs-build-system)
    (arguments
     (list #:emacs emacs              ;need libxml support
           #:test-command #~(list "emacs" "--batch"
                                  "-l" "tests/ement-tests.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-persist
           emacs-plz
           emacs-svg-lib
           emacs-taxy
           emacs-taxy-magit-section
           emacs-ts))
    (home-page "https://github.com/alphapapa/ement.el")
    (synopsis "Matrix client for Emacs")
    (description "Ement.el is a Matrix client for Emacs.")
    (license license:gpl3+)))

(define-public emacs-rpm-spec-mode
  (let ((commit "c1c38050c48ea330c7cea632b8785d66daeefb2b")
        (revision "0"))
    (package
      (name "emacs-rpm-spec-mode")
      (version (git-version "0.16" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/stigbjorlykke/rpm-spec-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0427kcvf2ljhzwxskn3jzk0ncrl3f9zcz2sm83d9pmhh5jax2gch"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'adjust-for-emacs-28
              (lambda _
                ;; Since Emacs 28, define-obsolete-variable-alias require a
                ;; 3rd argument to specify when the deprecation was
                ;; introduced.
                ;; The rpm-spec-mode.el file is encoded in ISO-8859-1 (iso-latin-1).
                (with-fluids ((%default-port-encoding "ISO-8859-1"))
                  (substitute* "rpm-spec-mode.el"
                    (("'rpm-spec-completion-ignore-case" all)
                     (string-append all " \"0.12\""))
                    (("'rpm-spec-nobuild" all)
                     (string-append all " \"0.12\""))
                    (("'rpm-spec-initialize-sections" all)
                     (string-append all " \"0.12\""))
                    (("'rpm-spec-insert-changelog-version" all)
                     (string-append all " \"0.12\"")))))))))
      (home-page "https://github.com/stigbjorlykke/rpm-spec-mode")
      (synopsis "Emacs major mode for editing RPM spec files")
      (description "@code{emacs-rpm-spec-mode} provides an Emacs major mode for
editing RPM spec files.")
      (license license:gpl2+))))

(define-public emacs-lcr
  (package
    (name "emacs-lcr")
    (version "1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jyp/lcr")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0hhn0gqkwki0dfk6j759hmbj1ijn4bs550jh3kgy9jfmnb7cd81l"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/jyp/lcr")
    (synopsis "Lightweight coroutines in Emacs Lisp")
    (description "This package provides macros that can translate code into
equivalent continuation-passing code, as well as miscellaneous utility
functions written in continuation-passing style.")
    (license license:gpl3+)))

(define-public emacs-attrap
  (package
    (name "emacs-attrap")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jyp/attrap")
             (commit version)))
       (sha256
        (base32 "0wqc7bqx9rvk8r7fd3x84h8p01v97s6w2jf29nnjb59xakwp22i7"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-f emacs-flycheck emacs-s))
    (home-page "https://github.com/jyp/attrap")
    (synopsis "Fix coding error at point")
    (description "This package provides a command to fix the Flycheck error
at point.")
    (license license:gpl3+)))

(define-public emacs-git-messenger
  (package
    (name "emacs-git-messenger")
    (version "0.18")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-git-messenger")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04fnby2nblk8l70gv09asxkmnn53fh1pdfs77ix44npp99fyw8ix"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-popup))
    (arguments
     `(#:test-command '("emacs" "--batch" "-l" "test/test.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/syohex/emacs-git-messenger")
    (synopsis "Popup commit message at current line")
    (description "@code{emacs-git-messenger} provides
@code{git-messenger:popup-message}, a function that when called, will popup
the last git commit message for the current line.  This uses git-blame
internally.")
    (license license:gpl3+)))

(define-public emacs-gitpatch
  (package
    (name "emacs-gitpatch")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tumashu/gitpatch")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1drf4fvmak7brf16axkh4nfz8pg44i7pjhfjz3dbkycbpp8y5vig"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tumashu/gitpatch")
    (synopsis "Mail git patch from Emacs")
    (description "@code{emacs-gitpatch} lets users easily send git patches,
created by @code{git format-patch}, from @code{magit}, @code{dired} and
@code{ibuffer} buffers.")
    (license license:gpl3+)))

(define-public emacs-git-email
  (package
    (name "emacs-git-email")
    (version "0.7.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/suhail/git-email")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0p8c449nvn77bxmq1pinpw47lx6gj1k08yrxgi8bc8xrwkni9glp"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; Makefile but no tests.
      #:phases #~(modify-phases %standard-phases
                   (add-before 'install 'makeinfo
                     (lambda _
                       (invoke "makeinfo" "doc/git-email.texi"))))))
    (inputs (list mu emacs-magit emacs-notmuch emacs-piem))
    (native-inputs (list texinfo))
    (license license:gpl3+)
    (home-page "https://suhail.codeberg.page/git-email")
    (synopsis "Format and send Git patches in Emacs")
    (description "This package provides utilities for formatting and
sending Git patches via Email, without leaving Emacs.")))

(define-public emacs-erc-hl-nicks
  (package
    (name "emacs-erc-hl-nicks")
    (version "1.3.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/leathekd/erc-hl-nicks")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0k57scxa8rm859fqsm8srhps7rlq06jzazhjbwnadzrh8i5fyvra"))))
    (build-system emacs-build-system)
    (synopsis "Nickname highlighting for Emacs ERC")
    (description "@code{erc-hl-nicks} highlights nicknames in ERC, an IRC
client for Emacs.  The main features are:
@itemize
@item Auto-colorizes nicknames without having to specify colors
@item Ignores certain characters that IRC clients add to nicknames to avoid
duplicates (nickname, nickname’, nickname\", etc.)
@item Attempts to produce colors with a sufficient amount of contrast between
the nick color and the background color
@end itemize\n")
    (home-page "https://github.com/leathekd/erc-hl-nicks")
    (license license:gpl3+)))

(define-public emacs-engine-mode
  (package
    (name "emacs-engine-mode")
    (version "2.2.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hrs/engine-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1q4rwp0rv1azabhx5l3pnxdja2911815k6ijmfdx6s3vwyvd2wyn"))))
    (build-system emacs-build-system)
    (synopsis "Minor mode for defining and querying search engines")
    (description "Engine mode is a global minor mode for Emacs.  It enables
you to easily define search engines, bind them to keybindings, and query them
from the comfort of your editor.")
    (home-page "https://github.com/hrs/engine-mode")
    (license license:gpl3+)))

(define-public emacs-engrave-faces
  (package
    (name "emacs-engrave-faces")
    (version "0.3.1")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/engrave-faces-"
                                  version ".tar"))
              (sha256
               (base32
                "1q4sjl2rvcfwcirm32nmi53258ln71yhh1dgszlxwknm38a14v3i"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/tecosaur/engrave-faces")
    (synopsis "Convert font-lock faces to other formats")
    (description "There are some great packages for exporting buffers to
particular formats, but each one seems to reinvent the core mechanism of
processing the font-lock in a buffer such that it can be exported to
a particular format.

This package aims to produce a versatile generic core which can process
a fontified buffer and pass the data to any number of backends which can deal
with specific output formats.")
    (license license:gpl3+)))

(define-public emacs-enh-ruby-mode
  ;; The latest tag is from 2019.
  (let ((revision "0")
        (commit "7e76d754e1632b4fc9a024fa393c3fc837bcc86b"))
    (package
      (name "emacs-enh-ruby-mode")
      (version (git-version "20191111" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/zenspider/enhanced-ruby-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1gc2kgvnzq6m6hswcvsd4c00xywi2phdnr121r53kvsv46avrq9z"))))
      (build-system emacs-build-system)
      (arguments
       (list #:include #~(cons "^ruby/" %default-include)
             #:test-command ''("rake" "test:all")
             #:phases #~(modify-phases %standard-phases
                          (add-after 'unpack 'set-default-ruby
                            (lambda* (#:key inputs #:allow-other-keys)
                              (emacs-substitute-variables "enh-ruby-mode.el"
                                ("enh-ruby-program"
                                 (search-input-file inputs "bin/ruby"))))))))
      (native-inputs (list ruby-rake))
      (inputs (list ruby))
      (home-page "https://github.com/zenspider/Enhanced-Ruby-Mode")
      (synopsis "Emacs major mode for editing Ruby files")
      (description "@code{enh-ruby-mode} is a major mode providing syntax
highlighting, navigation and indentation capabilities for editing Ruby source
files.  It parses the source files using Ruby's builtin @code{Ripper} class
and performs syntax checks on them.")
      (license license:ruby))))

(define-public emacs-enwc
  (package
    (name "emacs-enwc")
    (version "2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/enwc-" version
                           ".tar"))
       (sha256
        (base32 "0y8154ykrashgg0bina5ambdrxw2qpimycvjldrk9d67hrccfh3m"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "-l" "cl-lib"
                             "--batch" "-l" "enwc-test.el")))
    (home-page "https://savannah.nongnu.org/p/enwc")
    (synopsis "The Emacs Network Client")
    (description
     "ENWC is the Emacs Network Client.  It is designed to provide a front-end
to various network managers, such as @code{NetworkManager} and Wicd.
Currently, only @code{NetworkManager} and Wicd are supported, although
experimental support exists for Connman.")
    (license license:gpl3+)))

(define-public emacs-inheritenv
  (package
    (name "emacs-inheritenv")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/inheritenv")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04na9m3z3k94jjqcqps95xcmvjklnddhli2xaac16m4ackw2wv9b"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test" "INIT_PACKAGES=t")))
    (home-page "https://github.com/purcell/inheritenv/releases")
    (synopsis "Emacs temp buffers inherit buffer-local environment variables")
    (description
     "Inheritenv provides tools to execute processes inheriting the calling
buffer's environment.")
    (license license:gpl3+)))

(define-public emacs-enlive
  (package
    (name "emacs-enlive")
    (version "0.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/zweifisch/enlive")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "08j6b79vy8ry4ad1abk3hvxjbb4ylrhkvrbrnq1gcikl4h1p2v63"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/zweifisch/enlive")
    (synopsis "Query HTML document with CSS selectors in Emacs")
    (description
     "Enlive is an Emacs library that allows the user to query HTML documents
from within Elisp using a DSL similar to CSS selectors.")
    (license license:gpl3+)))

(define-public emacs-envrc
  (package
    (name "emacs-envrc")
    (version "0.12")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/envrc")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1kx5p85p2c682j50cah18njdraj07v9dg8imi7p97bkx7n5malxm"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #false                   ;FIXME: 8 out of 11 tests fail
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "envrc-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'set-direnv-location
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "envrc.el"
                ("envrc-direnv-executable"
                 (search-input-file inputs "/bin/direnv"))))))))
    (inputs
     (list direnv))
    (propagated-inputs
     (list emacs-inheritenv))
    (home-page "https://github.com/purcell/envrc")
    (synopsis "Support for Direnv which operates buffer-locally")
    (description
     "This is library which uses Direnv to set environment variables on
a per-buffer basis.  This means that when you work across multiple projects
which have @file{.envrc} files, all processes launched from the buffers ``in''
those projects will be executed with the environment variables specified in
those files.  This allows different versions of linters and other tools to be
used in each project if desired.")
    (license license:gpl3+)))

(define-public emacs-prop-menu
  (package
    (name "emacs-prop-menu")
    (version "0.1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/david-christiansen/prop-menu-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "18ap2liz5r5a8ja2zz9182fnfm47jnsbyblpq859zks356k37iwc"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "make" "test" "BATCHEMACS=emacs --batch")))
    (home-page
     "https://github.com/david-christiansen/prop-menu-el")
    (synopsis
     "Create and display a context menu based on text and overlay properties")
    (description
     "This is a library for computing context menus based on text
properties and overlays.  The intended use is to have tools that
annotate source code and others that use these annotations, without
requiring a direct coupling between them, but maintaining
discoverability.

Major modes that wish to use this library should first define an
appropriate value for @code{prop-menu-item-functions}.  Then, they should
bind @code{prop-menu-by-completing-read} to an appropriate
key.  Optionally, a mouse pop-up can be added by binding
@code{prop-menu-show-menu} to a mouse event.")
    (license license:gpl3+)))

(define-public emacs-idris-mode
  (let ((commit "9bc7697406f719258d93835df3c1761efbfecaa7")
        (revision "1"))
    (package
      (name "emacs-idris-mode")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/idris-hackers/idris-mode")
               (commit commit)))
         (file-name (git-file-name name commit))
         (sha256
          (base32
           "1d1f7kx0fw632js7qd1sra5wbpwyamcqs5wpzhyynmr5ybb0vyl7"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'patch-tests
                   (lambda _
                     (substitute* "Makefile"
                       (("^test(|2|3): getdeps build" all n)
                        (string-append "test" n ":" )))))
                 (replace 'check
                   (lambda* (#:key tests? #:allow-other-keys)
                     (if tests?
                         (begin
                           (setenv "HOME" (dirname (getcwd)))
                           (invoke "make" "test")
                           ;; XXX: History file not writable
                           ;; (invoke "make" "test2")
                           ;; XXX: Error reading from stdin
                           ;; (invoke "make" "test3")
                           )
                         (format #t "test suite not run.~%")))))))
      (native-inputs
       (list idris))
      (propagated-inputs
       (list emacs-prop-menu))
      (home-page
       "https://github.com/idris-hackers/idris-mode")
      (synopsis "Major mode for editing Idris code")
      (description
       "This is an Emacs mode for editing Idris code.  It is compatible with
the latest versions of Idris 1.")
      (license license:gpl3+))))

(define-public emacs-browse-at-remote
  (package
    (name "emacs-browse-at-remote")
    (version "0.14.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rmuslimov/browse-at-remote")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0bx4ns0jb0sqrjk1nsspvl3mhz3n12925azf7brlwb1vcgnji09v"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-f emacs-s))
    (home-page "https://github.com/rmuslimov/browse-at-remote")
    (synopsis "Open github/gitlab/bitbucket/stash page from Emacs")
    (description
     "This Emacs package allows you to open a target page on
github/gitlab (or bitbucket) by calling @code{browse-at-remote} command.
It supports dired buffers and opens them in tree mode at destination.")
    (license license:gpl3+)))

(define-public emacs-tiny
  (let ((commit "fd8a6b0b0c564d8242259e20e557ee6041f40908")
        (revision "1"))
    (package
      (name "emacs-tiny")
      (version (git-version "0.2.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/tiny")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1498j392ap2mk4zmsm2id16pfgvj78r428da9vw7hdrzzibai2cx"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("make" "test")))
      (home-page "https://github.com/abo-abo/tiny")
      (synopsis "Quickly generate linear ranges in Emacs")
      (description
       "The main command of the @code{tiny} extension for Emacs is @code{tiny-expand}.
It is meant to quickly generate linear ranges, e.g. 5, 6, 7, 8.  Some elisp
proficiency is an advantage, since you can transform your numeric range with
an elisp expression.")
      (license license:gpl3+))))

(define-public emacs-taxy
  (package
    (name "emacs-taxy")
    (version "0.10.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/taxy-" version ".tar"))
       (sha256
        (base32
         "1nmlx2rvlgzvmz1h3s5yn3qnad12pn2a83gjzxf3ln79p8rv1mj6"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-magit))
    (home-page "https://github.com/alphapapa/taxy.el")
    (synopsis "Programmable taxonomical grouping for arbitrary objects")
    (description
     "Taxy provides a programmable way to classify arbitrary objects into
a hierarchical taxonomy.  Allows you to automatically put things in nested
groups.")
    (license license:gpl3+)))

(define-public emacs-taxy-magit-section
  (package
    (name "emacs-taxy-magit-section")
    (version "0.14.3")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://elpa.gnu.org/packages/taxy-magit-section-" version
                    ".tar"))
              (sha256
               (base32
                "16j1a2vx9awr5vk1x3i1m526ym6836zxlypx1f50fcwjy0w8q8a3"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-magit emacs-taxy))
    (home-page "https://github.com/alphapapa/taxy.el")
    (synopsis "View Taxy structs in a Magit Section buffer")
    (description
     "This library provides a way to view @code{taxy} structs in a column-based,
@code{magit-section} buffer.  Columns are defined using simple top-level
forms, and new columns may be easily defined by users in their
configurations.")
    (license license:gpl3+)))

(define-public emacs-emojify
  (package
    (name "emacs-emojify")
    (version "1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/iqbalansari/emacs-emojify")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1fqnj5x7ivjkm5y927dqqnm85q5hzczlb0hrfpjalrhasa6ijsrm"))))
    (build-system emacs-build-system)
    (arguments
     `(#:include (cons "^data/" %default-include)))
    (propagated-inputs
     (list emacs-ht))
    (home-page "https://github.com/iqbalansari/emacs-emojify")
    (synopsis "Display emojis in Emacs")
    (description "This package displays emojis in Emacs similar to how Github,
Slack, and other websites do.  It can display plain ASCII like @code{:)} as
well as Github-style emojis like @code{:smile:}.  It provides a minor mode
@code{emojify-mode} to enable the display of emojis in a buffer.")
    (license license:gpl3+)))

(define-public emacs-make-it-so
  (let ((commit "b73dfb640588123c9eece230ad72b37604f5c126")
        (revision "2"))
    (package
      (name "emacs-make-it-so")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/make-it-so")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0p6xhyinzzkrwzbpxqfm8hlii0ikvmmylya240bwsa77w0g1k6xq"))))
      (build-system emacs-build-system)
      (arguments
       `(#:tests? #f  ; No tests.
         #:include (cons "^recipes/" %default-include)))
      (propagated-inputs
       (list emacs-ivy))
      (home-page "https://github.com/abo-abo/make-it-so")
      (synopsis "Transform files with Makefile recipes")
      (description "This package provides an interface for selecting from
different conversion recipes, often including tools like @code{ffmpeg} or
@code{convert}.  The conversion command need only be written once, and
subsequent invocations can be readily customized.  Several recipes are
included by default, and more can be readily added.")
      (license license:gpl3+))))

(define-public emacs-unidecode
  (let ((commit "5502ada9287b4012eabb879f12f5b0a9df52c5b7")
        (revision "1"))
    (package
      (name "emacs-unidecode")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sindikat/unidecode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "03x3nakbhmakwm977mwrf8jifvjnfwzpjv6wrwpizbqjnkgfchmn"))))
      (build-system emacs-build-system)
      (arguments
       `(#:include (cons* "^tools/" "^data/" %default-include)
         #:test-command '("emacs" "--batch"
                          "-l" "unidecode-test.el"
                          "-f" "ert-run-tests-batch-and-exit")
         #:phases
         (modify-phases %standard-phases
           (add-before 'check 'make-tests-writable
             (lambda _
               (make-file-writable "unidecode-test.el")
               #t))
           (add-before 'check 'add-require
             (lambda _
               (emacs-batch-edit-file "unidecode-test.el"
                 `(progn (progn (goto-char (point-min))
                                (re-search-forward
                                 "ert-deftest")
                                (forward-line -1)
                                (insert "(require 'unidecode)"))
                         (basic-save-buffer)))
               #t)))))
      (home-page "https://github.com/sindikat/unidecode")
      (synopsis "Transliterate Unicode text to ASCII")
      (description "This package provides functions for converting Unicode to ASCII.")
      (license license:gpl2+))))

(define-public emacs-pubmed
  (package
    (name "emacs-pubmed")
    (version "0.6.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/fvdbeek/emacs-pubmed")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "05j4nhn2bgacc54pvmkhwgdsmzxzkcfn49a12k43wckrrf3izbqf"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-deferred emacs-esxml emacs-s emacs-unidecode))
    (home-page "https://gitlab.com/fvdbeek/emacs-pubmed")
    (synopsis "Interface to PubMed")
    (description "This package provides an Emacs interface to the PubMed
database of references on life sciences.")
    (license license:gpl3+)))

(define-public emacs-websocket
  (package
    (name "emacs-websocket")
    (version "1.15")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "websocket-" version ".tar"))
       (sha256
        (base32 "0mvvq9gsx856ip2gkrvjw4k8a85vrrkp27dcpkvamxq93lfd7hin"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/websocket.html")
    (synopsis "Emacs WebSocket client and server")
    (description
     "This is an Elisp library for WebSocket clients to talk to WebSocket
servers, and for WebSocket servers to accept connections from WebSocket
clients.  This library is designed to be used by other library writers, to
write applications that use WebSockets, and is not useful by itself.")
    (license license:gpl3+)))

(define-public emacs-oauth2
  (package
    (name "emacs-oauth2")
    (version "0.18.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "oauth2-" version ".tar"))
       (sha256
        (base32 "1xn9jkf55b9sc6fidzn6p1falvvgvpc08iz53fvmmp7fandgwbxi"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/oauth2.html")
    (synopsis "OAuth 2.0 authorization protocol implementation")
    (description
     "This package provides an Elisp implementation of the OAuth 2.0 draft.
The main entry point is @code{oauth2-auth-and-store} which will return a token
structure.  This token structure can be then used with
@code{oauth2-url-retrieve-synchronously} or @code{oauth2-url-retrieve} to
retrieve any data that need OAuth authentication to be accessed.  If the token
needs to be refreshed, the code handles it automatically and stores the new
value of the access token.")
    (license license:gpl3+)))

(define-public emacs-auth-source-xoauth2
  (package
    (name "emacs-auth-source-xoauth2")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ccrusius/auth-source-xoauth2")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nl859csl8xcd6ybpjj15ph8l8fxwkwf45kbylss68alkyf1rl3v"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ccrusius/auth-source-xoauth2")
    (synopsis "XOAuth2 authentication capabilities for Emacs auth-source")
    (description
     "This package adds XOAuth2 authentication capabilities to Emacs
auth-source.  This integration requires some preliminary work on the users’
part, which includes creating tokens.")
    (license license:asl2.0)))

(define-public emacs-circe
  (package
    (name "emacs-circe")
    (version "2.14")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jorgenschaefer/circe")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "12vq5p3bmqp4gh4s40s8sbz8hs2zczkcl4zfnn7ybr5sc36g1zax"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("buttercup" "-L" ".")
       #:emacs ,emacs                 ;requires gnutls
       #:phases
       (modify-phases %standard-phases
         ;; The HOME environment variable should be set to an existing
         ;; directory for the tests to succeed.
         (add-before 'check 'set-home
           (lambda _
             (setenv "HOME" "/tmp"))))))
    (native-inputs
     (list emacs-buttercup))
    ;; In order to securely connect to an IRC server using TLS, Circe requires
    ;; the GnuTLS binary.
    (propagated-inputs
     (list gnutls))
    (home-page "https://github.com/jorgenschaefer/circe")
    (synopsis "Client for IRC in Emacs")
    (description "Circe is a Client for IRC in Emacs.  It integrates well with
the rest of the editor, using standard Emacs key bindings and indicating
activity in channels in the status bar so it stays out of your way unless you
want to use it.")
    (license license:gpl3+)))

(define-public emacs-track-changes
  (package
    (name "emacs-track-changes")
    (version "1.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/track-changes-"
                           version ".tar"))
       (sha256
        (base32 "0ygc53dm144ld4f7ig1fh1z345gnkrin7q108kj9d4dhgp8f2381"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; no tests
    (home-page "https://elpa.gnu.org/packages/track-changes.html")
    (synopsis "Abstraction library which handles accumulating file changes")
    (description
     "This library is a layer of abstraction above
@code{before-change-functions} and @code{after-change-functions} which takes
care of accumulating changes until a time when its client finds it convenient
to react to them.")
    (license license:gpl3+)))

(define-public emacs-tracking
  (package
    (inherit emacs-circe)
    (name "emacs-tracking")
    (arguments
     ;; "tracking.el" is a library extracted from Circe package.  It requires
     ;; "shorten.el".
     `(#:include '("^shorten.el$" "^tracking.el$")
       ,@(package-arguments emacs-circe)))
    (home-page "https://github.com/jorgenschaefer/circe/wiki/Tracking")
    (synopsis "Buffer tracking library")
    (description "@code{tracking.el} provides a way for different modes to
notify the user that a buffer needs attention.  The user then can cycle
through them using @key{C-c C-SPC}.")
    (license license:gpl3+)))

(define-public emacs-slack
  (let ((commit "d81c18a90cec42bea58c74e902cfad27900f8de6")
        (revision "11"))
    (package
      (name "emacs-slack")
      (version (git-version "0.0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/yuya373/emacs-slack")
                      (commit commit)))
                (file-name (git-file-name name commit))
                (sha256
                 (base32
                  "0qmviqv67qzfl7w8sdl3l0ds6g7fhz58vx41d2mjm6ny0qd6ksq5"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           ;; HOME needs to exist for source compilation.
           (add-before 'build 'set-HOME
             (lambda _ (setenv "HOME" "/tmp") #t)))))
      (propagated-inputs
       (list emacs-alert
             emacs-emojify
             emacs-helm
             emacs-request
             emacs-s
             emacs-ts
             emacs-websocket
             emacs-oauth2
             emacs-circe))
      (home-page "https://github.com/yuya373/emacs-slack")
      (synopsis "Slack client for Emacs")
      (description "This package provides an Emacs client for the Slack
messaging service.")
      (license license:gpl3+))))

(define-public emacs-helm-slack
  (let ((commit "465f6220f3f5bee4d95492991fca1290c89534eb")
        (revision "1"))
    (package
      (name "emacs-helm-slack")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/yuya373/helm-slack")
                      (commit commit)))
                (file-name (git-file-name name commit))
                (sha256
                 (base32
                  "0p1s1kl8v68qjprqkf034cz911qzbqxbscqgpn0c3mbm3yfx81f7"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           ;; HOME needs to exist for source compilation.
           (add-before 'build 'set-HOME
             (lambda _ (setenv "HOME" "/tmp") #t)))))
      (propagated-inputs (list emacs-slack))
      (home-page "https://github.com/yuya373/helm-slack")
      (synopsis "Helm extension for emacs-slack")
      (description "This package provides an helm extension for emacs-slack
Slack client.")
      (license license:gpl3+))))

(define-public emacs-bash-completion
  (let ((commit "d32863dde8d35a44d8b88930d50d3979ea22788e")
        (revision "0"))
    (package
      (name "emacs-bash-completion")
      (version (git-version "3.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/szermatt/emacs-bash-completion")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "176hkx0m57464jwjv6iladv22mr2i5q896a9hbb3dj54ym6clrg5"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'install 'configure
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "bash-completion.el"
                  ("bash-completion-prog"
                   (search-input-file inputs "/bin/bash"))))))))
      (inputs (list bash))
      (home-page "https://github.com/szermatt/emacs-bash-completion")
      (synopsis "Bash completion for the shell buffer")
      (description
       "Bash Completion defines dynamic completion hooks for Shell mode and
@code{shell-command} prompts that are based on Bash completion.")
      (license license:gpl2+))))

(define-public emacs-easy-kill
  (package
    (name "emacs-easy-kill")
    (version "0.9.5")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/easy-kill-"
                                  version ".tar"))
              (sha256
               (base32
                "0h8rzd23sgkj3vxnyhis9iyq8n3xqp9x1mvxlm61s6wwj9j398j6"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/leoliu/easy-kill")
    (synopsis "Kill and mark things easily in Emacs")
    (description
     "This package provides commands @code{easy-kill} and @code{easy-mark} to
let users kill or mark things easily.")
    (license license:gpl3+)))

(define-public emacs-csv-mode
  (package
    (name "emacs-csv-mode")
    (version "1.27")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "csv-mode-" version ".tar"))
       (sha256
        (base32 "0jxf4id5c9696nh666x0xbzqx3vskyv810km61y9nkg7sp4ln2qf"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/csv-mode.html")
    (synopsis "Major mode for editing comma/char separated values")
    (description
     "This Emacs package implements CSV mode, a major mode for editing records
in a generalized CSV (character-separated values) format.")
    (license license:gpl3+)))

(define-public emacs-transmission
  (package
    (name "emacs-transmission")
    (version "0.12.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/holomorph/transmission")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "16bn8y2sd7kzihp8bxh4vyay16y91q3yc0gcd0bzywcx3hijqlfc"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/holomorph/transmission")
    (synopsis "Emacs interface to a Transmission session")
    (description "This package provides an Emacs interface to interact with a
running session of the Transmission Bittorrent client.

Features:

@itemize
@item List, add, start/stop, verify, remove torrents.
@item Set speed limits, ratio limits, bandwidth priorities, trackers.
@item Navigate to the corresponding file list, torrent info, peer info
contexts.
@item Toggle downloading and set priorities for individual files.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-polymode
  (package
    (name "emacs-polymode")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/polymode/polymode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18ssl2h861dm2jkd3df6wkfr48p8zk337dbvpq5522kia7fq1lbn"))
       (patches
        ;; XXX: Cherry-picked from upstream, remove when bumping to 0.2.3.
        (search-patches "emacs-polymode-fix-lexical-variable-error.patch"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'patch-tests
            (lambda _
              (substitute* "tests/define-tests.el"
                (("\\(ert-deftest define/hooks-run-in-indirect-buffers \\(\\)"
                  all)
                 (string-append all "(skip-unless nil)"))))))))
    (home-page "https://github.com/polymode/polymode")
    (synopsis "Framework for multiple Emacs modes based on indirect buffers")
    (description
     "Polymode is an Emacs package that offers generic support for multiple
major modes inside a single Emacs buffer.  It is lightweight, object oriented
and highly extensible.  Creating a new polymode typically takes only a few
lines of code.  Polymode also provides extensible facilities for external
literate programming tools for exporting, weaving and tangling.")
    (license license:gpl3+)))

(define-public emacs-ansible
  (package
    (name "emacs-ansible")
    (version "0.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/emacs-ansible/emacs-ansible")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0b5rrkxygxhnixbwhv5gsz3d216l2j6ljbvipdyysmvzv4fxmgwj"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page "https://gitlab.com/emacs-ansible/emacs-ansible")
    (synopsis "Emacs minor mode for Ansible files")
    (description
     "This is an Emacs minor mode for editing Ansible files.")
    (license license:gpl2+)))

(define-public emacs-ansible-doc
  (let ((commit "648c844ab46f56c2c7ee25687ad2952a5d5eb4c7")
        (revision "2")
        (version "0.4"))
    (package
      (name "emacs-ansible-doc")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/fredericgiquel/ansible-doc")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "02xnkgsrq54bpk26z9cs352r5rq0scmzw2czlq2pyq1332g6lycd"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "ert-runner" ".")))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/fredericgiquel/ansible-doc")
      (synopsis "Ansible documentation for Emacs")
      (description
       "This package provides an Ansible documentation for GNU Emacs.

@code{ansible-doc} allows you to view the documentation of an Ansible
module and @code{ansible-doc-mode} minor mode adds documentation
lookup to YAML Mode.  You could enable the mode with @code{(add-hook
'yaml-mode-hook #'ansible-doc-mode)}.")
      (license license:gpl3+))))

(define-public emacs-polymode-ansible
  (package
    (name "emacs-polymode-ansible")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/mavit/poly-ansible")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17c0c2gsxw892hq1acxsvl3i1cgpwfkk76hszcr9ydw566478972"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./lisp" ".*\\.el$")))
                (for-each (lambda (f) (copy-file f (basename f)))
                          el-files))))
          ;; Autoloads file include a reference to "systemd-autoload-regexp".
          ;; Require `systemd' to load its definition and let
          ;; `validate-compiled-autoloads' phase run peacefully.
          (add-after 'make-autoloads 'require-systemd-mode
            (lambda _
              (substitute* "polymode-ansible-autoloads.el"
                ((";;; Code:" lead)
                 (string-append lead "\n(require 'systemd)"))))))))
    (propagated-inputs
     (list emacs-ansible
           emacs-ansible-doc
           emacs-jinja2-mode
           emacs-polymode
           emacs-systemd-mode
           emacs-yaml-mode))
    (properties '((upstream-name . "poly-ansible")))
    (home-page "https://gitlab.com/mavit/poly-ansible/")
    (synopsis "Polymode for Ansible - Jinja2 in YAML")
    (description
     "Edit YAML files for Ansible containing embedded Jinja2 templating.")
    (license license:gpl3+)))

(define-public emacs-polymode-markdown
  (package
    (name "emacs-polymode-markdown")
    (version "0.2.2")
    (home-page "https://github.com/polymode/poly-markdown")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1q4qq0ql08hxkdrd2aal03560k612my7bvnfpfij3g432hn0p7v6"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; XXX: FIXME Multiple failing tests.
           #:test-command #~(list "make" "test")))
    (propagated-inputs
     (list emacs-markdown-mode emacs-polymode))
    (properties '((upstream-name . "poly-markdown")))
    (synopsis "Polymode for Markdown mode")
    (description
     "This package allows editing source code blocks embedded in Markdown
files using the major mode corresponding to each block.")
    (license license:gpl3+)))

(define-public emacs-poly-noweb
  (package
    (name "emacs-poly-noweb")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/polymode/poly-noweb")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jl5h4nf10xd2gdlsxi6h2n3z5zh26ffcixn68xfp5q4zl34zk8p"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; XXX: FIXME Multiple failing tests.
           #:test-command #~(list "make" "test")))
    (propagated-inputs
     (list emacs-polymode))
    (home-page "https://github.com/polymode/poly-noweb")
    (synopsis "Polymode for noweb")
    (description
     "This package provides @code{poly-noweb-mode}, a polymode for noweb
files.")
    (license license:gpl3+)))

(define-public emacs-powershell
  ;; Tagged branch 0.1 is outdated (2015).
  (let ((revision "0")
        (commit "d1b3f95669343399f199f291ef76c09a0ede5e60"))
    (package
      (name "emacs-powershell")
      (build-system emacs-build-system)
      (version (git-version "0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jschaf/powershell.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1cxhzaaig88zhylyycvb3849r85j1ijqklnh9zbqsfl2zhpb0g5c"))))
      (home-page "https://github.com/jschaf/powershell.el")
      (synopsis "Emacs mode for editing PowerShell scripts")
      (description
       "Powershell is an Emacs major mode for editing and running
Microsoft PowerShell files.")
      (license license:gpl3+))))

(define-public emacs-polymode-org
  (package
    (name "emacs-polymode-org")
    (version "0.2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/polymode/poly-org")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1srnwcsn2bh8gqzxixkhffk7gbnk66kd4dgvxbnps5nxqc6v0qhc"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'patch-tests
            (lambda _
              (substitute* "tests/poly-org-tests.el"
                (("\\(ert-deftest poly-org/change-spans \\(\\)"
                  all)
                 (string-append all "(skip-unless nil)"))))))))
    (propagated-inputs
     (list emacs-polymode))
    (properties '((upstream-name . "poly-org")))
    (home-page "https://github.com/polymode/poly-org")
    (synopsis "Polymode definitions for Org mode buffers")
    (description
     "This package provides definitions for Polymode to support Org buffers.
It edits source blocks in an Org buffer using the native modes of the blocks'
languages while remaining inside the primary Org buffer.")
    (license license:gpl3+)))

(define-public eless
  (package
    (name "eless")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kaushalmodi/eless")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "01gpzg35v972ik4bimcyhqabjca6sjj41kw2i15xj1k33p4sjqpf"))))
    (build-system copy-build-system)
    (inputs
     (list bash emacs))
    (arguments
     `(#:install-plan
       '(("eless" "bin/")
         ("docs/eless.info" "share/info/")
         ("eless.org" ,(string-append "share/doc/eless-" version "/")))))
    (home-page "https://github.com/kaushalmodi/eless")
    (synopsis "Use Emacs as a paginator")
    (description "@code{eless} provides a combination of Bash script
and a minimal Emacs view-mode.

Features:

@itemize
@item Independent of a user’s Emacs config.
@item Customizable via the @code{(locate-user-emacs-file \"elesscfg\")} config.
@item Not require an Emacs server to be already running.
@item Syntax highlighting.
@item Org-mode file rendering.
@item @code{man} page viewer.
@item Info viewer.
@item Dired, wdired, (batch edit symbolic links).
@item Colored diffs, git diff, git log, ls with auto ANSI detection.
@item Filter log files lines matching a regexp.
@item Auto-revert log files similar to @code{tail -f}.
@item Quickly change frame and font sizes.
@end itemize\n")
    (license license:expat)))

(define-public emacs-evil-matchit
  (package
    (name "emacs-evil-matchit")
    (version "4.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/evil-matchit")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "06ayyw8nim5fi819hr30x54wx2ba6aqvlh7r0vld06xc0zsjdhm3"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-after 'unpack 'patch-Makefile
                           (lambda _
                             (substitute* "Makefile"
                               (("-Q ") "")
                               (("-L deps/.*") "")
                               (("-l deps/.*") "")
                               ((" compile") "")
                               ((" deps") "")))))))
    (propagated-inputs
     (list emacs-evil))
    (native-inputs (list emacs-lua-mode
                         emacs-markdown-mode
                         emacs-tuareg
                         emacs-yaml-mode))
    (home-page "https://github.com/redguardtoo/evil-matchit")
    (synopsis "Vim matchit ported into Emacs")
    (description
     "@code{evil-matchit} is a minor mode for jumping between matching tags in
evil mode using @kbd{%}.  It is a port of @code{matchit} for Vim.")
    (license license:gpl3+)))

(define-public emacs-evil-smartparens
  (package
    (name "emacs-evil-smartparens")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/expez/evil-smartparens")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1di4qz5fbrlwbg16c2j0m7y8zqfxw027qd7zqmc3rwk9znbhg7wl"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f        ; XXX: 39/41 test failures
                     #:test-command
                     #~(list "emacs" "--batch" "-L" "."
                             "-L" "tests/evil-tests"
                             "-l" "tests/evil-smartparens-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-evil emacs-smartparens))
    (native-inputs (list emacs-evil-surround))
    (home-page "https://github.com/expez/evil-smartparens")
    (synopsis "Emacs Evil integration for Smartparens")
    (description "@code{emacs-evil-smartparens} is an Emacs minor mode which
makes Evil play nice with Smartparens.  Evil is an Emacs minor mode that
emulates Vim features and provides Vim-like key bindings.")
    (license license:gpl3+)))

(define-public emacs-evil-quickscope
  (package
    (name "emacs-evil-quickscope")
    (version "0.1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/blorbx/evil-quickscope")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ja9ggj70wf0nmma4xnc1zdzg2crq9h1cv3cj7cgwjmllflgkfq7"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-evil))
    (arguments
     (list
      #:test-command #~'("emacs" "--batch"
                         "-l" "evil-quickscope-tests.el"
                         "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'disable-failing-tests
            (lambda _
              (let-syntax
                  ((disable-tests
                    (syntax-rules ()
                      ((_ file ())
                       (syntax-error "test names list must not be empty"))
                      ((_ file (test-name ...))
                       (substitute* file
                         (((string-append "^\\(ert-deftest " test-name ".*")
                           all)
                          (string-append all "(skip-unless nil)\n")) ...)))))
                (disable-tests
                 "evil-quickscope-tests.el"
                 ("evil-quickscope-update-overlays-directional-test"))))))))
    (home-page "https://github.com/blorbx/evil-quickscope")
    (synopsis "Target highlighting for emacs evil-mode f,F,t and T commands")
    (description "@code{emacs-evil-quickscope} highlights targets for Evil
mode’s f,F,t,T keys, allowing for quick navigation within a line.  It is a
port of quick-scope for Vim.  Evil is an Emacs minor mode that emulates Vim
features and provides Vim-like key bindings.")
    (license license:gpl3+)))

(define-public emacs-bongo
  (package
    (name "emacs-bongo")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dbrock/bongo")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nszph9mn98flyhn1jq3y6mdh6jymjkvj5ng36ql016dj92apvhv"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/dbrock/bongo")
    (synopsis "Media player for Emacs")
    (description
     "This package provides a flexible media player for Emacs.  @code{Bongo}
supports multiple backends such as @code{vlc}, @code{mpg123},
@code{ogg123}, @code{speexdec}, @code{timidity}, @code{mikmod} and
@code{afplay}.")
    (license license:gpl2+)))

(define-public emacs-groovy-modes
  (package
    (name "emacs-groovy-modes")
    (version "2.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Groovy-Emacs-Modes\
/groovy-emacs-modes")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1jpfyqnqd8nj0g8xbiw4ar2qzxx3pvhwibr6hdzhyy9mmc4yzdgk"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner emacs-undercover emacs-shut-up emacs-f))
    (propagated-inputs
     (list emacs-dash emacs-s))
    (home-page "https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes")
    (synopsis "Groovy related modes for Emacs")
    (description "This package provides @code{groovy-mode} for syntax
highlighting in Groovy source files, REPL integration with run-groovy and
Grails project navigation with the grails mode.")
    (license license:gpl3+)))

(define-public emacs-jenkinsfile-mode
  (let ((commit "65bf3925852c35c6bd499978f08f83c1193f4347")
        (revision "1"))
    (package
      (name "emacs-jenkinsfile-mode")
      (version (git-version "0.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/john2x/jenkinsfile-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0w38g88yykslg71xr99ff4vx1ffgy90b7xqvvdflr189gwk3avx1"))))
      (propagated-inputs
       (list emacs-groovy-modes))
      (build-system emacs-build-system)
      (home-page "https://github.com/john2x/jenkinsfile-mode/")
      (synopsis "Emacs major-mode for editing Jenkinsfile")
      (description "This package provides a @code{jenkinsfile-mode} derived
from @code{groovy-mode} for editing Jenkins declarative pipeline files.")
      (license license:gpl3+))))

(define-public emacs-kotlin-mode
  (let ((commit "0e4bafb31d1fc2a0a420a521c2723d5526646c0b")
        (revision "1"))
    (package
      (name "emacs-kotlin-mode")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "09inpgwmnnqaakyn4r4xs8kax8b89dw94kvl521x6d43h9zl5i70"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("ert-runner" "-L" "." "-L" "test")))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode")
      (synopsis "Major major-mode for editing Kotlin files")
      (description
       "This package provides a @code{kotlin-mode} for editing Kotlin files.")
      (license license:gpl3+))))

(define-public emacs-org-tree-slide
  (let ((commit "e2599a106a26ce5511095e23df4ea04be6687a8a")
        (revision "0"))
    (package
      (name "emacs-org-tree-slide")
      (version (git-version "2.8.22" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/takaxp/org-tree-slide")
                      (commit commit)))
                (sha256
                 (base32
                  "0i1mzgq178sl6x2wf7k0ad57dy1d34wbk2k99fiyvv70rfbj2yy2"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/takaxp/org-tree-slide")
      (synopsis "Presentation tool for Org mode")
      (description
       "Org Tree Slide is a minor mode for using an Org document in
presentations by progressively revealing individual subtrees of the
document.")
      (license license:gpl3+))))

(define-public emacs-org-sticky-header
  (package
    (name "emacs-org-sticky-header")
    (version "1.1")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://github.com/alphapapa/org-sticky-header/archive/"
                                  version ".tar.gz"))
              (sha256
               (base32
                "1lr7khrs3d4229h5mmxbwc2jp192m2b9gfl85s3bhzbp6jpjf17y"))))
    (build-system emacs-build-system)
    (synopsis "Always show current org header line")
    (description "This package provides the ability to always show the current
org header line at the top of the window--no matter how far down you scrolled.")
    (home-page "https://github.com/alphapapa/org-sticky-header")
    (license license:gpl3+)))

(define-public emacs-scratch
  (package
    (name "emacs-scratch")
    (version "1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/emacs-weirdware/scratch")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "174d8ancnkgb7q62196kd6nrfib6rnwxw4visgbk1c6yd1w8kray"))))
    (build-system emacs-build-system)
    (native-inputs (list texinfo))
    (arguments
     (list
      #:tests? #f ;No tests.
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-doc
            (lambda _
              (unless (invoke "makeinfo" "scratch.texi")
                (error "makeinfo failed"))
              (install-file "scratch.info"
                            (string-append #$output "/share/info")))))))
    (home-page "https://codeberg.org/emacs-weirdware/scratch")
    (synopsis "Create scratch buffers with the same mode as current buffer")
    (description
     "Scratch is an extension to Emacs that enables one to create scratch
buffers that are in the same mode as the current buffer.  This is notably
useful when working on code in some language; you may grab code into a scratch
buffer, and, by virtue of this extension, do so using the Emacs formatting
rules for that language.")
    (license license:bsd-2)))

(define-deprecated-package emacs-scratch-el
  emacs-scratch)

(define-public emacs-kv
  (package
    (name "emacs-kv")
    (version "0.0.19")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nicferrier/emacs-kv")
             (commit "721148475bce38a70e0b678ba8aa923652e8900e")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0r0lz2s6gvy04fwnafai668jsf4546h4k6zd6isx5wpk0n33pj5m"))
       (patches
        (search-patches "emacs-kv-fix-tests.patch"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("emacs" "--batch" "-l" "kv-tests.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/nicferrier/emacs-kv")
    (synopsis "Key/Value data structures library for Emacs Lisp")
    (description "@code{emacs-kv} is a collection of tools for dealing with
key/value data structures such as plists, alists and hash-tables in Emacs
Lisp.")
    (license license:gpl3+)))

(define-public emacs-esxml
  (package
    (name "emacs-esxml")
    (version "0.3.8")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/tali713/esxml")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1yqwx53yzn2izhdzchm3cp8qcln2j0n015xlyg3c020q08sai1ha"))))
    (build-system emacs-build-system)
    (arguments
     `(#:emacs ,emacs                   ;need libxml
       ;; XXX: Only the two following files are meant to be packaged.
       ;; Byte-compiling the others Elisp files leads to build errors anyway.
       #:include (list "esxml.el" "esxml-query.el")))
    (propagated-inputs
     (list emacs-kv))
    (home-page "https://github.com/tali713/esxml/")
    (synopsis "SXML for EmacsLisp")
    (description "This is XML/XHTML done with S-Expressions in EmacsLisp.
Simply, this is the easiest way to write HTML or XML in Lisp.  This library
uses the native form of XML representation as used by many libraries already
included within Emacs.  See @code{esxml-to-xml} for a concise description of
the format.")
    (license license:gpl3+)))

(define-public emacs-nov-el
  (package
    (name "emacs-nov-el")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://depp.brause.cc/nov.el.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1s1ar3c9819mzalybp0pi6pzzwwnihal7pjyin2804h1gbappli8"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; no actual tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'embed-path-to-unzip
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "nov.el"
                ("nov-unzip-program" (search-input-file inputs "/bin/unzip"))))))))
    (propagated-inputs (list emacs-esxml))
    (inputs (list unzip))
    (home-page "https://depp.brause.cc/nov.el/")
    (synopsis "Major mode for reading EPUBs in Emacs")
    (description
     "@code{nov.el} provides a major mode for reading EPUB documents.")
    (license license:gpl3+)))

(define-public epipe
  (package
    (name "epipe")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cute-jumper/epipe")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lkisi1s7sn12nx8zh58qmsxwnk1rjwryj18wcbr148xqz3swg57"))))
    (build-system trivial-build-system)
    (arguments
     `(#:modules
       ((guix build utils))
       #:builder
       (begin
         (use-modules (guix build utils))
         ;; Extract source.
         (copy-recursively (assoc-ref %build-inputs "source") "source")
         (chdir "source")
         ;; Patch shebangs.
         (substitute* "epipe"
           (("/usr/bin/env bash")
            (search-input-file %build-inputs "/bin/bash")))
         (patch-shebang "epipe.pl"
                        (list (string-append (assoc-ref %build-inputs "perl")
                                             "/bin")))
         ;; Install.
         (for-each (lambda (file)
                     (install-file file (string-append %output "/bin")))
                   '("epipe" "epipe.pl")))))
    (inputs
     (list bash perl))
    (home-page "https://github.com/cute-jumper/epipe")
    (synopsis "Pipe to the @code{emacsclient}")
    (description "@code{epipe} provides an utility to use your editor in
the pipeline, featuring the support for running @code{emacsclient}.")
    (license license:gpl3+)))

(define-public emacs-jupyter
  (let ((commit "db8a9e233a010a61063f34220821ec76157a2d84")
        (revision "2"))
    (package
      (name "emacs-jupyter")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nnicandro/emacs-jupyter")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0gjxi84d95sx5fw8q2a8szfhq6kb4xzwq0xr9a3pirkiga9hxymz"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;tests require a working jupyter
      (propagated-inputs
       (list emacs-company              ;optional
             emacs-markdown-mode        ;optional
             emacs-simple-httpd
             emacs-websocket
             emacs-zmq))
      (home-page "https://github.com/nnicandro/emacs-jupyter")
      (synopsis "Emacs interface to communicate with Jupyter kernels")
      (description "This package provides an Emacs interface to communicate with
Jupyter kernels.  It provides REPL and Org mode source code block frontends to
Jupyter kernels and kernel interactions integrated with Emacs' built-in
features.")
      (license license:gpl3+))))

(define-public emacs-hcl-mode
  (package
    (name "emacs-hcl-mode")
    (version "0.03")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-hcl-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jqrgq15jz6pvx38pnwkizzfiih0d3nxqphyrc92nqpcyimg8b6g"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-l" "test/test-helper.el"
                             "-l" "test/test-indentation.el"
                             "-l" "test/test-command.el"
                             "-l" "test/test-highlighting.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/syohex/emacs-hcl-mode")
    (synopsis "Major mode for the Hashicorp Configuration Language")
    (description
     "@code{emacs-hcl-mode} provides an Emacs major mode for working with
@acronym{HCL, Hashicorp Configuration Language}.  It provides syntax
highlighting and indentation support.")
    (license license:gpl3+)))

(define-public emacs-terraform-mode
  (package
    (name "emacs-terraform-mode")
    (version "1.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hcl-emacs/terraform-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15xgjyl864crx3vpalds68x0vn1qzibkqdcjlbp87xiq88dx2q1x"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "--batch"
                                  "-l" "test/test-helper.el"
                                  "-l" "test/test-highlighting.el"
                                  "-l" "test/test-indentation.el"
                                  "-l" "test/test-command.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-dash emacs-hcl-mode))
    (home-page "https://github.com/hcl-emacs/terraform-mode")
    (synopsis "Major mode for Terraform")
    (description
     "@code{emacs-terraform-mode} provides a major mode for working with
@uref{https://www.terraform.io/, Terraform} configuration files.  Most of the
functionality is inherited from @code{hcl-mode}.")
    (license license:gpl3+)))

(define-public emacs-exec-path-from-shell
  (package
    (name "emacs-exec-path-from-shell")
    (version "2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/exec-path-from-shell")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "15cjwvfv5xdhbym4ms71zdkng4381d3hsdk3kvvx2kycxff52rih"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/purcell/exec-path-from-shell")
    (synopsis "Get environment variables such as @env{PATH} from the shell")
    (description
     "This library allows the user to set Emacs @code{exec-path} and @env{PATH}
from the shell's @env{PATH}, so that @code{shell-command}, @code{compile} and
the like work as expected on systems on which Emacs is not guaranteed to
inherit a login shell's environment variables.  It also allows other
environment variables to be retrieved from the shell, so that Emacs will see
the same values you get in a terminal.")
    (license license:gpl3+)))

(define-public emacs-frog-menu
  (package
    (name "emacs-frog-menu")
    (version "0.2.11")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "frog-menu-" version ".el"))
       (sha256
        (base32 "06iw11z61fd0g4w3562k3smcmzaq3nivvvc6gzm8y8k5pcrqzdff"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-avy emacs-posframe))
    (home-page "https://github.com/clemera/frog-menu")
    (synopsis "Quickly pick items from ad hoc menus")
    (description
     "This package provides a popup offering a preview of a list of candidates
on which user-defined dispatch actions can act.")
    (license license:gpl3+)))

(define-public emacs-frog-jump-buffer
  (let ((commit "2d7b342785ae27d45f5d252272df6eb773c78e20")
        (revision "1"))
    (package
      (name "emacs-frog-jump-buffer")
      (version (git-version "0.1.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/waymondo/frog-jump-buffer")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1z00by8hiss1r2lwmzrl8pnz6jykia2849dqqm4l3z5rf6lwvc0f"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-frog-menu emacs-avy))
      (home-page "https://github.com/waymondo/frog-jump-buffer")
      (synopsis "Jump to any Emacs buffer with minimal keystrokes")
      (description
       "This package provides a preview window of buffers that can be switched
to with quicklink-style selections.")
      (license license:gpl3+))))

(define-public emacs-deft
  (package
    (name "emacs-deft")
    (version "0.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jrblevin/deft")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0z7cilgiz6krvl5h2z72hkch43qxmypb0k6p5vxn5lx1p6v0mrf2"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://jblevins.org/projects/deft/")
    (synopsis "Quickly browse, filter, and edit plain text notes")
    (description
     "Deft is an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes, inspired by Notational Velocity.")
    (license license:bsd-3)))

(define-public emacs-anzu
  (package
    (name "emacs-anzu")
    (version "0.67")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-anzu")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jnqzywzqq8jzvqaiba5szmj9zbxx9kvdmnaldwgldi8yyiy7il4"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/syohex/emacs-anzu")
    (synopsis "Show number of matches in mode-line while searching")
    (description
     "Anzu provides a minor mode which displays \"current match/total
matches\" in the mode line in various search modes.  This is an Emacs port of
Anzu.zim.")
    (license license:gpl3+)))

(define-public emacs-ascii-art-to-unicode
  (package
    (name "emacs-ascii-art-to-unicode")
    (version "1.13")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/ascii-art-to-unicode-"
                           version ".el"))
       (sha256
        (base32 "1c0jva3amhl9c5xc5yzdpi58c8m1djym4ccj31z6wmakq7npy07p"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/ascii-art-to-unicode.html")
    (synopsis "ASCII to Unicode art converter for Emacs")
    (description "This Emacs package provides the commands @command{aa2u} and
@command{aa2u-rectangle}.  Both of these commands can be used to convert
simple ASCII art line drawings to Unicode; the former works on the active
region of the buffer, while the latter works on rectangular selections.")
    (license license:gpl3+)))

(define-public emacs-emmet-mode
  (let ((commit "322d3bb112fced57d63b44863357f7a0b7eee1e3")
        (revision "2"))
    (package
      (name "emacs-emmet-mode")
      (version (git-version "1.0.8" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/smihica/emmet-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1y41iqlybfls1rsagi9g1s879vw020r252j8m9jc89lsp5vkhawk"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command
                       #~(list "emacs" "-Q" "--script" "src/test.el")))
      (home-page "https://github.com/smihica/emmet-mode")
      (synopsis "Unofficial Emmet's support for Emacs")
      (description
       "Unfold CSS-selector-like expressions to markup.  It is intended to be
used with SGML-like languages: XML, HTML, XHTML, XSL, etc.")
      (license license:gpl3+))))

(define-public emacs-ergoemacs-mode
  (package
    (name "emacs-ergoemacs-mode")
    (version "5.22.2.23")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ergoemacs/ergoemacs-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1ipwzl0l26g5qvc1sgmz2ra5vn1j3hl0mnkgzpa3j4p8gsmxdiqr"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons* "^kbd\\.svg$" "^kbd-ergo\\.svg$"
                              %default-include)
           #:tests? #f                  ; XXX: 2/15 failing tests
           #:test-command #~(list "make" "ert")))
    (propagated-inputs
     (list emacs-undo-tree))
    (home-page "https://ergoemacs.github.io/")
    (synopsis "Emacs mode based on common modern interface and ergonomics")
    (description
     "This package provides an efficient Emacs keybinding set based on
statistics of command frequency, and supports common shortcuts for open,
close, copy, cut, paste, undo, redo.")
    (license license:gpl3+)))

(define-public emacs-password-store
  (package
    (name "emacs-password-store")
    ;; The emacs package version does not match the password-store version,
    ;; even though it is part of the same repository.  When updating, look at
    ;; the version declared in password-store.el.
    (version "2.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.zx2c4.com/password-store")
             (commit "b5e965a838bb68c1227caa2cdd874ba496f10149")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0hb5zm7hdp7vmqk39a9s1iyncx4swmwfq30dnnzkjk2y08lnb7ac"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'extract-el-file
            (lambda _
              (copy-file "contrib/emacs/password-store.el"
                         "password-store.el")
              (for-each delete-file-recursively
                        '("contrib" "man" "src" "tests"))))
          (add-after 'extract-el-file 'patch-executables
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "password-store.el"
                ("password-store-executable"
                 (search-input-file inputs "/bin/pass"))))))))
    (inputs
     (list password-store))
    (propagated-inputs
     (list emacs-with-editor))
    (home-page "https://git.zx2c4.com/password-store/tree/contrib/emacs")
    (synopsis "Password store (pass) support for Emacs")
    (description
     "This package provides functions for working with pass (\"the
    standard Unix password manager\").")
    (license license:gpl3+)))

(define-public emacs-password-store-otp
  (package
    (name "emacs-password-store-otp")
    (version "0.1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/volrath/password-store-otp.el")
             (commit version)))
       (sha256
        (base32 "0gb48blvnn6ci2wl45z81p41ny7vbgl610hqy6b2hyr2171qjd60"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-password-store emacs-s))
    (home-page "https://github.com/volrath/password-store-otp.el")
    (synopsis
     "Interact with the @code{pass-otp} extension for @code{pass} from Emacs")
    (description "This package provides Emacs functions to interact with the
@code{pass-otp} extension for @code{pass}.  It includes functions to import
OTP URIs from screenshots of QR codes, and to export them back to QR codes if
needed.")
    (license license:gpl3+)))

(define-public emacs-auth-source-pass
  (let ((commit "847a1f54ed48856b4dfaaa184583ef2c84173edf")
        (revision "2"))
    (package
      (name "emacs-auth-source-pass")
      (version (git-version "5.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/DamienCassou/auth-password-store")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0g48z5w6n3c54zqfpx65dfyl9jqbl15idvbb1hhw2pd9f9r8fykk"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("emacs" "--batch"
                          "-L" "."
                          "-l" "test/auth-source-pass-tests.el"
                          "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/DamienCassou/auth-password-store")
      (synopsis "Integrate @code{auth-source} with @code{password-store}")
      (description "This package helps Emacs integrate with the Unix
@code{password-store} application.")
      (license license:gpl3+))))

(define-public emacs-pass
  (package
    (name "emacs-pass")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/NicolasPetton/pass")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jc8j421mlflspg24jvrqc2n3y5n3cpk3hjy560il8g36xi1049p"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; Tests require a tty.
           #:test-command
           #~(apply list "emacs"
                    (append
                     (apply append
                            (map (lambda (file) (list "-l" file))
                                 (find-files "." "\\.el")))
                     (list "-f" "ert-run-tests-batch-and-exit")))))
    (propagated-inputs
     (list emacs-password-store emacs-f))
    (home-page "https://github.com/NicolasPetton/pass")
    (synopsis "Major mode for @file{password-store.el}")
    (description "This is a major mode for managing password-store (pass)
keychains.  The keychain entries are displayed in a directory-like structure
and can be consulted and modified.")
    (license license:gpl3+)))

(define-public emacs-passage
  (let ((commit "5f1ad815464b1e4ce7880b835f9e805a8b9b15a4")
        (revision "0"))
    (package
      (name "emacs-passage")
      (version (git-version "2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/anticomputer/passage.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "12sxaig36n3qrmnyq2znar74hgbgfh3sgghki4n7aq2bzxwfbn8h"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-age emacs-f emacs-s emacs-with-editor))
      (home-page "https://github.com/anticomputer/passage.el")
      (synopsis "Pass-Age Encryption support for Emacs")
      (description
       "This package provides transparent Age file encryption and decryption
in Emacs for Pass-Age, a port of Pass, the standard Unix password manager.")
      (license license:gpl3+))))

(define-public emacs-psc-ide
  ;; There is no proper release.  The base version is extracted from the
  ;; "Version" keyword in the main file.
  (let ((commit "ce97d719458ea099b40c02f05b6609601c727e66")
        (revision "2"))
    (package
      (name "emacs-psc-ide")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/purescript-emacs/psc-ide-emacs")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0xfw93pdf744h2yswc53qwyawfzkc31rv8dmha3irq7k1nklhq6y"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company emacs-dash emacs-flycheck emacs-let-alist
             emacs-s))
      (home-page "https://github.com/purescript-emacs/psc-ide-emacs")
      (synopsis "Emacs integration for PureScript's psc-ide tool")
      (description
       "This package provides Emacs integration for @code{psc-ide}, an IDE
protocol for PureScript programming language.  It features:

@itemize
@item Completions
@item Type at point
@item Go to definition
@item Automatic imports
@item Case split
@item Build system integration, and
@item Flycheck support
@end itemize")
      (license license:gpl3+))))

(define-public emacs-evil-anzu
  ;; No release since January 2015
  (let ((commit "d1e98ee6976437164627542909a25c6946497899")
        (revision "0"))
    (package
      (name "emacs-evil-anzu")
      (version (git-version "0.03" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/evil-anzu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1i8f360lq5a32knkzbwdw10ql9cxsmgfd4iiwnr7vcwacm34zq88"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil emacs-anzu))
      (home-page "https://github.com/emacsorphanage/evil-anzu")
      (synopsis "Anzu for evil-mode")
      (description
       "@code{anzu} provides a minor mode that displays the current
match and total match information in the mode-line in various search modes.")
      (license license:gpl3+))))

(define-public emacs-pg
  (package
    (name "emacs-pg")
    (version "0.60")
    (source (origin
              (method git-fetch)
              (uri (git-reference (url "https://github.com/emarsden/pg-el")
                                  (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "143np0qsfk73zzbkpvyj89x135rf9x957yl1wn5psz1x9hp2m195"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-peg))
    (home-page "https://github.com/emarsden/pg-el")
    (synopsis "Emacs Lisp interface for PostgreSQL")
    (description
     "This module lets you access the PostgreSQL object-relational DBMS from
Emacs, using its socket-level frontend/backend protocol.  The module is
capable of automatic type coercions from a range of SQL types to the
equivalent Emacs Lisp type.  This is a low level API, and won't be useful to
end users.")
    (license license:gpl2+)))

(define-public emacs-pgmacs
  (package
    (name "emacs-pgmacs")
    (version "0.42")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/emarsden/pgmacs.git")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0pf8y64hka1fl47dphmh4xgxiwfsd0g4q2fazq5yc48zwr9nsf02"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-pg))
    (synopsis "PostgreSQL client in Emacs")
    (description "This package provides a PostgreSQL client in emacs.")
    (home-page "https://github.com/emarsden/pgmacs")
    (license license:gpl3+)))

(define-public emacs-finalize
  (package
  (name "emacs-finalize")
  (version "2.0.0")
  (source
    (origin
      (method git-fetch)
      (uri (git-reference
            (url "https://github.com/skeeto/elisp-finalize")
            (commit version)))
      (file-name (git-file-name name version))
      (sha256
        (base32 "1gvlm4i62af5jscwz0jccc8ra0grprxpg2rlq91d5nn8dn5lpy79"))))
  (build-system emacs-build-system)
  (arguments (list #:tests? #f))        ; missing tests
  (home-page "https://github.com/skeeto/elisp-finalize")
  (synopsis "Finalizers for Emacs Lisp")
  (description
    "This package runs a callback (a finalizer)
after its registered lisp object has been garbage collected.  This allows
extra resources, such as buffers and processes, to be cleaned up after the
object has been freed.")
  (license license:unlicense)))

(define-public emacs-firefox-javascript-repl
  (package
    (name "emacs-firefox-javascript-repl")
    (version "0.9.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/firefox-javascript-repl-" version
             ".tar"))
       (sha256
        (base32 "07qmp6hfzgljrl9gkwy673xk67b3bgxq4kkw2kzr8ma4a7lx7a8l"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/firefox-javascript-repl.html")
    (synopsis "Jack into Firefox")
    (description
     "This package provides a way to REPL into a new Firefox instance's
@code{JavaScript} engine.  A new throwaway Firefox profile directory is
created before each run, so you won't need to modify your existing profiles.
This mode takes care of starting the new Firefox process in debugging mode,
which may be tedious to do by hand.  This comint mode is barebones and
unstructured, meant for quick @code{JavaScript} experiments.")
    (license license:gpl3+)))

(define-public emacs-emacsql
  (package
    (name "emacs-emacsql")
    (version "4.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/emacsql")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0j2x6incalwfzwri3lisw5by78w3k2vfhmpdhclq5qzjw7bm126v"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'fix-executable-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "emacsql-psql.el"
                ("emacsql-psql-executable"
                 (search-input-file inputs "bin/psql")))
              (emacs-substitute-variables "emacsql-mysql.el"
                ("emacsql-mysql-executable"
                 (search-input-file inputs "/bin/mysql"))))))))
    (inputs (list mariadb postgresql))
    (native-inputs (list emacs-sqlite3-api))
    (home-page "https://github.com/magit/emacsql")
    (synopsis "Emacs high-level SQL database front-end")
    (description "Any readable Lisp value can be stored as a value in EmacSQL,
including numbers, strings, symbols, lists, vectors, and closures.  EmacSQL
has no concept of @code{TEXT} values; it's all just Lisp objects.  The Lisp
object @code{nil} corresponds 1:1 with @code{NULL} in the database.")
    (license license:unlicense)))

(define-public emacs-closql
  (package
    (name "emacs-closql")
    (version "2.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacscollective/closql")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0j2w719lv1zzwfanpqfa5lpgdvlnavb583ybipjxicki80x1g6jz"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat emacs-emacsql))
    (home-page "https://github.com/emacscollective/closql")
    (synopsis "Store EIEIO objects using EmacSQL")
    (description
     "This package stores uniform EIEIO objects in an EmacSQL
database.  SQLite is used as backend.  This library imposes some restrictions
on what kind of objects can be stored; it isn't intended to store arbitrary
objects.  All objects have to share a common superclass and subclasses cannot
add any additional instance slots.")
    (license license:gpl3)))

(define-public emacs-sql-indent
  (package
    (name "emacs-sql-indent")
    (version "1.7")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/sql-indent-" version
                           ".tar"))
       (sha256
        (base32 "043qcy97a5hx68w0ac7xsk380l2i7bphgrdz6aby2zfpp90vrjpn"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/alex-hhh/emacs-sql-indent")
    (synopsis "Support for indenting code in SQL files")
    (description
     "This package provides a minor mode that enables syntax-based indentation
for SQL mode buffers.  Indentation rules are flexible and can be customized to
match your personal coding style.")
    (license license:gpl3+)))

(define-public emacs-epkg
  (package
    (name "emacs-epkg")
    (version "4.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacscollective/epkg")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0j3abhk3vhbpx2m2hgsafij24a9f55kza9fcy54vh81rh3c15q97"))))
    (build-system emacs-build-system)
    (arguments
     `(#:lisp-directory "lisp"
       #:tests? #f                      ; no tests
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'make-info
           ;; Documentation is located in "docs/".
           (lambda* (#:key outputs #:allow-other-keys)
             (with-directory-excursion "../docs"
               (invoke "makeinfo" "-o" "epkg.info" "epkg.texi")
               (let ((info (string-append (assoc-ref outputs "out")
                                          "/share/info")))
                 (install-file "epkg.info" info))))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-closql emacs-dash emacs-llama))
    (home-page "https://emacsmirror.net")
    (synopsis "Browse the Emacsmirror package database")
    (description "This package provides access to a local copy of the
Emacsmirror package database.  It provides low-level functions for querying
the database and a @file{package.el} user interface for browsing the database.
Epkg itself is not a package manager.")
    (license license:gpl3+)))

(define-public emacs-elisp-slime-nav
  (package
    (name "emacs-elisp-slime-nav")
    (version "0.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/elisp-slime-nav")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "08k4zlawjkb0ldn4lgrhih8nzln398x7dwzpipqfyrmp0xziywma"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/elisp-slime-nav")
    (synopsis "Make @code{M-.} and @code{M-,} work for elisp like they do in SLIME")
    (description
     "This package provides SLIME's convenient @code{M-.}and @code{M-,} navigation
in @code{emacs-lisp-mode}, together with an elisp equivalent of
@code{slime-describe-symbol}.")
    (license license:gpl3+)))

(define-public emacs-dedicated
  (package
    (name "emacs-dedicated")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/dedicated")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pba9s0h37sxyqh733vi6k5raa4cs7aradipf3826inw36jcw414"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsorphanage/dedicated")
    (synopsis "Emacs minor mode for toggling a windows's \"dedicated\" flag")
    (description
     "This simple Emacs minor mode allows you to toggle a window's
\"dedicated\" flag.  When a window is \"dedicated\", Emacs will not select
files into that window.  This can be quite handy since many commands will use
another window to show results (compilation mode, starting info, and so on).
A dedicated window won't be used for such a purpose.  For details, please read
the source file.")
    (license license:gpl2+)))

(define-public emacs-nnreddit
  (let ((commit "9843f99d01fd8f1eea2fc685965a7c7f4eeb187a")
        (revision "1"))
    (package
      (name "emacs-nnreddit")
      (version (string-append "0.0.1-" revision "."
                              (string-take commit 7)))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/paul-issartel/nnreddit")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0j4h3bnga640250jdq8bwyja49r41ssrsjd6lba4gzzllqk02nbn"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/paul-issartel/nnreddit")
      (synopsis "Reddit backend for the Gnus newsreader")
      (description "@url{https://www.reddit.com} backend for the Gnus
newsreader.")
      (license license:gpl3+))))

(define-public emacs-makey
  (package
    (name "emacs-makey")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mickeynp/makey")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1rr7vpm3xxzcaam3m8xni3ajy8ycyljix07n2jzczayri9sd8csy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/mickeynp/makey")
    (synopsis "Emacs interactive command-line mode")
    (description
     "This package provides an Emacs interactive command-line mode.")
    (license license:gpl3+)))

(define-public emacs-outorg
  (let ((commit "78b0695121fb974bc4e971eb4ef7f8afd6d89d64"))
    (package
      (name "emacs-outorg")
      (version (git-version "2.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/outorg")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "03aclh4m3f7rb821gr9pwvnqkkl91px3qxdcarpf3ypa1x4fxvlj"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/alphapapa/outorg")
      (synopsis "Org-style comment editing")
      (description "Outorg is for editing comment-sections of source-code
files in temporary Org-mode buffers.  It turns conventional
literate-programming upside-down in that the default mode is the
programming-mode, and special action has to be taken to switch to the
text-mode (i.e. Org-mode).")
      (license license:gpl3+))))

(define-public emacs-outli
  (package
    (name "emacs-outli")
    (version "0.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jdtsmith/outli")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1is10arx057278vyfkpcl3pkxps1i6f7rf79pdx0crs7gj1m80km"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/jdtsmith/outli")
    (synopsis "Simple and stylish comment-based outliner for Emacs")
    (description "This package provides @code{outli-mode}, a minimal and elegant
outliner for Emacs that enhances @code{outline-minor-mode} with configurable
heading syntax, styled headings, and org-mode-inspired navigation and structure
editing.  It supports comment-based headers with customizable stems and repeat
characters, styled overlines and backgrounds, tab-based visibility toggling,
org-style speed keys for headline manipulation, and imenu integration for fast
navigation.")
    (license license:gpl3+)))

(define-public emacs-outshine
  (let ((commit "bf1eed10dd7a89b63d0fc014944033db397c1e23")
        (revision "1"))
    (package
      (name "emacs-outshine")
      (version (git-version "3.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/alphapapa/outshine")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "19ni7j84361if3kyap1jf2xj0w3myp9iiz52gjcmbgk1g1g9ycdc"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-outorg))
      (home-page "https://github.com/alphapapa/outshine")
      (synopsis "Emacs outline with outshine")
      (description "Outshine attempts to bring the look and feel of
@code{org-mode} to an Emacs outside of the Org major-mode.  It is an extension
of @code{outline-minor-mode} (@code{org-mode} itself derives from
outline-mode), so there is no such thing like an outshine mode, only
@code{outline-minor-mode} with outshine extensions loaded.")
      (license license:gpl2+))))

(define-public emacs-frecency
  (package
    (name "emacs-frecency")
    (version "1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/alphapapa/frecency.el")
                    (commit (string-append "v" version))))
              (sha256
               (base32
                "1n1ghl3jr4wmzc4f5xhkx5mfg3vfqs0kjzbra6k5drcnyh2iixkc"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-a emacs-dash))
    (home-page "https://github.com/alphapapa/frecency.el")
    (synopsis "Sort items by frequency and recency of access")
    (description "This package provides a way of sorting items via
a heuristic based on frequency and recency.")
    (license license:gpl3+)))

(define-public emacs-org-recent-headings
  (let ((commit "97418d581ea030f0718794e50b005e9bae44582e")
        (revision "0"))
    (package
      (name "emacs-org-recent-headings")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/org-recent-headings")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1y11rlnhi36lzhc1cagninv6hlcwbvj88xfr0g0xzpbzy7hys021"))
         ;; Contents of makem package, but no tests.
         (snippet #~(for-each delete-file '("makem.sh" "Makefile")))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'inject-makem
                   (lambda* (#:key inputs #:allow-other-keys)
                     (symlink (search-input-file inputs "/bin/makem.sh")
                              "makem.sh"))))))
      (native-inputs
       (list makem-minimal))
      (propagated-inputs
       (list emacs-dash emacs-frecency emacs-helm emacs-org emacs-s))
      (home-page "https://github.com/alphapapa/org-recent-headings")
      (synopsis "Navigate to recently used Org headings and lists")
      (description
       "This package maintains a list of recently used Org headings,
as well as functions for navigating between these headings.")
      (license license:gpl3+))))

(define-public emacs-org-recur
  (package
    (name "emacs-org-recur")
    (version "1.3.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/m-cat/org-recur")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0s2n62y3qc72ldzpaq2jz9335h532s566499n346nx21l4qsqdz6"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch" "-l" "org-recur-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/m-cat/org-recur")
    (synopsis "Simple recurring Org mode tasks")
    (description "This package extends Org mode and Org Agenda with support
for defining recurring tasks and easily scheduling them.")
    (license license:gpl3+)))

(define-public emacs-org-timeblock
  (let ((revision "0")
        (commit "b423b01712b9c25dff3e4203c7cde736225f62ef"))
    (package
      (name "emacs-org-timeblock")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/ichernyshovvv/org-timeblock")
           (commit commit)))
         (sha256
          (base32 "1q0271nli4yw01rwybkzdlqcj8ivqwh5r70yv9x0qqwxa955c9k9"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-compat))
      (home-page "https://github.com/ichernyshovvv/org-timeblock")
      (synopsis
       "Schedule your day visually, using timeblocking technique inside Emacs")
      (description "The builtin orgmode package for viewing tasks or events
for a particular day, org-agenda, does not help you to quickly understand,
where, for example, you have free time in your day or where you have
overlapping tasks.  Just a list of tasks is not sufficient.  This package is
created to fix this problem and provide some of the functionality that modern
calendars provide.")
      (license license:gpl3+))))

(define-public emacs-org-super-agenda
  (package
    (name "emacs-org-super-agenda")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/org-super-agenda")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "07fv4zgmfc8ppppbr7ylhx89wcw6r6vmz4a6pg0iy4v7sn5pp1wa"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "test/run" "--debug")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'prepare-for-tests.el
            (lambda _
              (make-file-writable "test/test.el")
              (emacs-substitute-variables "test/test.el"
                ("org-super-agenda-test-results-file"
                 (string-append (getcwd) "/test/results.el")))
              ;; The following tests fail.
              (substitute* "test/test.el"
                ;; TODO: Broken on emacs-org-super-agenda@1.3 and
                ;; emacs-org@9.7.4.  Verify when updating.
                ((".* org-super-agenda-test--auto-parent .*" all)
                 (string-append all "  (skip-unless nil)\n"))
                ;; Some tests are using an obsolete variable; fix its use.
                (("\\(org-super-agenda-retain-sorting ")
                 "(org-super-agenda-keep-order ")
                ;; however, they still fail ...
                ;; TODO: Broken on emacs-org-super-agenda@1.3 since before
                ;; emacs-org@9.7.4.  Verify when updating.
                ((".* org-super-agenda-test--with-retained-sorting .*" all)
                 (string-append all "  (skip-unless nil)\n"))
                ;; TODO: Broken on emacs-org-super-agenda@1.3 and
                ;; emacs-org@9.7.4.  Verify when updating.
                ((".* org-super-agenda-test--without-retained-sorting .*" all)
                 (string-append all "  (skip-unless nil)\n"))))))))
    (native-inputs
     (list emacs-f util-linux))
    (propagated-inputs
     (list emacs-dash emacs-ht emacs-org emacs-s emacs-ts))
    (home-page "https://github.com/alphapapa/org-super-agenda")
    (synopsis "Supercharged Org agenda")
    (description "This package allows items in the Org agenda to be grouped
into sections while preserving the structure imposed by any timestamps.")
    (license license:gpl3+)))

(define-public emacs-elegant-agenda-mode
  (let ((commit "c72f42e0f551c3dd81e68262f07a96c0ec90a589")
        (revision "1"))
    (package
      (name "emacs-elegant-agenda-mode")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/justinbarclay/elegant-agenda-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0f8qk3vd41ffbkfqw5nks3bld0qpjrlnk9sb46wcbsyfnrs2v082"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/justinbarclay/elegant-agenda-mode")
      (synopsis "Elegant theme for your org-agenda")
      (description
       "The elegant-agenda-mode package uses fonts and typography to give your
org-agenda some breathing room and elegance.  This package was inspired by the
work Nicolas Rougier.")
      (license license:gpl3+))))

(define-public emacs-org-make-toc
  (package
    (name "emacs-org-make-toc")
    (version "0.6")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/alphapapa/org-make-toc")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0b3ixh8cqp9id1q1h2l6pl05n7vzk7ffp3ms5kxg8bvbn1l3c77l"))
              (snippet #~(delete-file "makem.sh"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f                  ; tests exist but cannot be run…
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'inject-makem
                 (lambda* (#:key inputs #:allow-other-keys)
                   (symlink (search-input-file inputs "/bin/makem.sh")
                            "makem.sh"))))))
    (propagated-inputs
     (list emacs-compat emacs-dash emacs-org emacs-s))
    (native-inputs (list makem-minimal util-linux))
    (home-page "https://github.com/alphapapa/org-make-toc")
    (synopsis "Maintain a table of contents for an Org file")
    (description "This package facilitates the creation and maintenance of
tables of contents.")
    (license license:gpl3+)))

(define-public emacs-ts
  ;; XXX: Upstream did not tag last release.  Use commit matching version
  ;; bump.
  (let ((commit "552936017cfdec89f7fc20c254ae6b37c3f22c5b"))
    (package
      (name "emacs-ts")
      (version "0.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/ts.el")
               (commit commit)))
         (sha256
          (base32 "18lif159zndl19ddz9rfq12l90770858yasfns21ryl1yrq3aifr"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       ;; XXX: Three tests are failing because of a timezone-related issue
       ;; with how they're written.  On my machine, all the failing test
       ;; results are 18000 seconds (5 hours) off.

       ;; The ts-parse-org function accepts a string without any timezone
       ;; info, not assumed to be in Unix time, and converts it to a so-called
       ;; ts struct.  The ts-unix function (accessor) accepts a ts struct,
       ;; then seems to assume the struct's corresponding time is in terms of
       ;; the user's current time zone, before returning a Unix time in
       ;; seconds.

       ;; The failing tests all have similar problems, but nothing else about
       ;; the library seems particularly off.
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-l" "test/test.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'make-tests-writable
              (lambda _
                (make-file-writable "test/test.el")))
            (add-before 'check 'delete-failing-tests
              (lambda _
                (emacs-batch-edit-file "test/test.el"
                  `(progn
                    (goto-char (point-min))
                    (dolist (test-regexp
                             '("ert-deftest ts-fill"
                               "ert-deftest ts-format"
                               "ert-deftest ts-parse-org\\_>"
                               "ert-deftest ts-parse-org-element"))
                            (re-search-forward test-regexp)
                            (beginning-of-line)
                            (kill-sexp)
                            (goto-char (point-min)))
                    (basic-save-buffer))))))))
      (propagated-inputs
       (list emacs-dash emacs-s))
      (home-page "https://github.com/alphapapa/ts.el")
      (synopsis "Timestamp and date/time library")
      (description "This package facilitates manipulating dates, times, and
timestamps by providing a @code{ts} struct.")
      (license license:gpl3+))))

(define-public emacs-circadian
  (package
    (name "emacs-circadian")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/guidoschmidt/circadian.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0kxa8hky56xmg8szii23yai0w8zfh3ql7mazn9ff77aa8lx6mplm"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs" "-Q" "--batch"
              "-l" "test.el"
              "--eval" "(ert-run-tests-batch-and-exit test-order)")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'skip-failing-test
            ;; XXX: Skip known (to upstream) failing tests.
            (lambda _
              (substitute* "test.el"
                (("\\(ert-deftest test-circadian-sunrise-sunset .*" all)
                 (string-append all " (skip-unless nil)"))
                (("\\(ert-deftest test-circadian-setup-benchmark .*" all)
                 (string-append all " (skip-unless nil)"))))))))
    (native-inputs
     (list emacs-el-mock))
    (home-page "https://github.com/guidoschmidt/circadian.el")
    (synopsis "Theme-switching for Emacs based on daytime")
    (description "Circadian may reduce eye strain by automatically switching
between light and dark themes based on daytime.  It is inspired by color
temperature shifting tools and brightness adaption software.")
    ;; The LICENSE file is expat, but the sole ".el" file is explicitly GPL3+.
    (license (list license:gpl3+
                   license:expat))))

(define-public emacs-peg
  (package
    (name "emacs-peg")
    (version "1.0.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/peg-" version ".tar"))
       (sha256
        (base32 "0yxfwwwc6fck1p9smcm1dwnva42868xvavhy7j749vlxrgb3v94x"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/peg.html")
    (synopsis "Parsing Expression Grammars in Elisp")
    (description "This package provides a macro that parses the current buffer
according to a parsing expression grammar.")
    (license license:gpl3+)))

(define-public emacs-with-simulated-input
  (package
    (name "emacs-with-simulated-input")
    (version "3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DarwinAwardWinner/with-simulated-input")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0n8h84whsh0aph8xhn9plprix9f6bysgvarz2anz7kwns19js6s4"))))
    (build-system emacs-build-system)
    (arguments
     ;; The test suite fails with error: "Spies can only be created in
     ;; ‘before-each’".
     `(#:tests? #f
       #:test-command '("buttercup" "-L" ".")))
    (native-inputs
     (list emacs-buttercup emacs-undercover))
    (propagated-inputs
     (list emacs-s))
    (home-page "https://github.com/DarwinAwardWinner/with-simulated-input")
    (synopsis "Non-interactive testing Emacs library")
    (description "This package provides an Emacs Lisp macro,
@code{with-simulated-input}, which evaluates one or more forms while
simulating a sequence of input events for those forms to read.  The result is
the same as if a user had evaluated the forms and then manually typed in the
same input.  This macro is useful for non-interactive testing of normally
interactive commands and functions, such as @code{completing-read}.")
    (license license:gpl3+)))

(define-public emacs-org-ql
  (package
    (name "emacs-org-ql")
    (version "0.8.10")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/alphapapa/org-ql")
                    (commit (string-append "v" version))))
              (sha256
               (base32
                "043m90flbmmcaiv1n5lfw6pd5hr978r9kqbhy34rgyzm0k34sk72"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ;FIXME: check phase freezes
      #:test-command #~(list "buttercup" "-L" ".")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'remove-helm-org-ql
            (lambda _
              (delete-file "helm-org-ql.el"))))))
    (native-inputs
     (list emacs-buttercup emacs-with-simulated-input emacs-xr))
    (propagated-inputs
     (list emacs-compat
           emacs-dash
           emacs-f
           emacs-org
           emacs-org-super-agenda
           emacs-ov
           emacs-peg
           emacs-s
           emacs-ts))
    (home-page "https://github.com/alphapapa/org-ql/")
    (synopsis "Query language for Org buffers")
    (description "This package provides a Lispy query language for Org
files, allowing for actions to be performed based on search criteria.")
    (license license:gpl3+)))

(define-public emacs-helm-org-ql
  (package
    (inherit emacs-org-ql)
    (name "emacs-helm-org-ql")
    (arguments
     (list
      #:tests? #f                       ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'remove-emacs-org-ql
            (lambda _
              (install-file "helm-org-ql.el" "..")
              (let ((cwd (getcwd)))
                (with-directory-excursion ".."
                  (delete-file-recursively cwd)
                  (mkdir cwd)
                  (install-file "helm-org-ql.el" cwd))))))))
    (propagated-inputs
     (list emacs-dash
           emacs-helm
           emacs-helm-org
           emacs-org-ql
           emacs-s))
    (synopsis "Helm commands for @code{emacs-org-ql}")
    (description "This package provides @code{emacs-helm} commands for
@code{emacs-org-ql}, a Lispy query language for Org files, allowing for actions to
be performed based on search criteria.")))

(define-public emacs-bing-dict
  (package
    (name "emacs-bing-dict")
    (version "0.2.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/cute-jumper/bing-dict.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1kn8kmljn0pj0hz7dj7r7nxw43xd6acndaqq92d02mla12hiqayz"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/cute-jumper/bing-dict.el")
    (synopsis "Minimalist Bing dictionary interface in Emacs")
    (description
     "This package provides a minimalist Emacs extension to search
@uref{http://www.bing.com/dict}.  It supports English to Chinese, and
Chinese to English.")
    (license license:gpl3+)))

(define-public emacs-org-auto-tangle
  (package
    (name "emacs-org-auto-tangle")
    (version "0.6.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/yilkalargaw/org-auto-tangle")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1kn1jsbv97ps280lcdx19d6hs7pvz7q9ng67xlb1kwjb680pa7rl"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-async))
    (home-page "https://github.com/yilkalargaw/org-auto-tangle")
    (synopsis "Automatically tangle code blocks on save")
    (description
     "@code{org-auto-tangle} allows you to automatically tangle code blocks
whenever saving an @code{org-mode} file.")
    (license license:bsd-2)))

(define-public emacs-org-auto-expand
  (let ((commit "4938d5f6460e2f8f051ba9ac000b291bfa43ef62")
        (revision "1"))
    (package
      (name "emacs-org-auto-expand")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/alphapapa/org-auto-expand")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1my0c6xmkh37lwi6l472lz9d86lf20h6xcllzlxm1lxa24rhva6v"))
                (snippet #~(begin
                             (for-each delete-file
                                       '("makem.sh" "Makefile"))))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))  ; No tests.
      (propagated-inputs
       (list emacs-org emacs-dash))
      (home-page "https://github.com/alphapapa/org-auto-expand")
      (synopsis "Automatically expand certain Org headings")
      (description "This package allows a customizable set of headings in Org
files to be expanded upon opening them.")
      (license license:gpl3+))))

(define-public emacs-parsebib
  (package
    (name "emacs-parsebib")
    (version "6.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joostkremers/parsebib")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "180lvlq6xfri1lag85s6478x8cv4iccj6qk2rag9nm19yrhxfh7a"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/joostkremers/parsebib")
    (synopsis "Library for parsing @file{.bib} files")
    (description
     "This package provides an Emacs library for parsing @file{.bib} files.")
    (license license:bsd-3)))

(define-public emacs-ebib
  (package
    (name "emacs-ebib")
    (version "2.51.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joostkremers/ebib")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bfkmfwadj9dg9dfnqj9nrcj6qqv9wnnfn34gl33526k77lmfhxm"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-biblio emacs-compat emacs-ivy emacs-parsebib))
    (home-page "https://joostkremers.github.io/ebib/")
    (synopsis "BibTeX database manager for Emacs")
    (description
     "Ebib is a BibTeX database manager that runs in GNU Emacs.
With Ebib you can create, sort and manage your @file{.bib} database files, all
within Emacs.  It supports searching, multi-line field values and
@samp{@@String} and @samp{@@Preamble} definitions.  Ebib integrates
with (La)TeX mode, Org mode and other Emacs editing modes.")
    ;; The Ebib source files are released under a BSD license with
    ;; the exception of org-ebib.el, which is released under the GNU
    ;; GPL.
    (license (list license:bsd-3
                   license:gpl3+))))

(define-public emacs-biblio
  (package
    (name "emacs-biblio")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cpitclaudel/biblio.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0iya5ybc54kia5vnb3bfr8yilykhbn2xvp157vya06cw4af2cw65"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; XXX: too many broken tests
    (propagated-inputs
     (list emacs-dash emacs-let-alist))
    (home-page "https://github.com/cpitclaudel/biblio.el")
    (synopsis "Browse and import bibliographic references")
    (description "This package provides an extensible Emacs package for
browsing and fetching references.

@file{biblio.el} makes it easy to browse and gather bibliographic references
and publications from various sources, by keywords or by DOI.  References are
automatically fetched from well-curated sources, and formatted as BibTeX.")
    (license license:gpl3+)))

(define-public emacs-citar
  (package
    (name "emacs-citar")
    (version "1.4.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/bdarcus/citar")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "07q94iplkx29lggrs5xfzj42rxfcn2cnbr90jgifk29jshcz30pv"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs emacs-no-x
      #:test-command #~(list "emacs" "--batch" "-L" "."
                             "-l" "test/citar-test.el"
                             "-l" "test/citar-file-test.el"
                             "-l" "test/citar-format-test.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases #~(modify-phases %standard-phases
                   (add-before 'build 'set-home
                     (lambda _
                       (setenv "HOME" "/tmp"))))))
    (propagated-inputs (list emacs-auctex
                             emacs-citeproc
                             emacs-embark
                             emacs-org
                             emacs-parsebib
                             emacs-s))
    (home-page "https://github.com/bdarcus/citar")
    (synopsis "Emacs package to quickly find and act on bibliographic entries")
    (description
     "This package provides a completing-read front-end to browse and
act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX,
markdown, and Org cite editing support.

When used with Vertico (or Selectrum), Embark, and Marginalia, it
provides similar functionality to helm-bibtex and ivy-bibtex: quick
filtering and selecting of bibliographic entries from the minibuffer,
and the option to run different commands against them.

With Embark, it also makes available at-point actions in Org
citations.")
    (license license:gpl3+)))

(define-public emacs-citar-org-roam
  (package
    (name "emacs-citar-org-roam")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-citar/citar-org-roam")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0iwhwfllbcd938qkvh5m5cn6s8pn01xb02yjbv1hl4jpiayianqa"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-citar emacs-org-roam))
    (home-page "https://github.com/emacs-citar/citar-org-roam")
    (synopsis "Emacs package to provide tighter Citar and Org-Roam integration")
    (description "Out-of-box, Citar provides default support for file-per-note
bibliographic notes that are compatible with Org-Roam v2.  This package
integrates directly with the Org-Roam database, and provides the following
additional features to Citar note support:
@itemize
@item multiple references per note
@item multiple reference notes per file
@item ability to query note citations by reference
@item ``live'' updating of Citar UI for presence of notes
@end itemize")
    (license license:gpl3+)))

(define-public emacs-citar-denote
  (package
    (name "emacs-citar-denote")
    (version "2.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/pprevos/citar-denote")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0rsi2j4gfznpyvf3z1p1xxl0zxfbddha4ig4d30svwnq2maxri7r"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-citar emacs-denote))
    (home-page "https://github.com/pprevos/citar-denote")
    (synopsis "Emacs package to create and retrieve bibliography notes with
Citar and Denote")
    (description
     "@code{citar-denote} is a minor-mode integrating the Emacs Citar and
Denote packages to enable create managing bibliographic notes and citations.")
    (license license:gpl3+)))

(define-public emacs-helm-bibtex
  (let ((commit "6064e8625b2958f34d6d40312903a85c173b5261")
        (revision "2"))
    (package
      (name "emacs-helm-bibtex")
      (version (git-version "2.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tmalsburg/helm-bibtex")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1q8dm14wdxx14rnlgmz88j6gskvrrsc0f2z2639jwmfhyibw7d77"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-biblio
                               emacs-dash
                               emacs-f
                               emacs-helm
                               emacs-ivy
                               emacs-parsebib
                               emacs-s))
      (home-page "https://github.com/tmalsburg/helm-bibtex")
      (synopsis "Bibliography manager based on Helm")
      (description
       "This package provides bibliography manager for Emacs,
based on Helm and the BibTeX completion backend.

Key features:

@itemize
@item Quick access to your bibliography from within Emacs
@item Powerful search capabilities
@item Provides instant search results as you type
@item Tightly integrated with LaTeX authoring, emails, Org mode, etc.
@item Open the PDFs, URLs, or DOIs associated with an entry
@item Insert LaTeX cite commands, Ebib links, or Pandoc citations,
BibTeX entries, or plain text references at point, attach PDFs to emails
@item Support for note taking
@item Quick access to online bibliographic databases such as Pubmed,
arXiv, Google Scholar, Library of Congress, etc.
@item Imports BibTeX entries from CrossRef and other sources.
@end itemize")
      (license license:gpl3+))))

(define-public emacs-ewmctrl
  (package
    (name "emacs-ewmctrl")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/flexibeast/ewmctrl")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0ilwvx0qryv3v6xf0gxqwnfm6pf96gxap8h9g3f6z6lk9ff4n1wi"))))
    (build-system emacs-build-system)
    (arguments
     '(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-ewmctrl
           ;; This build phase makes sure ‘ewmctrl’ looks
           ;; for ‘wmctrl’ in the right place.
           (lambda _
             (let ((file "ewmctrl.el"))
               (chmod file #o644)
               (emacs-substitute-sexps file
                 ("(defcustom ewmctrl-wmctrl-path" (which "wmctrl")))))))))
    (inputs
     (list wmctrl))
    (home-page "https://github.com/flexibeast/ewmctrl")
    (synopsis "Emacs interface to @code{wmctrl}")
    (description "@code{ewmctrl} provides an Emacs interface to
@code{wmctrl} command-line window-management program.")
    (license license:gpl3+)))

(define-public emacs-erc-image
  (let ((commit "82fb3871f02e24b1e880770b9a3d187aab43d0f0")
        (revision "3"))
    (package
      (name "emacs-erc-image")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kidd/erc-image.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1q8mkf612fb4fjp8h4kbr107wn083iqfdgv8f80pcmil8y33dw9i"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases (modify-phases %standard-phases
                    ;; The package autoloader fails to provide
                    ;; the image module when handled by Guix.
                    ;; Disable this phase, and let the package
                    ;; handle the `eval-after-load' procedure.
                    (delete 'make-autoloads))))
      (home-page "https://github.com/kidd/erc-image.el")
      (synopsis "Show inlined images (png/jpg/gif/svg) in ERC buffers")
      (description "This plugin subscribes to hooks @code{erc-insert-modify-hook}
and @code{erc-send-modify-hook} to download and show images.")
      (license license:gpl3+))))

(define-public emacs-helm-gtags
  (package
    (name "emacs-helm-gtags")
    (version "1.5.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-helm-gtags")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1kc1jzk10nfd2v20g8dwnb6a944afrwdwnkzl06w4ba8k4yim7gi"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "test")))
    (propagated-inputs
     (list emacs-helm))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/syohex/emacs-helm-gtags")
    (synopsis "Emacs Helm interface to GNU Global")
    (description
     "@code{emacs-helm-gtags} provides a Emacs Helm interface to GNU Global.")
    (license license:gpl3+)))

(define-public emacs-list-utils
  (package
    (name "emacs-list-utils")
    (version "0.4.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/rolandwalker/list-utils")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0rc7ql78qraa35lv6igkd81j5ap9zgn6ri9rp9cajp86s2b46dg6"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command
                     #~(list "emacs" "--batch" "-L" "." "-L" "ert-tests"
                             "-l" "cl-macs" "-l" "ert" "-l" "list-utils-test"
                             "--eval"
                             "(progn (fset 'ert--print-backtrace 'ignore)
                                     (ert-run-tests-batch-and-exit
                                        '(not (tag :interactive))))")))
    (home-page "https://github.com/rolandwalker/list-utils")
    (synopsis "List-manipulation utility functions")
    (description
     "This package provides a list manipulation library for Emacs.")
    (license license:gpl3+)))

(define-public emacs-parsec
  (package
    (name "emacs-parsec")
    (version "0.1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cute-jumper/parsec.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1g1s8s45g3kkbi3h7w0pmadmzdswb64mkdvdpg2lihg341kx37gm"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/cute-jumper/parsec.el")
    (synopsis "Parser combinator library for Emacs Lisp")
    (description
     "Parsec is a parser combinator library for Emacs Lisp, similar to
Haskell's Parsec library.  It contains most of the parser combinators in
Text.Parsec.Combinator, and more combinators can be added if necessary!  Most
of the parser combinators have the same behavior as their Haskell
counterparts.  Parsec also comes with a simple error handling mechanism so
that it can display an error message showing how the parser fails.")
    (license license:gpl3+)))

(define-public emacs-move-text
  (package
    (name "emacs-move-text")
    (version "2.0.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsfodder/move-text")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pxvipjp9xvr9zwiwij943jgpy7fk8pxphbdj0vrg8ar5avlqiam"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsfodder/move-text")
    (synopsis "Move current line or region with M-up or M-down")
    (description "This package provide functions to move the current line
using @kbd{M-up} or @kbd{M-down} if a region is marked, it will move the
region instead.")
    (license license:gpl3+)))

(define-public emacs-validate
  (package
    (name "emacs-validate")
    (version "1.0.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/Malabarba/validate.el")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1l12ibx6cw4mgicgjpw71fb4fr4sd0k54lvbpq7ngc29br3j6i4v"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/validate.el")
    (synopsis "Emacs library for scheme validation")
    (description "This Emacs library provides two functions that perform
schema validation.")
    (license license:gpl3+)))

(define-public emacs-rainbow-blocks
  (let ((commit "dd435d7bb34ff6f162a5f315df308b90b7e9f842"))
    (package
      (name "emacs-rainbow-blocks")
      (version (git-version "1.0.0" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/istib/rainbow-blocks")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "06yfb3i7wzvqrhkb61zib9xvpb5i00s4frizkzff66im05k0n795"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/istib/rainbow-blocks")
      (synopsis "Highlight sexp blocks")
      (description "Rainbow-blocks is an Emacs mode that highlights blocks
made of parentheses, brackets, and braces according to their depth.  Each
successive level is highlighted in a different color.  This makes it easy to
orient yourself in the code, and tell which statements are at a given level.")
      (license license:gpl3+))))

(define-public emacs-raku-mode
  (let ((revision "0")
        (commit "14f9b9bba08c0bbb7f3895380d0b1a9feb7a168d"))
    (package
      (name "emacs-raku-mode")
      (version (git-version "0.2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Raku/raku-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "03r858crkxfp2nswsk81ajr8ynqm501a3l6qmbmlk57pb1p2a1py"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-path
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "raku-repl.el"
                  ("raku-exec-path" (search-input-file inputs "/bin/raku")))))
            (add-before 'check 'skip-failing-test
              (lambda _
                (substitute* "test/raku-mode-test.el"
                  (("\\(ert-deftest perl5-font-lock-keywords/variable .*" all)
                   (string-append all "(skip-unless nil)"))))))))
      (native-inputs (list emacs-ert-runner))
      (inputs (list rakudo))
      (home-page "https://github.com/Raku/raku-mode")
      (synopsis "Major mode for editing Raku code")
      (description
       "Emacs major mode for editing Raku code.  It supports basic syntax
highlighting, basic indentation, identifier index menu (variables,
subs, classes, etc.), and REPL interaction.")
      (license license:gpl3+))))

(define-public emacs-tree-mode
  (let ((commit "b06078826d5875d74b0e7b7ac47b0d0917610534")
        (revision "1"))
    (package
      (name "emacs-tree-mode")
      (version (string-append "0.0.1" "-" revision "."
                              (string-take commit 7)))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/tree-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "13bbdhdmqg4x9yghanhr8fsbsxbnypzxdxgicz31sjjm675kpnix"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsorphanage/tree-mode")
      (synopsis "Emacs mode to manage tree widgets")
      (description
       "This package provides an Emacs library to manage tree widgets.")
      (license license:gpl3+))))

(define-public emacs-treesit-auto
  (let ((commit "016bd286a1ba4628f833a626f8b9d497882ecdf3")) ; version bump
    (package
      (name "emacs-treesit-auto")
      (version "1.0.7")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/renzmann/treesit-auto")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "03bvam7cpxqp4idhd235n76qdqhsbgw7m2lphy8qqwslbmcq23m4"))))
      (build-system emacs-build-system)
      (arguments '(#:tests? #f)) ; no tests
      (home-page "https://github.com/renzmann/treesit-auto")
      (synopsis
       "Automatically install and use tree-sitter major modes in Emacs 29+")
      (description
       "Install a tree-sitter major mode automatically.  If the tree-sitter
version can't be used, fall back to the original major mode.")
      (license license:gpl3))))

(define-public emacs-md4rd
  (package
    (name "emacs-md4rd")
    (version "0.3.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ahungry/md4rd")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1n6g6k4adzkkn1g7z4j27s35xy12c1fg2r08gv345ddr3wplq4ri"))))
    (propagated-inputs
     (list emacs-dash emacs-request emacs-s emacs-tree-mode))
    (build-system emacs-build-system)
    (home-page "https://github.com/ahungry/md4rd")
    (synopsis "Emacs Mode for Reddit")
    (description
     "This package allows reading Reddit from within Emacs interactively.")
    (license license:gpl3+)))

(define-public emacs-pulseaudio-control
  (let ((commit "34a6114357dbbc6b6720aa013e0f8a48f3739403")
        (revision "0"))
    (package
      (name "emacs-pulseaudio-control")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.sr.ht/~flexibeast/pulseaudio-control")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0wm312pqp0i5i6qh6g3nacnnvsrad58927cl2g42gxzrzlb3slv5"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases #~(modify-phases %standard-phases
                     (add-after 'unpack 'patch-file-name
                       (lambda* (#:key inputs #:allow-other-keys)
                         (emacs-substitute-variables "pulseaudio-control.el"
                           ("pulseaudio-control-pactl-path"
                            (search-input-file inputs "bin/pactl"))))))))
      (inputs (list pulseaudio))
      (home-page "https://git.sr.ht/~flexibeast/pulseaudio-control")
      (synopsis "Control Pulseaudio from Emacs")
      (description
       "This package allows controlling Pulseaudio from Emacs.")
      (license license:gpl3+))))

(define-public emacs-smudge
  (let ((commit "4a9c5b34e9bc0a694d0faf8c2f83dc244b8b6a2f")
        (revision "1"))
    (package
      (name "emacs-smudge")
      (version (git-version "1.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/danielfm/smudge")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1xiqxw87sdk9mgy7fdbmzqaf58dc1grhkigirg1bd0b2q5kbnbwx"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-oauth2 emacs-request emacs-simple-httpd))
      (home-page "https://github.com/danielfm/smudge")
      (synopsis "Control the Spotify application from within Emacs")
      (description
       "Smudge allows you to control the Spotify application from Emacs,
either via D-BUS or Spotify Connect if you have a Spotify premium
subscription.")
      (license license:gpl3+))))

(define-public emacs-pulsar
  (package
    (name "emacs-pulsar")
    (version "1.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/protesilaos/pulsar")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1494f0fn6q99lhsfyjnfm69m31hi9snm3zc6bal67iddkqhc9mfc"))))
    (native-inputs (list texinfo))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (home-page "https://protesilaos.com/emacs/pulsar")
    (synopsis "Pulse highlight line on demand or after running select functions")
    (description "This package temporarily highlights the current line after a
given function is invoked.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ; GFDLv1.3+ for the manual

(define-public emacs-datetime
  (package
    (name "emacs-datetime")
    (version "0.10.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/doublep/datetime")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1cihsn81fkp0bf62358kssk77wzlk3kngz1a1bfvpp2szpvgwbc7"))))
    (build-system emacs-build-system)
    (arguments
     `(#:include (cons "^[^/]*\\.extmap$" %default-include)))
    (inputs
     (list emacs-extmap))
    (home-page "https://github.com/doublep/datetime/")
    (synopsis "Library to work with dates in Emacs")
    (description
     "Datetime is an Emacs library for parsing, formatting, matching and
recoding timestamps and date-time format strings.")
    (license license:gpl3+)))

(define-public emacs-org-mind-map
  ;; XXX: Upstream does not provide any tag.  The commit below corresponds to
  ;; an exact version bump from the main file.
  (let ((commit "477701b15cb0c8ed7f021ca76a4cb1a7d9ad6aa5"))
    (package
      (name "emacs-org-mind-map")
      (version "0.4")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/theodorewiles/org-mind-map")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "08sj43py6aid4vpqgsm0v5n94mcmcil0047qjk033492glz6q55c"))))
      (propagated-inputs
       (list emacs-dash))
      (build-system emacs-build-system)
      (home-page "https://github.com/theodorewiles/org-mind-map")
      (synopsis "Create Graphviz directed graphs from Org files")
      (description
       "This package creates Graphviz directed graphs from Org files.")
      (license license:gpl3+))))

(define-public emacs-npm-mode
  (package
    (name "emacs-npm-mode")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mojochao/npm-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1mh6nbffciw4yhv049kdhh796ysj1x21ndm3fwymhskb3dy0w1ss"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/mojochao/npm-mode")
    (synopsis "Minor mode for working with @code{npm} projects")
    (description
     "@code{npm-mode} provides a minor mode to work with @code{npm} projects.")
    (license license:gpl3+)))

(define-public emacs-itail
  ;; XXX: Upstream provides no tags.  The commit below corresponds to an exact
  ;; version bump from main file.
  (let ((commit "6e43c20da03be3b9c6ece93b7dc3495975ec1888"))
    (package
      (name "emacs-itail")
      (version "0.0.8")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/re5et/itail")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "044nzxh1hq41faxw3lix0wy78vfz304pjcaa5a11dqfz7q3gx5cv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/re5et/itail")
      (synopsis "Interactive @code{tail} Emacs mode")
      (description "@code{itail} provides interactive @code{tail} mode that
allows you to filter the tail with Unix pipes and highlight the contents of
the tailed file.  It works locally or on remote files using Tramp.")
      (license license:gpl3+))))

(define-public emacs-loop
  (package
    (name "emacs-loop")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/loop.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gs95xnmnn8aa4794k7h8mw1sz1nfdh9v0caqj6yvnsdnwy74n5x"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (home-page "https://github.com/Wilfred/loop.el")
    (synopsis "Imperative loop structures for Emacs")
    (description "Loop structures familiar to users of other languages.  This
library adds a selection of popular loop structures as well as break and
continue.")
    (license license:gpl3+)))

(define-public emacs-elisp-refs
  (package
    (name "emacs-elisp-refs")
    (version "1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/elisp-refs")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1670jj0pya74gb0xbjlfmka4w06hzh6ya1ai9f4brxp4n9knc13i"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash
           emacs-f
           emacs-list-utils
           emacs-loop
           emacs-s
           emacs-shut-up))
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (home-page "https://github.com/Wilfred/elisp-refs")
    (synopsis "Find callers of elisp functions or macros")
    (description "@code{elisp-refs} finds references to functions, macros or
variables.  Unlike a dumb text search, it actually parses the code, so it's
never confused by comments or @code{foo-bar} matching @code{foo}.")
    (license license:gpl3+)))

(define-public emacs-crdt
  ;; XXX: Upstream does not always tag new releases.  The commit below
  ;; corresponds exactly to latest version bump.
  (let ((commit "e6d42f42c5dedb73560048f4bf6263c63ffa21bb")
        (version "0.3.5"))
    (package
      (name "emacs-crdt")
      (version version)
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://code.librehq.com/qhong/crdt.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "16dpg0d8p4fqjl2nir290iim9bb7f87rwnxs16lx67dasvbfawph"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://code.librehq.com/qhong/crdt.el")
      (synopsis "Real-time collaborative editing environment")
      (description
       "@code{crdt.el} is a real-time collaborative editing environment for
Emacs using Conflict-free Replicated Data Types.  With it, you can share
multiple buffer in one session, and see other users’ cursor and region.  It
also synchronizes Org mode folding status.  It should work with all of Org
mode.")
      (license license:gpl3+))))

(define-public emacs-crux
  (package
    (name "emacs-crux")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/crux")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "00n4k09x3slchs81xw1q0rcb78ncb5k2lvsigb9j7s3kxbj6bvvy"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/bbatsov/crux")
    (synopsis "Collection of useful functions for Emacs")
    (description
     "@code{crux} provides a collection of useful functions for Emacs.")
    (license license:gpl3+)))

(define-public emacs-edit-server
  (package
    (name "emacs-edit-server")
    (version "1.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/stsquad/emacs_chrome")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0m7gj224sqxjjw5sxky92fnrxg9jy4nf33kwf0aqxnfhqlgh545k"))))
    (build-system emacs-build-system)
    (arguments
     (list #:lisp-directory "servers"))
    (propagated-inputs (list emacs-ert-async))
    (home-page "https://github.com/stsquad/emacs_chrome")
    (synopsis "Server that responds to edit requests from Chromium")
    (description
     "This package provides an edit server to respond to requests from Emacs.")
    (license license:gpl3+)))

(define-public emacs-m-buffer
  (let ((commit "5e7714835b2289f61dad24c0b5cf98d28fc313b0")) ;version bump
    (package
      (name "emacs-m-buffer")
      (version "0.16.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/phillord/m-buffer-el")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "16h8nj01h0ahcw4zk9nb8mm8972nl8qw75vj0gvpjlg1zk5kvl45"))))
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch" "-L" "."
                               "-l" "test/m-buffer-test.el"
                               "-l" "test/m-buffer-at-test.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (build-system emacs-build-system)
      (home-page "https://github.com/phillord/m-buffer-el")
      (synopsis "List oriented buffer operations for Emacs")
      (description "@code{m-buffer} provides a set of list-orientated functions
for operating over the contents of Emacs buffers.")
      (license license:gpl3+))))

(define-deprecated-package emacs-m-buffer-el
  emacs-m-buffer)

(define-public emacs-let-alist
  (package
    (name "emacs-let-alist")
    (version "1.0.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/let-alist-" version ".el"))
       (sha256
        (base32 "0szj7vnjzz4zci5fvz7xqgcpi4pzdyyf4qi2s8xar2hi7v3yaawr"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/let-alist.html")
    (synopsis "Easily let-bind values of an assoc-list by their names")
    (description "This package offers a single macro, @code{let-alist}.  This
macro takes a first argument (whose value must be an alist) and a body.")
    (license license:gpl3+)))

(define-public emacs-esup
  (let ((commit "0de8af8233d9ce1b67f05a50f25c481c4f1118d8")
        (revision "1"))
    (package
      (name "emacs-esup")
      (version (git-version "0.7.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jschaf/esup")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "01khb3xyj0ylwib6ryzzvqmkh5wvzxiq2n3l0s3h9zv7wx849bzv"))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-noflet emacs-undercover emacs-buttercup))
      (propagated-inputs
       (list emacs-dash))
      (arguments
     `(#:test-command '("buttercup" "-L" ".")))
      (home-page "https://github.com/jschaf/esup")
      (synopsis "Emacs start up profiler")
      (description "Benchmark Emacs Startup time without ever leaving
your Emacs.")
      (license license:gpl2+))))

(define-public emacs-restart-emacs
  (let ((commit "9aa90d3df9e08bc420e1c9845ee3ff568e911bd9")
        (revision "1"))
    (package
      (name "emacs-restart-emacs")
      (version (git-version "0.1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/iqbalansari/restart-emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "02x1a85k7r95z8091zgjiaj9nf0zvx1jy4xvl3hr12qbnrx1wfav"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/iqbalansari/restart-emacs")
      (synopsis "Restart Emacs from within Emacs")
      (description "This package provides a simple command to restart Emacs from
within Emacs.")
      (license license:gpl3+))))

(define-public emacs-svg-lib
  ;; XXX: Upstream does not tag releases.  The commit hash below corresponds
  ;; to the version bump.
  (let ((commit "f62279a4edbe2f67faf573d09b211653acea9668"))
    (package
      (name "emacs-svg-lib")
      (version "0.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rougier/svg-lib")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "09l1hkif5pc4yskr1by5s4kmgx0k0ximk5p5fvcdvryrh687gwm4"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ;no tests
      (home-page "https://github.com/rougier/svg-lib")
      (synopsis "Emacs SVG library for creating tags, icons and bars")
      (description
       "This is a small Emacs library to create and display various
SVG objects, namely tags, progress bars, progress pies and icons.
Each object is guaranteed to fit nicely in a text buffer ensuring
width is an integer multiple of character width.")
      (license license:gpl3+))))

(define-public emacs-svg-tag-mode
  ;; XXX: Upstream does not tag releases.  The commit hash below corresponds
  ;; to the version bump.
  (let ((commit "13e888b8bd9a0664d060149a44a751b2113331b6"))
    (package
      (name "emacs-svg-tag-mode")
      (version "0.3.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rougier/svg-tag-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0fbq5gcr4rfddjdfy5qcnlk64lb15pibg1bbgdnyqvyvvv0biw48"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ;no tests
      (propagated-inputs
       (list emacs-svg-lib))
      (home-page "https://github.com/rougier/svg-tag-mode")
      (synopsis "Replace keywords with SVG tags")
      (description "This package provides a minor mode that replaces keywords
or expressions with SVG rounded box labels that are fully customizable.")
      (license license:gpl3+))))

(define-public emacs-kind-icon
  (package
    (name "emacs-kind-icon")
    (version "0.2.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/kind-icon-"
                           version ".tar"))
       (sha256
        (base32 "1jpc4izbi5ajqqrvvfp5yqfmljaw2mq06ym36d4p2cxkz95vcmi7"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-svg-lib))
    (home-page "https://github.com/jdtsmith/kind-icon")
    (synopsis "Completion kind icons in Emacs")
    (description "Kind-icon mode adds a colorful icon or text prefix based on
@code{:company-kind} for compatible completion UIs.  The ``kind'' prefix is
typically used for differentiating completion candidates such as variables or
functions.")
    (license license:gpl3+)))

(define-public emacs-svg-icon
  (let ((commit "ebc2b8d0f6c680fd575a90e683cc7b832acd1eb7")
        (revision "1"))
    (package
      (name "emacs-svg-icon")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rougier/emacs-svg-icon")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1qzqfa8xyw1nkb89kbvw9qcgdwr8g017n8gf3yzwn816qhkfkjrj"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/rougier/emacs-svg-icon")
      (synopsis "Emacs library to create SVG icons on the fly")
      (description "This library allows creating SVG icons by parsing remote
collections whose license are compatibles with Emacs.  The default size of an
icon is exactly 2x1 characters such that it can be inserted inside a text
without disturbing alignment.")
      (license (list license:gpl3+)))))

(define-public emacs-sourcemap
  (package
    (name "emacs-sourcemap")
    (version "0.03")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/syohex/emacs-sourcemap")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "115g2mfpbfywp8xnag4gsb50klfvplqfh928a5mabb5s8v4a3582"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "-Q" "-batch" "-L" "." "-l" "test/test-sourcemap.el"
                   "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/syohex/emacs-sourcemap")
    (synopsis "Sourcemap parser")
    (description "Sourcemap parser")
    (license license:gpl3+)))

(define-public emacs-macrostep
  (package
    (name "emacs-macrostep")
    (version "0.9.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacsorphanage/macrostep")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1sdi8kmcvf39p1m6bahnzi3h0djg23lppb2hf1y1snihcf3ibwi9"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'remove-test
            ;; Fails because of requirement ‘/bin/sh’.
            (lambda _
              (let ((file "macrostep-test.el"))
                (make-file-writable file)
                (emacs-batch-edit-file file
                  `(progn (progn (goto-char (point-min))
                                 (re-search-forward
                                  "(ert-deftest macrostep-expand-c-macros")
                                 (beginning-of-line)
                                 (kill-sexp))
                          (basic-save-buffer))))))
          (replace 'check
            (lambda* (#:key tests? #:allow-other-keys)
              (when tests?
                (invoke "emacs" "--batch" "-L" "."
                        "-l" "macrostep-test.el"
                        "-f" "ert-run-tests-batch-and-exit")))))))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/emacsorphanage/macrostep")
    (synopsis "Interactive macro-expander for Emacs")
    (description "@code{macrostep} is an Emacs minor mode for interactively
stepping through the expansion of macros in Emacs Lisp source code.  It lets
you see exactly what happens at each step of the expansion process by
pretty-printing the expanded forms inline in the source buffer, which is
temporarily read-only while macro expansions are visible.  You can expand and
collapse macro forms one step at a time, and evaluate or instrument the
expansions for debugging with Edebug as normal.")
    (license license:gpl3+)))

(define-public emacs-macrostep-geiser
  ;; XXX: Upstream does not tag commits (yet).  The commit below matches the
  ;; version bump.
  (let ((commit "7927651b188cac07113bce5b2cd0de12b2b082f7"))
    (package
      (name "emacs-macrostep-geiser")
      (version "0.2.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nbfalcon/macrostep-geiser")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1gz2kypyrb4k76dn4j02c8s6a3dqb1la5jcrdcifv8saa8lvqyli"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-geiser emacs-macrostep))
      (home-page "https://github.com/nbfalcon/macrostep-geiser")
      (synopsis "Macrostep for Geiser and Cider")
      (description
       "This plug-in implements a Macrostep back-end powered by Geiser.")
      (license license:gpl3+))))

(define-public emacs-parent-mode
  (package
    (name "emacs-parent-mode")
    (version "2.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fanael/parent-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ki22rkbyglr3wppjph6gy23lcx2nwj9w0ff9h3ryd197j4yvvgi"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch"
                             "-l" "parent-mode-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/Fanael/parent-mode")
    (synopsis "Get major mode's parent modes")
    (description
     "This package provides a function to list all current major mode's parent
modes.")
    (license license:bsd-2)))

(define-public emacs-lacarte
  (let ((commit "79afc5d2406dae5aabc1c12089e8e2e1990abd85")
        (revision "1"))
    (package
      (name "emacs-lacarte")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/lacarte")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0g9r7cp1y6b7ldcls8fdblwf79hharcf2lfgz737pff68qhv9c3l"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/lacarte.el")
      (synopsis "Execute menu items as commands, with completion")
      (description "La Carte lets you execute menu-bar menu commands from the
keyboard, with completion.

Use the keyboard to access any menu item, without knowing where it is or what
its full name is.  Type part of its name and use completion to get the rest:
the complete path and item name.  When you choose a menu-item candidate, the
corresponding command is executed.")
      (license license:gpl3+))))

(define-public emacs-latex-preview-pane
  (let ((commit "5297668a89996b50b2b62f99cba01cc544dbed2e")
        (revision "0"))
    (package
      (name "emacs-latex-preview-pane")
      (version (git-version "20151021" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jsinglet/latex-preview-pane")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1m4f5p53275k8i9p0y105kkrp9nx1bwn6726my9s5dwnjhr5dnp2"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; The welcome and error message templates are in .txt format.
        #:include #~(cons "\\.txt$" %default-include)))
      (home-page "https://github.com/jsinglet/latex-preview-pane")
      (synopsis "Preview pane to ease LaTeX editing in Emacs")
      (description "@code{latex-preview-pane} is a minor mode for previewing
LaTeX files directly in Emacs.  It supports PDF previews, with either
@command{pdflatex} or @command{xelatex}, and highlights errors in the LaTeX
buffer.")
      (license license:gpl3+))))

(define-public emacs-isearch-prop
  (let ((commit "4a2765f835dd115d472142da05215c4c748809f4")
        (revision "2"))
    (package
      (name "emacs-isearch-prop")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/isearch-prop")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "06gdk5m84q6pxwng8rjxny1zkll8f3m2x6lw4xyib2dvg7iaslh3"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/isearch-prop.el")
      (synopsis "Extensions to @code{isearch.el}")
      (description "The Emacs library @code{isearch-prop.el} lets you search within
  contexts.  You can limit incremental search to a set of zones of
  buffer text, search contexts that in effect constitute a multi-region.
  These zones can be defined in various ways, including some ways
  provided specially by this library.")
      (license license:gpl3+))))

(define-public emacs-company-lua
  (let ((commit "29f6819de4d691e5fd0b62893a9f4fbc1c6fcb52")
        (revision "2"))
    (package
      (name "emacs-company-lua")
      (version (git-version "0.1" "2" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ptrv/company-lua")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0ny2dcc7c585p7v3j6q0rpkbj1qmf2ismy8a5020jpr585xvz0hh"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company emacs-s emacs-f emacs-lua-mode))
      (arguments
       `(#:include (cons* "^lua\\/" %default-include)))
      (home-page "https://github.com/ptrv/company-lua")
      (synopsis "Company backend for Lua")
      (description
       "This package provides Company backend for Lua programming language.")
      (license license:gpl3+))))

(define-public emacs-assess
  (package
    (name "emacs-assess")
    (version "0.7")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/assess-" version
                           ".tar"))
       (sha256
        (base32 "1wka2idr63bn8fgh0cz4lf21jvlhkr895y0xnh3syp9vrss5hzsp"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f                  ; XXX: tests fail to find m-buffer
           #:test-command
           #~(list "emacs" "--batch" "--directory=."
                   "--load" "assess-discover.el"
                   "--eval" "(assess-discover-run-and-exit-batch t)")))
    (propagated-inputs (list emacs-m-buffer))
    (native-inputs (list emacs-load-relative))
    (home-page "https://elpa.gnu.org/packages/assess.html")
    (synopsis "Test support functions")
    (description
     "This  provides functions to support ert, the Emacs Regression Test
framework.  It includes
@itemize
@item a set of predicates for comparing strings, buffers and file contents.
@item explainer functions for all predicates giving useful output macros
for creating many temporary buffers at once, and for restoring the buffer list.
@item methods for testing indentation, by comparison or \"round-tripping\".
@item methods for testing fontification.
@end itemize
Assess aims to be a stateless and noiseless as possible, leaving Emacs
unchanged whether the tests succeed or fail and suppressing extraneous
messages.")
    (license license:gpl3+)))

(define-public emacs-beginend
  (package
    (name "emacs-beginend")
    (version "2.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DamienCassou/beginend")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0a5nr3zwcb36nw4j7xzknvd14gxp52ilgs07hddcjjyxmhrrfmav"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-assess
           emacs-buttercup
           emacs-ert-runner
           emacs-undercover))
    (home-page "https://github.com/DamienCassou/beginend")
    (synopsis "Redefine @code{M-<} and @code{M->} for Emacs modes")
    (description "@code{beginend} redefines @code{M-<} and @code{M->}
keybindings for Emacs modes so that point moves to meaningful
locations.  Redefined keys are still accessible by pressing the same
key again.")
    (license license:gpl3+)))

(define-public emacs-mbsync
  (let ((commit "d3c81da81ce5b154c0d048047a47277338721a70")
        (revision "5"))
    (package
      (name "emacs-mbsync")
      (version (git-version "0.1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dimitri/mbsync-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "10xxgvzjb7bl3lzgjkdsnnkd9wphkc2pm621agyjlayzcjnldz5p"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/dimitri/mbsync-el")
      (synopsis "Interface to mbsync for Emacs")
      (description "This package calls @code{mbsync} from
within Emacs.")
      (license license:gpl3+))))

(define-public emacs-ibrowse
  (package
    (name "emacs-ibrowse")
    (version "0.2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~ngraves/ibrowse.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0dqdldb5hmb6r99fkx1cjfr1b40nvf4i6hh44rk8y78kw9yfd4s1"))))
    (build-system emacs-build-system)
    (inputs (list emacs-websocket sqlite))
    (home-page "https://git.sr.ht/~ngraves/ibrowse.el")
    (synopsis "Interact with your browser from emacs")
    (description "This package provides some commands to act on the browser
tabs, history, or bookmarks from Emacs.")
    (license license:gpl3+)))

(define-public emacs-ibuffer-projectile
  (package
    (name "emacs-ibuffer-projectile")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/ibuffer-projectile")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1n9fqkwjxilzlb86ia95pjdv8lbgvsp8lwkw47v9kjvq2vnmarv5"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-projectile))
    (home-page "https://github.com/purcell/ibuffer-projectile")
    (synopsis "Group Ibuffer's list by Projectile root")
    (description
     "This package adds functionality to Emacs Ibuffer for grouping buffers
by their Projectile root directory.")
    (license license:gpl3+)))

(define-public emacs-ibuffer-vc
  (package
    (name "emacs-ibuffer-vc")
    (version "0.12")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/purcell/ibuffer-vc")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mnxh6annmys4h1xhc2c7l7ajp4pwvdg68n30x7a21ad9qlvizil"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/purcell/ibuffer-vc")
    (synopsis "Group Ibuffer's list by revision control system indications")
    (description
     "Ibuffer-VC adds functionality to Ibuffer for grouping buffers by their
parent revision control system root directory, and for displaying, or sorting,
by the status of listed files.")
    (license license:gpl3+)))

(define-public emacs-elm-mode
  (package
    (name "emacs-elm-mode")
    (version "0.22.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/jcollard/elm-mode")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1gnr61ibzcznfqy5f8capmbz75rcfikwy106rjdmp45qz2jwp4di"))))
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-dash emacs-f emacs-reformatter emacs-s))
    (build-system emacs-build-system)
    (home-page "https://github.com/jcollard/elm-mode")
    (synopsis "Emacs major mode for editing Elm source code")
    (description
     "This package provides a major mode for editing Elm source code, and
working with common core and third-party Elm tools.  Its features are:

@itemize
@item Syntax highlighting
@item Intelligent indentation
@item Integration with elm-make
@item Integration with elm-repl
@item Integration with elm-reactor
@item Integration with elm-package
@item Integration with elm-oracle
@item Integration with elm-format
@item Integration with elm-test
@end itemize")
    (license license:gpl3+)))

(define-public emacs-helm-mode-manager
  (package
    (name "emacs-helm-mode-manager")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/istib/helm-mode-manager")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1srx5f0s9x7zan7ayqd6scxfhcvr3nkd4yzs96hphd87rb18apzk"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (home-page "https://github.com/istib/helm-mode-manager/")
    (synopsis "Switch and toggle Emacs major and minor modes using Helm")
    (description "This package provides a Helm interface for toggling Emacs
major or minor mode.

@itemize
@item @code{helm-switch-major-mode} list of all major modes
@item @code{helm-enable-minor-mode} list of all inactive minor modes
@item @code{helm-disable-minor-mode} list of all ACTIVE minor modes
@end itemize\n

Hitting @code{RET} enables the mode, @code{C-z} shows the mode
documentation.")
    (license license:gpl3+)))

(define-public emacs-hy-mode
  (package
    (name "emacs-hy-mode")
    (version "1.0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hylang/hy-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gihxlmfminadaqdr8d2zccd7wwygl3m0gfzxsk5izi7f8hl4w7f"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-s))
    (home-page "https://github.com/hylang/hy-mode")
    (synopsis "Major mode for Hylang")
    (description "This package provides a major mode for Hylang.")
    (license license:gpl3+)))

(define-public emacs-web-beautify
  (package
    (name "emacs-web-beautify")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/yasuyk/web-beautify")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0vms7zz3ym53wf1zdrkbf2ky2xjr1v134ngsd0jr8azyi8siw84d"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "ert-runner")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/yasuyk/web-beautify")
    (synopsis "Format HTML, CSS and JavaScript, JSON")
    (description "This package provides an Emacs functions to format HTML,
CSS, JavaScript, JSON.")
    (license license:gpl3+)))

(define-public emacs-helm-shell-history
  (let ((commit "110d3c35c52fe4b89b29e79ea4c8626bce7266a1"))
    (package
      (name "emacs-helm-shell-history")
      (version (git-version "0.1" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/yuutayamada/helm-shell-history")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "18fkjcz69g4dyaxhf9j8svr5x6dhsdnglddwisis8hdn504scpfj"))))
      (build-system emacs-build-system)
      (arguments
       '(#:phases
         (modify-phases %standard-phases
           (add-before 'check 'patch-helm-shell-history-file
             (lambda _
               (let ((file "helm-shell-history.el"))
                 (chmod file #o644)
                 (emacs-substitute-sexps file
                   ("(defvar helm-shell-history-file"
                    `(expand-file-name "~/.bash_history"))))
               #t)))))
      (propagated-inputs
       (list emacs-helm))
      (home-page "https://github.com/yuutayamada/helm-shell-history")
      (synopsis "Find shell history with Emacs Helm")
      (description "This package provides an Emacs Helm interface to search
throw a shell history.")
      (license license:gpl3+))))

(define-public emacs-discover-my-major
  (package
    (name "emacs-discover-my-major")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://framagit.org/steckerhalter/discover-my-major.git/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1wlqyl03hhnflbyay3qlvdzqzvv5rbybcjpfddggda7ias9h0pr4"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-makey))
    (home-page "https://framagit.org/steckerhalter/discover-my-major/")
    (synopsis "Discover key bindings for the current Emacs major mode")
    (description "This package discovers key bindings and
their meaning for the current Emacs major-mode.")
    (license license:gpl3+)))

(define-public emacs-org-ref
  (let ((commit "732a20bd236fd02db4a651da29f87f87f458a54a")
        (revision "0"))
    (package
      (name "emacs-org-ref")
      (version (git-version "3.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jkitchin/org-ref")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1kbjxz56fvln6drd2wqdxrpgwjshzpdbyaq7dz0gn285z93y1knk"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(cons* "org-ref.org" "org-ref.bib" %default-include)
        #:exclude #~(list
                     ;; author doesn't recommend using it
                     "org-ref-pdf.el")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'skip-failing-test
              (lambda _
                (substitute* "test/all-org-test.el"
                  (("\\(ert-deftest preprocess .*" all)
                   (string-append all
                                  " (skip-unless (libxml-available-p))"))))))))
      (propagated-inputs
       (list emacs-avy
             emacs-citeproc
             emacs-dash
             emacs-f
             emacs-helm-bibtex
             emacs-htmlize
             emacs-hydra
             emacs-ox-pandoc
             emacs-parsebib
             emacs-request
             emacs-s))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/jkitchin/org-ref")
      (synopsis "Citations, cross-references and bibliographies in Org mode")
      (description
       "Org Ref is an Emacs library that provides rich support for citations,
labels and cross-references in Org mode.

The basic idea of Org Ref is that it defines a convenient interface to insert
citations from a reference database (e.g., from BibTeX files), and a set of
functional Org links for citations, cross-references and labels that export
properly to LaTeX, and that provide clickable functionality to the user.  Org
Ref interfaces with Helm BibTeX to facilitate citation entry, and it can also
use RefTeX.

It also provides a fairly large number of utilities for finding bad citations,
extracting BibTeX entries from citations in an Org file, and functions to
create and modify BibTeX entries from a variety of sources, most notably from
a DOI.

Org Ref is especially suitable for Org documents destined for LaTeX export and
scientific publication.  Org Ref is also useful for research documents and
notes.")
      (license license:gpl3+))))

(define-public emacs-org-reveal
  (let ((commit "f55c851bf6aeb1bb2a7f6cf0f2b7bd0e79c4a5a0"))
    (package
      (name "emacs-org-reveal")
      (version (git-version "20222711" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/yjwen/org-reveal")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1ck8v9qwk434w4ib9bmlmpqmiv8k1is5bcr5h7pnswgmgma68dka"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; no tests
      (home-page "https://github.com/yjwen/org-reveal")
      (synopsis "Org and Reveal.js powered HTML presentation tool")
      (description "Org-Reveal is a @command{org-mode} extension that allows
to create beautiful presentations (slides) with 3D effects from simple but
powerful Org contents.")
      (license license:gpl3+))))

(define-public emacs-org-re-reveal
  (package
    (name "emacs-org-re-reveal")
    (version "3.36.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/oer/org-re-reveal")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xq650vcyh4z4qlsgx96wf7xdlh06hvz93i1icybm8vi1lmm2nm3"))
       (modules '((guix build utils)))
       (snippet #~(begin (delete-file "cort-test.el")
                         (substitute* "org-re-reveal-tests.el"
                           (("\\(load \"cort-test\"\\)")
                            "(require 'cort)"))))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f        ; XXX: 48/57 failing tests
                     #:test-command #~(list "emacs" "--batch" "-l" "cort"
                                            "-l" "org-re-reveal-tests.el"
                                            "-f" "cort-test-run")))
    (propagated-inputs
     (list emacs-htmlize emacs-org))
    (native-inputs (list emacs-cort))
    (home-page "https://gitlab.com/oer/org-re-reveal")
    (synopsis "Build HTML presentations with reveal.js from Org source files")
    (description "This project started as fork of org-reveal.  It provides an
export back-end for HTML presentations with reveal.js from Org mode source
files.")
    (license license:gpl3+)))

(define-public emacs-add-hooks
  (package
    (name "emacs-add-hooks")
    (version "3.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nickmccurdy/add-hooks")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jv9fpcsm572zg0j1mbpbfkqgdlqapy89xhhj19pswkhjns1y2wl"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nickmccurdy/add-hooks/")
    (synopsis "Emacs function for setting multiple hooks")
    (description "This package provides a @code{add-hooks} function tidies up
duplicate hook and function names further into a single declarative call.")
    (license license:gpl3+)))

(define-public emacs-fancy-battery
  (package
    (name "emacs-fancy-battery")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacsorphanage/fancy-battery")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "05lwcwf412m717yhwpjrswqkm8c3i7391rmiwv2k8xc1vk6dpp4g"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsorphanage/fancy-battery")
    (synopsis "Display battery status in Emacs mode line")
    (description "This package provides @code{fancy-battery-mode} which is
like the built-in @code{display-battery-mode}, but more fancy.  It just the
remaining time, uses colours to indicate the status of the battery, and is
more customizable.")
    (license license:gpl3)))

(define-public emacs-fancy-narrow
  (package
    (name "emacs-fancy-narrow")
    (version "0.9.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Malabarba/fancy-narrow")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0vcr1gnqawvc1yclqs23jvxm6bqix8kpflf1c7znb0wzxmz9kx7y"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Malabarba/fancy-narrow/releases")
    (synopsis "Imitate @code{narrow-to-region} with more eye candy")
    (description
     "Unlike @code{narrow-to-region}, which completely hides text outside
the narrowed region, this package simply de-emphasizes the text, makes it
read-only, and makes it unreachable.  This leads to a much more natural
feeling where the region stays static (instead of being brutally moved to a
blank slate) and is clearly highlighted with respect to the rest of the
buffer.")
    (license license:gpl2+)))

(define-public emacs-hideshowvis
  (let ((commit "614e856620445166a60c00a1c4653dbd59c871c9")
        (revision "1"))
    (package
      (name "emacs-hideshowvis")
      (version (git-version "0.7" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/sheijk/hideshowvis")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0ykj5jwcm03p5h7sd52qndmzihyan09lqg6rzgmyabvw7p56y90m"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/sheijk/hideshowvis")
      (synopsis "Add icons in the Emacs fringe which @code{hideshow} can hide")
      (description "Emacs package to add clickable icons in the fringe for
regions which @code{hideshow} can hide.")
      (license license:gpl2+))))

(define-public emacs-know-your-http-well
  (package
    (name "emacs-know-your-http-well")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/for-GET/know-your-http-well")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1p4ibx0qgznv8ard4a9m7345ay8ij2qzmqdqiqlllndqq6mz62x5"))))
    (arguments
     `(#:lisp-directory "emacs"
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'install-json-files
           (lambda* (#:key outputs #:allow-other-keys)
             (for-each (lambda (directory)
                         (copy-recursively (string-append "../" directory)
                                           (string-append
                                            (assoc-ref outputs "out") "/"
                                            directory)))
                       '("js" "json")))))))
    (build-system emacs-build-system)
    (home-page "https://github.com/for-GET/know-your-http-well")
    (synopsis "Meaning of HTTP headers codes")
    (description "Meaning of HTTP headers codes.")
    (license license:gpl3+)))

(define-public emacs-navi-mode
  (let ((commit "c1d38e8237f4e14af020a0b7d4f118ea198ab674"))
    (package
      (name "emacs-navi-mode")
      (version (git-version "2.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alphapapa/navi")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0jj5spk14hgb7zb1cd2n8whcw4k1kd5zb6llwj96v178yaws7l8k"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-outshine emacs-outorg))
      (home-page "https://github.com/alphapapa/navi")
      (synopsis "Emacs major-mode for easy buffer-navigation")
      (description
       "This package provides an Emacs major-mode for easy buffer-navigation")
      (license license:gpl3+))))

(define-public emacs-download-region
  (let ((commit "eb9e557529a73b4cfc8281c70dd0d95db333fffa")
        (revision "1"))
    (package
      (name "emacs-download-region")
      (version (string-append "0.0.1" "-" revision "."
                              (string-take commit 7)))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zk-phi/download-region")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0v52djg39b6k2snizd9x0qc009ws5y0ywqsfwhqgcbs5ymzh7dsc"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/zk-phi/download-region")
      (synopsis "In buffer download manager for Emacs")
      (description "@code{download-region} provides in buffer
downloading manager for Emacs.")
      (license license:gpl3+))))

(define-public emacs-helpful
  (package
    (name "emacs-helpful")
    (version "0.21")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/helpful")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "03afgdbs5nmhw833svrqky7fmfs1zlvqzcj7j5g29sakivs60xqc"))
       (patches (search-patches
                 "emacs-helpful-fix-signature.patch"
                 "emacs-helpful-fix-tests.patch"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-elisp-refs emacs-f emacs-s))
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (home-page "https://github.com/Wilfred/helpful")
    (synopsis "More contextual information in Emacs help")
    (description "@code{helpful} is an alternative to the built-in Emacs help
that provides much more contextual information.

@itemize
@item Show the source code for interactively defined functions (unlike the
built-in Help).
@item Fall back to the raw sexp if no source is available.
@item Show where a function is being called.
@item Docstrings will Highlight the summary (the first sentence), include
cross-references, hide superfluous puncuation.
@item Show you the properties that have been applied to the current
symbol.  This provides visibility of features like edebug or byte-code
optimisation.
@item Provide a separate @code{helpful-command} function to view interactive
functions.
@item Display any keybindings that apply to interactive functions.
@item Trace, disassemble functions from inside Helpful.  This is discoverable
and doesn't require memorisation of commands.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-logview
  (package
    (name "emacs-logview")
    (version "0.19.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/doublep/logview")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1dhs2l2lx1gvvwg840a9y4nf2zxk9nljpyr8xqzi3si8wa7b3jdj"))))
    (propagated-inputs
     (list emacs-compat emacs-datetime emacs-extmap))
    (build-system emacs-build-system)
    (home-page "https://github.com/doublep/logview/")
    (synopsis "Emacs mode for viewing log files")
    (description "@code{logview} provides an Emacs mode to view log files.")
    (license license:gpl3+)))

(define-public emacs-suggest
  (package
    (name "emacs-suggest")
    (version "0.7")
    (home-page "https://github.com/Wilfred/suggest.el")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "01v8plska5d3g19sb1m4ph1i3ayprfzk8mi6mpabjy6zad397xjl"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-loop
           emacs-dash
           emacs-s
           emacs-f
           emacs-spinner
           emacs-shut-up))
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (synopsis "Suggest Elisp functions that give the output requested")
    (description "Suggest.el will find functions that give the output
requested.  It's a great way of exploring list, string and arithmetic
functions.")
    (license license:gpl3+)))

(define-public emacs-benchmark-init
  (package
    (name "emacs-benchmark-init")
    (version "1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dholm/benchmark-init-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1slw10mp9lkfy04qgv7ly76rww2rs3yijq6sjx4jwswd4b46bmsg"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/dholm/benchmark-init-el")
    (synopsis "Benchmark Emacs @code{require} and @code{load} calls")
    (description "@code{benchmark-init} provides a way to keep track of where
time is being spent during Emacs startup in order to optimize startup time.")
    (license license:gpl3+)))

(define-public emacs-magit-gerrit
  (let ((commit "a97521574c5b7d4b7ab89e25c358c87fd5b1887f")
        (revision "1"))
    (package
      (name "emacs-magit-gerrit")
      (version (git-version "0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-gerrit")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0p6h67x7f6iraw6jqn7dmqy2m2mwwvbwcs61hq8jc602v6hkslqn"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-magit))
      (home-page "https://github.com/emacsorphanage/magit-gerrit")
      (synopsis "Magit extension for Gerrit")
      (description "This Magit extension provides integration with Gerrit,
which makes it possible to conduct Gerrit code reviews directly from within
Emacs.")
      (license license:gpl3+))))

(define-public emacs-magit-org-todos
  (package
    (name "emacs-magit-org-todos")
    (version "0.1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/danielma/magit-org-todos.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "07r5x256k1fjjxs1yfg41kc94nwvnjlk2vvknkra3j8v9p0j88m7"))))
    (propagated-inputs
     (list emacs-magit))
    (build-system emacs-build-system)
    (home-page "https://github.com/danielma/magit-org-todos.el")
    (synopsis "Get todo.org into Emacs Magit status")
    (description "This package allows you to get @file{todo.org} into your
magit status.

If you have a @file{todo.org} file with @code{TODO} items in the root of your
repository, @code{magit-org-todos} will create a section in your Magit status
buffer with each of your todos.")
    (license license:gpl3+)))

(define-deprecated-package emacs-magit-org-todos-el
  emacs-magit-org-todos)

(define-public emacs-vcsh
  (package
    (name "emacs-vcsh")
    (version "0.4.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/stepnem/vcsh-el.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "183pffdiqb7qqmjq31wxl3fpv8qswqgg99gb716rddiyk15ysri7"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/stepnem/vcsh-el")
    (synopsis "Emacs VCSH integration")
    (description
     "This library provides basic ``enter'' functionality and a few
convenience commands to initialize a @acronym{VCSH, Version Control System for
$HOME} repository and add files to it.  It can be used in conjunction with
Magit.")
    (license license:public-domain)))

(define-public emacs-f3
  (package
    (name "emacs-f3")
    (version "0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cosmicexplorer/f3")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1qg48zbjdjqimw4516ymrsilz41zkib9321q0caf9474s9xyp2bi"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (home-page "https://github.com/cosmicexplorer/f3")
    (synopsis "Fantastic File Finder for Emacs")
    (description
     "The Fantastic File Finder for Emacs.  Find files fast, using helm.")
    (license license:gpl3+)))

(define-public emacs-lice
  (package
    (name "emacs-lice")
    (version "0.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/buzztaiki/lice-el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "06plnrxj6kgnl9mjcbc48mgagpa60yyyyribwicmcgg9pgrs0wad"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "^template/" %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-template-directory
            (lambda _
              (emacs-substitute-variables "lice.el"
                ("lice:system-template-directory"
                 (string-append (elpa-directory #$output) "/template"))))))))
    (home-page "https://github.com/buzztaiki/lice-el")
    (synopsis "License and header template for Emacs")
    (description "@code{lice.el} provides following features:

@itemize
@item License template management.
@item File header insertion.
@end itemize\n")
    (license license:gpl3+)))

(define-deprecated-package emacs-lice-el
  emacs-lice)

(define-public emacs-academic-phrases
  (let ((commit "0823ed8c24b26c32f909b896a469833ec4d7b656"))
    (package
      (name "emacs-academic-phrases")
      (version (git-version "0.1" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nashamri/academic-phrases")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0qfzsq8jh05w4zkr0cvq3i1hdn97bq344vcqjg46sib26x3wpz6r"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-s emacs-ht))
      (home-page "https://github.com/nashamri/academic-phrases")
      (synopsis "Bypass that mental block when writing your papers")
      (description
       "When writing your academic paper, you might get stuck trying to find
the right phrase that captures your intention.  This package tries to
alleviate that problem by presenting you with a list of phrases organized by
the topic or by the paper section that you are writing.  This package has
around 600 phrases so far.

Using this package is easy, just call @code{academic-phrases} to get a list of
phrases organized by topic, or call @code{academic-phrases-by-section} to
browse the phrases by the paper section and fill-in the blanks if required.")
      (license license:gpl3+))))

(define-public emacs-auto-yasnippet
  (let ((commit "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
        (revision "3"))
    (package
      (name "emacs-auto-yasnippet")
      (version (git-version "0.3.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/abo-abo/auto-yasnippet")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0ifzbwnm2axb8kmfp3jvg05wq02j121iwp2m64pi70c7mza0i886"))))
      (build-system emacs-build-system)
      (arguments
       '(#:test-command '("make" "test")))
      (propagated-inputs
       (list emacs-yasnippet))
      (home-page "https://github.com/abo-abo/auto-yasnippet/")
      (synopsis "Quickly create disposable yasnippets")
      (description "This package provides a hybrid of keyboard macros and
yasnippet.  You create the snippet on the go, usually to be used just in the
one place.  It's fast, because you're not leaving the current buffer, and all
you do is enter the code you'd enter anyway, just placing ~ where you'd like
yasnippet fields and mirrors to be.")
      (license license:gpl3+))))

(define-public emacs-highlight-numbers
  (package
    (name "emacs-highlight-numbers")
    (version "0.2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fanael/highlight-numbers")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1r07mpyr7rhd7bkg778hx6vbhb4n9ixgzkpszhgks7ri6ia38pj8"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-parent-mode))
    (home-page "https://github.com/Fanael/highlight-numbers")
    (synopsis "Highlight numbers in source code")
    (description "@code{highlight-numbers-mode} provides a minor mode for
syntax highlighting of numeric literals in source code.

It s customizable: it's easy to add or redefine what exactly constitutes a
\"number\" in given major mode.  See @code{highlight-numbers-modelist}.")
    (license license:gpl3+)))

(define-public emacs-darkroom
  (package
    (name "emacs-darkroom")
    (version "0.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "darkroom-" version ".el"))
       (sha256
        (base32 "0l1xg5kqmjw22k78qnsln0ifx2dx74xxqj0qp8xxcpqvzzx0xh86"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/darkroom.html")
    (synopsis "Remove visual distractions and focus on writing")
    (description "@code{darkroom-mode} makes visual distractions disappear.
The mode-line is temporarily elided, text is enlarged and margins are adjusted
so that it's centered on the window.

@code{darkroom-tentative-mode} is similar, but it doesn't immediately turn-on
@code{darkroom-mode}, unless the current buffer lives in the sole window of
the Emacs frame (i.e. all other windows are deleted).  Whenever the frame is
split to display more windows and more buffers, the buffer exits
@code{darkroom-mode}.  Whenever they are deleted, the buffer re-enters
@code{darkroom-mode}.")
    (license license:gpl3+)))

(define-public emacs-rsw-elisp
  (package
    (name "emacs-rsw-elisp")
    (version "1.0.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/rswgnu/rsw-elisp")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0dfq8myg0r91900bk1s70amsmm4mjk2qsg12v5pk7lla5d2vnyaf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/rswgnu/rsw-elisp")
    (synopsis "Improved expressions that interactively evaluate Emacs Lisp")
    (description "This package improves and replaces the GNU Emacs commands
that interactively evaluate Emacs Lisp expressions.  The new commands replace
standard key bindings and are all prefixed with @code{rsw-elisp-}.  They work
the same way as the old commands when called non-interactively; only the
interactive behavior should be different.")
    (license license:gpl3+)))

(define-public emacs-default-text-scale
  (package
    (name "emacs-default-text-scale")
    (version "0.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/purcell/default-text-scale")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0h42jiwxrxjmk7ccwh3h25n7dy2rq61ncm5wx27jhkncc5jdm4h6"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/default-text-scale")
    (synopsis "Adjust the font size in all Emacs frames")
    (description "This package provides commands for increasing or
decreasing the default font size in all GUI Emacs frames.")
    (license license:gpl3+)))

(define-public emacs-fixed-pitch
  (package
    (name "emacs-fixed-pitch")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cstby/fixed-pitch-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0qlavjvib0r71xdy6y6pan9dhr57lw7jhmqk60mwa8fq6km8kpkj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/cstby/fixed-pitch-mode")
    (synopsis
     "Use a monospaced typeface for code and a proportional one elsewhere")
    (description
     "Fixed-pitch mode is an Emacs minor mode for setting a monospaced typeface.
This allows you to set a proportional typeface for UI elements while keeping
a monospaced typeface for code.")
    (license license:gpl3+)))

(define-public emacs-mixed-pitch
  (package
    (name "emacs-mixed-pitch")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/jabranham/mixed-pitch.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1dhljrh44dsnixd8hbb11k6dgap8r8n7jknhfy2afdzq889fih74"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://gitlab.com/jabranham/mixed-pitch")
    (synopsis "Mix variable- and fixed-pitch fonts in the same Emacs buffer")
    (description
     "@code{mixed-pitch-mode} is a minor mode that enables mixing
variable-pitch and fixed-pitch fonts in the same buffer.  The list
@code{mixed-pitch-fixed-pitch-faces} defines the faces that are kept
fixed-pitch,everything else becomes variable-pitch.")
    (license license:gpl3+)))

(define-public emacs-visual-regexp
  (package
    (name "emacs-visual-regexp")
    (version "1.1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/benma/visual-regexp.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "12p3rlhdphwmx1kxsjzcl2wj3i6qgpvw8iwhg1whs6yqgaxivixd"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/benma/visual-regexp.el/")
    (synopsis "Regexp command with interactive visual feedback")
    (description "This package provides an Emacs regexp command with
interactive visual feedback.")
    (license license:gpl3+)))

(define-public emacs-faceup
  (let ((commit "6c92dad56a133e14e7b27831e1bcf9b3a71ff154")
        (revision "1"))
    (package
      (name "emacs-faceup")
      (version (string-append "0.0.1" "-" revision "."
                              (string-take commit 7)))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Lindydancer/faceup")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1yzmy7flrhrh0i10bdszx8idx6r8h6czm4vm4q0z6fp5fw94zwrx"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Lindydancer/faceup")
      (synopsis "Markup language for faces and font-lock regression testing")
      (description "Emacs is capable of highlighting buffers based on
language-specific @code{font-lock} rules.  This package makes it possible to
perform regression test for packages that provide font-lock rules.")
      (license license:gpl3+))))

(define-public emacs-racket-mode
  ;; XXX: Upstream does not tag releases, nor does it bump versions.  The
  ;; "1" version below does not exist.  It might change, tho.  See
  ;; <https://github.com/greghendershott/racket-mode/issues/389>.
  (let ((commit "7f2813da48baf980f1ae188f651dafa98ba951cd")
        (revision "8"))
    (package
      (name "emacs-racket-mode")
      (version (git-version "1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/greghendershott/racket-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "124zr2432kqyjak516mrc801kdkmb2072c906j942mf0zwjvh16v"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:include #~(list "\\.el$" "\\.rkt$")
        #:test-command #~(list "make" "test")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'pre-check
              (lambda _
                (setenv "HOME" (dirname (getcwd)))
                (substitute* "test/racket-tests.el"
                  (("\\(ert-deftest racket-tests/(repl|run) .*" all)
                   (string-append all "(skip-unless nil)"))))))))
      (native-inputs
       (list racket))
      (propagated-inputs
       (list emacs-faceup emacs-paredit emacs-pos-tip emacs-s))
      (home-page "https://www.racket-mode.com/")
      (synopsis "Major mode for the Racket language")
      (description "Racket mode provides thorough font-lock and indentation.
It follows DrRacket concepts where applicable.")
      (license license:gpl2+))))

(define-public emacs-ob-racket
  (package
    (name "emacs-ob-racket")
    (version "1.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/hasu/emacs-ob-racket")
                    (commit version)))
              (sha256
               (base32
                "0bqhxi1nikxwc0gyqsnxc7ya2s41vc06w39s24qz64kja8zqzzya"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f))  ; No tests.
    (home-page "https://github.com/hasu/emacs-ob-racket")
    (synopsis "Org Babel support for Racket")
    (description
     "This package adds support for working with Racket code blocks with
Org Babel in Org mode.")
    (license license:gpl3+)))

(define-public emacs-grep-context
  (let ((commit "5a4e3efdf775755c1bbefcfe4b461c1166d81d7d")
        (revision "1"))
    (package
      (name "emacs-grep-context")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mkcms/grep-context")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "00q7l4a3c0ay6g5ff9bfa2qgkiswsyh4s6pqnpg0zpzhvv5710f5"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/mkcms/grep-context")
      (synopsis "Increase context in compilation and grep buffers")
      (description
       "This package provides an Emacs package for more context in
compilation/grep buffers.  Works with @code{wgrep}, @code{ack}, @code{ag},
@code{ivy}.")
      (license license:gpl3+))))

(define-public emacs-helm-firefox
  (package
    (name "emacs-helm-firefox")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-helm/helm-firefox")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "08mjsi2f9s29fkk35cj1rrparjnkm836qmbfdwdz7y51f9varjbs"))))
    (propagated-inputs
     (list emacs-helm))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacs-helm/helm-firefox")
    (synopsis "Display firefox bookmarks with Emacs Helm interface")
    (description "Display firefox bookmarks with Emacs Helm interface")
    (license license:gpl3+)))

(define-public emacs-interactive-align
  (package
    (name "emacs-interactive-align")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mkcms/interactive-align")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0aanl83k66nbp5dpsckmj4dgkclkr208nrbl7wmjnqlkg0qzgifz"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/mkcms/interactive-align/")
    (synopsis "Interactive align-regexp command in Emacs")
    (description "Interactive align-regexp command in Emacs")
    (license license:gpl3+)))

(define-public emacs-shift-number
  (package
    (name "emacs-shift-number")
    (version "0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/alezost/shift-number.el")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0zlwmzsxkv4mkggylxfx2fkrwgz7dz3zbg2gkn2rxcpy2k2gla64"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/alezost/shift-number.el")
    (synopsis "Increase or decrease the number at point")
    (description "@code{emacs-shift-number} provides commands
@code{shift-number-up} to increase and @code{shift-number-down} to
decrease the number at point.")
    (license license:gpl3+)))

(define-public emacs-highlight-defined
  (package
    (name "emacs-highlight-defined")
    (version "0.1.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fanael/highlight-defined")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0a9nn1jnbgv93kz1iz5iay34d0p7lkpd8ic619ysk8qcksc0yn2i"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/highlight-defined")
    (synopsis "Syntax highlighting of known Elisp symbols")
    (description "Minor mode providing syntax highlighting of known Emacs Lisp
symbols.  Currently the code distinguishes Lisp functions, built-in functions,
macros, faces and variables.  To enable call @code{highlight-defined-mode}.")
    (license license:gpl3+)))

(define-public emacs-parinfer-mode
  (package
    (name "emacs-parinfer-mode")
    (version "0.4.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DogLooksGood/parinfer-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0v97ncb0w1slb0x8861l3yr1kqz6fgw1fwl1z9lz6hh8p2ih34sk"))))
    (propagated-inputs
     (list emacs-dash emacs-rainbow-delimiters emacs-company))
    (build-system emacs-build-system)
    (home-page "https://github.com/DogLooksGood/parinfer-mode/")
    (synopsis "Lisp structure editing mode")
    (description "@code{parinfer-mode} is a proof-of-concept editor
mode for Lisp programming languages.  It will infer some changes to
keep Parens and Indentation inline with one another.")
    (license license:gpl3+)))

(define-public emacs-parinfer-rust-mode
  (package
    (name "emacs-parinfer-rust-mode")
    (version "0.9.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/justinbarclay/parinfer-rust-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1p00m757maw6dxig0x45gry1l7vm9dm6wg1anfm2rwl6hw1f5q25"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test" "CASK=")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              ;; Skip all non-necessary targets.
              (substitute* "Makefile"
                (("^test:.*$")
                 "test:\n"))
              (let ((parinfer-lib
                     (string-append
                      (dirname
                       (search-input-file inputs "lib/libparinfer_rust.so"))
                      "/")))
                ;; Specify the absolute file names of the parinfer shared
                ;; library.
                ;; (make-file-writable "parinfer-rust-mode.el")
                (emacs-substitute-variables "parinfer-rust-mode.el"
                  ("parinfer-rust--lib-name" "libparinfer_rust.so")
                  ("parinfer-rust-library-dir" parinfer-lib))
                (emacs-substitute-sexps "parinfer-rust-mode.el"
                  ("defcustom parinfer-rust-library-directory" parinfer-lib)
                  ("defconst parinfer-rust--lib-name"
                   "libparinfer_rust.so"))))))))
    (native-inputs (list emacs-clojure-mode emacs-ert-runner emacs-paredit))
    (inputs (list parinfer-rust-emacs))
    (propagated-inputs (list emacs-track-changes))
    (home-page "https://github.com/justinbarclay/parinfer-rust-mode")
    (synopsis "Lisp structure editing mode leveraging Parinfer Rust")
    (description
     "Parinfer Rust mode aims to be a simple implementation of Parinfer that
leverages the Parinfer Rust Emacs library to do most of the heavy lifting.")
    (license license:gpl3+)))

(define-public emacs-helm-eww
  (package
    (name "emacs-helm-eww")
    (version "1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-helm/helm-eww")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0hpq1h0p69c9k6hkd2mjpprx213sc5475q7pr2zpmwrjdzgcv70z"))))
    (propagated-inputs
     (list emacs-helm))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacs-helm/helm-eww/")
    (synopsis "Helm interface to EWW")
    (description "This package provides a Helm interface for EWW buffers,
bookmarks and history.")
    (license license:gpl3+)))

(define-public emacs-stumpwm-mode
    (let ((commit "920f8fc1488f7953f205e1dda4c2ecbbbda56d6")
        (revision "3"))
    (package
      (name "emacs-stumpwm-mode")
      (version (git-version "0.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/stumpwm/stumpwm-contrib")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0giac390bq95ag41xkxqp8jjrhfx1wpgglz7jg5rkm0wjhcwmyml"))))
      (build-system emacs-build-system)
      (arguments
       (list #:lisp-directory "util/swm-emacs"))
      (home-page "https://github.com/stumpwm/stumpwm-contrib")
      (synopsis "Emacs minor-mode for Stumpwm")
      (description "Emacs minor-mode for Stumpwm")
      (license license:gpl3+))))

(define-public emacs-irfc
  (package
    (name "emacs-irfc")
    (version "20130824.507-1")
    (source
     (origin
       (method url-fetch)
       (uri "https://www.emacswiki.org/emacs/download/irfc.el")
       (file-name (string-append "irfc-" version ".el"))
       (sha256
        (base32
         "0rbfrza56kvspvgrwg0b5bj30d0qncqdsmfxn3y5caq4ifcj77hv"))))
    (build-system emacs-build-system)
    (home-page "https://www.emacswiki.org/emacs/download/irfc.el")
    (synopsis "Interface for IETF RFC document")
    (description
     "This package provides an Emacs interface for IETF RFC document.")
    (license license:gpl3+)))

(define-public emacs-ido-at-point
  (package
    (name "emacs-ido-at-point")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/katspaugh/ido-at-point")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1bii7vj8pmmijcpvq3a1scky4ais7k6d7zympb3m9dmz355m9rpp"))))
    (build-system emacs-build-system)
    (synopsis "Ido-style completion at point")
    (description
     "This package is an alternative frontend for @code{completion-at-point}.
It replaces the standard completions buffer with Ido prompt.")
    (home-page "https://github.com/katspaugh/ido-at-point")
    (license license:gpl3+)))

(define-public emacs-ido-vertical-mode
  (package
    (name "emacs-ido-vertical-mode")
    (version "0.1.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/creichert/ido-vertical-mode.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1lv82q639xjnmvby56nwqn23ijh6f163bk675s33dkingm8csj8k"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/creichert/ido-vertical-mode.el")
    (synopsis "Makes ido-mode display vertically")
    (description "Makes ido-mode display prospects vertically.")
    (license license:gpl3+)))

(define-public emacs-wordgen
  (package
    (name "emacs-wordgen")
    (version "0.1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fanael/wordgen.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "06vbc9ycz1nbjwjkg99y3lj6jwb6lnwnmkqf09yr00jjrrfhfash"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs (if (target-64bit?)
                  emacs-minimal
                  ;; Require wide-int support for 32-bit platform.
                  emacs-wide-int)))
    (home-page "https://github.com/Fanael/wordgen.el")
    (synopsis "Random word generator")
    (description "This package provides functions to generate random words
using user-provided rules.")
    (license license:gpl3+)))

(define-public emacs-on
  (package
    (name "emacs-on")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://gitlab.com/axgfn/on.el/")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "00ljs4zqz29iq942z2009dyhbydgw8p92mc34pz0pjdqw5885kn0"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://gitlab.com/axgfn/on.el/")
    (synopsis "Hooks for faster Emacs startup")
    (description
     "This package exposes a number of utility hooks and functions ported
from Doom Emacs.")
    (license license:expat)))

(define-public emacs-on-screen
  (package
    (name "emacs-on-screen")
    (version "1.3.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/on-screen-" version ".el"))
       (file-name (string-append name "-" version ".el"))
       (sha256
        (base32 "0ga4hw23ki583li2z2hr7l6hk1nc2kdg4afndg06cm9jn158wza7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/michael-heerdegen/on-screen.el")
    (synopsis "Guide your eyes while scrolling")
    (description
     "Scrolling can be distracting because your eyes may lose
orientation.  This library implements a minor mode that highlights
the previously visible buffer part after each scroll.")
    (license license:gpl3+)))

(define-public emacs-highlight-escape-sequences
  ;; No release upstream.  Extract version from main file.
  (let ((commit "08d846a7aa748209d65fecead2b6a766c3e5cb41")
        (revision "0"))
    (package
      (name "emacs-highlight-escape-sequences")
      (version (git-version "0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dgutov/highlight-escape-sequences")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "05mc3w1f8ykf80914a1yddw6j8cmh0h57llm07xh89s53821v2is"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/dgutov/highlight-escape-sequences")
      (synopsis "Highlight escape sequences in Emacs")
      (description "@code{highlight-escape-sequences} provides an
Emacs minor mode to escape sequences in code.")
      (license license:gpl3+))))

(define-public emacs-dashboard
  (package
    (name "emacs-dashboard")
    (version "1.8.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rakanalh/emacs-dashboard")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1m39alr4vi22wr0yd22yi3qkdykwh8vmkdlbbd8qm9z1g7mvl382"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons* "\\.txt$" "\\.png$" %default-include)
           #:test-command #~(list "ert-runner"
                                  "-L" "."
                                  "-l" "test/activate.el")
           #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'fix-test
                 (lambda _
                   (substitute* "test/activate.el"
                     (("\\(dashboard-setup-startup-hook\\)" all)
                      (string-append "(require 'dashboard)" all))))))))
    (propagated-inputs
     (list emacs-page-break-lines))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/rakanalh/emacs-dashboard")
    (synopsis "Startup screen extracted from Spacemacs")
    (description "This package provides an extensible Emacs dashboard, with
sections for bookmarks, Projectile projects, Org Agenda and more.")
    (license license:gpl3+)))

(define-public emacs-enlight
  (package
    (name "emacs-enlight")
    (version "0.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ichernyshovvv/enlight")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0crccz28f54xc0202gdbnpkn7kfsxf66p2m2grs6wnwyjxrmpnsq"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/ichernyshovvv/enlight")
    (synopsis "Highly customizable startup screen for Emacs")
    (description "Lightweight yet very flexible startup screen for Emacs.")
    (license license:gpl3+)))

(define-public emacs-grid
  (package
    (name "emacs-grid")
    (version "0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/ichernyshovvv/grid.el")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1d7y54vn75n2kwfz3maf6rvr756dqp8gqms5xs2rkh7dz10hzyiv"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs"
              "--batch" "--no-init-file" "--no-site-file" "--no-splash"
              "-L" "test"
              "-l" "grid.el"
              "-l" "test/test-box.el"
              "-l" "test/test-row.el"
              "-f" "ert-run-tests-batch-and-exit")))
    (synopsis "Library for putting text into boxes and align these boxes")
    (description
     "This library allows you to put text data into boxes and align them
horizontally, applying margin, padding, borders.")
    (home-page "https://github.com/ichernyshovvv/grid.el")
    (license license:gpl3+)))

(define-public emacs-slime-company
  (package
    (name "emacs-slime-company")
    (version "1.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/anwyn/slime-company")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1lzl08fadjn58s9r8kcn1m2sj8qpkg230cjx382jkd5h7ahksx1n"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-slime emacs-company))
    (home-page "https://company-mode.github.io")
    (synopsis "SLIME completion backend for @code{company-mode}")
    (description
     "This is a backend implementation for the completion package
@code{company-mode} which supports the normal and the fuzzy completion
modes of SLIME.")
    (license license:gpl3+)))

(define-public emacs-sml-mode
  (package
    (name "emacs-sml-mode")
    (version "6.12")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/sml-mode-"
                           version ".tar"))
       (sha256
        (base32 "19wyxsnw60lmjbb7ijislpv9vzk9996rh1b0iw7wyrqszfxy2p20"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/sml-mode.html")
    (synopsis "Major mode for editing (Standard) ML")
    (description "SML-MODE is a major Emacs mode for editing Standard ML.
It provides syntax highlighting and automatic indentation and
comes with sml-proc which allows interaction with an inferior SML
interactive loop.")
    (license license:gpl3+)))

(define-public emacs-eros
  (let ((commit "a9a92bdc6be0521a6a06eb464be55ed61946639c")
        (revision "0"))
    (package
      (name "emacs-eros")
      ;; No tag or release, version taken from `eros.el'.
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/xiongtx/eros")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "04nkqsvh8c988hc3ajigs206ad64204qdhhqzdvm3k7m7qiiwga8"))))
      (build-system emacs-build-system)
      (arguments
       ;; No tests found in source
       (list
        #:tests? #f))
      (home-page "https://github.com/xiongtx/eros")
      (synopsis "Evaluation result overlays")
      (description "@code{eros} provides result overlays for evaluating Emacs
Lisp.")
      (license license:gpl3+))))

(define-public emacs-geiser-eros
  (package
    (name "emacs-geiser-eros")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~sokolov/geiser-eros")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0vvmplgsygcp86jlszz85g0bnqndpx6qxrjlg6hpnql6vbjjay7r"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-eros emacs-geiser))
    (home-page "https://git.sr.ht/~sokolov/geiser-eros")
    (synopsis "Evaluation result overlays for geiser")
    (description
     "@code{geiser-eros} provides evaluation result overlays for geiser.")
    (license license:gpl3+)))

(define-public emacs-stickyfunc-enhance
  (let ((commit "13bdba51fcd83ccbc3267959d23afc94d458dcb0")
        (revision "1"))
    (package
      (name "emacs-stickyfunc-enhance")
      (version "0.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tuhdo/semantic-stickyfunc-enhance")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "16dxjsr5nj20blww4xpd4jzgjprzzh1nwvb810ggdmp9paf4iy0g"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/tuhdo/semantic-stickyfunc-enhance")
      (synopsis "Enhancement to stock @code{semantic-stickyfunc-mode}")
      (description
       "@code{semantic-stickyfunc-mode} shows the function point is currently
in at the first line of the current buffer.  This is useful when you have a
very long function that spreads more than a screen, and you don't have to
scroll up to read the function name and then scroll down to original position.")
      (license license:gpl3+))))

(define-public emacs-git-auto-commit-mode
  (package
    (name "emacs-git-auto-commit-mode")
    (version "4.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ryuslash/git-auto-commit-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gpib57f7xza04g3iyihw5v15hb7pncqsmvyggib902yvcxlkvqf"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-buttercup git))
    (arguments
     `(#:test-command '("buttercup" "-L" ".")))
    (home-page "https://github.com/ryuslash/git-auto-commit-mode")
    (synopsis "Emacs Minor mode to automatically commit and push")
    (description "@code{git-auto-commit-mode} is an Emacs minor mode that
tries to commit changes to a file after every save.

When @code{gac-automatically-push-p} is non-nil, it also tries to push to the
current upstream.")
    (license license:gpl3+)))

(define-public emacs-ultra-scroll
  (package
    (name "emacs-ultra-scroll")
    (version "0.4.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jdtsmith/ultra-scroll")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0k1xqkxq89mz8dvzbfpks3jnrcmbd0hcz8a0hib1m3ka55hpczqz"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://github.com/jdtsmith/ultra-scroll")
    (synopsis "Scroll Emacs like lightning")
    (description
     "@code{ultra-scroll} is a smooth-scrolling package for Emacs.  It
provides highly optimized, pixel-precise smooth-scrolling which can readily
keep up with the very high event rates of modern track-pads and high-precision
wheel mice.")
    (license license:gpl3+)))

(define-public emacs-smooth-scroll
  (package
    (name "emacs-smooth-scroll")
    (version "1.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/k-talo/smooth-scroll.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0d2qzpgh486cp0aa12ky1np1i49d0gskvldfw627v55qsm6ql9ll"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/k-talo/smooth-scroll.el")
    (synopsis "Minor mode for smooth and in-place scrolling in Emacs")
    (description "This package provides the @code{smooth-scroll-mode} minor mode
 for Emacs, enabling smooth and in-place scrolling functionality.")
    (license license:gpl3+)))

(define-public emacs-scroll-on-drag
  (let ((commit "179c2acecc48d3ceca4b449b2a225d684002bb32")
        (revision "2"))
    (package
      (name "emacs-scroll-on-drag")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-scroll-on-drag")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0v7d4mrsvckbb66kvskfb9rfrhg8p0zbkr6jqdspfl1p3x8zs2nk"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/ideasman42/emacs-scroll-on-drag")
      (synopsis "Interactive scrolling")
      (description "This package permits scrolling at increasing speeds based
on drag distance.")
      (license license:gpl3+))))

(define-public emacs-company-restclient
  (package
    (name "emacs-company-restclient")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/iquiw/company-restclient")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0yp0hlrgcr6yy1xkjvfckys2k24x9xg7y6336ma61bdwn5lpv0x0"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company emacs-know-your-http-well emacs-restclient))
    (home-page "https://github.com/iquiw/company-restclient")
    (synopsis "Company-mode completion back-end for restclient-mode")
    (description "@code{company-mode} back-end for
@code{restclient-mode}.

It provides auto-completion for HTTP methods and headers in
@code{restclient-mode}.  Completion source is given by
@code{know-your-http-well}.")
    (license license:gpl3+)))

(define-public emacs-noflet
  (let ((version "20170629")
        (revision "1")
        (commit "7ae84dc3257637af7334101456dafe1759c6b68a"))
    (package
      (name "emacs-noflet")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/nicferrier/emacs-noflet")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0g70gnmfi8n24jzfci9nrj0n9bn1qig7b8f9f325rin8h7x32ypf"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'require-dash
             ;; noflet.el uses -map from dash, but (require 'dash) is
             ;; missing. So, add it.
             (lambda _
               (substitute* "noflet.el"
                 ((";;; Code:") ";;; Code:\n(require 'dash)"))
               #t)))))
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/nicferrier/emacs-noflet")
      (synopsis "Locally override functions")
      (description "@code{emacs-noflet} lets you locally override functions,
in the manner of @command{flet}, but with access to the original function
through the symbol: @command{this-fn}.")
      (license license:gpl3+))))

(define-public emacs-dumb-jump
  (package
    (name "emacs-dumb-jump")
    (version "0.5.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jacktasia/dumb-jump")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18d2ll5wlll6pm909hiw8w9ijdbrjvy86q6ljzx8yyrjphgn0y1y"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f                      ; FIXME: Tests freeze when run.
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'set-shell
           (lambda _
             ;; Setting the SHELL environment variable is required for the
             ;; tests to find sh.
             (setenv "SHELL" (which "sh")))))))
    (native-inputs
     (list emacs-el-mock emacs-ert-runner emacs-noflet emacs-undercover))
    (propagated-inputs
     (list emacs-f emacs-popup))
    (home-page "https://github.com/jacktasia/dumb-jump")
    (synopsis "Jump to definition for multiple languages without configuration")
    (description "Dumb Jump is an Emacs \"jump to definition\" package with
support for multiple programming languages that favors \"just working\" over
speed or accuracy.  This means minimal --- and ideally zero --- configuration
with absolutely no stored indexes (tags) or persistent background processes.
Dumb Jump performs best with The Silver Searcher @command{ag} or ripgrep
@command{rg} installed.")
    (license license:gpl3+)))

(define-public emacs-dts-mode
  (package
    (name "emacs-dts-mode")
    (version "1.0")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/dts-mode-"
                                  version ".tar"))
              (sha256
               (base32
                "0ihwqkv1ddysjgxh01vpayv3ia0vx55ny8ym0mi5b4iz95idj60s"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/dts-mode.html")
    (synopsis "Major mode for Device Tree source files")
    (description
     "This package provides an Emacs minor mode for highlighting
device tree files.")
    (license license:gpl3+)))

(define-public emacs-devicetree-ts-mode
  (package
    (name "emacs-devicetree-ts-mode")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~akagi/devicetree-ts-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1aif25hqs9i1aax331s4p8b59kxrq584ynfnh640p43jzmqf5p3d"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list tree-sitter-devicetree))
    (home-page "https://sr.ht/~akagi/devicetree-ts-mode")
    (synopsis "Tree-sitter major mode for editing DTS files")
    (description "This package provides tree-sitter major mode
for editing Devicetree files.")
    (license license:gpl3+)))

(define-public emacs-devil
  (package
    (name "emacs-devil")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/susam/devil")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1pr9yf6f37sz5qy1snn8ag5bvg6lza7q635jh8jhaqqfp37jvv1y"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "tests")))
    (home-page "https://github.com/susam/devil")
    (synopsis "Minor mode for translating key sequences")
    (description
     "Devil intercepts your devil key (comma by default) to let you type key
sequences without using modifier keys.  Devil is highly configurable and it
can be configured to perform other key sequence translations.")
    (license license:expat)))

(define-public emacs-daemons
  (package
    (name "emacs-daemons")
    (version "2.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/cbowdon/daemons.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1p5f2lf6jlsvyh6zhd6drc2njadlkn73djrykridsphzh92q88k0"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "ert-runner" "daemons-test.el")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'skip-failing-tests
            (lambda _
              (substitute* "daemons-test.el"
                (("\\(ert-deftest daemons-(-command|define-submodule)-test .*"
                  all)
                 (string-append all " (skip-unless nil)"))))))))
    (propagated-inputs (list emacs-s))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/cbowdon/daemons.el")
    (synopsis "Emacs UI for managing init system services")
    (description
     "This is an Emacs mode to give you a UI for managing init system
daemons (services) for those getting tired of typing out @code{sudo service
my_thing reload} all the time.  It offers a consistent UI over different init
systems.")
    (license license:gpl3+)))

(define-public emacs-isearch+
  (let ((commit "7c251b91a67bf914066e23e269ba52fda5b45f5f")
        (revision "2"))
    (package
      (name "emacs-isearch+")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/isearch-plus")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1w2799714jcdycjlxgs8lpmmz6dmzvcvqy8xwxhvmgpb60g4f2yr"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/isearch+.el")
      (synopsis "Extensions to @code{isearch.el}")
      (description "This package extends @code{isearch} with advice, dynamic
filters, highlighting of regexp group levels, and more.")
      (license license:gpl2+))))

(define-public emacs-eshell-bookmark
  (package
    (name "emacs-eshell-bookmark")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Fuco1/eshell-bookmark")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "14dmsnixf9vqdhsixw693sml0fn80zcf0b37z049fb40cmppqxdw"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fuco1/eshell-bookmark")
    (synopsis "Provide @file{bookmark.el} integration for @code{eshell}")
    (description
     "This package allows for bookmarking @code{eshell} buffers.  Upon
visiting the bookmark, a new @code{eshell} session will be opened in the
appropriate directory if no @code{eshell} session is active.")
    (license license:gpl3+)))

(define-public emacs-eshell-syntax-highlighting
  (package
    (name "emacs-eshell-syntax-highlighting")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/akreisher/eshell-syntax-highlighting")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1v3217r9bwlgzjx0g8m7rqqba405wx4xmsg1dm190cl10ai8xda5"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/akreisher/eshell-syntax-highlighting")
    (synopsis "Add syntax highlighting to Eshell")
    (description
     "This package highlights user commands at the Eshell interactive prompt
to provide feedback on the validity of commands and syntax.")
    (license license:gpl3+)))

(define-public emacs-eshell-z
  (package
    (name "emacs-eshell-z")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xuchunyang/eshell-z")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "13dwaq8q23rwmrkpy3gvf7aswrkk6b9ak5221xl7n0bld4wdhq3j"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/xuchunyang/eshell-z")
    (synopsis "Quick navigation to frequently visited directories")
    (description
     "This package is a port of @code{z}, and keeps track of visited directories
and commands invoked within them in order to enable navigation via input of
matching regexps.")
    (license license:gpl3+)))

(define-public emacs-esh-autosuggest
  (package
    (name "emacs-esh-autosuggest")
    (version "2.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/dieggsy/esh-autosuggest")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0l2nnlr3b6df1xn0qjf5d5ryy1wcs1jczyfy795vsasd5gm3g0xh"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-company))
    (home-page "https://github.com/dieggsy/esh-autosuggest")
    (synopsis "Fish-like autosuggestions in Eshell")
    (description
     "This package assumes you use something other than company for eshell
completion (e.g. @code{eshell-pcomplete}, @code{completion-at-point},
@code{helm-esh-pcomplete}).  @code{company-mode} is used solely as a mechanism
for history autosuggestions.

Unless you're using @code{use-package}'s hook keyword, you can enable the
autosuggestions with:
@code{(add-hook 'eshell-mode-hook #'esh-autosuggest-mode)}")
    (license license:gpl3+)))

(define-public emacs-desktop-environment
  (let ((commit "bc1153aa619b12456304cca642424a0d8d2eb416")
        (revision "0"))
    (package
      (name "emacs-desktop-environment")
      (version (git-version "0.5.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/DamienCassou/desktop-environment")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0bslgm9rz7whk0ll21028dsl22wbd289cdc95qj8hhlk8m4hlp2h"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; missing tests
      (home-page "https://gitlab.petton.fr/DamienCassou/desktop-environment")
      (synopsis "Control your GNU/Linux desktop environment from Emacs")
      (description
       "This package helps you control your GNU/Linux desktop from Emacs.
With @code{desktop-environment}, you can control the brightness and volume as
well as take screenshots and lock your screen.  The package depends on the
availability of shell commands to do the hard work for us.  These commands can
be changed by customizing the appropriate variables.")
      (license license:gpl3+))))

(define-public emacs-filechooser
  ;; no tags
  (let ((commit "e55c5ea294bbb2c67ab5c51d9489922a83c22456")
        (revision "0"))
    (package
      (name "emacs-filechooser")
      (version (git-version "0.2.4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url "https://codeberg.org/rahguzar/filechooser")
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0gkqyh0zwqsgqixg7y94axmk00n349iq3cwv9z9vf4zjbmj9sfc4"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ; no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'install 'install-more-stuff
              (lambda _
                (substitute* "emacs.portal"
                  ;; enable by default in exwm
                  (("UseIn=") "UseIn=exwm;"))
                (install-file
                 "emacs.portal"
                 (string-append #$output "/share/xdg-desktop-portal/portals"))
                (install-file
                 "org.gnu.Emacs.FileChooser.service"
                 (string-append #$output "/share/dbus-1/services")))))))
      (propagated-inputs
       (list emacs-compat))
      (home-page "https://codeberg.org/rahguzar/filechooser")
      (synopsis "Backend implementation for xdg-desktop-portal using Emacs")
      (description "This package provides a backend implementation
for xdg-desktop-portal that uses Emacs.  It allows you to use Emacs' file and
path selection facilities in graphical programs that use the
xdg-desktop-portal dbus interface.")
      (license license:gpl3+))))

(define-public emacs-org-caldav
  (let ((commit "44a6d463cee3c3be8acf7511db785ab55519b375")
        (revision "0"))
    (package
      (name "emacs-org-caldav")
      (version (git-version "3.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dengste/org-caldav")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0qxnms7libsq1q7hbvpbbza8g9kzyry0fi3ayhdv9sddnm2wx2d4"))))
      (build-system emacs-build-system)
      (arguments
       ;; Tests require to have two specific calendars on a test server.
       `(#:exclude '("^org-caldav-testsuite\\.el")))
      (propagated-inputs
       (list emacs-org))
      (home-page "https://github.com/dengste/org-caldav")
      (synopsis "Sync Org files with external calendars via the CalDAV protocol")
      (description
       "Org CalDAV synchronizes events between Org files and a CalDAV
calendar.")
      (license license:gpl3+))))

(define-public emacs-zotra
  ;; No releases or tags.
  (let ((commit "fe9093b226a1678fc6c2fadd31a09d5a22ecdcf1")
        (revision "0"))
    (package
      (name "emacs-zotra")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/mpedramfar/zotra/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "04a7h183kbl8nfkhn2386yljmv7hgxg0cdyw1ir3x60i3nji179z"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://github.com/mpedramfar/zotra/")
      (synopsis "Zotra frontend for Emacs")
      (description
       "@code{Emacs-zotra} provides functions to fetch bibliographic
information in different formats (e.g. @{bibtex}) using website urls or search
identifiers.

This library connects to different @code{zotero} translators:
@itemize
@item citoid, using a more limited public API
@item zotra-server, which also fetches attachments
@item translation-server
@end itemize\n")
      (license license:gpl3+))))

(define-public emacs-zotxt
  (package
    (name "emacs-zotxt")
    (version "5.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/egh/zotxt-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1zr67h0w49rsi84mgf6jdili28h8782q6vjl8za0iq1hcx9zqxyf"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-deferred emacs-request))
    (home-page "https://github.com/egh/zotxt-emacs")
    (synopsis "Integrate Emacs with Zotero")
    (description "This package provides two integration features between Emacs
and the Zotero research assistant: Insertion of links to Zotero items into an
Org-mode file, and citations of Zotero items in Pandoc Markdown files.")
    (license license:gpl3+)))

(define-public emacs-zoxide
  (package
    (name "emacs-zoxide")
    (version "1.2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://git.sr.ht/~vonfry/zoxide.el/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1cqpldrdr219kdiraf6pcxizfiylnljri4ghwvblk579xvijnbgr"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'avoid-remote-installs
            (lambda _
              (substitute* ".ci/check.el"
                (("\\(load .*" all)
                 " ")
                (("package-install")
                 "require"))))
          (add-after 'unpack 'patch-bin-path
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "zoxide.el"
                ("zoxide-executable"
                 (search-input-file inputs "bin/zoxide"))))))))
    (native-inputs (list emacs-package-lint))
    (inputs (list zoxide))
    (home-page "https://git.sr.ht/~vonfry/zoxide.el/")
    (synopsis "Zoxide frontend for Emacs")
    (description
     "This package provides an Emacs interface to the command line tool
@code{zoxide}.")
    (license license:gpl3+)))

(define-public emacs-evil-multiedit
  (package
    (name "emacs-evil-multiedit")
    (version "1.4.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hlissner/evil-multiedit")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "08ycwss58zh2zikk79jfj074q78yjcd7vbjgv5ssqvws09x5rgfq"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-evil emacs-iedit))
    (native-inputs
     (list emacs-ert-runner))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-before 'check 'fix-checks
           (lambda _
             (substitute* "Makefile"
               (("@cask exec ") ""))
             (substitute* "test/test-helper.el"
               (("'\\(evil iedit\\)") "nil")))))
       #:test-command '("make" "test")))
    (home-page "https://github.com/hlissner/evil-multiedit")
    (synopsis "Multiple cursors for Evil mode")
    (description
     "This plugin was an answer to the lack of proper multiple cursor support
in Emacs+Evil.  It allows you to select and edit matches interactively,
integrating @code{iedit-mode} into Evil mode with an attempt at sensible
defaults.")
    (license license:gpl3+)))

(define-public emacs-evil-mc
  (let ((commit "1cabb869fe70cef49f7dc06f015c3ade1a969c8c")
        (revision "2"))
    (package
      (name "emacs-evil-mc")
      (version (git-version "0.0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/gabesoft/evil-mc")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0p83p90faq1p02lmsfs7zrnky3cyzgy8z4m83a81r9kakjzhkrnb"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command
             #~(list "emacs" "--no-init-file" "--batch"
                     "--eval=(require 'ecukes)" "--eval=(ecukes)")))
      (propagated-inputs
       (list emacs-evil))
      (native-inputs
       (list emacs-ecukes
             emacs-espuds
             emacs-evil-numbers
             emacs-evil-surround))
      (home-page "https://github.com/gabesoft/evil-mc")
      (synopsis "Interactive search compatible with @code{multiple-cursors}")
      (description "This package can be used with @code{multiple-cursors} to
provide an incremental search that moves all fake cursors in sync.")
      (license license:expat))))

(define-public emacs-evil-org
  (let ((commit "0d10ff7bb9a3a93d25cd91018b17f0a052b335f3")
        (revision "2"))
    (package
      (name "emacs-evil-org")
      (version (git-version "1.0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Somelauw/evil-org-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "15g47xgpswzc8lz7qdbbzfcq1n9m4474qa2jkg43l8d5ali8qa7z"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-evil))
      (home-page
       "https://github.com/Somelauw/evil-org-mode")
      (synopsis "Evil keybindings for Org mode")
      (description
       "This package adds supplemental Evil mode key-bindings to Emacs
Org-mode.  It features:
@itemize
@item normal, visual and insert mode bindings;
@item key bindings organised in key themes;
@item operators like > and < to work on headings;
@item text objects;
@item table support;
@item calendar (date selection) support;
@item agenda support.
@end itemize\n")
      (license license:gpl3+))))

(define-public emacs-debpaste
  (package
    (name "emacs-debpaste")
    (version "0.1.5")
    (home-page "https://github.com/alezost/debpaste.el")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference (url home-page)
                           (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1wi70r56pd5z0x4dp4m58p9asq03j74kdm4fi9vai83vsl2z9amq"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-xml-rpc))
    (synopsis "Manipulate pastes from the Debian Pastezone")
    (description "Debpaste is an Emacs interface for the Debian Pastezone,
allowing you to receive, post, and delete pastes.  It communicates with the
server using XML-RPC.")
    (license license:gpl3+)))

(define-public emacs-xml-rpc
  (package
    (name "emacs-xml-rpc")
    (version "1.6.15")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hexmode/xml-rpc-el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "07vgwnk96i1vpsv2glg6kbkamjcs72xiznsa6xk7nl0nranzr3hd"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/hexmode/xml-rpc-el")
    (synopsis "XML-RPC client for Emacs")
    (description "This package provides an XML-RPC client for Emacs capable
of both synchronous and asynchronous method calls using the @code{url}
package's async retrieval functionality.  @file{xml-rpc.el} represents XML-RPC
datatypes as Lisp values, automatically converting to and from the XML
datastructures as needed, both for method parameters and return values, making
using XML-RPC methods fairly transparent to the Lisp code.")
    (license license:gpl3+)))

(define-public emacs-xpm
  (package
    (name "emacs-xpm")
    (version "1.0.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/xpm-"
                           version ".tar"))
       (sha256
        (base32 "13p6s6b2v7h4bnwdkkrd1qz84jd7g2s18w0czhpxv6hvj9sqf5hx"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/xpm.html")
    (synopsis "XPM image editing mode for Emacs")
    (description "This Emacs package makes editing XPM images easy (and maybe
fun).  Editing is done directly on the (textual) image format, for maximal
cohesion with the Emacs Way.")
    (license license:gpl3+)))

(define-public emacs-fish-completion
  (package
    (name "emacs-fish-completion")
    (version "1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/Ambrevar/emacs-fish-completion.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "17lqip1i1rrsvxzz4bx9rqf1fvwd3hriwg3sj6qxmfc8pylnp37q"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs #:allow-other-keys)
             (make-file-writable "fish-completion.el")
             (emacs-substitute-variables "fish-completion.el"
               ("fish-completion-command"
                (search-input-file inputs "bin/fish"))))))))
    (inputs (list fish))
    (home-page
     "https://gitlab.com/Ambrevar/emacs-fish-completion")
    (synopsis "Fish completion for Emacs pcomplete")
    (description
     "This package provides completion for the Fish shell to pcomplete (used
by shell and Eshell).  You can set it up globally with:

@example
(when (and (executable-find \"fish\")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))
@end example

Alternatively, you can call the @code{fish-completion-mode} manually or in
shell/Eshell mode hook.

The package @code{emacs-bash-completion} is an optional dependency: if available,
@code{fish-completion-complete} can be configured to fall back on bash to further
try completing.  See @code{fish-completion-fallback-on-bash-p}.")
    (license license:gpl3+)))

(define-public emacs-gif-screencast
  (package
    (name "emacs-gif-screencast")
    (version "1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/Ambrevar/emacs-gif-screencast.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1yf6yipvhhna29mzaan5vb3d5qvbrkp2awr5diyf381mvxgk8akh"))))
    (build-system emacs-build-system)
    (inputs
     (list scrot imagemagick gifsicle))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs outputs #:allow-other-keys)
             (let ((scrot (assoc-ref inputs "scrot"))
                   (imagemagick (assoc-ref inputs "imagemagick"))
                   (gifsicle (assoc-ref inputs "gifsicle")))
               (make-file-writable "gif-screencast.el")
               ;; Specify the absolute file names of the various
               ;; programs so that everything works out-of-the-box.
               (emacs-substitute-variables
                   "gif-screencast.el"
                 ("gif-screencast-program"
                  (string-append scrot "/bin/scrot"))
                 ("gif-screencast-convert-program"
                  (string-append imagemagick "/bin/convert"))
                 ("gif-screencast-cropping-program"
                  (string-append imagemagick "/bin/mogrify"))
                 ("gif-screencast-optimize-program"
                  (string-append gifsicle "/bin/gifsicle")))))))))
    (home-page
     "https://gitlab.com/Ambrevar/emacs-gif-screencast")
    (synopsis "One-frame-per-action GIF recording")
    (description
     "Call @code{gif-screencast} to start a recording.
A screenshot is taken for every user action.  Call
@code{gif-screencast-stop} (<f9> by default) to finish recording and create
the GIF result.")
    (license license:gpl3+)))

(define-public emacs-go-translate
  (package
    (name "emacs-go-translate")
    (version "3.0.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lorniu/go-translate/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1j5knkb8h0wpr6pzvrb6kvisjkm4kkd7jzad6h566sn0si2x9y5g"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-L" "."
                             "-l" "gt-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases #~(modify-phases %standard-phases
                   (add-before 'check 'skip-failing-tests
                     (lambda _
                       (substitute* "gt-tests.el"
                         (("\\(ert-deftest test--gt-translation-life-cycle .*"
                           all)
                          (string-append all "(skip-unless nil)\n"))
                         (("\\(ert-deftest test--gt-valid-literally .*"
                           all)
                          (string-append all "(skip-unless nil)\n"))))))))
    (home-page "https://github.com/lorniu/go-translate/")
    (synopsis "Configurable and scalable translation framework")
    (description
     "This is a translation framework on Emacs, with high configurability
and extensibility.  It can easily be extended to various Text-to-Text
conversion scenarios.")
    (license license:gpl3+)))

(define-public emacs-google-translate
  (package
    (name "emacs-google-translate")
    (version "0.12.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/atykhonov/google-translate/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0rwpij2bm8d4jq2w5snkp88mfryplw8166dsrjm407n2p6xr48zx"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'disable-failing-tests
            (lambda _
              (let-syntax
                  ((disable-tests
                    (syntax-rules ()
                      ((_ file ())
                       (syntax-error "test names list must not be empty"))
                      ((_ file (test-name ...))
                       (substitute* file
                         (((string-append "^\\(ert-deftest " test-name ".*") all)
                          (string-append all "(skip-unless nil)\n")) ...)))))
                ;; These tests fail due to a missing requirement:
                ;;   (void-function facemenu-set-face)
                (disable-tests
                 "test/google-translate-core-ui-test.el"
                 ("test-google-translate--suggestion"
                  "test-google-translate--text-phonetic/show-phonetic"
                  "test-google-translate--translation-phonetic/show-phonetic"
                  "test-google-translate--translated-text"))))))))
    (native-inputs (list emacs-el-mock emacs-ert-runner))
    (home-page "https://github.com/atykhonov/google-translate")
    (synopsis "Emacs interface to Google Translate")
    (description
     "This package provides an Emacs interface to the Google Translate
on-line service.")
    (license license:gpl3+)))

(define-public emacs-langtool
  (package
    (name "emacs-langtool")
    (version "2.3.7")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/mhayashi1120/Emacs-langtool")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0vzs3hkhmvdrbii1hmg87brddpjfmqfqykf7a2hnwmdbkihiwwk9"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "test")))
    (propagated-inputs (list emacs-popup))
    (home-page "https://github.com/mhayashi1120/Emacs-langtool")
    (synopsis "Emacs interface to LanguageTool")
    (description
     "Emacs Langtool offers a frontend to @url{https://languagetool.org,
LanguageTool} server.")
    (license license:gpl3+)))

(define-public emacs-lingva
  (let ((commit "6c33594068fa33de622172503deeec6778d9c744")
        (revision "1"))
    (package
      (name "emacs-lingva")
      (version
       (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://codeberg.org/martianh/lingva.el")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0r2f4wrd2v67m7198z0194pg853hbq4vvpd3x96y5ikbypywf426"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/martianh/lingva.el")
      (synopsis "Interact with the lingva.ml API from within Emacs")
      (description "This is a basic interface to the lingva.ml API, which
allows you to obtain translations of texts from Google Translate without any
tracking.")
      (license license:gpl3+))))

(define-public emacs-helm-company
  (package
    (name "emacs-helm-company")
    (version "0.2.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Sodel-the-Vociferous/helm-company")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0lschnr15c39bnfvm2zdp7f3qvyzrdk8gzzwcb1g2d9jy3mkcq05"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-company))
    (native-inputs
     (list emacs-ert-runner))
    (home-page "https://github.com/Sodel-the-Vociferous/helm-company")
    (synopsis "Helm interface for Company mode")
    (description
     "This is a Helm interface to Company mode, a text completion framework.")
    (license license:gpl3+)))

(define-public emacs-helm-descbinds
  (let ((commit "033be73f21778633813264ce1634a6e1ad873d8e"))
    (package
      (name "emacs-helm-descbinds")
      (version (git-version "1.13" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-helm/helm-descbinds")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1n89p56qwa243w1c85i5awnaf7piwjsvfi7nmnsrwm33hix5dknk"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-helm))
      (home-page "https://github.com/emacs-helm/helm-descbinds")
      (synopsis "Convenient @code{describe-bindings} with Helm")
      (description
       "This package is a replacement of @code{describe-bindings} for Helm.
@code{describe-bindings} is replaced with @code{helm-descbinds}.  As usual,
type @code{C-h b}, or any incomplete key sequence plus @code{C-h}, to run
@code{helm-descbinds}.  The bindings are presented in a similar way as
@code{describe-bindings} does, but you can use completion to find the command
you searched for and execute it, or view its documentation.")
    (license license:gpl3+))))

(define-public emacs-helm-emms
  (let ((commit "37e5aa029abfa5a5c48636314de8157142944fa2"))
    (package
      (name "emacs-helm-emms")
      (version (git-version "1.3" "3" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-helm/helm-emms")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0r1ai6xhzayyik30w2sx9n62bxxwm12vfmjspv0daqif9az8y3vg"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-emms))
      (home-page
       "https://github.com/emacs-helm/helm-emms")
      (synopsis "Emms for Helm")
      (description "Helm interface for Emms to browse all tracks and all folders
from @code{emms-source-file-default-directory}.")
      (license license:gpl3+))))

(define-public emacs-helm-exwm
  (package
    (name "emacs-helm-exwm")
    (version "0.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-helm/helm-exwm")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0g4k01ps14bp2az8v6dcag9llg045k2b4kdis81xx4lvw76znr9v"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-exwm))
    (home-page
     "https://github.com/emacs-helm/helm-exwm")
    (synopsis "Helm for EXWM buffers")
    (description
     "@code{helm-exwm} runs a Helm session over the list of EXWM buffers.
@code{helm-exwm-switch} is a convenience X application launcher using Helm to
switch between the various windows of one or several specific applications.
See @code{helm-exwm-switch-browser} for an example.")
    (license license:gpl3+)))

(define-public emacs-helm-flycheck
  (let ((commit "3cf7d3bb194acacc6395f88360588013d92675d6"))
    (package
      (name "emacs-helm-flycheck")
      (version (git-version "0.4" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/yasuyk/helm-flycheck")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1a2yfxhz04klwhcandqvfzysxp6b7bxyxx1xk1x3kds5hif5fkl4"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-dash emacs-flycheck emacs-helm))
      (home-page "https://github.com/yasuyk/helm-flycheck")
      (synopsis "Show Flycheck errors with Helm")
      (description
       "This integrates Flycheck with Helm.")
      (license license:gpl3+))))

(define-public emacs-helm-ls-git
  (package
    (name "emacs-helm-ls-git")
    (version "1.9.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-helm/helm-ls-git")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "097zpwpn18dgazp19czrcn6iz965qgr45gq9lvjrkkp0w03pbdb6"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/emacs-helm/helm-ls-git")
    (synopsis "Helm interface for listing the files in a Git repository")
    (description
     "This package provides a Helm interface for Git files.
@itemize
@item Display the open buffers in project.
@item Display a status source showing state of project (modified files etc.).
@item Display a list of all files in project under git control.
@item Quickly look at diffs of modified files.
@item Allow switching to @code{git status} with your preferred frontend
(vc-dir, Magit,etc.).
@item Full integration of git-grep, also allow usage of @code{helm-grep} (you
can use ack-grep instead of grep).
@item Integrate usage of gid from id-utils.
@item Full integration with @code{helm-find-files}, allow you to browse
projects unrelated to current-buffer.
@item In addition, all actions of type files and buffers are provided.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-helm-mu
  (let ((commit "77e6fea24e01481418738421dbcfe28ef1bd63cf"))
    (package
      (name "emacs-helm-mu")
      (version (git-version  "20180513" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-helm/helm-mu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1lh0ahxdc5b2z18m9p30gwg8sbg33sjwkjr38p7h5xsm5fm7i0fz"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm mu))
      (home-page
       "https://github.com/emacs-helm/helm-mu")
      (synopsis
       "Helm sources for searching emails and contacts")
      (description
       "Helm sources for searching emails and contacts using @code{mu} and
@code{mu4e}.  Mu is an indexer for maildirs and mu4e is a mutt-like MUA for
Emacs build on top of mu.  Mu is highly efficient making it possible to get
instant results even for huge maildirs.  It also provides search operators,
e.g: @code{from:Peter to:Anne flag:attach search term}.")
      (license license:gpl3+))))

(define-public emacs-helm-pass
  (package
    (name "emacs-helm-pass")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-helm/helm-pass")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "19w24isddzamkikq17vbv3y7ha22i7wc09d2nqw1j0qwhrrfkng9"))))
    (build-system emacs-build-system)
    (arguments
     ;; There's a test dir, but it's only for dev environment.
     (list #:tests? #f))
    (propagated-inputs
     (list emacs-helm emacs-password-store))
    (home-page "https://github.com/emacs-helm/helm-pass")
    (synopsis "Helm interface to pass, the standard Unix password manager")
    (description
     "Users of @code{helm-pass} may also be interested in functionality
provided by other Emacs packages dealing with pass:
@itemize
@item @code{emacs-password-store}, which @code{helm-pass} relies on.
@item @code{emacs-pass}, a major mode for @code{pass}.
@item @code{auth-source-pass.el}: integration of Emacs' auth-source with
@code{pass}, included in Emacs 26+).
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-image+
  (let ((commit "6834d0c09bb4df9ecc0d7a559bd7827fed48fffc"))
    (package
      (name "emacs-image+")
      (version (git-version "0.6.2" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-imagex")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0v66wk9nh0raih4jhrzmmyi5lbysjnmbv791vm2230ffi2hmwxnd"))))
      (build-system emacs-build-system)
      (inputs (list imagemagick))
      (arguments
       `(#:test-command
         (list "emacs" "--batch" "-l" "image+.el" "-l" "image+-test.el"
               "-f" "ert-run-tests-batch-and-exit")
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'configure
             (lambda* (#:key inputs outputs #:allow-other-keys)
               (let ((imagemagick (assoc-ref inputs "imagemagick")))
                 ;; Specify the absolute file names of the various
                 ;; programs so that everything works out-of-the-box.
                 (chmod "image+.el" #o666)
                 (emacs-substitute-variables
                     "image+.el"
                   ("imagex-convert-command"
                    (string-append imagemagick "/bin/convert"))
                   ("imagex-identify-command"
                    (string-append imagemagick "/bin/identify")))))))))
      (home-page "https://github.com/mhayashi1120/Emacs-imagex")
      (synopsis "Image manipulation extensions for Emacs")
      (description
       "Image+ provides keybindings allowing you to zoom in or zoom out of an
image, rotate it, save modified images, and more.")
      (license license:gpl3+))))

(define-public emacs-packed
  (package
    (name "emacs-packed")
    (version "3.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacscollective/packed")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0i2j5yk6xhv4rh3317f241y9llwf4wk18a6a4lkqrvbjpvi9yvn0"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/emacscollective/packed")
    (synopsis "Package manager agnostic Emacs Lisp package utilities")
    (description
     "Packed provides some package manager agnostic utilities to work
with Emacs Lisp packages.  As far as Packed is concerned packages
are collections of Emacs Lisp libraries that are stored in a
dedicated directory such as a Git repository.  And libraries are
Emacs Lisp files that provide the correct feature (matching the
filename).

Where a package manager might depend on metadata, Packed instead
uses some heuristics to get the same information---that is slower
and might also fail at times but makes it unnecessary to maintain
package recipes.")
    (license license:gpl3+)))

(define-public emacs-dpd
  (package
    (name "emacs-dpd")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/lilyp/emacs-dpd")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0wrqmpfcqp87dr5blpskf9kvm9slvffldqfxx77n15gcw516zzc8"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-packed))
    (home-page "https://gitlab.com/lilyp/emacs-dpd")
    (synopsis "Deliver packages to package.el")
    (description
     "This package provides tools for generating package-desc structures and
feeding them to package.el library.")
    (license license:gpl3+)))

(define-public emacs-picpocket
  (let ((version "41")
        (commit "fa3a49f011b5ae139728548fec7375743f61c7c7"))
    (package
      (name "emacs-picpocket")
      (version version)
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/johanclaesson/picpocket")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1vb358jyfs3px70ah60dmlz5azdfkva9xrw3mgrr4060vcy7w4q1"))))
      (build-system emacs-build-system)
      (arguments ; needed for running tests
       `(#:emacs ,emacs
         #:test-command '("emacs" "--batch"
                          "-l" "picpocket-test.el"
                          "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/johanclaesson/picpocket")
      (synopsis "Image viewer for Emacs")
      (description
       "Picpocket is an image viewer for GNU Emacs.  It has commands for:
@itemize
@item File operations on the picture files (delete, move, copy, hardlink).
@item Scale and rotate the picture.
@item Associate pictures with tags which are saved to disk.
@item Filter pictures according to tags.
@item Customizing keystrokes for quick tagging and file operations.
@item Undo and browse history of undoable commands.
@end itemize")
      (license license:gpl3+))))

(define-public emacs-sxiv
  (package
    (name "emacs-sxiv")
    (version "0.4.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://tildegit.org/contrapunctus/sxiv")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0gimq172pp143jckfhhyw319n3vpjvlkadm0vhypycas9i89mcg0"))))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'set-sxiv-path
           (lambda* (#:key inputs #:allow-other-keys)
             (emacs-substitute-sexps "sxiv.el"
               (":command
                  (append"
                `(list ,(search-input-file inputs "bin/sxiv")))))))))
    (inputs (list sxiv))
    (propagated-inputs (list emacs-dash))
    (build-system emacs-build-system)
    (home-page "https://tildegit.org/contrapunctus/sxiv")
    (synopsis "Launch sxiv from Emacs with Dired integration")
    (description "This package integrates sxiv into Dired.  It adds a command
to start sxiv from a Dired buffer, allowing you to mark or unmark image files
in said buffer using sxiv.")
    (license license:unlicense)))

;; Package has no releases or tags.  Version is extracted from "Version:"
;; keyword in main file.
(define-public emacs-mu4e-dashboard
  (let ((commit "c9c09b7ed6433070de148b656ac273b7fb7cec07")
        (revision "1"))
    (package
      (name "emacs-mu4e-dashboard")
      (version (git-version "0.1.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/rougier/mu4e-dashboard")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "164p56i6lgwgg7ina9h5qb4i31q3fngsy0ndbdva9agylk2sa9vc"))))
      (build-system emacs-build-system)
      (arguments
       (list
        ;; XXX: tests fail with "emacs: standard input is not a tty"
        #:tests? #f
        #:test-command #~(list "emacs" "-Q" "-L" "."
                               "-l" "test/regression-tests.el"
                               "-f" "ert-run-tests-batch")))
      (native-inputs (list emacs-async))
      (propagated-inputs (list mu))
      (home-page "https://github.com/rougier/mu4e-dashboard")
      (synopsis "Build your own dashboard for mu4e using org-mode")
      (description
       "This package provides an @code{org-mode} link type that allows
execution of various @code{mu4e} queries when clicked.  Such links can be
organized into a dashboard, by simply writing an org file.")
      (license license:gpl3+))))

(define-public emacs-pinentry
  (let ((commit "0079964a1dde954ccb2ce8a28613d8020c549a36")
        (revision "2"))
    (package
      (name "emacs-pinentry")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.savannah.gnu.org/git/emacs/elpa.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1i8wgy7i7095008hk9pa600c8871j9v1fzj2fzb2khy6szchvjyy"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list gnupg))
      (home-page "https://elpa.gnu.org/packages/pinentry.html")
      (synopsis "GnuPG Pinentry server implementation")
      (description
       "This package allows GnuPG passphrase to be prompted through the
minibuffer instead of graphical dialog.

To use, add @code{allow-emacs-pinentry} to @code{~/.gnupg/gpg-agent.conf},
reload the configuration with @code{gpgconf --reload gpg-agent}, and start the
server with @code{M-x pinentry-start}.")
      (license license:gpl3+))))

(define-public emacs-so-long
  (package
    (name "emacs-so-long")
    (version "1.1.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.savannah.gnu.org/git/so-long")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "06a76ajfqgz48yqvvyhi5b9zss9c6h4xz6acg98ibg0v99v9k5pz"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "test")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'fix-tests
                 (lambda _
                   (substitute* "Makefile"
                     (("tests\\.elc") "tests")))))))
    (home-page "https://www.emacswiki.org/emacs/SoLong")
    (synopsis "Improve performance in files with long lines")
    (description "This package improves the performance of Emacs when
viewing files with long lines.  It is included as standard with Emacs 27 or
later.")
    (license license:gpl3+)))

(define-public emacs-srfi
  ;; SRFI data gets updated quite frequently; latest tag is from
  ;; 2020; commit from 2021-08-12.
  (let ((commit "e31bf04a3be3aad1286b7fe919c2e4810aae751e")
        (revision "0"))
    (package
      (name "emacs-srfi")
      (version (git-version "0.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/srfi-explorations/emacs-srfi")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "01n3yrjrdl2gdhvgd56lpjqg9d82mmrnb0h6hxdx4h5hy8sbk2p4"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/srfi-explorations/emacs-srfi")
      (synopsis "Scheme Requests for Implementation browser in Emacs")
      (description
       "This package shows a list of all SRFIs and provides commands to visit
them in your web browser.")
      (license license:expat))))

(define-public emacs-srht
  (package
    (name "emacs-srht")
    (version "0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.sr.ht/~akagi/srht.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1kwc792r0kmnb7xhmggjgs8ii14c2rng9ci2k2zwy2zxqm0bynns"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "--batch"
                             "-l" "tests/srht-test.el"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./lisp" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files)))))))
    (propagated-inputs (list emacs-plz))
    (home-page "https://git.sr.ht/~akagi/srht.el")
    (synopsis "Emacs sr.ht API client")
    (description "This package provides bindings to the Sourcehut REST API as
well as commands for interacting with it.")
    (license license:gpl3+)))

(define-public emacs-srv
  (package
    (name "emacs-srv")
    (version "0.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/legoscia/srv.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1a8pqhdi7m3lis5ad2f74s1sy8zpxlwvfsvd80lw746235x2v06z"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/legoscia/srv.el")
    (synopsis "Emacs Lisp library to perform SRV DNS requests")
    (description
     "SRV implements RFC 2782 (SRV records).  It is used to look up hostname
and port for a service at a specific domain.  There might be multiple results,
and the caller is supposed to attempt to connect to each hostname+port in
turn.")
    (license license:gpl2+)))

(define-public emacs-github-review
  (let ((commit "a13a3b4f1b6114a32af843971a145ab880f51232")
        (revision "2"))
    (package
      (name "emacs-github-review")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/charignon/github-review")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0injfpxzgfhmqalba845j5l5cdcxxqz43knhxwinf36g52nfabl0"))))
      (build-system emacs-build-system)
      (inputs
       (list emacs-dash emacs-s emacs-ghub))
      (native-inputs
       (list emacs-buttercup emacs-undercover))
      (arguments
       (list
        #:test-command #~(list "buttercup" "-L" "test/github-review-test.el")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'compatibility-with-recent-buttercup
              (lambda _
                (emacs-batch-edit-file "test/github-review-test.el"
                  '(progn
                    (insert ";;; -*-lexical-binding:t-*-")
                    (basic-save-buffer))))))))
      (home-page "https://github.com/charignon/github-review")
      (synopsis "Review GitHub pull requests within Emacs")
      (description "This package provides commands to pull in, comment on, and
accept and reject GitHub pull requests.")
      (license license:gpl3+))))

(define-public emacs-pr-review
  (package
    (name "emacs-pr-review")
    (version "0.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/blahgeek/emacs-pr-review.git")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0ryf2jk54iqg7q494qdghg2pkhw8ky3s53dpj55871x6p2m1387r"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ghub
           emacs-magit
           emacs-markdown-mode))
    (synopsis "Review GitHub Pull Requests")
    (description "This package provides a way to review GitHub Pull
Requests from magit.")
    (home-page "https://github.com/blahgeek/emacs-pr-review/")
    (license license:gpl3+)))

(define-public emacs-deadgrep
  (package
    (name "emacs-deadgrep")
    (version "0.13")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Wilfred/deadgrep")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1ry9qvvxwhh3gkb0kkwiwpx37jpdzgky1h2zkwpzjpkv5jm022dr"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((ripgrep (search-input-file inputs "/bin/rg")))
                ;; Specify the absolute file name of rg so that everything
                ;; works out-of-the-box.
                (emacs-substitute-variables "deadgrep.el"
                  ("deadgrep-executable" ripgrep))))))))
    (native-inputs
     (list emacs-ert-runner emacs-undercover))
    (inputs
     (list ripgrep))
    (propagated-inputs
     (list emacs-dash emacs-s emacs-spinner))
    (home-page "https://github.com/Wilfred/deadgrep")
    (synopsis "Frontend for @code{ripgrep}")
    (description "This package provides an Emacs interface for performing
searches with @code{ripgrep}.")
    (license license:gpl3+)))

(define-public emacs-focus
  (package
    (name "emacs-focus")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/larstvei/Focus")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0qbzbs18isxyf5yiz64vyxvzjpfjdaafxnas2lhx3sjkgglb08i2"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/larstvei/Focus")
    (synopsis "Minor mode for focusing in on relevant text")
    (description "This package provides a minor mode that dims the color of
text in neighboring sections.")
    (license license:gpl3+)))

(define-public emacs-pandoc-mode
  (package
    (name "emacs-pandoc-mode")
    (version "2.90.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/joostkremers/pandoc-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0q76hnpczlqql7mycgaq3cmhd6ls09i331499nxwiq5ih7iqgn6l"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-hydra))
    (home-page "https://github.com/joostkremers/pandoc-mode")
    (synopsis "Minor mode for interacting with Pandoc")
    (description "This package provides a Hydra menu for interacting with the
Pandoc, the document-conversion tool.")
    (license license:bsd-3)))

(define-public emacs-hlint-refactor-mode
  (let ((commit "c4307f86aad6d02e32e9b30cb6edc115584c791c")
        (revision "1"))
    (package
      (name "emacs-hlint-refactor-mode")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mpickering/hlint-refactor-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1c71w9s34n0i7mm4njchxn6s3ri1y6mh3akgbg4nq41d42h8iap3"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list apply-refact hlint))
      (home-page "https://github.com/mpickering/hlint-refactor-mode")
      (synopsis "Emacs bindings for @code{hlint}'s @code{--refactor} option")
      (description "This package applies refactoring suggestions from
@code{hlint}.")
      (license license:expat))))

(define-public emacs-ccls
  (let ((commit "675a5704c14a27931e835a431beea3631d92e8e6")
        (revision "5"))
    (package
      (name "emacs-ccls")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/MaskRay/emacs-ccls")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0l4bhyr9d8ljz1f0cfg1s2cjcmh6fiwbk5mdlvc7rrwz5hxc21is"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list ccls emacs-dash emacs-lsp-mode))
      (home-page "https://github.com/MaskRay/emacs-ccls")
      (synopsis "Emacs support for the @code{ccls} language server")
      (description "This package extends @code{lsp-mode} to work with @code{C}
and @code{C++} files through the @code{ccls} language server.")
      (license license:expat))))

(define-public emacs-cpreproc
  (package
   (name "emacs-cpreproc")
   (version "1.0.1")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://git.sr.ht/~plattfot/cpreproc")
           (commit version)))
     (sha256
      (base32
       "0y4zialcw46md14az08x75vnl4kg08shnhd8q4lxiqxnpl12da8c"))
     (file-name (git-file-name name version))))
   (build-system emacs-build-system)
   (home-page "https://sr.ht/~plattfot/cpreproc")
   (synopsis "Wrap C/C++ code in preprocessor macros")
   (description
    "Aim for this project is to make it easier to generate preprocessor macros
from Emacs for C/C++ code that needs to be build against multiple incompatible
versions of third party libraries or @code{C++} standards.")
   (license license:gpl3+)))

(define-public emacs-cpreproc-openvdb
  (package
   (name "emacs-cpreproc-openvdb")
   (version "3.0.0")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://git.sr.ht/~plattfot/cpreproc-openvdb")
           (commit version)))
     (sha256
      (base32
       "0n1y8cxx6xipvip8y6nk9ig1dpjdksz77956wlql3lhqcrcn5hzg"))
     (file-name (git-file-name name version))))
   (build-system emacs-build-system)
   (propagated-inputs
    (list emacs-cpreproc))
   (home-page "https://sr.ht/~plattfot/cpreproc")
   (synopsis "Create preprocessor macros for C++ that uses OpenVDB")
   (description
    "This project makes it easier to generate preprocessor macros from Emacs
for C++ code that uses OpenVDB and needs to be build against multiple
incompatible versions of it.")
   (license license:gpl3+)))

(define-public emacs-org-board
  (let ((commit "500fe02bc114e5b535a2eb2ab73954d79428168f")
        (revision "2"))
    (package
      (name "emacs-org-board")
      (version (git-version "1138" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/charlesroelli/org-board")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1mcghw9mmlyqsgxk97hd57495sfx8dp6ig7qgs5xn2b2k0ygv4vf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f  ; No tests.
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'set-wget-location
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "org-board.el"
                  ("org-board-wget-program"
                   (search-input-file inputs "/bin/wget"))))))))
      (inputs
       (list wget))
      (propagated-inputs
       (list emacs-org emacs-ztree))
      (home-page "https://github.com/charlesroelli/org-board")
      (synopsis "Bookmarking and web archival system for Org mode")
      (description
       "Org Board is a bookmarking and web archival system for Emacs Org mode.
It archives your bookmarks so that you can access them even when you're not
online, or when the site hosting them goes down.")
      (license license:gpl2+))))

(define-public emacs-org-brain
  (package
    (name "emacs-org-brain")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Kungsgeten/org-brain")
             (commit "3faf9303af3f2356e3444e69c22dc6c5774047d1")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1ad681zk6kckw2zbk0r4iaj4bw8cfqrbd1s3gdwgdjlzq81q9mmj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Kungsgeten/org-brain")
    (synopsis "Org-mode wiki and concept-mapping for Emacs")
    (description "@code{emacs-org-brain} implements a variant of concept
mapping in Emacs, using @code{org-mode}.  An org-brain is a network of
org-mode entries, where each entry is a file or a headline, and you can get a
visual overview of the relationships between the entries: parents, children,
siblings and friends.  This visual overview can also be used to browse your
entries.  You can think of entries as nodes in a mind map, or pages in a
wiki.")
    (license license:expat)))

(define-public emacs-recent-addresses
  (let ((commit "afbbfdc43b81e620acf827ca20d297e0c517b6eb")
        (revision "1"))
    (package
      (name "emacs-recent-addresses")
      (home-page "https://nschum.de/src/emacs/recent-addresses/")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      ;; Note: Use a branch that works with Helm.  Submitted
                      ;; at <https://github.com/nschum/recent-addresses.el/pull/1>.
                      (url "https://github.com/civodul/recent-addresses.el")
                      (commit commit)))
                (sha256
                 (base32
                  "0ajrq0galjmdyjdjyxazykjyax3gh6hvfk4s7l657pi11g0q5zax"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (synopsis "Record recently-used email addressed and auto-complete them")
      (description
       "@code{recent-addresses} is an Emacs package that allows you to quickly
look up previously used email addresses.  It can be used alongside the Gnus
email client.")
      (license license:gpl2+))))

(define-public emacs-fold-dwim
  (let ((commit "c46f4bb2ce91b4e307136320e72c28dd50b6cd8b")
        (revision "0"))
    (package
      (name "emacs-fold-dwim")
      (version (git-version "1.2" revision commit))
      (home-page "https://github.com/emacsattic/fold-dwim")
      (source (origin
                (method git-fetch)
                (uri (git-reference (url home-page) (commit commit)))
                (sha256
                 (base32
                  "1yz1wis31asw6xa5maliyd1ck2q02xnnh7dc6swgj9cb4wi7k6i1"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (synopsis "Unified user interface for Emacs folding modes")
      (description
       "DWIM stands for \"do what I mean\", as in the idea that one keystroke
can do different things depending on the context.  In this package, it means
that, if the cursor is in a currently hidden folded construction, we want to
show it; if it's not, we want to hide whatever fold the cursor is in.")
      (license license:gpl2+))))

(define-public emacs-markup-faces
  (let ((commit "98a807ed82473eb41c6a201ed7ef816d6bcd67b0"))
    (package
      (name "emacs-markup-faces")
      (version "1.0.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sensorflo/markup-faces")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1w6i1m7xdr9cijnmdj35cl99r12vl83qws0qlfhrgvisilshnr27"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/sensorflo/markup-faces")
      (synopsis "Collection of Emacs faces for markup language modes")
      (description "Markup Faces is like @code{font-lock-faces}, but tailored
for markup languages instead programming languages.  The sub-group
@code{markup-faces-text} is also intended for text viewing modes such as Info
or Woman.  This gives a common look and feel across different markup language
modes and text viewing modes respectively.")
      (license license:gpl3+))))

(define-public emacs-adoc-mode
  (package
    (name "emacs-adoc-mode")
    (version "0.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/adoc-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0bp2i66a9gp41r7nvbx8f4s334gd7lwjdxi3qw5yhgaav6gk3bkc"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          ;; See: https://github.com/sensorflo/adoc-mode/issues/39.
          (add-after 'unpack 'disable-failing-tests
            (lambda _
              (let-syntax
                  ((disable-tests
                    (syntax-rules ()
                      ((_ file ())
                       (syntax-error "test names list must not be empty"))
                      ((_ file (test-name ...))
                       (substitute* file
                         (((string-append "^\\(ert-deftest " test-name ".*") all)
                          (string-append all "(skip-unless nil)\n")) ...)))))
                (disable-tests "test/adoc-mode-test.el"
                               ("adoctest-test-tempo-delimited-blocks"
                                "adoctest-test-tempo-macros"
                                "adoctest-test-tempo-paragraphs"
                                "adoctest-test-tempo-passthroug-macros"
                                "adoctest-test-tempo-quotes"))))))
      #:test-command #~(list "emacs" "-Q" "-batch"
                             "-l" "test/adoc-mode-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-markup-faces))
    (home-page "https://github.com/sensorflo/adoc-mode/wiki")
    (synopsis "AsciiDoc mode for Emacs")
    (description "This package provides an Emacs major mode for editing AsciiDoc
files.  It focuses on highlighting the document to improve readability.")
    (license license:gpl2+)))

(define-public emacs-org-asciidoc
  (let ((commit "a8d49c44cc9aa8a3f384155f0ae052dbf36df00c")
        (revision "0"))
    (package
      (name "emacs-org-asciidoc")
      (version (git-version "0.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url "https://github.com/yashi/org-asciidoc.git")
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0i77za68sdvp4zxfa3r63vg8pl2jikz0bhvp7znirc71r6wkw3pf"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command #~(list "make" "test")))
      (native-inputs
       (list (list emacs-org "test")))
      (synopsis "Org mode exporter backend for AsciiDoc")
      (description "This package provides an org-mode exporter backend for
AsciiDoc.")
      (home-page "https://github.com/yashi/org-asciidoc")
      (license license:gpl3+))))

(define-public emacs-racer
  (let ((commit "1e63e98626737ea9b662d4a9b1ffd6842b1c648c")
        (revision "0"))
    (package
      (name "emacs-racer")
      (version (git-version "1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/racer-rust/emacs-racer")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "12a429lajk09qp1jxgig54p8z6wndfgr4jwdmgkc9s2df9sw02d3"))))
      (native-inputs
       (list emacs-ert-runner emacs-undercover))
      (propagated-inputs
       (list emacs-dash emacs-f emacs-pos-tip emacs-rust-mode emacs-s))
      (build-system emacs-build-system)
      (home-page "https://github.com/racer-rust/emacs-racer")
      (synopsis "Racer support for Emacs")
      (description
       "This is the official Emacs package for Racer.  It supports code
completion of variables, functions and modules.  It can also jump to
definition of functions and types, and show a help buffer based on the
docstring of the thing at point.")
      (license license:expat))))

(define-public emacs-rust-mode
  (package
    (name "emacs-rust-mode")
    (version "1.0.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rust-lang/rust-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "14al12fh707flb9aqz8b70mbb3b7ah5anal4ch60q68m0zzas56i"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #false                  ;FIXME: phase fail with status 127
       #:test-command '("make test")))
    (home-page "https://github.com/rust-lang/rust-mode")
    (synopsis "Major Emacs mode for editing Rust source code")
    (description "This package provides a major Emacs mode for editing Rust
source code.")
    (license (list license:expat
                   license:asl2.0))))

(define-public emacs-rustic
  (package
    (name "emacs-rustic")
    (version "3.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-rustic/rustic")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1kbhad1lc7jy7frp3lk14ch8g53zh28rwy8v7nb8fixlxbla0jml"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash
           emacs-f
           emacs-flycheck
           emacs-lsp-mode
           emacs-markdown-mode
           emacs-project
           emacs-rust-mode
           emacs-s
           emacs-spinner
           emacs-xterm-color))
    (arguments
     ;; Tests require rust, cargo, rustfmt, and various crates to be
     ;; vendored.
     `(#:tests? #f
       #:phases
       (modify-phases %standard-phases
         (add-before 'check 'set-without-cask
           (lambda _
             (setenv "WITHOUT_CASK" "1"))))))
    (home-page "https://github.com/emacs-rustic/rustic")
    (synopsis "Rust development environment for Emacs")
    (description "Rustic is a fork of Rust mode.
In addition to its predecessor, it offers the following features:
@itemize
@item Flycheck integration,
@item Cargo popup,
@item multiline error parsing,
@item translation of ANSI control sequences through XTerm color,
@item asynchronous Org Babel,
@item custom compilation process,
@item @command{rustfmt} errors in a Rust compilation mode,
@item automatic LSP configuration with Eglot or LSP mode,
@item optional Rust inline documentation,
@item etc.
@end itemize")
    (license (list license:expat
                   license:asl2.0))))

(define-public emacs-cargo
  ;; No tags since 2017, use latest commit.
  (let ((commit "7f8466063381eed05d4e222ce822b1dd44e3bf17")
        (revision "0"))
    (package
      (name "emacs-cargo")
      (version (git-version "0.4.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kwrooijen/cargo.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1hvxdmyppvx04jyn07dnynlgbwyasv22k8dd4qa68mrj8i9mz484"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'fix-paths
                   (lambda* (#:key inputs #:allow-other-keys)
                     (substitute* "cargo-process.el"
                       (("/usr/local/(bin/(cargo|rustc))" _ path)
                        (search-input-file inputs path))))))))
      (propagated-inputs (list emacs-markdown-mode))
      (inputs (list rust `(,rust "cargo")))
      (home-page "https://github.com/kwrooijen/cargo.el")
      (synopsis "Emacs minor mode for Cargo, Rust's package manager")
      (description
       "This package defines @code{cargo-minor-mode}, which gives a set of key
combinations to perform Cargo tasks within Rust projects.")
      (license license:gpl3+))))

(define-deprecated-package emacs-cargo-el
  emacs-cargo)

(define-public emacs-ztree
  ;; Upstream provides no tag, but the commit below matches latest release.
  (let ((commit "c9ad9136d52ca5a81475693864e255d29448f43f"))
    (package
      (name "emacs-ztree")
      (version "1.0.6")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/fourier/ztree")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "03i5pa3nfdz6g0yrdk7r2qcn679w0s85cc5kcmgrwlnhdzakgr80"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/fourier/ztree")
      (synopsis "Directory tree comparison mode for Emacs")
      (description "Ztree is a project dedicated to implementation of several
text-tree applications inside GNU Emacs.  It consists of 2 subprojects:
@command{ztree-diff} and @command{ztree-dir} (the basis of
@command{ztree-diff}).")
      (license license:gpl3))))

(define-public emacs-heaven-and-hell
  (package
    (name "emacs-heaven-and-hell")
    (version "0.0.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/valignatev/heaven-and-hell")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1bgs638nsn9hyvc9wbc2jpqm5i3hblld1mhmf0h9z0j6fjr0aapx"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/valignatev/heaven-and-hell")
    (synopsis "Easily toggle light/dark themes in Emacs")
    (description "This package makes the process of switching between
light and dark themes as easy as hitting a single keystroke.")
    (license license:expat)))

(define-public emacs-helm-org-contacts
  (let ((commit "741eca6239684950219c9a12802386a132491b8c")
        (revision "2"))
    (package
      (name "emacs-helm-org-contacts")
      (version (git-version "20201202" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tmalsburg/helm-org-contacts")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1xy51hc3az8bc9sj71sjzy03xpkfa4v3cdcv3gpq3cj2zhk9gr8h"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-helm emacs-s))
      (home-page "https://github.com/tmalsburg/helm-org-contacts")
      (synopsis "Helm source for org-contacts")
      (description "This Helm source can be used to search contacts stored in
org-contacts format.  There are actions for inserting postal addresses, email
addresses, and phone numbers in the buffer where @command{helm-org-contacts}
was called.")
      (license license:gpl3))))

(define-public emacs-dired-du
  (package
    (name "emacs-dired-du")
    (version "0.5.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/dired-du-" version ".tar"))
       (sha256
        (base32 "0vhph7vcicsiq28b10h3b4dvnhckcy4gccpdgsad5j7pwa5k26m1"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")
                     #:phases
                     #~(modify-phases %standard-phases
                         (add-after 'unpack 'skip-failing-tests
                           (lambda _
                             (substitute* "dired-du-tests.el"
                               (("\\(ert-deftest dired-du-sort-by-size .*" all)
                                (string-append all " (skip-unless nil)"))))))))
    (home-page "https://elpa.gnu.org/packages/dired-du.html")
    (synopsis "Dired with recursive directory sizes")
    (description
     "Display the recursive size of directories in Dired.
This file defines a minor mode @command{dired-du-mode} to show the recursive
size of directories in Dired buffers.  If @command{du} program is available,
then the directory sizes are obtained with it.  Otherwise, the directory sizes
are obtained with Lisp.  The former is faster and provide a more precise
value.  For directories where the user doesn't have read permission, the
recursive size is not obtained.  Once this mode is enabled, every new Dired
buffer displays recursive dir sizes.")
    (license license:gpl3+)))

(define-public emacs-dired-preview
  (package
    (name "emacs-dired-preview")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/protesilaos/dired-preview")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0p6v1dx33f7ypi026pp4jjzh81n5vl4gy63cwhql0sbwsbxsz8y9"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "ert-runner" "-L" "tests" "tests/dired-preview-test.el")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs (list emacs-ert-runner texinfo))
    (home-page "https://protesilaos.com/emacs/dired-preview")
    (synopsis "Automatically preview file at point in Dired")
    (description
     "This is a simple package to automatically preview in a side window the
file at point in Dired buffers.  Preview windows are closed when they are no
longer relevant, while preview buffers are killed if they have not been used
for other purposes beside previewing.  The package provides several
customisation options to control its behaviour.")
    (license license:gpl3+)))

(define-public emacs-dired-launch
  (package
    (name "emacs-dired-launch")
    (version "20240809.1910")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://melpa.org/packages/dired-launch-"
                                  version ".tar"))
              (sha256
               (base32
                "1zgs1hzy04pywpcgn5r8s7aah2bv1p5x5lmlcqg9yranxj8a9k6d"))))
    (build-system emacs-build-system)
    (synopsis "Extra command to launch external programs")
    (description "This package provides a method to open entries in external programs from dired.")
    (home-page "https://codeberg.org/thomp/dired-launch")
    (license license:gpl3+)))

(define-public emacs-dired-rsync
  (package
    (name "emacs-dired-rsync")
    (version "0.7")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/stsquad/dired-rsync")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1zvsmpvham670i807rs8f2f0h73yk4fpaavj0hzksqcl5ykh4fgr"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s emacs-dash))
    (home-page "https://github.com/stsquad/dired-rsync/")
    (synopsis "Support for rsync from Emacs dired buffers")
    (description "This package adds a single command @code{dired-rsync} which
allows the user to copy marked files in a Dired buffer via @code{rsync}.  This
is useful, especially for large files, because the copy happens in the
background and doesn’t lock up Emacs.  It is also more efficient than using
Tramp's own encoding methods for moving data between systems.")
    (license license:gpl3+)))

(define-public emacs-pcre2el
  (let ((commit "b4d846d80dddb313042131cf2b8fbf647567e000")
        (revision "0"))
    (package
      (name "emacs-pcre2el")
      (version (git-version "1.12" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/joddie/pcre2el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0h73d9f1zj74vjir2kiq4s2g5rai7b59z7da20kh862xnldfcxsx"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "ert-runner" "-L" "." "pcre2el-tests.el")
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'skip-failing-tests
              (lambda _
                (let ((unexpected (list "017" "018" "125" "584" "585" "601" "690")))
                  (substitute* "pcre2el-tests.el"
                    (((string-append "\\(ert-deftest rxt-pcre-test-00("
                                     (string-join unexpected "|")
                                     ") .*") all)
                     (string-append all "(skip-unless nil)")))))))))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/joddie/pcre2el")
      (synopsis "Convert between PCRE, Emacs and rx regexp syntax")
      (description "@code{pcre2el} or @code{rxt} (RegeXp Translator or RegeXp
Tools) is a utility for working with regular expressions in Emacs, based on a
recursive-descent parser for regexp syntax.  In addition to converting (a
subset of) PCRE syntax into its Emacs equivalent, it can do the following:

@itemize
@item convert Emacs syntax to PCRE
@item convert either syntax to @code{rx}, an S-expression based regexp syntax
@item untangle complex regexps by showing the parse tree in @code{rx} form and
highlighting the corresponding chunks of code
@item show the complete list of strings (productions) matching a regexp,
provided the list is finite
@item provide live font-locking of regexp syntax (so far only for Elisp
buffers – other modes on the TODO list).
@end itemize\n")
      (license license:gpl3))))

(define-public emacs-magit-todos
  (package
    (name "emacs-magit-todos")
    (version "1.8.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/magit-todos")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0wv64ihg90yfkzg1aayslq630704wlci39zdxcp3s2fn0fqr26zg"))
       (modules '((guix build utils)))
       (snippet #~(begin
                    (delete-file-recursively "screenshots")
                    ;; Contents of makem package, but no tests.
                    (for-each delete-file
                              '("makem.sh" "Makefile"))))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ; No tests in source.
    (propagated-inputs
     (list emacs-async
           emacs-dash
           emacs-f
           emacs-hl-todo
           emacs-magit
           emacs-pcre2el
           emacs-s))
    (home-page "https://github.com/alphapapa/magit-todos")
    (synopsis "Show source files' TODOs (and FIXMEs, etc) in Magit status buffer")
    (description "This package displays keyword entries from source code
comments and Org files in the Magit status buffer.  Activating an item jumps
to it in its file.  By default, it uses keywords from @code{hl-todo}, minus a
few (like NOTE).")
    (license license:gpl3)))

(define-public emacs-git-annex
  ;; Unreleased version has a fontification fix.
  (let ((commit "1324d3f23c534fe79391a2c256bb8803054e383b")
        (revision "2"))
    (package
      (name "emacs-git-annex")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jwiegley/git-annex-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1lfky2nsrlndlbvk6vwbswnvbvkz1sxgg0n3r5q6xykdkjym0lrh"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f))  ; No tests.
      (home-page "https://github.com/jwiegley/git-annex-el")
      (synopsis "Emacs integration for git-annex")
      (description "Enhances Dired and buffers visiting annex files with
git-annex functionality.  In Dired, the names of annex files are shortened by
hiding the symbolic links and fontified based on whether content is present.
Commands for performing some common operations (e.g., unlocking and adding
files) are provided.")
      (license license:gpl2+))))

(define-public emacs-hackernews
  (package
    (name "emacs-hackernews")
    (version "0.7.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clarete/hackernews.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1kb34jm81jyp2lv0558c6q109pjb38vxrncq4qaq0b8zir8qcr3y"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/clarete/hackernews.el")
    (synopsis "Hacker News client for Emacs")
    (description "The @command{hackernews} package is able to fetch stories
from six different Hacker News feeds, namely top, new, best, ask, show and job
stories.  The default feed is top stories, which corresponds to the Hacker
News homepage.")
    (license license:gpl3)))

(define-public emacs-lobsters
  (let ((commit "d061e1b0d4fe27c7751509da61396681d335e69f")
        (revision "0"))
    (package
      (name "emacs-lobsters")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tanrax/lobsters.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "042qhc3qg3lzcicq9b5z0b5650a9c3d71db5w2bnwbydph25m97h"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f))                   ; no tests
      (propagated-inputs (list emacs-request emacs-visual-fill-column))
      (home-page "https://github.com/tanrax/lobsters.el/")
      (synopsis "Lobsters client for Emacs")
      (description
       "This package provides a lobsters client for Emacs to browse stories
and comments")
      (license license:gpl3+))))

(define-public emacs-tokei
  (package
    (name "emacs-tokei")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nagy/tokei.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0x9ayvd8fvgnyp2zgck3dnhs2ib3lrcwbgcdypzq6mhzfs1a2651"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              ;; .el is read-only in git.
              (make-file-writable "tokei.el")
              ;; Specify the absolute file name of tokei so that everything
              ;; works out-of-the-box.
              (emacs-substitute-variables "tokei.el"
                ("tokei-program"
                 (search-input-file inputs "/bin/tokei"))))))))
    (inputs (list tokei))
    (propagated-inputs (list emacs-magit))
    (home-page "https://github.com/nagy/tokei.el")
    (synopsis "Display codebase statistics in Emacs")
    (description
     "@code{emacs-tokei} is a major-mode for Emacs, that displays codebase
statistics with the help of @code{tokei}.")
    (license license:gpl3+)))

(define-public emacs-youtube-dl
  (let ((commit "af877b5bc4f01c04fccfa7d47a2c328926f20ef4")
        (revision "2"))
    (package
      (name "emacs-youtube-dl")
      (version (git-version "1.0" "2" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/skeeto/youtube-dl-emacs/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0zkl9jkjbx0lmp9ylv4rqg1zwqibk053s4rp7s1h0i18nzk7vn8j"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f  ; Error : standard input is not a tty
        #:test-command #~(list "make" "simulate")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'configure
              (lambda* (#:key inputs #:allow-other-keys)
                ;; .el is read-only in git.
                (chmod "youtube-dl.el" #o644)
                ;; Specify the absolute file names of the various
                ;; programs so that everything works out-of-the-box.
                (emacs-substitute-variables
                    "youtube-dl.el"
                  ("youtube-dl-program"
                   (search-input-file inputs "bin/yt-dlp"))))))))
      (inputs (list yt-dlp))
      (home-page "https://github.com/skeeto/youtube-dl-emacs/")
      (synopsis "Emacs youtube-dl download manager")
      (description "This package manages a video download queue for
@command{yt-dlp}, which serves as the back end.  It manages a single
@command{yt-dlp} subprocess, downloading one video at a time.  New videos
can be queued at any time.")
      (license license:unlicense))))

(define-public emacs-ytdl
  (let ((commit "2ea3daf2f6aa9d18b71fe3e15f05c30a56fca228")
        (revision "0"))
    (package
      (name "emacs-ytdl")
      (version (git-version "1.3.6" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/tuedachu/ytdl")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0y62lkgsg19j05dpd6sp6zify8vq8xvpc8caqiy4rwi7p4ahacsf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'configure
              (lambda* (#:key inputs #:allow-other-keys)
                ;; .el is read-only in git.
                (make-file-writable "ytdl.el")
                ;; Specify the absolute file names of the various programs so
                ;; that everything works out-of-the-box.
                (emacs-substitute-variables "ytdl.el"
                  ("ytdl-command"
                   (search-input-file inputs "/bin/yt-dlp"))))))))
      (inputs
       (list yt-dlp))
      (propagated-inputs
       (list emacs-async emacs-dash))
      (home-page "https://gitlab.com/tuedachu/ytdl")
      (synopsis "Emacs interface for youtube-dl")
      (description
       "This package manages a video download queue for @command{yt-dlp},
which serves as the back end.  New videos can be queued at any time.  All
yt-dlp backends are supported.  It is possible to create download profiles
depending on the downloaded URL.")
      (license license:gpl3+))))

(define-public emacs-ytel
  ;; No tagged releases.  Using version from main file.
  (let ((commit "d40bc7ead8d4d7e4d16b03b66a93d63bef51cc5f")
        (revision "0"))
    (package
      (name "emacs-ytel")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/grastello/ytel")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0pxzfsxzrpv59dssrgx2mmwkm6rzk49ffjkgsa3wks7rdyfil3kf"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'patch-exec-paths
             (lambda* (#:key inputs #:allow-other-keys)
               (let ((curl (assoc-ref inputs "curl")))
                 (substitute* "ytel.el"
                   (("\"curl\"") (string-append "\"" curl "/bin/curl\"")))))))))
      (inputs
       (list curl))
      (home-page "https://github.com/grastello/ytel")
      (synopsis "Youtube front-end for Emacs")
      (description
       "This package provides a major mode to search YouTube videos via an
Elfeed-like buffer.  Information about videos displayed in this buffer can be
extracted and manipulated by user-defined functions to do various things such
as playing them in some video player, or downloading them.")
      (license license:gpl3+))))

(define-public emacs-ytel-show
  ;; No tagged releases.  Version extracted from main file.
  (let ((commit "8b999484eb447ecdb741b24cbef2b5a7260a53e6")
        (revision "0"))
    (package
      (name "emacs-ytel-show")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/xFA25E/ytel-show")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0nhgzfzq1bgpbdbljx5z2hzr8ia7ybsyvvr66yj4klz0zj97rghj"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-ytel))
      (home-page "https://github.com/xFA25E/ytel-show")
      (synopsis "Browse YouTube in Emacs")
      (description
       "This package provides an Emacs interface for browsing YouTube videos
and comments.")
      (license license:gpl3+))))

(define-public emacs-yeetube
  (let ((commit "b8877e61b58dfabcc30044680d0975b3c6b12052")) ;version bump
    (package
      (name "emacs-yeetube")
      (version "2.1.8")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.thanosapollo.org/yeetube")
               (commit commit)))
         (sha256
          (base32
           "1gii2y4cvw795039kdky1mdmgpfrfm4s48ld7z4gv7bvb0fs9hpq"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'locate-binaries
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* (find-files "." "\\.el$")
                  (("\\(executable-find \"mpv\"\\)")
                   (format #f "~s"
                           (search-input-file inputs "/bin/mpv")))
                  (("\\(executable-find \"torsocks\"\\)")
                   (format #f "~s"
                           (search-input-file inputs "/bin/torsocks")))
                  (("\\(executable-find \"yt-dlp\"\\)")
                   (format #f "~s"
                           (search-input-file inputs "/bin/yt-dlp")))))))))
      (inputs (list mpv torsocks yt-dlp))
      (propagated-inputs (list emacs-compat))
      (home-page "https://thanosapollo.org/projects/yeetube/")
      (synopsis "Youtube front-end for Emacs")
      (description
       "This package provides the ability to scrape YouTube, with the results
displayed in a tabulated list format.  The videos can be opened with a user-defined
video player (by default @command{mpv}) or downloaded using @command{yt-dlp}.
This package also includes a minimal @code{yt-dlp} wrapper.")
      (license license:gpl3+))))

(define-public emacs-org-web-tools
  (package
    (name "emacs-org-web-tools")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/org-web-tools")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0x1j1y2pl6a8f97cw04nm0w6g4jh449cjfsr2aryn316ms4nj1a0"))
       ;; Contents of makem package, but no tests.
       (snippet #~(for-each delete-file '("Makefile" "makem.sh")))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-compat
           emacs-dash
           emacs-esxml
           emacs-plz
           emacs-request
           emacs-s))
    (inputs
     (list pandoc))
    (arguments
     (list
      #:tests? #f                       ; no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-exec-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((pandoc (search-input-file inputs "/bin/pandoc")))
                (substitute* "org-web-tools.el"
                  (("\"pandoc\"") (string-append "\"" pandoc "\"")))))))))
    (home-page "https://github.com/alphapapa/org-web-tools")
    (synopsis "Display/Process web page as Org mode content")
    (description
     "This package contains library functions and commands useful
for retrieving web page content and processing it into Org mode content.

For example, you can copy a URL to the clipboard or kill-ring, then run
a command that downloads the page, isolates the ``readable'' content with
@command{eww-readable}, converts it to Org mode content with Pandoc, and
displays it in an Org mode buffer.  Another command does all of that but
inserts it as an Org entry instead of displaying it in a new buffer.")
    (license license:gpl3+)))

(define-public emacs-org-rss-publishing
  (let ((commit "7f7d1e0c2c777015b81362a3292a3c851b939913")
        (revision "0"))
    (package
      (name "emacs-org-rss-publishing")
      (version (git-version "0.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.sr.ht/~taingram/org-publish-rss")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "067rk9wdz2cnrmzn1058knhz6p28an8ybbgkfgmr4z872f63r2yy"))))
      (build-system emacs-build-system)
      (arguments `(#:tests? #false)) ;no tests
      (home-page "https://git.sr.ht/~taingram/org-publish-rss")
      (synopsis "RSS generator for Org Mode's built-in publishing system")
      (description "This package adds new RSS generation options to the
@code{org-publish-project-alist} variable (see the Org manual if you are new to
the publishing options).  It adds @code{:auto-rss} and other options that work
similar to the included @code{:auto-sitemap} functionality.  This should make it
easy for users to add RSS feeds to existing Org-based websites.")
      (license license:gpl3+))))

(define-public emacs-blimp
  (let ((commit "e420763d6d18b5d1be552cdbc47f91418343db03"))
    (package
      (name "emacs-blimp")
      (version (git-version "0.0.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/walseb/blimp")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "09wmhpym516b81dfq8smdmysh1fn610dzlyvyl2rkx8600f0fizd"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-eimp))
      (home-page "https://github.com/walseb/blimp")
      (synopsis "Emacs wrapper around all Imagemagick commands")
      (description "Blimp (Bustling Image Manipulation Package) is a complete
wrapper around all Imagemagick commands with descriptions, autocompletion (for
some commands) and hints displayed in prompt using @command{eimp.el} to
execute its commands and resize images.")
      (license license:gpl3+))))

(define-public emacs-synosaurus
  (package
    (name "emacs-synosaurus")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hpdeifel/synosaurus")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1bkd989712wj5mpk6i3pqp0j19ajnqpw2vcz2r1l0fb91n382d3y"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list wordnet))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs outputs #:allow-other-keys)
             (let ((wn (assoc-ref inputs "wordnet")))
               ;; .el is read-only in git.
               (make-file-writable "synosaurus-wordnet.el")
               ;; Specify the absolute file names of the various
               ;; programs so that everything works out-of-the-box.
               (emacs-substitute-variables "synosaurus-wordnet.el"
                 ("synosaurus-wordnet--command"
                  (string-append wn "/bin/wn")))))))))
    (home-page "https://github.com/hpdeifel/synosaurus")
    (synopsis "Extensible thesaurus mode for Emacs")
    (description "Synosaurus is a thesaurus fontend for Emacs with pluggable
backends, including the @command{wordnet} offline backend.")
    (license license:gpl3+)))

(define-public emacs-editorconfig
  (package
    (name "emacs-editorconfig")
    (version "0.11.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/editorconfig/editorconfig-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0bqwmh4lcnbn5gcn38qg4jjfs9bfkbr4dj4dafglgds6a5lhznws"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "ert-tests")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://editorconfig.org/")
    (synopsis "Define and maintain consistent coding styles between different
editors and IDEs")
    (description "The EditorConfig project consists of a file format for
defining coding styles and a collection of text editor plugins that enable
editors to read the file format and adhere to defined styles.  EditorConfig
files are easily readable and they work nicely with version control systems.")
    (license license:gpl3+)))

(define-public emacs-nerd-icons
  (let ((commit "4bd9795f1f3f47cb874e10ff5c3845e037f0b3e2")
        (revision "1"))
    (package
      (name "emacs-nerd-icons")
      (version (git-version "0.1.0" revision commit))
      (home-page "https://github.com/rainstormstudio/nerd-icons.el")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference (url home-page) (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1imklm81jsq2jdjprsjm8pdq701c4l0rgn7l0f3l3xs602kg49l1"))))
      (build-system emacs-build-system)
      (arguments
       (list #:include #~(cons "^data\\/" %default-include)))
      (synopsis "Library for easily using nerd font icons inside Emacs")
      (description "Nerd-icons an alternative to all-the-icons.  It works on both
GUI and terminal, and requires a nerd font installed on your system.")
      (license license:gpl3+))))

(define-public emacs-all-the-icons
  (package
    (name "emacs-all-the-icons")
    (version "5.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/domtronn/all-the-icons.el")
             (commit version)))
       (file-name (git-file-name name version))
       (patches
        (search-patches "emacs-all-the-icons-remove-duplicate-rs.patch"))
       (sha256
        (base32 "0lwgvgnqf7vihglm0c5bwsxbl4x7f641289cji5s7jwy2dbsqk7g"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include '(list "\\.el$" "^data/")
      #:exclude '(list "^test/")
      #:tests? #f                      ; XXX: duplicate tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-fonts
            (lambda _
              (let ((fonts (string-append #$output "/share/fonts")))
                (mkdir-p fonts)
                (with-directory-excursion "fonts"
                  (install-file "all-the-icons.ttf" fonts)
                  ;; TODO: Unbundle.
                  (install-file "file-icons.ttf" fonts)
                  (install-file "octicons.ttf" fonts)
                  (install-file "weathericons.ttf" fonts)))))
          (replace 'check
            (lambda* (#:key tests? #:allow-other-keys)
              (if tests?
                  (apply invoke "ert-runner" "-l"
                         (append (find-files "data" "\\.el")
                                 '("all-the-icons-faces.el")))
                  (format #t "test suite not run~%")))))))
    (native-inputs
     (list emacs-f emacs-ert-runner))
    (propagated-inputs
     (list emacs-f emacs-memoize font-awesome font-google-material-design-icons))
    (home-page "https://github.com/domtronn/all-the-icons.el")
    (synopsis "Collect icon fonts and propertize them within Emacs")
    (description
     "All-the-icons is a utility package to collect various icon fonts and
propertize them within Emacs.  Icon fonts allow you to propertize and format
icons the same way you would normal text.  This enables things such as better
scaling of and anti aliasing of the icons.")
    ;; Package is released under Expat license.  Elisp files are licensed
    ;; under GPL3+.  Fonts come with various licenses: Expat for
    ;; "all-the-icons.ttf" and "file-icons.ttf", Apache License 2.0 for
    ;; "material-design-icons.ttf", and SIL OFL 1.1 for "fontawesome.ttf",
    ;; "ocitcons.ttf" and "weathericons.ttf".
    (license
     (list license:expat license:gpl3+ license:silofl1.1 license:asl2.0))))

(define-public emacs-all-the-icons-completion
  (package
    (name "emacs-all-the-icons-completion")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/iyefrat/all-the-icons-completion")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1iyn7dyxil07gsa19hngpbapzmbhcwrplvf2cg1gkywafcdhjw6w"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page "https://github.com/iyefrat/all-the-icons-completion")
    (synopsis "Add icons to completion candidates")
    (description "This package adds icons to completion candidates using the
built-in completion metadata functions.  For example, with this package,
@code{find-file} can display a file icon for each candidate based on the file
type.")
    (license license:gpl3+)))

(define-public emacs-wttrin
  (package
    (name "emacs-wttrin")
    (version "0.2.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/cjennings/emacs-wttrin")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "180amp1n0qdn6m6vlzg0ddfxfqf37fjaswfxdxn03298j0jgzw14"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-xterm-color))
    (home-page "https://github.com/bcbcarl/emacs-wttrin")
    (synopsis "Frontend for weather web service @url{wttr.in}")
    (description "This package provides local weather information from
@url{wttr.in}.")
    (license license:expat)))

(define-public emacs-browse-kill-ring
  (let ((commit "1ef72cc6accd94cd7032c02b1b2c78ae7f1d1965")
        (revision "0"))
    (package
      (name "emacs-browse-kill-ring")
      (version (git-version "2.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/browse-kill-ring/browse-kill-ring")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0mil32g7hcw376jibs5hdyv00xbaql3m4a27rwqaafg0x59avxdj"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/browse-kill-ring/browse-kill-ring")
      (synopsis "Interactively insert items from kill-ring")
      (description
       "Did you ever feel that @code{C-y M-y M-y M-y ...} is not a great way
of trying to find that piece of text you know you killed a while back?  Then
@code{browse-kill-ring.el} is for you.")
      (license license:gpl2+))))

(define-public emacs-powerline
  (let ((commit "c35c35bdf5ce2d992882c1f06f0f078058870d4a")
        (revision "0"))
    (package
      (name "emacs-powerline")
      (version (git-version "2.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/milkypostman/powerline")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0k1n5pg8v3ybkqxcipw80jqv94ka0dp63qxl0hvjwlxk16gxp8kb"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/milkypostman/powerline/")
      (synopsis "Mode-line plugin for Emacs")
      (description
       "Powerline is a utility plugin which allows you to create
a better-looking, more functional Emacs mode-line.  A collection of predefined
themes comes with the package.")
      (license license:gpl3+))))

(define-public emacs-spaceline
  (package
    (name "emacs-spaceline")
    (version "2.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/TheBB/spaceline")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1q8r95zfrh0vxna5ml2pq9b9f66clfqcl4d2qy2aizkvzyxg6skl"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-powerline emacs-s))
    (home-page "https://github.com/TheBB/spaceline")
    (synopsis "Powerline theme from Spacemacs")
    (description "Spaceline provides Spacemacs' mode-line theme.
This package provides features for three kinds of users.

@itemize
@item You just want to use the Spacemacs mode-line theme and forget about it.
@item You want to use something similar to the Spacemacs mode-line theme, but
with a handful of easy tweaks.
@item You want an easy-to-use library for building your own mode-line from
scratch, and you think the Spacemacs theme looks good.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-spaceline-next
  (let ((commit "1b26af2c1a701481ac5d90928fe0200e389756c3")
        (last-release-version "2.0.1")
        (revision "0"))
    (package
      (inherit emacs-spaceline)
      (name "emacs-spaceline-next")
      (version (git-version last-release-version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/TheBB/spaceline")
               (commit commit)))
         (sha256
          (base32 "11lwckqcgzsahrkkm5wk1ph4kc7d4yz05r7251g8c9f0q6vdj9dp"))
         (file-name (git-file-name name version)))))))

(define-public emacs-column-enforce-mode
  (let ((commit "14a7622f2268890e33536ccd29510024d51ee96f")
        (revision "1"))
    (package
      (name "emacs-column-enforce-mode")
      (version (git-version "1.0.4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url
                       "https://github.com/jordonbiondo/column-enforce-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1vxra5vk78yns2sw89m41bggczqg1akq6xvzfs9kylhkg5yz3g7g"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jordonbiondo/column-enforce-mode")
      (synopsis "Highlight text that extends beyond a certain column")
      (description
       "Column Enforce mode highlights text that extends beyond a certain
column.  It can be used to enforce 80 column rule.  It can also be configured
for any @var{N}-column rule.")
      (license license:gpl3+))))

(define-public emacs-column-marker
  (package
    (name "emacs-column-marker")
    (version "9")
    (source
     (origin
       (method url-fetch)
       (uri "https://www.emacswiki.org/emacs/download/column-marker.el")
       (sha256 (base32 "05bv198zhqw5hqq6cr11mhz02dpca74hhp1ycwq369m0yb2naxy9"))))
    (build-system emacs-build-system)
    (home-page "https://www.emacswiki.org/emacs/ColumnMarker")
    (synopsis "Emacs mode for highlighting columns")
    (description
     "With @code{column-marker.el} you can highlight any number of text columns.
Three such highlight column markers are provided by default.  This is
especially useful for languages like COBOL or Fortran where certain columns
have special meaning.  It is also handy for aligning text across long vertical
distances.  Multi-column characters, such as @kbd{TAB} are treated
correctly.")
    (license license:gpl2+)))

(define-public emacs-slime-repl-ansi-color
  (let ((commit "ad03263f5d4de473bc173b64a6fc3dc1106393d7"))
    (package
      (name "emacs-slime-repl-ansi-color")
      (version (git-version "0.0.0" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/deadtrickster/slime-repl-ansi-color")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0bpg7gxz310x7bnlg324c507sxc5gxwwz6h64h6kdq141r73vbi4"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/deadtrickster/slime-repl-ansi-color")
      (synopsis "Color ANSI codes in the REPL of SLIME")
      (description "Color ANSI codes in the REPL of SLIME")
      (license license:gpl2+))))

(define-public emacs-helm-slime
  (package
    (name "emacs-helm-slime")
    (version "0.4.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-helm/helm-slime")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0mrpjhpijdrq353fnfvdj9l9xfsz390qlcvifcair9732ma7i8l0"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-slime))
    (home-page "https://github.com/emacs-helm/helm-slime")
    (synopsis "Helm for SLIME, the Superior Lisp Interaction Mode for Emacs")
    (description "Helm-SLIME defines a few new commands:

@itemize
@item helm-slime-complete: Select a symbol from the SLIME completion systems.
@item helm-slime-list-connections: Yet another slime-list-connections with Helm.
@item: helm-slime-apropos: Yet another slime-apropos with Helm.
@item helm-slime-repl-history: Select an input from the SLIME REPL history and insert it.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-helm-sly
  (package
    (name "emacs-helm-sly")
    (version "0.7.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-helm/helm-sly")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "06x8wyx1r0s7askkvlbklgz1cszv34qsvv3gryndw350smk1v8kx"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-sly))
    (home-page "https://github.com/emacs-helm/helm-sly")
    (synopsis "Helm for SLY, a Common Lisp interaction mode for Emacs")
    (description "Helm-SLY defines a few new commands:

@itemize
@item @code{helm-sly-list-connections}: Yet another Lisp connection list with
Helm.
@item @code{helm-sly-apropos}: Yet another @command{apropos} with Helm.
@item @code{helm-sly-mini}: Like @command{helm-sly-list-connections}, but
include an extra source of Lisp-related buffers, like the events buffer or the
scratch buffer.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-gtk-look
  (package
    (name "emacs-gtk-look")
    (version "29")
    (source (origin
              (method url-fetch)
              (uri "https://download.tuxfamily.org/user42/gtk-look.el")
              (sha256
               (base32
                "14p2nwrd51cr1v06fxbjjn6jdrkf9d6vcxhmscm0kl677s25ypsp"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda _
             ;; File is read-only.
             (chmod "gtk-look.el" #o644)
             (emacs-substitute-variables "gtk-look.el"
               ("gtk-lookup-devhelp-indices"
                '(list (expand-file-name "~/.guix-profile/share/gtk-doc/html/*/*.devhelp*"))))
             #t)))))
    (home-page "https://user42.tuxfamily.org/gtk-look/index.html")
    (synopsis "Find and display HTML documentation for GTK, GNOME and Glib")
    (description "@command{gtk-look} finds and displays HTML documentation for
GTK, GNOME and Glib functions and variables in Emacs, similar to what
info-lookup-symbol does for info files (C-h S).  The documentation is expected
to be devhelp indexes with HTML files.  The location of the indexes can be
customized.  In addition to C code development @command{gtk-look} is good for

@itemize
@item @command{perl-gtk2}, recognising class funcs like
@command{Gtk2::Label->new} and bare method names like @command{set_text}.
@item @command{guile-gnome}, recognising methods like @command{set-text} and
classes like @command{<gtk-window>}.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-ov
  (package
    (name "emacs-ov")
    (version "1.0.6")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ShingoFukuyama/ov.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0qxk2rf84j86syxi8xknsq252irwg7sz396v3bb4wqz4prpj0kzc"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'skip-failing-tests
                 (lambda _
                   (substitute* "test/ov-test.el"
                     (("\\(ert-deftest ov-test/ov-keymap[123] .*" all)
                      (string-append all " (skip-unless nil)"))))))))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/ShingoFukuyama/ov.el")
    (synopsis "Overlay library for Emacs Lisp")
    (description "@code{ov.el} provides a simple way to manipulate overlays in
Emacs.")
    (license license:gpl3+)))

(define-public emacs-sesman
  (package
    (name "emacs-sesman")
    (version "0.3.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/vspinu/sesman")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0z5jb4vpbjsi63w3wjy6d2lgz33qdfvrgfb3bszv4hcf6a96y7fc"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'set-shell
           ;; Setting the SHELL environment variable is required for the tests
           ;; to find sh.
           (lambda _
             (setenv "SHELL" (which "sh"))
             #t)))
       #:test-command '("make" "test")))
    (home-page "https://github.com/vspinu/sesman")
    (synopsis "Session manager for Emacs based IDEs")
    (description "Sesman provides facilities for session management and
interactive session association with the current contexts (project, directory,
buffers).  While sesman can be used to manage arbitrary sessions, it primary
targets the Emacs based IDEs (CIDER, ESS, Geiser, Robe, SLIME etc.)")
    (license license:gpl3+)))

(define-public emacs-cort
  (package
    (name "emacs-cort")
    (version "7.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/conao3/cort.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "03c223nczpbdkjmq69panhbsq2a0zj20w329jgj4c0zsj8m1a32a"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ansi))
    (arguments
     `(#:test-command '("emacs" "--batch" "--quick"
                        "--directory=." "--load=cort-tests.el"
                        "--funcall=cort-test-run")))
    (home-page "https://github.com/conao3/cort.el")
    (synopsis "Unit test framework for the Emacs Lisp")
    (description "@code{cort} is a lightweight Emacs Lisp unit test library.")
    (license license:gpl3+)))

(define-public emacs-wordnut
  (let ((commit "feac531404041855312c1a046bde7ea18c674915")
        (revision "0"))
    (package
      (name "emacs-wordnut")
      (version (git-version "0.1" revision commit))
      (home-page "https://github.com/gromnitsky/wordnut")
      (source (origin
                (method git-fetch)
                (uri (git-reference (url home-page) (commit commit)))
                (sha256
                 (base32
                  "1jl0b6g64a9w0q7bfvwha67vgws5xd15b7mkfyb5gkz3pymqhfxn"))
                (patches
                 (search-patches "emacs-wordnut-require-adaptive-wrap.patch"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f  ; Only one test fail, but it's unclear why it does.
             #:test-command
             #~(list "emacs" "-Q" "--script" "test/test_wordnut.el")))
      (propagated-inputs
       (list wordnet emacs-adaptive-wrap))
      (synopsis "Major mode for WordNet")
      (description "This Emacs package provides an interface for
@code{wordnet}.  Features include completion, if the query is not found
too ambiguous and navigation in the result buffer.")
      (license license:gpl3+))))

(define-public emacs-frame-local
  ;; There is no release yet.  Version is extracted from the main
  ;; file.
  (let ((version "0.0.1")
        (revision "0")
        (commit "7ee1106c3bcd4022f48421f8cb1ef4f995da816e"))
    (package
      (name "emacs-frame-local")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sebastiencs/frame-local")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0zfxsxdh3bd3fd566zl0byp13p5b8f4cgkwl637imvarvahczigp"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/sebastiencs/frame-local")
      (synopsis "Access variables local to an Emacs frame")
      (description
       "This package allows setting and accessing variables local to
an Emacs frame.  Note that the variables created with this package do
not have any relation with variables defined by @code{defvar},
@code{defconst}, etc.")
      (license license:gpl3+))))

(define-public emacs-frame-purpose
  (package
    (name "emacs-frame-purpose")
    (version "1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/alphapapa/frame-purpose.el")
                    (commit version)))
              (sha256
               (base32
                "0jq2aam1yvccw887ighd1wm2xkvk5bv53ffiz3crcl16a255aj4q"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (inputs
     (list emacs-dash))
    (synopsis "Purpose-specific frames for Emacs")
    (description "@code{frame-purpose} makes it easy to open purpose-specific
frames that only show certain buffers, e.g. by buffers’ major mode, their
filename or directory, etc, with custom frame/X-window titles, icons, and
other frame parameters.")
    (home-page "https://github.com/alphapapa/frame-purpose.el")
    (license license:gpl3+)))

(define-public emacs-arduino-mode
  (let ((commit "b2ffd8441851659cb1cc844156073967729585e5")) ;version bump
    (package
      (name "emacs-arduino-mode")
      (version "1.3.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://repo.or.cz/arduino-mode")
               (commit commit)))
         (sha256
          (base32 "0jk7l9y3x8p6c6m6qpg7vmzn3yirv0m5h483plq1i2qs8njk5v23"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (inputs
       (list emacs-flycheck emacs-spinner))
      (synopsis "Emacs major mode for editing Arduino sketches")
      (description "This package provides an Emacs major mode for editing
Arduino sketches and Org Babel support.")
      (home-page "https://repo.or.cz/arduino-mode")
      (license license:gpl3+))))

(define-public emacs-annalist
  (package
    (name "emacs-annalist")
    (version "1.0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/noctuid/annalist.el")
                    (commit version)))
              (sha256
               (base32
                "1jlb5w4972l8m2aa18q2l6arfpm65g4nk21dn1yi8c9dbpk2g67c"))
              (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-buttercup emacs-lispy emacs-evil))
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-before 'check 'fix-makefile
           (lambda _
             (substitute* "Makefile"
               (("cask exec ") ""))
             #t)))
       #:test-command '("make" "test")))
    (home-page "https://github.com/noctuid/annalist.el")
    (synopsis "Record and display information with Org headings and tables")
    (description "This package allows for keybindings, settings, hooks, and
advice to be recorded and displayed.")
    (license license:gpl3+)))

(define-public emacs-general
  (let ((commit "a0b17d207badf462311b2eef7c065b884462cb7c")
        (revision "4"))
    (package
      (name "emacs-general")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/noctuid/general.el")
               (commit commit)))
         (sha256
          (base32 "0wn5rk3gkimdklip392mnjrmkymgrb7q9skifi03cbpjam1anzvv"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-buttercup emacs-evil emacs-which-key emacs-use-package))
      (arguments
       `(#:test-command '("buttercup" "-L" "test/test-general.el")))
      (home-page "https://github.com/noctuid/general.el")
      (synopsis "More convenient key definitions in emacs")
      (description "@code{general.el} provides a more convenient method for
binding keys in emacs (for both evil and non-evil users).  Like
@code{use-package}, which provides a convenient, unified interface for
managing packages, @code{general.el} is intended to provide a convenient,
unified interface for key definitions.  While this package does implement some
completely new functionality (such as the ability to make vim-style
keybindings under non-prefix keys with an optional timeout), its primary
purpose is to build on existing functionality to make key definition more
clear and concise.  @code{general-define-key} is user-extensible and supports
defining multiple keys in multiple keymaps at once, implicitly wrapping key
strings with (@code{kbd ...}), using named prefix key sequences (like the
leader key in vim), and much more.")
      (license license:gpl3+))))

(define-public emacs-tldr
  (let ((commit "1b09d2032491d3904bd7ee9bf5ba7c7503db6593")
        (revision "2"))
    (package
      (name "emacs-tldr")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/kuanyui/tldr.el")
                      (commit commit)))
                (sha256
                 (base32
                  "0qdv5yhvs4mnb4lszglhli80pv1436mknbap9qrm9riixfg6zlvv"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'set-unzip-location
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "tldr.el"
                  (("\"unzip")
                   (string-append "\""
                                  (search-input-file inputs "/bin/unzip")))))))))
      (inputs
       (list unzip))
      (propagated-inputs
       (list emacs-request))
      (home-page "https://github.com/kuanyui/tldr.el")
      (synopsis "Simplified and community-driven man pages for Emacs")
      (description "Tldr allows the user to access @code{tldr} pages from
within Emacs.  The @code{tldr} pages are a community effort to simplify the
man pages with practical examples.")
      (license license:wtfpl2))))

(define-public emacs-window-layout
  ;; Release not tagged; version taken from package header.
  (let ((commit "277d0a8247adf13707703574cbbc16ddcff7c5fd")
        (version "1.5"))
    (package
      (name "emacs-window-layout")
      (version version)
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/kiwanami/emacs-window-layout")
                      (commit commit)))
                (sha256
                 (base32
                  "101gab1xm3a4ildwzfysmjcpxrzxj3a1l9fa03nc88if9pcsxjb9"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/kiwanami/emacs-window-layout")
      (synopsis "Simple window layout management framework for emacs")
      (description "A window-layout management library that can split a frame
or a window into some windows according to a layout recipe.")
      (license license:gpl3+))))

(define-public emacs-e2wm
  ;; Release not tagged; version taken from package header.
  (let ((commit "33efca5504db9d8b3fdbd412c3d79663c9eec77a")
        (version "1.5"))
    (package
      (name "emacs-e2wm")
      (version version)
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/kiwanami/emacs-window-manager")
                      (commit commit)))
                (sha256
                 (base32
                  "1a1n9b5gw6985qi1dm56vyw8jacx4k3jyl4cadkhj38rz24yiyx8"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments (list #:test-command
                       #~(list "emacs" "--batch" "-L" "."
                               "-l" "test-e2wm-pst-class.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-window-layout))
      (home-page "https://github.com/kiwanami/emacs-window-manager")
      (synopsis "Equilibrium Emacs Window Manager")
      (description "E2WM is a window manager for Emacs.  It enables to
customize the place of pop-up window, how the windows are split, how the
buffers are located in the windows, keybinds to manipulate windows and
buffers, etc.  It also has plug-ins to help your Emacs life.")
      (license license:gpl3+))))

(define-public emacs-ctable
  ;; Latest release is not tagged.  Use commit matching version bump.
  (let ((commit "04dbcddeba1da1f39e885bc0d36240ff37d829e9")
        (version "0.1.3"))
    (package
      (name "emacs-ctable")
      (version version)
      (home-page "https://github.com/kiwanami/emacs-ctable")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (sha256
                 (base32
                  "16yrx1z44xs24z2a0gwzf1xhhks1wrzafc5ihf6lbw843rq2jar0"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       ;; XXX: The following file does not compile.  It is not useful, so
       ;; remove it.
       (list #:exclude #~(cons "^test-ctable\\.el" %default-exclude)))
      (synopsis "Table component for Emacs Lisp")
      (description "This program is a table component for Emacs Lisp.  Other
programs can use this table component for the application UI.")
      (license license:gpl3+))))

(define-public emacs-leetcode
  (let ((commit "8624496af9e105c3e07d88844b37ede87540d604")
        (revision "1"))
    (package
      (name "emacs-leetcode")
      (version (git-version "0" "1" commit))
      (home-page "https://github.com/ginqi7/leetcode-emacs")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/ginqi7/leetcode-emacs")
                      (commit commit)))
                (sha256
                 (base32
                  "11pp7ydlmwrv7djf9mwk4xzn295xbmdnj5x13bfj5yjpjr89p531"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-names emacs-ctable))
      (synopsis "Solve and submit LeetCode problems from within Emacs")
      (description "This package provides an Emacs interface to LeetCode
allowing users to log in and solve problems of their choice using Emacs.")
      (license license:unlicense))))

(define-public emacs-epc
  (let ((commit "e1bfa5ca163273859336e3cc89b4b6460f7f8cda"))
    (package
      (name "emacs-epc")
      (version (git-version "0.1.1" "1" commit))
      (home-page "https://github.com/kiwanami/emacs-epc")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (sha256
                 (base32
                  "15nkrjgi64f829isfd6xrhl4zw8jirr8pkas7nisrbk1av868hx0"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; tests require networking
      (propagated-inputs
       (list emacs-deferred emacs-ctable))
      (synopsis "RPC stack for Emacs Lisp")
      (description "This program is an asynchronous RPC stack for Emacs.
Using this RPC stack, Emacs can communicate with the peer process
smoothly.  Because the protocol employs S-expression encoding and consists of
asynchronous communications, the RPC response is fairly good.")
      (license license:gpl3+))))

(define-public emacs-edbi
  (let ((commit "6f50aaf4bde75255221f2292c7a4ad3fa9d918c0"))
    (package
      (name "emacs-edbi")
      (version (git-version "0.1.3" "1" commit))
      (home-page "https://github.com/kiwanami/emacs-edbi")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (sha256
                 (base32
                  "0x0igyvdcm4863n7zndvcv6wgzwgn7324cbfjja6xd7r0k936zdy"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (inputs
       (list bash-minimal
             perl
             perl-rpc-epc-service
             perl-dbi
             ;; TODO: Adding support for perl-dbd-mysql and others would
             ;; dramatically increase the closure size.  Make several packages?
             perl-dbd-sqlite))
      (propagated-inputs
       (list emacs-e2wm emacs-epc))
      (arguments
       `(#:include '("\\.el$" "\\.pl$")
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'patch-path
             (lambda* (#:key inputs #:allow-other-keys)
               (let ((perl (search-input-file inputs "bin/perl")))
                 (substitute* "edbi.el"
                   (("\"perl\"") (string-append "\"" perl "\""))))))
           (add-after 'install 'wrap-edbi-bridge
             (lambda* (#:key inputs outputs #:allow-other-keys)
               (let* ((out (assoc-ref outputs "out"))
                      (bridge (string-append (elpa-directory out)
                                             "/edbi-bridge.pl")))
                 (chmod bridge #o555)
                 (wrap-program bridge
                   `("PERL5LIB" ":" prefix (,(getenv "PERL5LIB"))))))))))
      (synopsis "Database Interface for Emacs Lisp")
      (description "This program connects the database server through Perl's
DBI, and provides DB-accessing API and the simple management UI.")
      (license license:gpl3+))))

(define-public emacs-edbi-sqlite
  (let ((commit "52cb9ca1af7691b592f2cfd2f007847e7a4ccd5f"))
    (package
      (name "emacs-edbi-sqlite")
      (version (git-version "0.1.1" "1" commit))
      (home-page "https://github.com/proofit404/edbi-sqlite")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (sha256
                 (base32
                  "1vll81386fx90lq5sy4rlxcik6mvw7zx5cc51f0yaca9bkcckp51"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-edbi))
      (synopsis "Open SQLite files in Emacs")
      (description "This package is a convenience wrapper for @command{edbi}
to open SQLite databases.")
      (license license:gpl3+))))

(define-public emacs-nice-citation
  (let ((commit "1013b56d9d1495a335f40a5f76203034dc5fa0ea")
        (revision "0"))
    (package
      (name "emacs-nice-citation")
      (version (git-version "0.0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/damiencollard/nice-citation")
               (commit commit)))
         (sha256
          (base32 "00xqr7haca5vd0bzd043lc6x4fjb903z96frz9b8cbd7spp63z7q"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/damiencollard/nice-citation")
      (synopsis "Depth-colored citations for Gnus")
      (description
       "This package replaces the traditional chevron citation marks @samp{>}
with a Unicode vertical bar with the same color as the text it is quoting.

It is purely presentation: the underlying text is unchanged.  In particular,
if you send a message containing a citation, it will contain the traditional
chevron marks.")
      (license license:gpl3+))))

(define-public emacs-nix-mode
  (package
    (name "emacs-nix-mode")
    (version "1.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/NixOS/nix-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1xvrnpk7cnjm55ja6j7bdnszkzj914gmyzb12r89jh0z25r09crq"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company emacs-json-mode emacs-magit emacs-mmm-mode))
    (home-page "https://github.com/NixOS/nix-mode")
    (synopsis "Emacs major mode for editing Nix expressions")
    (description "@code{nixos-mode} provides an Emacs major mode for editing
Nix expressions.  It supports syntax highlighting, indenting and refilling of
comments.")
    (license license:lgpl2.1+)))

(define-public emacs-nyxt
  ;; This forge doesn't support fetching from refs, use commits.
  (let ((commit "5f732e3d039c9d9c316dd5fbbbc91bd015dd2659")
        (revision "0"))
    (package
      (name "emacs-nyxt")
      (version (git-version "0.1.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.migalmoreno.com/nyxt.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "147yin822mi49gg2gxqljnx3i261z6b8d61m83l4nns4cf67vqns"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-file-name
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "nyxt.el"
                  ("nyxt-path"
                   (search-input-file inputs "/bin/nyxt"))))))))
      (inputs (list nyxt))
      (propagated-inputs (list emacs-sly))
      (home-page "https://git.migalmoreno.com/nyxt.el")
      (synopsis "Interact with Nyxt from Emacs")
      (description "This package consists of custom logic to interact with Nyxt
from Emacs.")
      (license license:gpl3+))))

(define-public emacs-libmpdel
  (package
    (name "emacs-libmpdel")
    (version "2.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/mpdel/libmpdel")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1indy1y31g68i3a4j6nbx3idybn5b11bjvlx9vkibraf622s2bls"))))
    (build-system emacs-build-system)
    (arguments
     (list
      ;; XXX: "check" includes "lint-package-lint", which raises errors.
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'inject-makel
            (lambda* (#:key inputs #:allow-other-keys)
              (symlink (search-input-file inputs "/include/makel.mk")
                       "makel.mk"))))))
    (native-inputs
     (list emacs-ert-runner makel))
    (home-page "https://github.com/mpdel/libmpdel")
    (synopsis "Emacs library to communicate with Music Player Daemon (MPD)")
    (description
     "LibMPDel is an Emacs library client to communicate with Music Player
Daemon (MPD), a flexible, powerful, server-side application for playing
music.")
    (license license:gpl3+)))

(define-public emacs-mpdel
  (package
    (name "emacs-mpdel")
    (version "2.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mpdel/mpdel")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1i7ymg0ls984vjmzjz0sbg280i47c6j79vr725x94xdpj6ci35qr"))))
    (build-system emacs-build-system)
    (arguments
     (list
      ;; XXX: "check" includes "lint-package-lint", which raises errors.
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'inject-makel
            (lambda* (#:key inputs #:allow-other-keys)
              (symlink (search-input-file inputs "/include/makel.mk")
                       "makel.mk"))))))
    (native-inputs (list makel))
    (propagated-inputs
     (list emacs-libmpdel emacs-navigel))
    (home-page "https://gitea.petton.fr/mpdel/mpdel")
    (synopsis "Emacs user interface for Music Player Daemon (MPD)")
    (description
     "MPDel provides an Emacs user interface to control playback (play, pause,
next, volume) and display and control the current playlist as well as your
stored playlists.")
    (license license:gpl3+)))


(define-public emacs-kodi-remote
  (let ((commit "f5e932036c16e2b61a63020e006fc601e38d181e")
        (revision "0"))
    (package
      (name "emacs-kodi-remote")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/spiderbit/kodi-remote.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1gck7lvqxcr9ikrzlpvcf4408cq6i4s8ijgb0kdsbkfzv0w86934"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; tests require networking
      (propagated-inputs
       (list emacs-f emacs-json-mode emacs-let-alist emacs-request))
      (home-page "https://github.com/spiderbit/kodi-remote.el")
      (synopsis "Remote control for Kodi")
      (description
       "This package provides a major mode to control Kodi
instances (play/pause, volume control, media selection, etc.) remotely.")
      (license license:gpl3+))))

(define-public emacs-navigel
  (package
    (name "emacs-navigel")
    (version "1.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/DamienCassou/navigel")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0fszhjf6bj8frvlnim86sfv6sab3qyignxqh8x6i4bqgwnb6svkf"))))
    (build-system emacs-build-system)
    (native-inputs
     (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-tablist))
    (home-page "https://github.com/DamienCassou/navigel")
    (synopsis "Emacs library for creating tabulated-list based user-interfaces")
    (description
     "The navigel package is a library that makes it simpler for Emacs Lisp
developers to define user-interfaces based on tablists (also known as
tabulated-lists).")
    (license license:gpl3+)))

(define-public emacs-eat
  (package
    (name "emacs-eat")
    (version "0.9.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/akib/emacs-eat")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0h4j40amdd92h1bhwcyw0kn6j2ihs671xfmz028qklx5cw8a31yg"))
       (modules '((guix build utils)))
       (snippet
        #~(begin
            ;; Remove generated terminfo database.
            (delete-file-recursively "terminfo")))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons* "^term/"
                         "^terminfo/"
                         "^integration/"
                         "\\.ti$"
                         %default-include)
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'build-info
            (lambda _
              (invoke "make" "info")))
          (add-before 'install 'build-terminfo-database
            (lambda _
              (invoke "make" "terminfo")))
          (add-before 'install 'patch-ncurses-tic-executable
            (lambda* (#:key inputs #:allow-other-keys)
              (let ((tic (search-input-file inputs "/bin/tic")))
                (substitute* "eat.el"
                  (("\\(executable-find \"tic\"\\)")
                   (string-append "\"" tic "\"")))))))))
    (native-inputs
     (list texinfo))
    (inputs
     (list ncurses))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://codeberg.org/akib/emacs-eat")
    (synopsis "Terminal emulator in Emacs")
    (description
     "Eat (Emulate A Terminal) is a terminal emulator in Emacs, written in
pure Elisp.  It has features like Sixel support, complete mouse support and
shell integration.")
    (license license:gpl3+)))

(define-public emacs-vterm
  (let ((commit "056ad74653704bc353d8ec8ab52ac75267b7d373")
        (revision "2"))
    (package
      (name "emacs-vterm")
      (version (git-version "0.0.2" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/akermu/emacs-libvterm")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0mh1xx3ggrr3kampm1b9cxydbn6csihipaa2bpjv08py98wi0434"))))
      (build-system emacs-build-system)
      (arguments
       `(#:modules ((guix build emacs-build-system)
                    ((guix build cmake-build-system) #:prefix cmake:)
                    (guix build emacs-utils)
                    (guix build utils))
         #:imported-modules (,@%emacs-build-system-modules
                             (guix build cmake-build-system))
         ;; Include the `etc' folder for shell-side configuration files
         #:include (cons* "^etc/.*" %default-include)
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'replace-bin-bash
             ;; This is necessary to avoid errors in phase 'patch-el-files'.
             (lambda* (#:key inputs #:allow-other-keys)
               (substitute* "vterm.el"
                 (("\\/bin\\/bash") (search-input-file inputs "/bin/bash")))))
           (add-after 'unpack 'substitute-vterm-module-path
             (lambda* (#:key outputs #:allow-other-keys)
               (chmod "vterm.el" #o644)
               (emacs-substitute-sexps "vterm.el"
                 ("(require 'vterm-module nil t)"
                  `(module-load
                    ,(string-append (assoc-ref outputs "out")
                                    "/lib/vterm-module.so"))))))
           (add-after 'build 'configure
             ;; Run cmake.
             (lambda* (#:key outputs #:allow-other-keys)
               ((assoc-ref cmake:%standard-phases 'configure)
                #:outputs outputs
                #:out-of-source? #f
                #:configure-flags '("-DUSE_SYSTEM_LIBVTERM=ON"))))
           (add-after 'configure 'make
             ;; Run make.
             (lambda* (#:key (make-flags '()) outputs #:allow-other-keys)
               ;; Compile the shared object file.
               (apply invoke "make" "all" make-flags)
               ;; Move the file into /lib.
               (install-file
                "vterm-module.so"
                (string-append (assoc-ref outputs "out") "/lib")))))
         #:tests? #f))
      (native-inputs
       (list cmake-minimal libtool libvterm))
      (home-page "https://github.com/akermu/emacs-libvterm")
      (synopsis "Emacs libvterm integration")
      (description "This package implements a bridge to @code{libvterm} to
display a terminal in an Emacs buffer.")
      (license license:gpl3+))))

(define-public emacs-vterm-toggle
  ;; There have been no releases.
  (let ((commit "d10239b7bb89b78dddb82f66ac2286bc0b02747b")
        (revision "1"))
    (package
      (name "emacs-vterm-toggle")
      (version (git-version "0.0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jixiuf/vterm-toggle")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0r9n23wg9cfy10h5f9zqr8jpkvw34f9rylri3nxq870awjab7rqi"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-vterm))
      (home-page "https://github.com/jixiuf/vterm-toggle")
      (synopsis "Toggle between a vterm buffer and other buffers")
      (description
       "This package provides a DWIM way to switch from an Emacs buffer to
a vterm buffer and back again.")
      (license license:gpl3+))))

(define-public emacs-multi-vterm
  (let ((commit "a3df7218c1ecadef779e2c47815201052283f9ea")
        (revision "1"))
    (package
      (name "emacs-multi-vterm")
      (version (git-version "1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/suonlight/multi-vterm")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0z6321994c4c8f5iya240pzvhirci9idlc110wjjwsm4pzdrrppj"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-vterm))
      (home-page "https://github.com/suonlight/multi-vterm/")
      (synopsis "Manage multiple vterm buffers in Emacs")
      (description
       "This package provides an Emacs library to manage vterm buffers.")
      (license license:gpl3+))))

(define-public emacs-simple-mpc
  ;; There have been no releases.
  (let ((commit "35923caf39d4bebeb0e49264a29441c22216f1ed")
        (revision "1"))
    (package
      (name "emacs-simple-mpc")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jorenvo/simple-mpc")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0vnqnxw2qhxlzgyms220l9qcj1rvpyrmg1isri2l6hxk23ga89p9"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-s))
      (home-page "https://github.com/jorenvo/simple-mpc")
      (synopsis "Simple Emacs frontend to mpc")
      (description "This package provides an Emacs major mode which acts as a
front end to mpc, a client for the @dfn{Music Player Daemon} (MPD).")
      (license license:gpl3+))))

(define-public emacs-mkmcc-gnuplot-mode
  (package
    (name "emacs-mkmcc-gnuplot-mode")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mkmcc/gnuplot-mode")
             (commit "601f6392986f0cba332c87678d31ae0d0a496ce7")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "14f0yh1rjqc3337j4sbqzfb7pjim2c8a7wk1a73xkrdkmjn82vgb"))))
    (build-system emacs-build-system)
    (home-page "https://mkmcc.github.io/software/gnuplot-mode.html")
    (synopsis "Minimal emacs major mode for editing gnuplot scripts")
    (description "@code{emacs-mkmcc-gnuplot-mode} is a minimal emacs major
mode for editing gnuplot scripts.  It provides syntax highlighting,
indentation and a command to plot the file.")
    (license license:gpl3+)))

(define-public emacs-cmake-font-lock
  (package
    (name "emacs-cmake-font-lock")
    (version "0.1.13")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Lindydancer/cmake-font-lock")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "18kvs2yq6plw6lngs97wxl7qah5iwrnhq2q68aac9z8fpwq0vhz8"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons "^admin\\/" %default-include)))
    (native-inputs
     (list emacs-faceup))
    (home-page "https://github.com/Lindydancer/cmake-font-lock")
    (synopsis "Advanced type-aware syntax-highlighting for CMake")
    (description "This package highlights function arguments in CMake
according to their use.")
    (license license:gpl3+)))

(define-public emacs-detached
  (package
    (name "emacs-detached")
    (version "0.10.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.sr.ht/~niklaseklund/detached.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0dvvyqc0nw9has54vps10f5iv831cb29vqvbvx0m2djv9pacqp17"))))
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'configure
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "detached.el"
                ("detached-dtach-program"
                 (search-input-file inputs "/bin/dtach"))
                ("detached-shell-program"
                 (search-input-file inputs "/bin/bash"))))))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (inputs (list dtach))
    (home-page "https://git.sr.ht/~niklaseklund/detached.el")
    (synopsis "Launch and manage detached processes from Emacs")
    (description
     "The Detached package allows users to run processes detached from Emacs.
It provides integration with multiple built-in modes, as well as providing an
interface to attach and interact with the processes.")
    (license license:gpl3+)))

(define-deprecated-package emacs-dtache
  emacs-detached)

(define-public emacs-dtrt-indent
  (package
    (name "emacs-dtrt-indent")
    (version "1.25")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/jscheid/dtrt-indent")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1fk88rjv8shdpmnbhc4fy52anf18w7xl9z2fi6bnpjawi9hn9c94"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/jscheid/dtrt-indent")
    (synopsis "Minor mode that guesses the indentation offset")
    (description "This package provides a minor mode that guesses the
indentation offset originally used for creating source code files and
transparently adjusts the corresponding settings in Emacs, making it more
convenient to edit foreign files.")
    (license license:gpl2+)))

(define-public emacs-outline-indent
  (package
    (name "emacs-outline-indent")
    (version "1.1.5")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/jamescherti/outline-indent.el.git")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0vw41bnysacb7hwfacb8m8qyz01skwcpnyzrm1mriwl5j51ni1aj"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (synopsis "Outline and code folding for indentation-based texts in Emacs")
    (description "This package provides a minor mode that enables code folding
based on indentation levels for various indentation-based text files, such as
YAML, Python, and any other indented text files.  In addition to code folding,
outline-indent allows moving indented subtrees up and down, promoting and
demoting sections to adjust indentation levels, customizing the ellipsis, and
inserting a new line with the same indentation level as the current line.")
    (home-page "https://github.com/jamescherti/outline-indent.el")
    (license license:gpl3+)))

(define-public emacs-repeat-fu
  ;; Upstream has no tags; release extracted from source code
  (let ((commit "b91d55001cca71e5df7a9f665c7da73ab9f55efd")
        (revision "0"))
    (package
      (name "emacs-repeat-fu")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://codeberg.org/ideasman42/emacs-repeat-fu")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "04kpzwcl3lzqvaw16wy7qjw5kfnbhndby1adwkv8p3bbqjqj5g48"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f))              ; No tests
      (synopsis "Minor mode to repeat typing or commands")
      (description
       "Repeat multi-command \"edits\" with configurable behavior, supporting
multiple modal editing systems.")
      (home-page "https://codeberg.org/ideasman42/emacs-repeat-fu")
      (license license:gpl3+))))

(define-public emacs-repo
  (package
    (name "emacs-repo")
    (version "0.3.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/canatella/repo-el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0y8j3hf5r69fxj2vsbaxwr9qdchddn53w25xzmxv1kfh6hbagzv3"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; tests require networking
    (native-inputs
     (list emacs-el-mock emacs-ert-runner))
    (propagated-inputs
     (list emacs-f emacs-magit))
    (home-page "https://github.com/canatella/repo-el")
    (synopsis "Emacs interface for the Google Repo tool")
    (description "This package provides integration of the Google Repo tool
with emacs.  It displays the output of the @code{repo status} command in a
buffer and launches Magit from the status buffer for the project at point.")
    (license license:gpl3+)))

(define-public emacs-repology
  (package
    (name "emacs-repology")
    (version "1.2.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "repology-" version ".tar"))
       (sha256
        (base32 "0l53wl0bk8rnqwsjdh1hwvkvbay080l10bslcj3scn42bgbi59j1"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs" "-Q" "-batch"
              "-l" "repology-tests.el"
              "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://elpa.gnu.org/packages/repology.html")
    (synopsis "Repology API access via Elisp")
    (description
     "This package provides tools to query Repology API (see
@url{https://repology.org/api}), process results, and display them.")
    (license license:gpl3+)))

(define-public emacs-alect-themes
  (package
    (name "emacs-alect-themes")
    (version "0.10")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alezost/alect-themes")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "190clnm5x4hpzrq2wp18vxg6614ly3ciyv0y1sm9rfr9w9z5i0ya"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/alezost/alect-themes")
    (synopsis "Low contrast, light, dark and black color theme for Emacs")
    (description "@code{emacs-alect-themes} provides configurable light, dark
and black color themes for Emacs.  The themes are intended to be used with
GUI.")
    (license license:gpl3+)))

(define-public emacs-google-c-style
  (let ((commit "6271f3f473ceb3a7fef99388a3040903b1a145f1")
        (revision "0"))
    (package
      (name "emacs-google-c-style")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/google/styleguide")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1jghyyasdl15c4gaqaxmdn43am63k6bykn5ab83f1ahv9zi1krxk"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/google/styleguide")
      (synopsis "Emacs settings file for Google C/C++ style")
      (description "@code{emacs-google-c-style} provides an Emacs settings
file for Google C and C++ style.")
      (license license:gpl1+))))

(define-public emacs-redshank
  (let ((commit "f98e68f532e622bcd464292ca4a9cf5fbea14ebb")
        (revision "1"))
    (package
      (name "emacs-redshank")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "http://www.foldr.org/~michaelw/projects/redshank.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1jdkgvd5xy9hl5q611jwah2n05abjp7qcy9sj4k1z11x0ii62b6p"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-paredit))
      (home-page "http://www.foldr.org/~michaelw/emacs/redshank/")
      (synopsis "Common Lisp Editing Extensions (for Emacs)")
      (description "Redshank is a collection of code-wrangling Emacs macros
mostly geared towards Common Lisp, but some are useful for other Lisp
dialects, too.  Redshank's code transformations aim to be expression-based (as
opposed to character-based).")
      (license license:gpl1+))))

(define-public emacs-disk-usage
  ;; Use a recent commit as the last release is missing changes from 2020
  ;; onwards
  (let ((commit "b0d803f2cec3afc2937840f9ba66e3f903d6c415")
        (revision "0"))
    (package
      (name "emacs-disk-usage")
      (version (git-version "1.3.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/Ambrevar/emacs-disk-usage")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0vl79knb2snp2gzmcdasncgcc44rq99kmfnvwhfpm0wk21nxhc1m"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; no tests
      (home-page "https://gitlab.com/Ambrevar/emacs-disk-usage")
      (synopsis "Sort and browse disk usage listings with Emacs")
      (description "Disk Usage is a file system analyzer: it offers a tabulated
view of file listings sorted by size.  Directory sizes are computed
recursively.  The results are cached for speed.")
      (license license:gpl3+))))

(define-public emacs-orgit
  (package
    (name "emacs-orgit")
    (version "2.0.5")
    (home-page "https://github.com/magit/orgit")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1nz9fy4348iha1zbw0v8hzsxv171v5758jilhsn2ksn9nvpkbbyb"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ; A makefile but no tests.
    (propagated-inputs
     (list emacs-dash emacs-magit))
    (synopsis "Support for Org links to Magit buffers")
    (description "This package defines several Org link types, which can be
used to link to certain Magit buffers.  Use the command
@command{org-store-link} while such a buffer is current to store a link.
Later you can insert it into an Org buffer using the command
@code{org-insert-link}.")
    (license license:gpl3+)))

(define-public emacs-orgit-forge
  (package
    (name "emacs-orgit-forge")
    (version "1.0.3")
    (home-page "https://github.com/magit/orgit-forge")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0cz2bzpkk3sjsjcycbdfykhchghx1mn76qxx3pbr2a7qjh7zfdd4"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))       ; no tests
    (propagated-inputs
     (list emacs-compat
           emacs-forge
           emacs-magit
           emacs-orgit))
    (synopsis "Org links to Forge issue buffers")
    (description
     "This package defines the Org link type @code{orgit-topic}, which can be
used to link to Forge topic buffers.")
    (license license:gpl3)))

(define-public emacs-amx
  (package
    (name "emacs-amx")
    (version "3.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DarwinAwardWinner/amx")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0h1cxqqf0hixh25j679r57bq9dv0b20icf268wbnsim5xp88ngf8"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s))
    (home-page "https://github.com/DarwinAwardWinner/amx")
    (synopsis "Alternative M-x interface for Emacs")
    (description "Amx is an alternative interface for M-x in Emacs.  It
provides several enhancements over the ordinary
@code{execute-extended-command}, such as prioritizing your most-used commands
in the completion list and showing keyboard shortcuts, and it supports several
completion systems for selecting commands, such as Ido and Ivy.")
    (license license:gpl3+)))

(define-public emacs-lorem-ipsum
  ;; Upstream has no tags; release extracted from source code
  (let ((commit "4e87a899868e908a7a9e1812831d76c8d072f885")
        (revision "1"))
    (package
      (name "emacs-lorem-ipsum")
      (version (git-version "0.4" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url "https://github.com/jschaf/emacs-lorem-ipsum/")
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "10l0dmnp1kjyca5jqbf4j98xchcbf9grlv0nv3ygf167vps40il6"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;No tests.
      (home-page "https://github.com/jschaf/emacs-lorem-ipsum/")
      (synopsis "Insert dummy pseudo Latin text in Emacs")
      (description "This package provides convenience functions to insert
dummy Latin text into a buffer.  This can be useful if you need to produce
paragraphs or pages of text for testing purposes.")
      (license license:gpl3+))))

(define-public emacs-lisp-extra-font-lock
  (let ((commit "4605eccbe1a7fcbd3cacf5b71249435413b4db4f"))
    (package
      (name "emacs-lisp-extra-font-lock")
      (version (git-version "0.0.6" "1" commit))
      (home-page "https://github.com/Lindydancer/lisp-extra-font-lock")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "152vcp3mdlv33jf5va4rinl1d0k960gnfhbrqqrafazgx9j3ya8w"))))
      (build-system emacs-build-system)
      (synopsis "Highlight bound variables and quoted expressions in Emacs")
      (description "This package highlight the location where local variables
is created (bound, for example, by let) as well as quoted and backquoted
constant expressions.")
      (license license:gpl3+))))

(define-public emacs-docker-tramp
  (package
    (name "emacs-docker-tramp")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-pe/docker-tramp.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "05966l3af9lg4nlsz6wrq282ipwxh19ggirfyabjrr1syw3v2crn"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/emacs-pe/docker-tramp.el")
    (synopsis "TRAMP integration for docker containers")
    (description
     "This package provides a TRAMP method for Docker containers.")
    (license license:gpl3+)))

(define-public emacs-docker
  (package
    (name "emacs-docker")
    (version "2.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Silex/docker.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "102hn0m91shyiz25x2c5ihhzbc8a3i9vnlkfcb3xm3w3nrqa5w64"))))
    (inputs
     (list emacs-undercover))
    (propagated-inputs
     (list emacs-aio
           emacs-dash
           emacs-json-mode
           emacs-s
           emacs-tablist))
    (arguments `(#:tests? #false))      ;no tests
    (build-system emacs-build-system)
    (home-page "https://github.com/Silex/docker.el")
    (synopsis "Manage docker from Emacs")
    (description "This package provides an Emacs interface for Docker.")
    (license license:gpl3+)))

(define-public emacs-kubed
  (package
    (name "emacs-kubed")
    (version "0.5.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/eshelyaron/kubed.git")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1kkdb31zkyfnxcnpqvln7k48203p2hdc9h4xdnv67iwmrc4znyba"))))
    (build-system emacs-build-system)
    (synopsis "Kubernetes control")
    (description "This package provides a Kubernetes control interface
within emacs.")
    (home-page "https://eshelyaron.com/man/kubed/")
    (license license:gpl3+)))

(define-public emacs-dockerfile-mode
  (package
    (name "emacs-dockerfile-mode")
    (version "1.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/spotify/dockerfile-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0lz6lfyab2f9nw0fwkvvn7zx361c3wm0aar9v2vhb437c0mxzndh"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s))
    (home-page "https://github.com/spotify/dockerfile-mode")
    (synopsis "Major mode for editing Dockerfile")
    (description
     "This package provides a major mode @code{dockerfile-mode} for use with
the standard @code{Dockerfile} file format.")
    (license license:asl2.0)))

(define-public emacs-lsp-mode
  ;; Last release is one year old.
  ;; Latest revision enables support for new lsp spec 3.17 features.
  (let ((commit "147233313576c844e2bf56640827b0d0e5c2ee6c")
        (revision "0"))
    (package
      (name "emacs-lsp-mode")
      (version (git-version "9.0.1" revision commit)) ;taken from lsp-mode.el
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/emacs-lsp/lsp-mode/")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "14317wgi0mrxbcrlgrfqyf80lh86n7x6bv07b43cxl3k4c4fqk0l"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:emacs emacs                   ;need libxml support
        #:test-command #~(list "ert-runner"
                               "-L" "."
                               "-L" "clients"
                               "-t" "!no-win"
                               "-t" "!org")
        #:phases
        #~(modify-phases %standard-phases
            ;; Move libraries to the top-level.
            (add-after 'unpack 'move-libraries
              (lambda _
                ;; REVIEW; Improve style, pair-for-each ?
                (for-each (lambda (d)
                            (for-each (lambda (f)
                                        (rename-file f (basename f)))
                                      (find-files d "\\.el$")))
                          (list "use-package/" "clients/"))))
            (add-before 'check 'skip-failing-tests
              (lambda _
                (substitute* "test/lsp-mock-server-test.el"
                  (("\\(ert-deftest lsp-mock-server-reports.*" all)
                   (string-append all "(skip-unless nil)"))
                  (("\\(ert-deftest lsp-mock-server-updates-.*" all)
                   (string-append all "(skip-unless nil)")))
                (substitute* "test/lsp-common-test.el"
                  (("\\(require 'elenv" all)
                   (string-append all " nil t"))
                  (("\\(ert-deftest lsp--path-to-uri-1 .*" all)
                   (string-append all "(skip-unless (featurep 'elenv))"))
                  (("\\(ert-deftest lsp-byte-compilation-test .*" all)
                   (string-append all "(skip-unless nil)"))
                  (("\\(ert-deftest lsp--build-.*-response-test-[34] .*" all)
                   (string-append all "(skip-unless nil)")))
                (substitute* "test/lsp-mode-test.el"
                  (("\\(ert-deftest lsp--merge-results .*" all)
                   (string-append all "(skip-unless nil)")))
                (substitute* "test/lsp-integration-test.el"
                  (("\\(ert-deftest lsp-.*-hover-request(-tick)? .*" all)
                   (string-append all "(skip-unless nil)"))
                  (("\\(ert-deftest lsp-test-current-buffer-mode .*" all)
                   (string-append all "(skip-unless nil)")))
                (delete-file "test/lsp-clangd-test.el")))
            (add-before 'check 'set-home
              (lambda _ (setenv "HOME" (getenv "TMPDIR"))))
            (add-after 'unpack 'enable-plists
              (lambda _
                (substitute* "lsp-protocol.el"
                  ;; This is faster, and it's officially recommended,
                  ;; and it's required by emacs-lsp-booster.
                  ;; See also:
                  ;; <https://emacs-lsp.github.io/lsp-mode/page/performance/>.
                  (("\\(getenv \"LSP_USE_PLISTS\"\\)") "t"))))
            (add-before 'move-libraries 'fix-patch-el-files
              ;; /bin/ksh is only used on macOS, which we don't support, so we
              ;; don't want to add it as input.
              (lambda _
                (substitute* '("clients/lsp-csharp.el"
                               "clients/lsp-fsharp.el")
                  (("/bin/ksh") "ksh")))))))
      (propagated-inputs
       (list emacs-dash
             emacs-f
             emacs-ht
             emacs-hydra
             emacs-markdown-mode
             emacs-spinner))
      (native-inputs
       (list emacs-deferred
             emacs-el-mock
             emacs-ert-runner))
      (home-page "https://emacs-lsp.github.io/lsp-mode/")
      (synopsis "Emacs client and library for the Language Server Protocol")
      (description
       "LSP mode is a client and library implementation for the Language
Server Protocol.  This mode creates an IDE-like experience by providing
optional integration with other popular Emacs packages like Company, Flycheck,
and Projectile.")
      (license license:gpl3+))))

(define* (%emacs-lsp-treemacs-upstream-source #:key commit version hash)
  (origin
    (method git-fetch)
    (uri (git-reference
          (url "https://github.com/emacs-lsp/lsp-treemacs")
          (commit commit)))
    (file-name (git-file-name "emacs-lsp-treemacs" version))
    (hash hash)))

(define-public emacs-lsp-treemacs
  (package
    (name "emacs-lsp-treemacs")
    (version "0.5")
    (source
     (origin
       (method (@@ (guix packages) computed-origin-method))
       (file-name (string-append name "-" version ".tar.gz"))
       (sha256 #f)
       (uri
        (delay
          (with-imported-modules '((guix build emacs-utils)
                                   (guix build utils))
            #~(begin
                (use-modules (guix build utils)
                             (guix build emacs-utils))
                (let* ((dir (string-append "emacs-lsp-treemacs-" #$version)))

                  (set-path-environment-variable
                   "PATH" '("bin")
                   (list #+emacs-minimal
                         #+(canonical-package bash)
                         #+(canonical-package coreutils)
                         #+(canonical-package gzip)
                         #+(canonical-package tar)))

                  ;; Copy the upstream source
                  (copy-recursively
                   #+(%emacs-lsp-treemacs-upstream-source
                      #:commit version #:version version
                      #:hash
                      (content-hash
                       "0clifff6xhi1irmx08wjdl13vlh05a7c108hmzzqmmklg76zyr04"))
                   dir)

                  (with-directory-excursion dir
                    ;; The icons are unclearly licensed and possibly non-free,
                    ;; see <https://github.com/emacs-lsp/lsp-treemacs/issues/123>
                    (with-directory-excursion "icons"
                      (for-each delete-file-recursively
                                '("eclipse" "idea" "netbeans")))

                    ;; Also remove any mentions in the source code.
                    (make-file-writable "lsp-treemacs-themes.el")
                    (emacs-batch-edit-file "lsp-treemacs-themes.el"
                      '(progn
                        (while (search-forward-regexp
                                "(treemacs-create-theme \"\\([^\"]*\\)\""
                                nil t)
                          (pcase (match-string 1)
                                 ("Iconless" nil)
                                 (_ (beginning-of-line)
                                    (kill-sexp)))
                          (basic-save-buffer)))))

                  (invoke "tar" "cvfa" #$output
                          "--mtime=@0"
                          "--owner=root:0"
                          "--group=root:0"
                          "--sort=name"
                          "--hard-dereference"
                          dir))))))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f ; No tests.
           #:include #~(cons "^icons\\/" %default-include)))
    (propagated-inputs
     (list emacs-lsp-mode emacs-treemacs))
    (home-page "https://github.com/emacs-lsp/lsp-treemacs")
    (synopsis "Integration between LSP mode and treemacs")
    (description
     "This package provides integration between LSP mode and treemacs,
and implementation of treeview controls using treemacs as a tree renderer.")
    (license (list license:gpl3+
                   license:cc-by4.0  ; microsoft/vscode-icons
                   license:expat)))) ; vscode-icons/vscode-icons

(define-public emacs-lsp-docker
  (let ((commit "16a0cfbe06813a1191b19e412445f9d34cd7493f")
        (revision "1"))
    (package
      (name "emacs-lsp-docker")
      (version "1.0.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacs-lsp/lsp-docker")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1ry8yxrb0172n1lnqi4av4wmqvhaqyh55ih2xs0hnd8b6ziywafq"))))
      (build-system emacs-build-system)
      (arguments
       ;; XXX: Tests are currently run interactively. See test/README.md.
       (list #:tests? #f))
      (propagated-inputs (list emacs-lsp-mode emacs-yaml))
      (home-page "https://github.com/emacs-lsp/lsp-docker")
      (synopsis "Leverage LSP mode in Docker environment")
      (description
       "This package provides scripts and configurations to leverage LSP mode
in Docker environment.")
      (license license:gpl3+))))

(define-public emacs-dape
  (package
    (name "emacs-dape")
    (version "0.25.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/svaante/dape")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1mj9xqpsaylf7qg7b4a2bhb3gf7wgv9wjphzkwc694sd079i2yyn"))))
    (build-system emacs-build-system)
    (arguments
     ;; FIXME python tests pass, JS tests require additional dependencies
     ;; See https://lists.sr.ht/~abcdw/rde-devel/patches/51878
     (list #:tests? #f
           #:test-command #~'("emacs" "--batch" "-l" "dape.el"
                              "-l" "dape-tests.el"
                              "-f" "ert-run-tests-batch-and-exit")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'support-unwrapped-python
                 (lambda _
                   (substitute* "dape.el"
                     (("command \"python\"")
                      "command \"python3\""))))
               (add-before 'check 'pre-check
                 (lambda* (#:key tests? inputs #:allow-other-keys)
                   (if tests?
                       (setenv
                        "PATH"
                        (string-append
                         (getenv "PATH")
                         ":" (dirname (search-input-file inputs "/bin/python3"))
                         ":" (dirname (search-input-file inputs "/bin/node"))))
                       (format #t "test suite not run~%")))))))
    (native-inputs (list node-lts python-minimal python-debugpy))
    (propagated-inputs (list emacs-jsonrpc))
    (home-page "https://github.com/svaante/dape")
    (synopsis "Debug Adapter Protocol for Emacs")
    (description
     "Dape is a debug adapter client for Emacs.  The debug adapter protocol,
much like its more well-known counterpart, the language server protocol,
aims to establish a common API for programming tools.  However, instead of
functionalities such as code completions, it provides a standardized
interface for debuggers.")
    (license license:gpl3+)))

(define-public emacs-dap-mode
  (package
    (name "emacs-dap-mode")
    (version "0.8")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-lsp/dap-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "177ira42l1p7zjb24c0vp4biip9sczlvbgzfahp4mhgfd9h8a6bx"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons* "\\.png$" %default-include)
           #:test-command #~(list "ert-runner" "-L" ".")))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-bui
           emacs-lsp-docker
           emacs-lsp-mode
           emacs-posframe
           emacs-lsp-treemacs))
    (home-page "https://emacs-lsp.github.io/dap-mode")
    (synopsis "Emacs client/library for Debug Adapter Protocol")
    (description
     "Dap mode is an Emacs client/library for Debug Adapter
Protocol (DAP), a wire protocol for communication between client and
debug server.  It is similar to the LSP but provides integration with
Debug server.")
    (license license:gpl3+)))

(define-public emacs-fortran-tags
  (package
    (name "emacs-fortran-tags")
    (version "1.5.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/raullaasner/fortran-tags.git")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1f22p0nsdayxqdh03s41qs833gamdhv4q7a4csm6vgwp4ivn3z1g"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "^fortran-tags.py" %default-include)))
    (inputs
     (list python))
    (synopsis "Emacs plugin for source code indexing of modern Fortran")
    (description "This package provides an Emacs plugin for source code
indexing of modern Fortran.")
    (home-page "https://github.com/raullaasner/fortran-tags")
    (license license:gpl3+)))

(define-public emacs-bfuture
  (package
    (name "emacs-bfuture")
    (version "1.0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~plattfot/bfuture")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "0604xgwrcvqsmk1vky8wdivsl43p6jgs5zchqssdmf22f5chxbzr"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/plattfot/bfuture.el")
    (synopsis "Basic future concept for Emacs with Tramp support")
    (description
     "This package provides basic functions for spawning processes asynchronous in
Emacs and retrieving the output.  It is similar to @code{emacs-pfuture} except
that this works over Tramp but the feature set is more limited.  For example,
it cannot tell stdout and stderr apart.")
    (license license:gpl3+)))

(define-public emacs-pfuture
  (package
    (name "emacs-pfuture")
    (version "1.10.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Alexander-Miller/pfuture")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ifasmkfj06fb9whk7gg47fiim0bbwyh3279sd72psqbbxfixddf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Alexander-Miller/pfuture")
    (synopsis "Simple wrapper around asynchronous processes for Emacs")
    (description "This package provides a simple wrapper around asynchronous
processes for Emacs.")
    (license license:gpl3+)))

(define-public emacs-treemacs
  (package
    (name "emacs-treemacs")
    (version "3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/Alexander-Miller/treemacs")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0z8pc7y8p32vhlv5ibr11mrd8r8fk09dfgsj7a63d48r992p7gih"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "make" "-C" "../.." "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'fix-makefile
            (lambda _
              (substitute* "Makefile"
                (("@\\$\\(CASK\\) exec ") "")
                ;; Guix does not need to prepare dependencies before testing.
                (("test: prepare") "test:"))))
          (add-after 'fix-makefile 'chdir-elisp
            ;; Elisp directory is not in root of the source.
            (lambda _
              (chdir "src/elisp")))
          (add-before 'install 'patch-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "treemacs-core-utils.el")
              (emacs-substitute-variables "treemacs-core-utils.el"
                ("treemacs-dir" (string-append #$output "/")))
              (make-file-writable "treemacs-icons.el")
              (substitute* "treemacs-icons.el"
                (("icons/default")
                 (string-append (elpa-directory #$output) "/icons/default")))
              (make-file-writable "treemacs-customization.el")
              (emacs-substitute-variables "treemacs-customization.el"
                ("treemacs-python-executable"
                 (search-input-file inputs "/bin/python3")))
              (make-file-writable "treemacs-async.el")
              (substitute* "treemacs-async.el"
                (("src/scripts")
                 (string-append (elpa-directory #$output) "/scripts")))))
          (add-after 'install 'install-data
            (lambda _
              (with-directory-excursion "../.." ;treemacs root
                (copy-recursively
                 "icons/default"
                 (string-append (elpa-directory #$output) "/icons/default"))
                (copy-recursively
                 "src/scripts"
                 (string-append (elpa-directory #$output) "/scripts"))))))))
    (native-inputs
     (list emacs-buttercup emacs-el-mock))
    (inputs
     (list python))
    (propagated-inputs
     (list emacs-ace-window
           emacs-cfrs
           emacs-dash
           emacs-f
           emacs-ht
           emacs-hydra
           emacs-pfuture
           emacs-s))
    (home-page "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Emacs tree style file explorer")
    (description
     "Treemacs is a file and project explorer similar to NeoTree or Vim's
NerdTree, but largely inspired by the Project Explorer in Eclipse.  It shows
the file system outlines of your projects in a simple tree layout allowing
quick navigation and exploration, while also possessing basic file management
utilities.")
    (license license:gpl3+)))

(define-public emacs-treemacs-extra
  (package
    (inherit emacs-treemacs)
    (name "emacs-treemacs-extra")
    (arguments
     (list
      #:tests? #f                       ;no test suite
      #:lisp-directory "src/extra"))
    (propagated-inputs
     (modify-inputs (package-propagated-inputs emacs-treemacs)
       (append emacs-all-the-icons
               emacs-evil
               emacs-magit
               emacs-projectile
               emacs-persp-mode
               emacs-perspective
               emacs-treemacs
               mu)))))

(define-public emacs-treemacs-nerd-icons
  (package
    (name "emacs-treemacs-nerd-icons")
    (version "0.0.1-1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/rainstormstudio/treemacs-nerd-icons.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "15mfxaimbwv87nxsna83wcslmpzyclx8n09kzwmchy97ri2xl67h"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-nerd-icons emacs-treemacs))
    (synopsis "emacs-treemacs-nerd-icons")
    (description "This package provides nerd-icons integration for treemacs.")
    (home-page "https://github.com/rainstormstudio/treemacs-nerd-icons")
    (license license:gpl3+)))

(define-public emacs-libyaml
  ;; Upstream made no release so far.
  (let ((version "0.1")
        (revision "1")
        (commit "961e0d8b9ef47464c049e07be7fcefd3903f8cbc"))
    (package
      (name "emacs-libyaml")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/syohex/emacs-libyaml")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1c85583r47yjbpzbjgjzrwzqdlmy229xx9az2r18smcyd9da92c3"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ;no test
        #:modules '((guix build emacs-build-system)
                    (guix build emacs-utils)
                    (guix build utils))
        #:imported-modules `(,@%emacs-build-system-modules
                             (guix build gnu-build-system))
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'substitute-libyaml-core-path
              (lambda _
                (make-file-writable "libyaml.el")
                (emacs-substitute-sexps "libyaml.el"
                  ("(require 'libyaml-core)"
                   `(module-load
                     ,(string-append #$output "/lib/libyaml-core.so"))))))
            (add-after 'check 'make
              ;; Run make.
              (lambda* (#:key (make-flags '()) #:allow-other-keys)
                ;; Compile the shared object file.
                (apply invoke "make" "all" "CPPFLAGS=" make-flags)
                ;; Move the file into /lib.
                (install-file "libyaml-core.so"
                              (string-append #$output "/lib")))))))
      (native-inputs (list libyaml))
      (home-page "https://github.com/syohex/emacs-libyaml")
      (synopsis "Libyaml bindings for Emacs")
      (description
       "This package implements bindings for LibYAML to be able to parse YAML
files in Elisp.")
      (license license:gpl3+))))

(define-public emacs-lsp-java
  (let ((commit "4909c14b9012eed669a9c3f11a8df055d5bb8a0e")
        (revision "1"))
    (package
      (name "emacs-lsp-java")
      (version (git-version "3.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-java")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0qw824vdqk92r8hrrjsi7pd00rw60wf5jfjk1x3nhs06hijs0x0s"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f)) ; No tests.
      (propagated-inputs (list emacs-dap-mode
                               emacs-lsp-mode
                               emacs-markdown-mode
                               emacs-dash
                               emacs-f
                               emacs-ht
                               emacs-request
                               emacs-treemacs))
      (home-page "https://github.com/emacs-lsp/lsp-java/")
      (synopsis "Java support for lsp-mode")
      (description "Emacs Java IDE using Eclipse JDT Language Server.")
      (license license:gpl3+))))

(define-public emacs-lsp-metals
  (let ((commit "01060e9df33bb077ba6bb56ccfebc140aef8f8f3")
        (revision "1"))
    (package
      (name "emacs-lsp-metals")
      (version (git-version "1.2.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/emacs-lsp/lsp-metals")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0whjz5vh9xf35nvr5an52d7qsf2ayr2pfwvr37qhz1rjg0rv2kzd"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f))  ; Makefile but no tests.
      (propagated-inputs
       (list emacs-dap-mode emacs-lsp-treemacs emacs-scala-mode))
      (home-page "https://github.com/emacs-lsp/lsp-metals")
      (synopsis "Scala support for LSP mode")
      (description "This package is an Emacs Scala IDE using LSP mode to connect
to Metals.")
      (license license:gpl3+))))

(define-public emacs-lsp-ui
  (package
    (name "emacs-lsp-ui")
    (version "9.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-lsp/lsp-ui")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "162bxyhiqz4saxvh6n3sdb9hx7px5wpy45wbfg5aiqzlqwgqyg42"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(apply list "ert-runner" "-L" "."
                    "-t" "'!no-win'" "-t" "'!org'"
                    (apply append
                           (map
                            (lambda (file)
                              (list "-l" file))
                            (find-files "test" "\\.el"))))))
    (native-inputs (list emacs-ert-runner emacs-rustic))
    (propagated-inputs
     (list emacs-dash emacs-lsp-mode emacs-markdown-mode emacs-flycheck))
    (home-page "https://github.com/emacs-lsp/lsp-ui")
    (synopsis "User interface extensions for @code{lsp-mode}")
    (description
     "@code{LSP-ui} contains several enhancements and integrations for
@code{lsp-mode}, such as visual flychecking, displaying references in-line,
and code peeking.")
    (license license:gpl3+)))

(define-public emacs-lsp-lua-emmy
  (let ((commit "ab53fb2a8b8942804eb75bab5624fd19f1d360bf"))
    (package
      (name "emacs-lsp-lua-emmy")
      (version (git-version "0.1.0" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/phenix3443/lsp-lua-emmy")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0rbizis73n1w5ig07fj1han74chbc1zpbp5bn37rj0gz608aqka8"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-lsp-mode))
      (home-page "https://github.com/phenix3443/lsp-lua-emmy/")
      (synopsis "Lua support in @code{lsp-mode} client for Emacs")
      (description "This package provides a Lua language support in
@code{lsp-mode} client for Emacs.")
      (license license:gpl3+))))

(define-public emacs-lsp-ivy
  (package
    (name "emacs-lsp-ivy")
    (version "0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacs-lsp/lsp-ivy")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0nb9ypa8hyx7i38rbywh8hn2i5f9l2l567hvdr9767fk279yr97n"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-ivy emacs-lsp-mode))
    (home-page "https://github.com/emacs-lsp/lsp-ivy")
    (synopsis "Provide LSP-enhanced completion for symbols")
    (description
     "This package enhances @code{ivy} with completion for symbols from
workspaces with a LSP-compliant server running.")
    (license license:gpl3+)))

(define-public emacs-helm-lsp
  (package
    (name "emacs-helm-lsp")
    (version "0.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacs-lsp/helm-lsp")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0cmxdd3fgyiixg81zmxa0j68slhkq8rg5z840cx4dbb3j9w06yd1"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-helm emacs-lsp-mode emacs-dash))
    (home-page "https://github.com/emacs-lsp/helm-lsp")
    (synopsis "Provide LSP-enhanced completion for symbols")
    (description
     "This package enhances @code{helm} with completion for symbols from
workspaces with a LSP-compliant server running.")
    (license license:gpl3+)))

(define-public emacs-helm-notmuch
  (package
    (name "emacs-helm-notmuch")
    (version "1.2")
    (home-page "https://github.com/emacs-helm/helm-notmuch/")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1k038dbdpaa411gl4071x19fklhnizhr346plxw23lsnxir9dhqc"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-notmuch))
    (synopsis "Search emails with Emacs Notmuch and Helm")
    (description
     "This package can be used to search emails in Emacs, searching result
displays as you type thanks to Helm, though @command{notmuch-search} does the
real search.")
    (license license:gpl3+)))

(define-public emacs-notmuch-addr
  (package
    (name "emacs-notmuch-addr")
    (version "1.1.1")
    (home-page "https://github.com/tarsius/notmuch-addr")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0z3445wnh0zjfwixzq0cqf0a0mzgpdgq6c5b6h6b4vfh9qwd5ra2"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "make" "check-declare")))
    (propagated-inputs (list emacs-compat emacs-notmuch))
    (synopsis "Improved address completion for Notmuch")
    (description
     "This package provides a simple alternative to @code{notmuch-address}.  In
particular, it gives up on persistent caching, external scripts, and backward
compatibility.")
    (license license:gpl3+)))

(define-public emacs-notmuch-indicator
  (package
    (name "emacs-notmuch-indicator")
    (version "1.2.0")
    (home-page "https://git.sr.ht/~protesilaos/notmuch-indicator")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://elpa.gnu.org/packages/notmuch-indicator-" version
                    ".tar"))
              (sha256
               (base32
                "1n525slxs0l5nbila1sy62fz384yz7f54nrq1ixdlq0j3czgh9kz"))))
    (build-system emacs-build-system)
    (synopsis "Display a mode line indicator with @code{notmuch-count} output")
    (description "This package renders an indicator with an email count of the
@code{notmuch} index on the Emacs mode line.  The underlying mechanism is that of
@code{notmuch-count}, which is used to find the number of items that match the
given search terms.")
    (license license:gpl3+)))

(define-public emacs-notmuch-maildir
  (package
    (name "emacs-notmuch-maildir")
    (version "1.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/notmuch-maildir")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1b31qqbdnj2zf9bcs1za5am5gs3xpzsxln269kd2c53pzffbnvyg"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "make" "check-declare")))
    (propagated-inputs
     (list emacs-compat emacs-notmuch))
    (home-page "https://github.com/tarsius/notmuch-maildir")
    (synopsis "Visualize maildirs as a tree")
    (description
     "This package can visualize maildirs hierarchically in Notmuch's ``hello
buffer''.")
    (license license:gpl3+)))

(define-public emacs-elmacro
  (package
    (name "emacs-elmacro")
    (version "1.1.1")
    (home-page "https://github.com/Silex/elmacro")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url home-page)
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1x4wnsshf9h10mp51x92vs5rxw5had4gmw6zz4f53czx1ymcv16a"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s emacs-dash))
    (synopsis "Convert keyboard macros to Emacs Lisp")
    (description
     "This package displays keyboard macros or latest interactive commands
as Emacs Lisp.")
    (license license:gpl3+)))

(define-public emacs-transient
  (package
    (name "emacs-transient")
    (version "0.10.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/transient")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0097px3gqvyjiv05bc1gzandfkncx5khhg34999r2a6ffj65xa68"))))
    (build-system emacs-build-system)
    (arguments
     `(#:tests? #f ;no test suite
       #:lisp-directory "lisp"
       #:phases (modify-phases %standard-phases
                  (add-after 'unpack 'build-info-manual
                    (lambda _
                      (invoke "make" "--directory=.." "info")
                      ;; Move the info file to lisp so that it gets
                      ;; installed by the emacs-build-system.
                      (rename-file "../docs/transient.info" "transient.info"))))))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-compat))
    (home-page "https://magit.vc/manual/transient")
    (synopsis "Transient commands in Emacs")
    (description
     "Taking inspiration from prefix keys and prefix arguments
in Emacs, Transient implements a similar abstraction involving a prefix
command, infix arguments and suffix commands.  We could call this abstraction
a \"transient command\", but because it always involves at least two
commands (a prefix and a suffix) we prefer to call it just a \"transient\".")
    (license license:gpl3+)))

(define-public emacs-forge
  (package
    (name "emacs-forge")
    (version "0.6.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/magit/forge")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18ayhf3q433abkp2dwyc3arlbvadsr7bjh3j52figy0k2bi3ixhh"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                     ;no tests
      #:lisp-directory "lisp"
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              (with-directory-excursion ".."
                (invoke "make" "info")
                ;; Move the info file to lisp so that it gets installed by the
                ;; emacs-build-system.
                (rename-file "docs/forge.info" "lisp/forge.info")))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-closql
           emacs-compat
           emacs-emacsql
           emacs-ghub
           emacs-llama
           emacs-magit
           emacs-markdown-mode
           emacs-yaml))
    (home-page "https://github.com/magit/forge/")
    (synopsis "Access Git forges from Magit")
    (description "Work with Git forges, such as Github and Gitlab, from the
comfort of Magit and the rest of Emacs.")
    (license license:gpl3+)))

(define-public emacs-matcha
  (let ((commit "dc4a940b3360aadeb2d9eaab7bd0c85e1e85ab76"))
    (package
      (name "emacs-matcha")
      (version (git-version "0.0.1" "2" commit)) ;no upstream release
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jojojames/matcha")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1bljnv5z289hxn73y7krbd0wya6acnwphabxwfajilpc118qz3lp"))))
      (propagated-inputs (list emacs-hydra))
      (native-inputs (list emacs-ert-runner))
      (build-system emacs-build-system)
      (home-page "https://github.com/jojojames/matcha/")
      (synopsis "Collection of hydras with a generic interface to launch them")
      (description "Matcha provides a collection of transients for various
packages with a consistent way to use them.")
      (license license:gpl3+))))

(define-public emacs-undo-propose
  (let ((commit "f80baee566807d733fbacbab08a897bcd62579c3")
        (revision "3"))
    (package
      (name "emacs-undo-propose")
      (version (git-version "3.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jackkamm/undo-propose-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "00rqz63bhh66q78l646q3w16gydygj8h4d8np0dpbifgzciak90b"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("make" "test")))
      (home-page "https://github.com/jackkamm/undo-propose-el")
      (synopsis "Simple and safe navigation of @code{undo} history")
      (description "This package permits navigation of @code{undo} history in a
temporary buffer, which is read-only save for @code{undo} commands, and
subsequent committal of a chain of @code{undo} commands as a single edit in
the @code{undo} history.")
      (license license:gpl3+))))

(define-deprecated-package emacs-undo-propose-el
  emacs-undo-propose)

(define-public emacs-elisp-docstring-mode
  (let ((commit "f512e509dd690f65133e55563ebbfd2dede5034f")
        (version "0.0.1")
        (revision "1"))
    (package
      (name "emacs-elisp-docstring-mode")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Fuco1/elisp-docstring-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0al8m75p359h4n82rf0dsl22qfdg9cwwywn5pn7x6gb96c7qrqaa"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Fuco1/elisp-docstring-mode")
      (synopsis "Major mode for editing Emacs Lisp docstrings")
      (description "This package provides font lock and automatic escaping and
unescaping of quotes.")
      (license license:gpl3+))))

(define-public emacs-vimrc-mode
  (let ((commit "13bc150a870d5d4a95f1111e4740e2b22813c30e")
        (version "0.3.1")
        (revision "1"))
    (package
      (name "emacs-vimrc-mode")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mcandre/vimrc-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0026dqs3hwygk2k2xfra90w5sfnxrfj7l69jz7sq5glavbf340pk"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/mcandre/vimrc-mode")
      (synopsis "Major mode for Vimscript")
      (description "This package provides font lock and @code{beginning-} and
@code{end-of-defun} functions for Vimscript files.")
      (license license:gpl3+))))

(define-public emacs-flycheck-elm
  (let ((revision "0")
        (commit "1b60050efd4729bfba548f3e5adbcb58436667cb"))
    (package
      (name "emacs-flycheck-elm")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/bsermons/flycheck-elm")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1kjms9d2c98ffd1qxs879qhg0n4jzic0r5kni9y4gz3v09ww8zms"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-flycheck emacs-let-alist))
      (home-page "https://github.com/bsermons/flycheck-elm")
      (synopsis "Flycheck support for the Elm language")
      (description "Flycheck Elm adds Flycheck support for Elm language.")
      (license license:gpl3+))))

(define-public emacs-flycheck-haskell
  (let ((commit "32ddff87165a7d3a35e7318bee997b5b4bd41278")
        (revision "2"))
    (package
      (name "emacs-flycheck-haskell")
      (version (git-version "0.8" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/flycheck/flycheck-haskell")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "10pgsbagq6qj4mshq5sypv0q0khck92b30sc793b4g1pfpsxvgjn"))))
      (build-system emacs-build-system)
      (arguments
       (list #:include #~(list "\\.el$" "\\.hs$")
             #:test-command #~(list "make" "test" "CASK=")
             #:tests? #f))  ; Several tests are failing on the haskell side.
      (propagated-inputs
       (list emacs-dash emacs-flycheck emacs-haskell-mode emacs-let-alist))
      (native-inputs
       (list ghc))
      (home-page "https://github.com/flycheck/flycheck-haskell")
      (synopsis "Flycheck for Haskell")
      (description "This package configures syntax-checking for Haskell
buffers.")
      (license license:gpl3+))))

(define-public emacs-js2-refactor
  (package
    (name "emacs-js2-refactor")
    (version "0.10.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/magnars/js2-refactor.el")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1axkiyxlkmgwa59jqkwwqldcp52xf9vnkid8r1v9b3qa6pgcszm1"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'enable-lexical-binding
            (lambda _
              (emacs-batch-edit-file
                  "test/js2r-local-name-node-at-point-test.el"
                '(progn
                  (add-file-local-variable-prop-line 'lexical-binding t)
                  (basic-save-buffer))))))))
    (propagated-inputs
     (list emacs-dash
           emacs-js2-mode
           emacs-multiple-cursors
           emacs-s
           emacs-yasnippet))
    (native-inputs
     (list emacs-buttercup emacs-espuds))
    (home-page "https://github.com/magnars/js2-refactor.el")
    (synopsis "JavaScript refactoring in Emacs")
    (description "This package provides various refactoring functions for
JavaScript.")
    (license license:gpl3+)))

(define-deprecated-package emacs-js2-refactor-el
  emacs-js2-refactor)

(define-public emacs-jsdoc
  (package
    (name "emacs-jsdoc")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/isamert/jsdoc.el")
             (commit (string-append "v" version))))
       (sha256
        (base32 "0j99rax3n905ya0ya42093pl8q7kcb8xx2qz6b918f7d8q0mr44n"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash
           emacs-s
           tree-sitter-javascript))
    (home-page "https://github.com/isamert/jsdoc.el")
    (synopsis "Inserts JSDoc function comments/typedefs easily")
    (description "This package provides an easy way to insert JSDoc function
comments and typedefs using Emacs' builtin tree-sitter.")
    (license license:gpl3+)))

(define-public emacs-prettier
  (let ((commit "e9b73e81d3e1642aec682195f127a42dfb0b5774")
        (version "0.1.0")
        (revision "1"))
    (package
      (name "emacs-prettier")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/prettier/prettier-emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0hj4fv3fgc60i6jrsx4a81s5c9fsxxafhhs3q2q1dypsscjci9ph"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/prettier/prettier-emacs")
      (synopsis "Automatic formatting of JavaScript code")
      (description "This package integrates Prettier with Emacs, and
provides a minor mode that autoformats the buffer upon saving.")
      (license license:expat))))

(define-public emacs-fish-mode
  (package
    (name "emacs-fish-mode")
    (version "0.1.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wwwjfy/emacs-fish")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1spxxkji9xa930sbwvzyjm8jrqk9ra0xqhivw7zd12a4c56nhna9"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/wwwjfy/emacs-fish")
    (synopsis "Major mode for Fish shell scripts")
    (description "This package provides syntax highlighting and indentation
functions for Fish shell scripts.")
    (license license:gpl3+)))

(define-public emacs-eshell-up
  (package
    (name "emacs-eshell-up")
    (version "0.0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/peterwvj/eshell-up")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0kdqbnapgdk6p4sid9yjlk16sps2qq3xyh7j0jljn0c25qhqbw21"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/peterwvj/eshell-up")
    (synopsis "Quickly go to a parent directory in Eshell")
    (description "This package provides quick navigation to a specific parent
directory using Eshell.")
    (license license:gpl3+)))

(define-public emacs-springboard
  ;; Upstream provides no tag.  Using the latest commit.  Version is extracted
  ;; from "Version:" keyword.
  (let ((commit "687d1e5898a880878995dc9bffe93b4598366203")
        (version "1.0")
        (revision "1"))
    (package
      (name "emacs-springboard")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jwiegley/springboard")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0fn8c4hqblfjvcpg68kj2dmdjqsdnxddqbzgvakl43zckjg8pi01"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-ivy))
      (home-page "https://github.com/jwiegley/springboard")
      (synopsis "Change the Emacs default directory quickly")
      (description
       "This Emacs package provides a quick way to change the default
directory for only the next invoked command.  The directory selection can be
done using Helm, Ido or Ivy.")
      (license license:gpl2+))))

(define-public emacs-tco
  (let ((commit "482db5313f090b17ed22ccd856f0e141dc75afe6")
        (revision "1"))
    (package
      (name "emacs-tco")
      (version (git-version "0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Wilfred/tco.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1z7xkbrqznk6ni687qqknp8labcyhl8y6576hjfri89fn21385y9"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (native-inputs
       (list emacs-ert-runner emacs-undercover))
      (home-page "https://github.com/Wilfred/tco.el")
      (synopsis "Tail-call optimization for Emacs Lisp")
      (description "This package provides tail-call optimization for Emacs
Lisp functions that call themselves in tail position.")
      (license license:gpl3+))))

(define-deprecated-package emacs-tco-el
  emacs-tco)

(define-public emacs-equake
  ;; Upstream provides no tagged releases, but the commit below matches an
  ;; exact release.
  (let ((commit "4d6ef75a4d91ded22caad220909518ccb67b7b87"))
    (package
      (name "emacs-equake")
      (version "0.985")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/emacsomancer/equake")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "11xfr71y78idcn461p4pz7b0k01nhz15cyl97bjqq6ii5xhbhvdx"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://gitlab.com/emacsomancer/equake/")
      (synopsis "Drop-down console for @code{Eshell} and terminal emulators")
      (description "This package provides a Quake-style drop-down console
compatible with Emacs' shell modes.")
      (license license:gpl3+))))

(define-public emacs-vdiff
  ;; There is no proper tag, but the commit below matches the version bump.
  (let ((commit "007e44be19d068fd6b49874b6e9b8df8b1f552bd"))
    (package
      (name "emacs-vdiff")
      (version "0.2.4")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/justbur/emacs-vdiff")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "197xrwph1llrzjgkhlvagiwdgfp68pb45w5afg89ndahpqc2725s"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-hydra))
      (arguments
       `(#:test-command '("emacs" "-Q" "-batch" "-L" "."
                          "-l" "vdiff-test.el"
                          "-f" "ert-run-tests-batch-and-exit")))
      (home-page "https://github.com/justbur/emacs-vdiff/")
      (synopsis "Frontend for diffing based on vimdiff")
      (description
       "This package permits comparisons of two or three buffers based on diff
output.")
      (license license:gpl3+))))

(define-public emacs-vdiff-magit
  ;; Need to use a more recent commit than the latest release version because
  ;; of Magit and Transient
  (let ((commit "b100d126c69e5c26a61ae05aa1778bcc4302b597")
        (version "0.3.2")
        (revision "8"))
    (package
      (name "emacs-vdiff-magit")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/justbur/emacs-vdiff-magit/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "16cjmrzflf2i1w01973sl944xrfanakba8sb4dpwi79d92xp03xy"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-vdiff emacs-magit))
      (home-page "https://github.com/justbur/emacs-vdiff-magit/")
      (synopsis "Frontend for diffing based on vimdiff")
      (description "This package permits comparisons of two or three buffers
based on diff output.")
      (license license:gpl3+))))

(define-public emacs-all-the-icons-dired
  (package
    (name "emacs-all-the-icons-dired")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wyuenho/all-the-icons-dired")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1shla7nyhml9m3g81p6yy8k4pdq289gb42900xzfp7zl4qvnm2vy"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-all-the-icons))
    (home-page "https://github.com/wyuenho/all-the-icons-dired")
    (synopsis "Show icons for each file in @code{dired-mode}")
    (description "This package allows icons from @file{all-the-icons.el} to
be used in @code{dired-mode}.")
    (license license:gpl3+)))

(define-public emacs-all-the-icons-ibuffer
  (package
    (name "emacs-all-the-icons-ibuffer")
    (version "1.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/seagle0128/all-the-icons-ibuffer")
             (commit (string-append"v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1c1fkkwzxxa90fd5q5x6xlj48p8rhj4bs7h8wxx41w6wsggk2fm2"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-all-the-icons))
    (home-page "https://github.com/seagle0128/all-the-icons-ibuffer")
    (synopsis "Display icons for all buffers in ibuffer")
    (description
     "This package uses @code{emacs-all-the-icons} to display icons in Ibuffer
buffers.")
    (license license:gpl3+)))

(define-public emacs-exwm-edit
  (let ((commit "e1291e311840f1049106fe98cec032a1c75efd2b")
        (version "0.0.1")
        (revision "3"))
    (package
      (name "emacs-exwm-edit")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/agzam/exwm-edit/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "031cb8fvv5n30djr9lpl6vz3rl15zykfvjlgkjc8l33a3l5mw8j0"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-exwm))
      (home-page "https://github.com/agzam/exwm-edit/")
      (synopsis "Open temp buffers for editing text from EXWM buffers")
      (description "This package facilitates editing text from EXWM buffers by
generating a temp buffer in which any useful Emacs utilities and modes can be
invoked.")
      (license license:gpl3+))))

(define-public emacs-exwm-mff
  (let ((commit "89206f2e3189f589c27c56bd2b6203e906ee7100")
        (revision "1"))
    (package
      (name "emacs-exwm-mff")
      (version (git-version "1.2.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/exwm-mff.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ipmapyd4jmpnk34wk9kfbvqnl04x74yg2pmj298wqa61ylw1n9j"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/exwm-mff")
      (synopsis "Mouse follows focus for EXWM")
      (description "This package provides a minor mode to automatically warp
the mouse pointer to the center of a focused window, as well as a command to
warp it to the currently selected window.")
      (license (list license:gpl3+)))))

(define-public emacs-exwm-modeline
  (package
    (name "emacs-exwm-modeline")
    (version "0.1.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/SqrtMinusOne/exwm-modeline")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0b84wa8n5740p7wyia3skc8683inypha51w85mxn62wz6vfpjfp4"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-exwm))
    (home-page "https://github.com/SqrtMinusOne/exwm-modeline")
    (synopsis "Modeline segment for EXWM")
    (description "This package provides a modeline segment to display EXWM
workspaces.")
    (license license:gpl3+)))

(define-public emacs-exwm-firefox-core
  (let ((commit "e2fe2a895e8f973307ef52f8c9976b26e701cbd0")
        (revision "1"))
    (package
      (name "emacs-exwm-firefox-core")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/walseb/exwm-firefox-core.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0k5jkjzx6f8nfmbkc61raj585p9pymycgzv7rr3fhv2drgkaa4yi"))))
      (inputs (list emacs-exwm))
      (build-system emacs-build-system)
      (home-page "https://github.com/walseb/exwm-firefox-core")
      (synopsis "Control Firefox with EXWM")
      (description
       "This package contains functions that execute exwm
keypresses mapped in firefox to the action described in the function name.")
      (license (list license:gpl3+)))))

(define-public emacs-exwm-firefox
  (package
    (name "emacs-exwm-firefox")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/emacs-weirdware/exwm-firefox.git")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jrnsnygi9kwq17dfjpjksmijx39w7ccsk4gzk5l2cg7ncydsja2"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:lisp-directory "lisp"
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "../test/exwm-firefox--tests.el"
                             "-l" "exwm-firefox.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (inputs (list emacs-exwm emacs-exwm-firefox-core emacs-s))
    (home-page "https://codeberg.org/emacs-weirdware/exwm-firefox")
    (synopsis "Enhanced support for Firefox under EXWM")
    (description
     "This package adds enhanced support for Firefox (and forks
based on Firefox) under EXWM.  Keybindings intentionally mirror other Emacs
navigation controls.")
    (license (list license:gpl3+))))

(define-public emacs-exwm-ss
  (package
    (name "emacs-exwm-ss")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/emacs-weirdware/exwm-ss.git")
             (commit (string-append "v" version))))
       (sha256
        (base32 "0a550gph4pwdwd372migahhwcpgj1qi5w2scxai38a7yp22vqwsv"))))
    (inputs
     (list
      emacs-exwm
      xscreensaver
      xset))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-program-references
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "exwm-ss.el"
                ("exwm-ss-xset-program"
                 (search-input-file inputs "/bin/xset"))
                ("exwm-ss-xscreensaver-command-program"
                 (search-input-file inputs "/bin/xscreensaver-command"))))))))
    (home-page "https://codeberg.org/emacs-weirdware/exwm-ss")
    (synopsis "Automatically inhibit screensaver activation in EXWM")
    (description "This package provides a global minor mode to inhibit
screensaver activation in EXWM.")
    (license (list license:gpl3+))))

(define-public emacs-prodigy
  (package
    (name "emacs-prodigy")
    (version "1.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rejeep/prodigy.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "04xspdj67nas1ivv0ldlmmkr6v7zd7y3k346pnfgvq8wzqi6x4vz"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f  ; XXX: Missing coffescript requirement.
           #:test-command #~(list "make" "test-ert")
           #:phases
           #~(modify-phases %standard-phases
               (add-after 'unpack 'inject-makel
                 (lambda* (#:key inputs #:allow-other-keys)
                   (symlink (search-input-file inputs "include/makel.mk")
                            "makel.mk"))))))
    (propagated-inputs
     (list emacs-dash emacs-f emacs-s))
    (native-inputs
     (list emacs-ecukes emacs-el-mock emacs-ert-async emacs-shut-up makel))
    (home-page "https://github.com/rejeep/prodigy.el")
    (synopsis "Manage external services from within Emacs")
    (description "This package provides a GUI for defining and monitoring services.")
    (license license:gpl3+)))

(define-deprecated-package emacs-prodigy-el
  emacs-prodigy)

(define-public emacs-web-server
  (package
    (name "emacs-web-server")
    (version "0.1.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "web-server-" version ".tar"))
       (sha256
        (base32 "10lcsl4dg2yr9zjd99gq9jz150wvvh6r5y9pd88l8y9vz16f2lim"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/eschulte/emacs-web-server/")
    (synopsis "Web server with handlers in Emacs Lisp")
    (description "This package supports HTTP GET and POST requests with
url-encoded parameters, as well as web sockets.")
    (license license:gpl3+)))

(define-public emacs-markdown-preview-mode
  (package
    (name "emacs-markdown-preview-mode")
    (version "0.9.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ancane/markdown-preview-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0a0qskhy6jil583hq3mgbzdsi3m1schzyzrd46yfxdsvqiczg170"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-markdown-mode emacs-websocket emacs-web-server))
    (arguments '(#:include '("\\.el$" "\\.html$")))
    (home-page "https://github.com/ancane/markdown-preview-mode")
    (synopsis "Preview Markdown files")
    (description "This package provides a minor mode for preview of Markdown
files, and sends rendered Markdown to a web browser.")
    (license license:gpl3+)))

(define-public emacs-dotenv-mode
  (package
    (name "emacs-dotenv-mode")
    (version "0.2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/preetpalS/emacs-dotenv-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0ys1czramj3c8zbnxxc599bqc0nqp3nnn3n45ac9cjglx5iaydq3"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/preetpalS/emacs-dotenv-mode")
    (synopsis "Major mode for @file{.env} files")
    (description "This package provides syntax highlighting for @file{.env}
files.")
    (license license:gpl3+)))

(define-public emacs-add-node-modules-path
  (package
    (name "emacs-add-node-modules-path")
    (version "1.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/codesuki/add-node-modules-path")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "09vf921dh6lawh14rk02gjsvz88x9vd1c68ilf2fzkap5dh61dy5"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/codesuki/add-node-modules-path")
    (synopsis "Add @file{node_modules} to the buffer-local @file{exec-path}")
    (description "This package searches the parent directories of the
current file for the project's @file{node_modules/.bin/} directory, allowing
Emacs to find project-specific installations of packages.")
    (license license:expat)))

(define-public emacs-flow-minor-mode
  (let ((commit "d1b32a7dd0d33c6a00a106da5f4b2323602cbd3e")
        (version "0.3")
        (revision "4"))
    (package
      (name "emacs-flow-minor-mode")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/an-sh/flow-minor-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "169r4ib9qg9q6fm3p0p23qs1qx4pa9pg1qvyq4ysr85i7kwygppl"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/an-sh/flow-minor-mode")
      (synopsis "Minor mode for JavaScript Flow files")
      (description "This package integrates Flow with Emacs, allowing for
definition-jumping and type-checking on demand.")
      (license license:bsd-3))))

(define-public emacs-rjsx-mode
  (package
    (name "emacs-rjsx-mode")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/felipeochoa/rjsx-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "08b4hdgq4hc1yfd9pvyir2j3cqqdqa3j5svgaba97x5fzhsz7y8i"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-js2-mode))
    (arguments
     `(#:test-command '("make" "test")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'js2-number-tests
           (lambda _
             ((lambda (file test-name)     ; variant of ert-number-tests
                (emacs-batch-edit-file file
                  `(let ((i 0))
                     (while (re-search-forward
                             ,(string-append "js2-deftest-parse "
                                             test-name)
                             nil t)
                       (goto-char (match-beginning 0))
                       (kill-region (match-beginning 0) (match-end 0))
                       (insert (format "xt-deftest %s-%d" ,test-name i))
                       (setq i (+ i 1)))
                     (basic-save-buffer))))
                "rjsx-tests.el.el"
                "no-attr-no-children-self-closing"))))))
    (home-page "https://github.com/felipeochoa/rjsx-mode")
    (synopsis "Major mode for JSX files")
    (description "This package extends the parser of @code{js2-mode} to
support JSX syntax.")
    (license license:expat)))

(define-public emacs-origami
  (let ((commit "1f38085c8f9af7842765ed63f7d6dfe4dab59366")
        (version "1.0")
        (revision "1"))
    (package
      (name "emacs-origami")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/gregsexton/origami.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ha1qsz2p36pqa0sa2sp83lspbgx5lr7930qxnwd585liajzdd9x"))
         (modules '((guix build utils)))
         (snippet #~(substitute* (find-files "." "\\.el$")
                      (("\\(require 'cl\\)")
                       "(require 'cl-lib)")
                      (("(destructuring-bind|remove-if)" all)
                       (string-append "cl-" all))
                      (("\\(face-attribute 'highlight :background\\)") "\
(let ((color (face-attribute 'highlight :background)))
  (and color (not (eq color 'unspecified)) color))")))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-dash emacs-s))
      (home-page "https://github.com/gregsexton/origami.el")
      (synopsis "Flexible text-folding")
      (description
       "This package provides a minor mode for collapsing and
expanding regions of text without modifying the actual contents.")
      (license license:expat))))

(define-deprecated-package emacs-origami-el
  emacs-origami)

(define-public emacs-peep-dired
  (let ((commit "c88a9a3050197840edfe145f11e0bb9488de32f4")
        (version "0")
        (revision "1"))
    (package
      (name "emacs-peep-dired")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/asok/peep-dired")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1wy5qpnfri1gha2cnl6q20qar8dbl2mimpb43bnhmm2g3wgjyad6"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command
             #~(list "emacs" "--no-init-file" "--batch"
                     "--eval=(require 'ecukes)" "--eval=(ecukes)")))
      (native-inputs (list emacs-ecukes))
      (home-page "https://github.com/asok/peep-dired")
      (synopsis "Preview files in another window")
      (description "This package provides a minor mode that allows files to be
previewed by scrolling up and down within a @code{dired} buffer.")
      (license license:gpl3+))))

(define-public emacs-counsel-etags
  (package
    (name "emacs-counsel-etags")
    (version "1.10.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/counsel-etags")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1v77lpp0nij1rjg2k9wj42kqk7xqg1dzs9vmadha6f2j8j6375m8"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-counsel))
    (arguments
     `(#:tests? #f                      ;require internet access
       #:test-command '("make test")))
    (home-page "https://github.com/redguardtoo/counsel-etags")
    (synopsis "Fast @code{Ctags}/@code{Etags} solution with @code{ivy-mode}")
    (description "This package uses @code{ivy-mode} to facilitate navigating
and searching through @code{Ctags} files.")
    (license license:gpl3+)))

(define-public emacs-ivy-clipmenu
  (let ((commit "d2071f2c5043a05d610cd1952e84176ca78c31dc"))
    (package
      (name "emacs-ivy-clipmenu")
      (version (git-version "0.0.1" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/wpcarro/ivy-clipmenu.el")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0npd8glzk5z4n7y9mzbsbzi0cf3by19fqcki052jr3dga363lds7"))))
      (propagated-inputs
       (list emacs-f emacs-ivy))
      (build-system emacs-build-system)
      (home-page "https://github.com/wpcarro/ivy-clipmenu.el")
      (synopsis "Ivy integration with clipmenu")
      (description "Ivy integration with the clipboard manager, clipmenu.")
      (license license:expat))))

(define-public emacs-org-download
  ;; The last tagged release is from 2018.
  (let ((commit "c8be2611786d1d8d666b7b4f73582de1093f25ac")
        (revision "0"))
    (package
      (name "emacs-org-download")
      ;; Not released version.
      (version (git-version "0.2.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/abo-abo/org-download")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "17i4fc0fy8icmw46i49y8vnmvf71r6zq7g2cz55f0v940b3g7ri7"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no actual tests
      (propagated-inputs
       (list emacs-async))
      (home-page "https://github.com/abo-abo/org-download")
      (synopsis "Facilitate moving images")
      (description "This package provides utilities for managing image files
copied into @code{org-mode} buffers.")
      (license license:gpl3+))))

(define-public emacs-org-drill-table
  ;; No releases or tags.
  (let ((commit "096387d929bcf3eb479e0a9d5da9cf32c756a759")
        (revision "0"))
    (package
      (name "emacs-org-drill-table")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/chrisbarrett/org-drill-table.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1a8ygrcag8i9hdpy2vsn0sh8lwhl9b56rv91j3rddy1jv5qx1ipb"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "--batch"
                "-l" "org-drill-table.el"
                "-l" "test/org-drill-table-tests.el"
                "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'skip-failing-tests
              (lambda _
                (substitute* "test/org-drill-table-tests.el"
                  (("ert-deftest org-drill-table--tracks-.*-separately .*" all)
                   (string-append all " (skip-unless nil)"))))))))
      (propagated-inputs
       (list emacs-dash emacs-org emacs-s))
      (home-page "https://github.com/chrisbarrett/org-drill-table")
      (synopsis "Generate Org drill cards using Org mode tables")
      (description
       "This package generates drill cards based on an Org mode table in the
current subtree.  The cards are inserted under a new ``Cards'' heading in the
current tree.")
      (license license:gpl3+))))

(define-public emacs-org-agenda-files-track
  (package
    (name "emacs-org-agenda-files-track")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~ngraves/org-agenda-files-track")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0d7fhsinm2cj8vd7s54x5r6jhq3l36b7x6s8cy5r6y005h8kac50"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include
           #~(list "org-agenda-files-track\\.el" "README\\.org")))
    (home-page "https://git.sr.ht/~ngraves/org-agenda-files-track")
    (synopsis "Fine-track org-agenda-files")
    (description
     "This package tracks org-agenda-files precisely to speed-up org-agenda.")
    (license license:gpl3+)))

(define-deprecated emacs-org-dynamic-agenda emacs-org-agenda-files-track)

(define-public emacs-org-agenda-files-track-ql
  (package
    (inherit emacs-org-agenda-files-track)
    (name "emacs-org-agenda-files-track-ql")
    (arguments
     (list #:include
           #~(list "org-agenda-files-track-ql\\.el" "README\\.org")))
    (propagated-inputs (list emacs-org-ql))
    (description
     "This package tracks org-agenda-files precisely to speed-up org-agenda,
and takes advantage of the org-ql cache.")))

(define-deprecated emacs-org-dynamic-agenda-ql emacs-org-agenda-files-track-ql)

(define-public emacs-dash-docs
  (let ((commit "dafc8fc9f1ddb2e4e39e0b8d066c42d5d7ce8d06")
        (revision "2"))
    (package
      (name "emacs-dash-docs")
      (version (git-version "1.4.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dash-docs-el/dash-docs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0n6d3mm43gj16v8kjjradcfik93wb89dsqnfcbskb28bvcamafid"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-async))
      (native-inputs
       (list emacs-undercover emacs-ert-runner))
      (arguments
       `(#:phases
         ;; this test requires network access, so remove it
         (modify-phases %standard-phases
           (add-before 'check 'make-tests-writable
             (lambda _
               (make-file-writable "test/dash-docs-test.el")
               #t))
           (add-before 'check 'delete-test
             (lambda _
               (emacs-batch-edit-file "test/dash-docs-test.el"
                 `(progn (progn
                          (goto-char (point-min))
                          (re-search-forward "ert-deftest dash-docs-official-docsets-test")
                          (beginning-of-line)
                          (kill-sexp))
                         (basic-save-buffer)))
               #t)))))
      (home-page "https://github.com/dash-docs-el/dash-docs")
      (synopsis "Offline documentation browser for APIs using Dash docsets")
      (description "This package exposes functionality to work with Dash docsets.")
      (license license:gpl3+))))

(define-public emacs-helm-dash
  (let ((commit "7f853bd34da666f0e9a883011c80f451b06f6c59")
        (revision "2"))
    (package
      (name "emacs-helm-dash")
      (version (git-version "1.3.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/areina/helm-dash")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0r192vzry1212ihabg9pgw9xar8zdgnbgy0vsgvfm8s5wj6ny7jp"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-dash-docs))
      (home-page "https://github.com/areina/helm-dash")
      (synopsis "Offline documentation browser for APIs using Dash docsets")
      (description "This package uses Helm to install and navigate through
Dash docsets.")
      (license license:gpl3+))))

(define-public emacs-counsel-dash
  (let ((commit "370d5f6f14b5294d0eb717f7b2a6a8e93df1ed24")
        (revision "4"))
    (package
      (name "emacs-counsel-dash")
      (version (git-version "0.1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/dash-docs-el/counsel-dash")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1fn38vbz46ijarjvhgw7iy7dj9s2a2miy95fyy9f8b5sj8nrdfvz"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-counsel emacs-dash-docs))
      (home-page "https://github.com/dash-docs-el/counsel-dash")
      (synopsis "Offline documentation browser for APIs using Dash docsets")
      (description "This package uses @code{ivy-mode} to install and navigate
through Dash docsets.")
      (license license:expat))))

(define-public emacs-devdocs
  (package
    (name "emacs-devdocs")
    (version "0.7")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/"
             "devdocs-" version ".tar"))
       (sha256
        (base32 "0jwhfmllfbmv2xhkpicyg7mmj7vl9x5pld4vmv66rrl0ha47ahgr"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/astoff/devdocs.el")
    (synopsis "Emacs viewer for DevDocs")
    (description
     "This package provides a documentation viewer similar to Emacs's
built-in Info browser, but geared towards documentation obtained from
@url{https://devdocs.io}.")
    (license license:gpl3+)))

(define-public emacs-cascading-dir-locals
  (let ((release "0.1")
        (revision "0")
        (commit "efdf5e6d62b955ee0ca3c170eae1d388799f9fa0"))
    (package
      (name "emacs-cascading-dir-locals")
      (version (git-version release revision commit))
      (home-page "https://github.com/fritzgrabo/cascading-dir-locals")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1jwd99kk5l588n7wwi1x3b4bgimm66x1icna3n20pwaj49kf0zy8"))))
      (build-system emacs-build-system)
      (synopsis "Apply all @file{.dir-locals.el} from root to current directory")
      (description
       "This package provides a global minor mode that changes how Emacs
handles the lookup of applicable dir-locals files (@file{.dir-locals.el}):
instead of starting at the directory of the visited file and moving up the
directory tree only until a first dir-locals file is found, collect and apply
all (!) dir-locals files found from the current directory up to the root one.

Values specified in files nearer to the current directory take precedence over
values in files farther away from it.

You might want to use this to globally set dir-local variables that apply to
all of your projects, then override or add variables on a per-project basis.")
      (license license:gpl3+))))

(define-public emacs-casual
  (package
    (name "emacs-casual")
    (version "2.9.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/kickingvegas/casual/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "08rsb4nwnjpz4xrqvhjap2p4frgmf69lbh0k5lvk0bndkpr8pczs"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              ;; FIXME: Re-generating documentation is not possible at the
              ;; moment (release 2.9.2) because the "casual" Texinfo class is
              ;; missing from the repository, and this prevents Org from
              ;; exporting properly the "casual.org" file to Texinfo.
              ;;
              ;; (invoke "emacs"
              ;;         "--batch"
              ;;         "--eval=(require 'ox-texinfo)"
              ;;         "--eval=(find-file \"../docs/casual.org\")"
              ;;         "--eval=(org-texinfo-export-to-info)")
              (rename-file "../docs/casual.info" "casual.info")))
          ;; FIXME: Remove when included in pr upstream. See: #261.
          (add-after 'unpack 'patch-casual-lib-dir
            (lambda _
              (substitute* "Makefile--defines.make"
                (("^CASUAL_LIB_DIR.*")
                 "CASUAL_LIB_DIR?=$(CASUAL_BASE_DIR)/casual\n"))))
          ;; FIXME: These tests fail.
          (add-before 'check 'remove-problematic-tests
            (lambda _
              (substitute* "Makefile"
                (("editkit-tests.*")
                 "# editkit-tests")))))
      #:lisp-directory "lisp"
      #:test-command #~(list "make" "tests"
                             (string-append " CASUAL_LIB_DIR=" (getcwd)
                                            "/source"))))
    (native-inputs (list texinfo))
    ;; Casual relies on the latest stable release of `transient' which may
    ;; differ from the version that is preinstalled as a built-in.
    (propagated-inputs (list emacs-magit emacs-transient))
    (home-page "https://github.com/kickingvegas/casual/")
    (synopsis "Transient user interfaces for various modes")
    (description
     "Casual is a collection of opinionated Transient-based keyboard driven
user interfaces for various built-in modes.")
    (license license:gpl3+)))

(define-deprecated-package emacs-casual-calc
  emacs-casual)
(define-deprecated-package emacs-casual-dired
  emacs-casual)
(define-deprecated-package emacs-casual-info
  emacs-casual)
(define-deprecated-package emacs-casual-lib
  emacs-casual)
(define-deprecated-package emacs-casual-avy
  emacs-casual)

(define-public emacs-calibredb
  (package
    (name "emacs-calibredb")
    (version "2.13.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/chenyanming/calibredb.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1a4gyc3gcq18j29pw2i296d70nvx5fbzlw9fdmqwzncciqz5as6m"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'patch-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "calibredb-core.el")
              (let ((calibredb (search-input-file inputs "/bin/calibredb"))
                    (fetch-ebook-metadata
                     (search-input-file inputs "/bin/fetch-ebook-metadata")))
                (emacs-substitute-variables "calibredb-core.el"
                  ("calibredb-fetch-metadata-program" fetch-ebook-metadata)
                  ("calibredb-program" calibredb))))))))
    (inputs
     (list calibre))
    (propagated-inputs
     (list emacs-dash emacs-esxml emacs-s))
    (home-page "https://github.com/chenyanming/calibredb.el")
    (synopsis "Yet another calibre client for Emacs")
    (description "This package integrates calibre into Emacs.
@enumerate
@item Powerful ebook dashboard.
@item Manage ebooks, actually not only ebooks!
@item Manage Ebook libraries.
@item Another bookmarks solution, by setting the tags and comments.
@item Quick search, filter, make actions on items with ivy and helm.
@item Org-ref support.
@end enumerate")
    (license license:gpl3)))

(define-public emacs-el-patch
  (package
    (name "emacs-el-patch")
    (version "3.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/raxod502/el-patch")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0s8bh7cjdr0gg5jqbrf44abrxzfh7vkjyz02w2dc9hpdjkm75zg5"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/raxod502/el-patch")
    (synopsis "Future-proof your Emacs customizations")
    (description "This package allows for an alternate definition of an Elisp
function to be specified and for any differences from the original definition
to be examined using Ediff.")
    (license license:expat)))

(define-public emacs-info-plus
  (let ((commit "34d54e58b6cbb4f135dc0583ebdce4437b052dce")
        (revision "4"))
    (package
      (name "emacs-info-plus")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/info-plus")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0xkn26a2h47v5y4fgznbflsbh7vz61nz4j9kkshg3lv8wnkbipmv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsmirror/info-plus")
      (synopsis "Extensions to @file{info.el}")
      (description "This package extends Emacs' @file{info.el} by allowing
outline-enabled table of contents, additional metadata association for Info
nodes, and more.")
      (license license:gpl2+))))

(define-public emacs-eval-in-repl
  (package
    (name "emacs-eval-in-repl")
    (version "0.9.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kaz-yos/eval-in-repl")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1mrssbl0wyc6iij8zk1y3h9bd3rv53nnrxsij7fn67l1m4z0clyn"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include
           #~(list "eval-in-repl\\.el" "eval-in-repl-test\\.el" "README\\.md")))
    (propagated-inputs (list emacs-dash emacs-paredit emacs-ace-window))
    (home-page "https://github.com/kaz-yos/eval-in-repl")
    (synopsis "One keybinding to communicate with REPLs")
    (description
     "@code{eval-in-repl} provides a consistent ESS-like evaluation interface
for various REPLs.  In particular, it mimics ESS' C-RET binding, which sends a
line or region to an appropriately configured shell.  This package provides
just the core of @code{eval-in-repl}---for the languages themselves, see their
respective packages.")
    (license license:expat)))

(define* (make-emacs-eval-in-repl repl #:key
                                  (eval-in-repl-package emacs-eval-in-repl)
                                  (language (string-capitalize repl))
                                  (inputs '()))
  "Construct an emacs-eval-in-repl package for REPL, which interprets LANGUAGE.
Optionally propagate INPUTS or use a different EVAL-IN-REPL-PACKAGE."
  (package
    (inherit eval-in-repl-package)
    (name (string-append "emacs-eval-in-repl-" repl))
    (arguments
     (list #:include
           #~(list #$(string-append "eval-in-repl-" repl "\\.el"))))
    (propagated-inputs (cons* eval-in-repl-package
                              (cond
                               ((procedure? inputs) (inputs))
                               ((promise? inputs) (force inputs))
                               (else inputs))))
    (description
     (format #f (G_ "This package provides an ESS-like binding to send lines
or regions to a REPL from ~a buffers.") language))))

(define-public emacs-eval-in-repl-cider
  (make-emacs-eval-in-repl "cider" #:language "Clojure"
                           #:inputs (list emacs-cider)))

(define-public emacs-eval-in-repl-elm
  (make-emacs-eval-in-repl "elm" #:inputs (list emacs-elm-mode)))

(define-public emacs-eval-in-repl-erlang
  (make-emacs-eval-in-repl "erlang" #:inputs (delay (list emacs-erlang))))

(define-public emacs-eval-in-repl-geiser
  (make-emacs-eval-in-repl "geiser" #:language "Scheme"
                           #:inputs (list emacs-geiser)))

(define-public emacs-eval-in-repl-hy
  (make-emacs-eval-in-repl "hy" #:inputs (list emacs-hy-mode)))

(define-public emacs-eval-in-repl-ielm
  (make-emacs-eval-in-repl "ielm" #:language "Emacs Lisp"))

(define-public emacs-eval-in-repl-iex
  (make-emacs-eval-in-repl
   "iex" #:language "Elixir"
   #:inputs (delay
              (list emacs-elixir-mode emacs-alchemist))))

(define-public emacs-eval-in-repl-javascript
  (make-emacs-eval-in-repl "javascript"
                           #:inputs (list emacs-js2-mode emacs-js-comint)))

(define-public emacs-eval-in-repl-lua
  (make-emacs-eval-in-repl "lua" #:inputs (list emacs-lua-mode)))

(define-public emacs-eval-in-repl-ocaml
  (make-emacs-eval-in-repl "ocaml" #:language "OCaml"
                           #:inputs (delay (list emacs-tuareg))))

(define-public emacs-eval-in-repl-prolog
  (make-emacs-eval-in-repl "prolog"))

(define-public emacs-eval-in-repl-python
  (make-emacs-eval-in-repl "python"))

(define-public emacs-eval-in-repl-racket
  (make-emacs-eval-in-repl "racket" #:inputs (list emacs-racket-mode)))

(define-public emacs-eval-in-repl-ruby
  (make-emacs-eval-in-repl "ruby" #:inputs (list emacs-inf-ruby)))

(define-public emacs-eval-in-repl-scheme
  (make-emacs-eval-in-repl "scheme"))

(define-public emacs-eval-in-repl-shell
  (make-emacs-eval-in-repl "shell"))

(define-public emacs-eval-in-repl-slime
  (make-emacs-eval-in-repl "slime" #:language "Common Lisp"
                           #:inputs (list emacs-slime)))

(define-public emacs-eval-in-repl-sly
  (make-emacs-eval-in-repl "sly" #:language "Common Lisp"
                           #:inputs (list emacs-sly)))

(define-public emacs-eval-in-repl-sml
  (make-emacs-eval-in-repl "sml" #:language "Standard ML"
                           #:inputs (list emacs-sml-mode)))

(define-public emacs-ob-elm
  (let ((commit "d3a9fbc2f56416894c9aed65ea9a20cc1d98f15d")
        (revision "0"))
    (package
      (name "emacs-ob-elm")
      (version (git-version "0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/BonfaceKilz/ob-elm")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1wdlr0cbsb2drdmcn2bnivjkj1f2v52l6yizwsnjgi4xq3w6k56h"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/BonfaceKilz/ob-elm")
      (synopsis "Org-Babel support for Elm code")
      (description
       "This package adds support to Org-Babel for evaluating Elm code.")
      (license license:gpl3+))))

(define-public emacs-org-babel-eval-in-repl
  (package
    (name "emacs-org-babel-eval-in-repl")
    (version "1.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://stable.melpa.org/packages/"
                           "org-babel-eval-in-repl-" version ".tar"))
       (sha256
        (base32 "0bdnps6m3kcvsagz8cfm3kf2rvxzl2p252pfggwbdbl43kzvl35h"))
       (modules '((guix build utils)))
       (snippet
        #~(begin (delete-file "eval-in-repl-matlab.el")))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-eval-in-repl emacs-ess))
    (home-page "https://github.com/diadochos/org-babel-eval-in-repl")
    (synopsis "Eval org-mode babel code blocks in various REPLs")
    (description
     "This package allows you to execute org-mode source code blocks with
@code{eval-in-repl}.  It can execute code blocks asynchronously, without
needing to write the result into the buffer.")
    (license license:expat)))

(define-public emacs-eval-sexp-fu
  (package
    (name "emacs-eval-sexp-fu")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/hchbaw/eval-sexp-fu.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "19rv0kwajq0j8inglp84sml23ci74wdcvp5bl6zxbw5skqpf6phr"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/hchbaw/eval-sexp-fu.el")
    (synopsis "Enhancements for evaluating s-expressions")
    (description "This package provides provides variants of
@code{eval-last-sexp} that work on the containing list or s-expression, as
well as an option for visually flashing evaluated s-expressions.")
    (license license:gpl3+)))

(define-deprecated-package emacs-eval-sexp-fu-el
  emacs-eval-sexp-fu)

(define-public emacs-counsel-tramp
  (package
    (name "emacs-counsel-tramp")
    (version "0.7.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/masasam/emacs-counsel-tramp")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "10vbna3gkv3ml2bi64y80yqasvmyfhz96x66hjkiqdg6bp0xsbrn"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-counsel))
    (home-page "https://github.com/masasam/emacs-counsel-tramp")
    (synopsis "Ivy interface for TRAMP")
    (description
     "This package allows @code{ivy-mode} to display and filter SSH servers.")
    (license license:gpl3+)))

(define-public emacs-tramp
  (package
    (name "emacs-tramp")
    (version "2.8.0.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "tramp-" version ".tar"))
       (sha256
        (base32 "1qszpb4qywpnx5x7ynx8srq6m6aiygdimffghihxcviv1r1mxs53"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs emacs                     ;need D-Bus
      #:phases
      #~(modify-phases %standard-phases
          ;; All but one "/bin/" directory refer to remote
          ;; environments, which may not be Guix.  Do not patch them
          ;; blindly.  However, local encoding shell has to be patched.
          (replace 'patch-el-files
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "tramp.el"
                ("tramp-encoding-shell"
                 (search-input-file inputs "/bin/sh"))))))))
    (home-page "https://savannah.gnu.org/projects/tramp")
    (synopsis "Remote file editing package for Emacs")
    (description
     "Tramp stands for ``Transparent Remote (file) Access, Multiple
Protocol''.  This package provides remote file editing, using
a combination of @command{rsh} and @command{rcp} or other work-alike
programs, such as @command{ssh} and @command{scp}.")
    (license license:gpl3+)))

(define-public emacs-tramp-auto-auth
  (let ((commit "f15a12dfab651aff60f4a9d70f868030a12344ac"))
    (package
      (name "emacs-tramp-auto-auth")
      (version (git-version "20191027" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/oitofelix/tramp-auto-auth")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "09nkjgwppjfgv04q0gv468qihgx4y3p39lpwbd6vbh3wgbccas9k"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/oitofelix/tramp-auto-auth")
      (synopsis "TRAMP automatic authentication library")
      (description "This package provides @code{tramp-auto-auth-mode} Emacs
global minor mode whose purpose is to automatically feed TRAMP sub-processes
with passwords for paths matching regexps.")
      (license license:gpl3+))))

(define-public emacs-eacl
  (package
    (name "emacs-eacl")
    (version "2.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/redguardtoo/eacl")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1d2krw9x1mw6jn1q07nbq2qi92fms85q3i9wa2q5drs3368l55vr"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (propagated-inputs
     (list emacs-ivy))
    (home-page "https://github.com/redguardtoo/eacl")
    (synopsis "Auto-complete lines by using @code{grep} on a project")
    (description "This package provides auto-completion commands for single
and multiple lines of code in a project.")
    (license license:gpl3+)))

(define-public emacs-semantic-refactor
  ;; The last release, 0.5, was made on 2015-07-26 and there have been 47
  ;; commits since then.
  (let ((commit "6f2c97d17fb70f4ca2112f5a2b99a8ec162004f5"))
    (package
      (name "emacs-semantic-refactor")
      (version (git-version "0.5" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tuhdo/semantic-refactor")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1lyz3zjkx2csh0xdy1zpx8s32qp1p3sig57mwi9xhgpqjyf0axmb"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/tuhdo/semantic-refactor")
      (synopsis "Refactoring tool for C/C++ and Lisp dialects")
      (description "This package provides a refactoring tool based on the
Emacs Semantic parser framework.  For C and C++ it supports operations such as:

@enumerate
@item Generating class implementations
@item Generating function prototypes
@item Converting functions to function pointers
@item Moving semantic units
@item etc...
@end enumerate

For Lisp dialects like Clojure, ELisp, and Scheme, it supports operations such
as:

@enumerate
@item Formatting the whole buffer
@item Converting sexpressions to one or multiple lines
@item etc...
@end enumerate\n")
      (license license:gpl3+))))

(define-public emacs-nhexl-mode
  (package
    (name "emacs-nhexl-mode")
    (version "1.5")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "nhexl-mode-" version ".el"))
       (sha256
        (base32 "0qvxfg7sv4iqyjxzaim6b4v9k5hav36qd4vkf9jwzw6p5fri8w8d"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/nhexl-mode.html")
    (synopsis "Minor mode to edit files via hex-dump format")
    (description
     "This package implements NHexl mode, a minor mode for editing files
in hex dump format.  The mode command is called @command{nhexl-mode}.

This minor mode implements similar functionality to @command{hexl-mode},
but using a different implementation technique, which makes it
usable as a \"plain\" minor mode.  It works on any buffer, and does
not mess with the undo log or with the major mode.

It also comes with:

@itemize
@item @command{nhexl-nibble-edit-mode}: a \"nibble editor\" minor mode, where
the cursor pretends to advance by nibbles (4-bit) and the self-insertion keys
(which only work for hex-digits) will only modify the nibble under point.
@item @command{nhexl-overwrite-only-mode}: a minor mode to try and avoid
moving text.  In this minor mode, not only self-inserting keys overwrite
existing text, but commands like `yank' and @command{kill-region} as well.
@item It overrides @code{C-u} to use hexadecimal, so you can do @code{C-u a 4
C-f} to advance by #xa4 characters.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-helm-wikipedia
  (let ((commit "126f044e0a0e1432e0791c33ce2a41875d704a9b"))
    (package
      (name "emacs-helm-wikipedia")
      (version (git-version "0.0.0" "1" commit))
      (home-page "https://github.com/emacs-helm/helm-wikipedia/")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "148a5xsnbsiddhf9cl7yxdk41lrv38h0pip91kcflw9d7l0dp7pr"))))
      (build-system emacs-build-system)
      (inputs
       (list emacs-helm))
      (synopsis "Search suggestions and article extracts from Wikipedia for Emacs")
      (description
       "This package provides an Emacs Helm interface for search suggestions
and article extracts for Wikipedia.")
      (license license:gpl3+))))

(define-public emacs-webfeeder
  (package
  (name "emacs-webfeeder")
  (version "1.1.2")
  (source
   (origin
     (method url-fetch)
     (uri (string-append
           "https://elpa.gnu.org/packages/webfeeder-" version ".tar"))
     (sha256
      (base32 "1l128q424qsq9jv2wk8cv4zli71rk34q5kgwa9axdz0d27p9l6v4"))
     ;; Reset some timestamps for testdata.
     (modules '((guix build utils)))
     (snippet
      #~(substitute* (find-files "testdata")
          (("01:00:00 \\+0100")
           "00:00:00 +0000")
          (("01:00:00\\+01:00")
           "00:00:00+00:00")
          (("\\+0100")
           "+0000")
          (("\\+01:00")
           "+00:00")))))
  (build-system emacs-build-system)
  (arguments
   `(#:emacs ,emacs))  ;tests require libxml
  (home-page "https://gitlab.com/Ambrevar/emacs-webfeeder")
  (synopsis "Build RSS and Atom webfeeds from HTML files")
  (description
    "Webfeeder is an Emacs library to generate RSS and Atom feeds from HTML
files.  The various elements of the HTML input are parsed with customizable
functions (e.g. @code{webfeeder-title-function}).")
  (license license:gpl3+)))

(define-public emacs-evil-numbers
  ;; XXX: Upstream did not tag latest release.  Use commit matching exact
  ;; version bump.
  (let ((commit "61dde4e3715fd1255df8f87a37d9c8022e909bf4"))
    (package
      (name "emacs-evil-numbers")
      (version "0.7")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/juliapath/evil-numbers")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "006s8azhypp5n7jnvqkb4rmzqmnsdwj87c3r97zhjzgi2jq953gx"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--batch"
                               "-l" "evil-numbers.el"
                               "-l" "tests/evil-numbers-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'skip-failing-tests
              (lambda _
                (substitute* "tests/evil-numbers-tests.el"
                  (("\\(ert-deftest simple-negative .*" all)
                   (string-append all " (skip-unless nil)"))))))))
      (native-inputs (list emacs-ert-runner))
      (propagated-inputs (list emacs-evil))
      (home-page "https://github.com/juliapath/evil-numbers")
      (synopsis "Increment and decrement numeric literals")
      (description
       "This package provides functionality to search for a number up to the
end of a line and increment or decrement it.")
      (license license:gpl3+))))

(define-deprecated-package emacs-janpath-evil-numbers
  emacs-evil-numbers)

(define-public emacs-rotate-text
  (package
    (name "emacs-rotate-text")
    (version "0.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/nschum/rotate-text.el")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1cgxv4aibkvv6lnssynn0438a615fz3zq8hg9sb0lhfgsr99pxln"))))
    (build-system emacs-build-system)
    (home-page "https://nschum.de/src/emacs/rotate-text/")
    (synopsis "Cycle through words, symbols and patterns in Emacs")
    (description "@code{rotate-text} allows you rotate to commonly
interchanged text with a single keystroke.  For example, you can toggle
between \"frame-width\" and \"frame-height\", between \"public\",
\"protected\" and \"private\" and between \"variable1\", \"variable2\" through
\"variableN\".")
    (license license:gpl2+)))

(define-public emacs-recomplete
  (let ((commit "0e4a2bad35886e31742117eee3d610e13586ac5e")
        (revision "0"))
    (package
      (name "emacs-recomplete")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/ideasman42/emacs-recomplete")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1dasj12k9664s77cxnkbrszy2vkfwd6iz6mrj9xzsq7mjgg5gk58"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "make" "test")))
      (home-page "https://codeberg.org/ideasman42/emacs-recomplete")
      (synopsis "Immediate completion, without prompting")
      (description
       "@code{recomplete} is a completion library for quickly completing or
correcting words in cases where the first candidate is the likely choice.
Unlike most completion, it immediately performs the completion action, calling
again to cycle over options.  Completion candidates are displayed in the echo
area.")
      (license license:gpl3+))))

(define-public emacs-cycle-at-point
  (package
    (name "emacs-cycle-at-point")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/ideasman42/emacs-cycle-at-point")
             (commit "83d94733fd8ed64f2ba40f4e1df7ecbfe8260e51")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "17h93idzdg5y30q46y5njsvixwlq3isnynym6b6gp3sy50xqgjgs"))))
    (build-system emacs-build-system)
    (arguments
     (list
      ;; `make test' assumes recomplete repository is in a sibling directory.
      #:test-command
      #~(list "emacs" "-Q" "--batch"
              "-l" "tests/cycle-at-point-tests"
              "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs (list emacs-recomplete))
    (home-page "https://codeberg.org/ideasman42/emacs-cycle-at-point")
    (synopsis "Immediately cycle text at the cursor, without prompting")
    (description
     "@code{cycle-at-point} provides commands to cycle text at the cursor.
Repeatedly invoke the command to cycle over available options.  Completion
candidates are displayed in the echo area.  Users can define their own
completion lists.  Common use cases include true and false literals,
arithmetic operators, and months of the year.")
    (license license:gpl3+)))

(define-public emacs-ediprolog
  (package
    (name "emacs-ediprolog")
    (version "2.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/ediprolog-"
             version ".tar"))
       (sha256
        (base32 "02ynwqhkpv4wcz87zkr9188kjmhd8s9zkfiawn7gywb5jkki6nd0"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/ediprolog.html")
    (synopsis "Emacs Does Interactive Prolog")
    (description "This package provides a major mode that let the user
interact with SWI-Prolog in all buffers.  For instance, one can consult Prolog
programs and evaluate embedded queries.  This mode is focused on the command
@code{ediprolog-dwim} (Do What I Mean) which is supposed to, depending on the
context, carry out the appropriate action.")
    (license license:gpl3+)))

(define-public emacs-evil-cleverparens
  (let ((commit "8c45879d49bfa6d4e414b6c1df700a4a51cbb869")
        (revision "1"))
    (package
      (name "emacs-evil-cleverparens")
      (version (git-version "2017-07-17" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/luxbock/evil-cleverparens")
                      (commit commit)))
                (sha256 (base32 "0lhnybpnk4n2yhlcnj9zxn0vi5hpjfaqfhvyfy7ckzz74g8v7iyw"))
                (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-evil emacs-paredit emacs-smartparens))
      (home-page "https://github.com/luxbock/evil-cleverparens")
      (synopsis "Emacs modal editing optimized for editing Lisp")
      (description "@code{evil-cleverparens} remaps Evil keybindings to allow
modal editing with screwing up the structure of Lisp code.  Alternatives for
verb commands which would are normally destructive (such as deletion) are
provided.  Those alternative commands are and bound by default to their
corresponding Evil keys.")
      (license license:expat))))

(define-public emacs-ntlm
  (package
    (name "emacs-ntlm")
    (version "2.1.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/ntlm-" version ".el"))
       (sha256
        (base32 "01d0bcmh8a36qf871w6bc05kjk9bmnh843m9869xw06zyvqwg9mv"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/ntlm.html")
    (synopsis "NTLM (NT LanManager) authentication support")
    (description
     "This library is a direct translation of the Samba release 2.2.0
implementation of Windows NT and LanManager compatible password encryption.")
    (license license:gpl3+)))

(define-public emacs-numpydoc
  (package
    (name "emacs-numpydoc")
    (version "0.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/douglasdavis/numpydoc.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ld5m75mmfb7kp18sww5blvlazk0j1j0yhdkhsx1m624dq5rag1c"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "eldev" "--use-emacsloadpath" "-dtT" "-p" "test")))
    (native-inputs (list emacs-buttercup emacs-eldev))
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/douglasdavis/numpydoc.el")
    (synopsis "Insert NumPy-style docstrings in Python functions")
    (description
     "This package can be used to insert NumPy-style docstrings in Python
function definitions.  The generated docstring includes argument names, type
hints, exceptions, and the return type hint.")
    (license license:gpl3+)))

(define-public emacs-nushell-mode
  (let ((commit "c179c3cf573b2cc9421dc08bf47e2d619c7791ee")
        (revision "0"))
    (package
      (name "emacs-nushell-mode")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mrkkrp/nushell-mode.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "08kx31h22szvmccswwmhyj615c9fqln45darlfkj7q84dmc2fd3n"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/mrkkrp/nushell-mode")
      (synopsis "Major mode for Nushell scripts")
      (description
       "This package provides a very basic version of major mode for Nushell shell
scripts.")
      (license license:gpl3+))))

(define-public emacs-nadvice
  (package
    (name "emacs-nadvice")
    (version "0.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "nadvice-" version ".tar"))
       (sha256
        (base32 "0ac7zxi04gzcd5hz81lib1db3c6a7xmwkb381ljxvaha1mlzp1k0"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/nadvice.html")
    (synopsis "Forward compatibility for Emacs-24.4's nadvice")
    (description
     "This package tries to re-implement some of nadvice.el's functionality on
top of the old defadvice system, to help users of defadvice move to the new
advice system without dropping support for Emacs<24.4.")
    (license license:gpl3+)))

(define-public emacs-url-http-oauth
  (package
    (name "emacs-url-http-oauth")
    (version "0.8.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/url-http-oauth-" version
             ".tar"))
       (sha256 (base32
                "10iznck31ilfjwjbbwfalqchg260yqypai487436cc0s1fm47vvf"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/url-http-oauth.html")
    (synopsis "OAuth 2.0 for URL library")
    (description
     "Url HTTP Oauth adds OAuth 2.0 support to Emacs's URL library.")
    (license license:gpl3+)))

(define-public emacs-url-http-ntlm
  (package
    (name "emacs-url-http-ntlm")
    (version "2.0.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "url-http-ntlm-" version ".tar"))
       (sha256
        (base32 "06bfw1w128gg9b60pb3wcpcib33jf13y1niyhs6grhm7yq11waz2"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-ntlm))
    (home-page "https://elpa.gnu.org/packages/url-http-ntlm.html")
    (synopsis "NTLM authentication for the url library")
    (description "This package provides a NTLM handler for the URL package.")
    (license license:gpl3+)))

(define-public emacs-soap-client
  (package
    (name "emacs-soap-client")
    (version "3.2.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "soap-client-" version ".tar"))
       (sha256
        (base32 "0z6af253iwimam03jnpai2h989i6vyv05wdz7dadna6amdryfznc"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/soap-client.html")
    (synopsis "Access SOAP web services")
    (description
     "This package provides a SOAP client to access web services.")
    (license license:gpl3+)))

(define-public emacs-fsm
  (package
    (name "emacs-fsm")
    (version "0.2.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/fsm-" version ".el"))
       (sha256
        (base32 "1jyxyqdbfl8nv7c50q0sg3w5p7whp1sqgi7w921k5hfar4d11qqp"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/fsm.html")
    (synopsis "Finite State Machine library")
    (description
     "This package provides Finite State Machine library to make asynchronous
programming in Emacs Lisp easy and fun.")
    (license license:gpl3+)))

(define-public emacs-excorporate
  (package
    (name "emacs-excorporate")
    (version "1.1.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "excorporate-" version ".tar"))
       (sha256
        (base32 "09szsql8qyca6hn7fib832fzi9fmcsf9wiacgqdw32lfjqv5fjwk"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-fsm
           emacs-soap-client
           emacs-url-http-ntlm
           emacs-url-http-oauth))
    (home-page "https://elpa.gnu.org/packages/excorporate.html")
    (synopsis "Exchange integration")
    (description "This package provides Exchange integration for Emacs.")
    (license license:gpl3+)))

(define-public emacs-evil-traces
  ;; XXX: Upstream does not tag releases.  Use commit matching exact version
  ;; bump.
  (let ((commit "05e201cd63b549e3c88b5c3fc9b264bd6fe5a42c"))
    (package
      (name "emacs-evil-traces")
      (version "0.2.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/mamapanda/evil-traces")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0vadpy2whcgx08blyb4vw6wq3nrxdl03zv85lp37pf3mdk9kwmga"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "test")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'set-shell
              ;; Setting the SHELL environment variable is required for the
              ;; tests to find sh.
              (lambda _
                (setenv "SHELL" (which "sh")))))))
      (propagated-inputs
       (list emacs-evil))
      (home-page "https://github.com/mamapanda/evil-traces")
      (synopsis "Visual hints for Emacs' Evil Ex commands")
      (description "This package adds visual hints to certain Ex commands in
Evil mode.")
      (license license:gpl3+))))

(define-public emacs-evil-tmux-navigator
  (package
    (name "emacs-evil-tmux-navigator")
    (version "0.1.5")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/keith/evil-tmux-navigator")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1na44rbc03sr5b4z9pvnps6n4nmrqcz58nywix9825l74a419ijx"))))
    (propagated-inputs
     (list emacs-evil))
    (build-system emacs-build-system)
    (home-page "https://github.com/keith/evil-tmux-navigator")
    (synopsis
     "Navigate seamlessly between emacs windows and tmux panes")
    (description
     "This package lets you use C-h, C-j, C-k and C-l to navigate between
Emacs windows and tmux panes.")
    (license license:expat)))

(define-public emacs-everywhere
  ;; No upstream release.  Extract version from main file.
  (let ((commit "ace53396a66ed4b753f42c04a5a0db2bcd770423")
        (revision "0"))
    (package
      (name "emacs-everywhere")
      (version (git-version "0.0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/tecosaur/emacs-everywhere")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0p55shxvqm1713af33mfglny7rpi31d42wvgwylcsfy4jvnsq8bb"))))
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "emacs-everywhere.el"
                  (("\"(xclip|xdotool|xprop|xwininfo)\"" all binary)
                   (string-append "\"" (search-input-file
                                        inputs (string-append "bin/" binary))
                                  "\""))))))))
      (inputs (list xclip xdotool xprop xwininfo))
      (build-system emacs-build-system)
      (home-page "https://github.com/tecosaur/emacs-everywhere")
      (synopsis "System-wide popup Emacs windows for quick edits")
      (description "@code{emacs-everywhere} launches a new Emacs frame, and the
contents of the buffer are pasted into the previously focused application on
deletion of the frame.")
      (license license:gpl3+))))

(define-public emacs-xclip
  (package
    (name "emacs-xclip")
    (version "1.11.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "xclip-" version ".tar"))
       (sha256
        (base32 "0raqlpskjrkxv7a0q5ikq8dqf2h21g0vcxdw03vqcah2v43zxflx"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/xclip.html")
    (synopsis "Copy and paste GUI clipboard from Emacs in text terminal")
    (description
     "This package allows Emacs to copy to and paste from the GUI clipboard
when running in text terminal.

It can use external command-line tools for that, e.g., @command{xclip} or
@command{xsel}, which you may need to install in order for the package to
work.")
    (license license:gpl3+)))

(define-public emacs-xterm-color
  (package
    (name "emacs-xterm-color")
    (version "2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/atomontage/xterm-color")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "127lq50q62x06kd1xrf8lyc4rkqbfhfy86gsx1x4x169am2xk397"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/atomontage/xterm-color")
    (synopsis "ANSI & xterm-256 color text property translator for Emacs")
    (description "@code{xterm-color.el} is an ANSI control sequence to
text-property translator.")
    (license license:bsd-2)))

(define-public emacs-org-noter
  (package
    (name "emacs-org-noter")
    (version "1.6.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/org-noter/org-noter")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "14n9bq0vxz6gnd5d8nzfc327647iww7gxly43rd4lw7fza8dk380"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include
           #~(list "org-noter-core.el"
                   "org-noter.el"
                   "org-noter-test-utils.el"
                   "modules/org-noter-pdf.el"
                   "modules/org-noter-djvu.el"
                   "modules/org-noter-nov.el"
                   "modules/org-noter-org-roam.el"
                   "modules/org-noter-pdf.el")
           #:exclude
           #~(list "emacs-devel.el")
           #:tests? #f ; Multiple failures with "Not at a drawer"
           #:test-command
           #~(list "buttercup" "-L" ".")
           #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'pre-check
                 (lambda _
                   (setenv "HOME" (dirname (getcwd))))))))
    (native-inputs (list emacs-buttercup
                         emacs-djvu
                         emacs-log4e
                         emacs-nov-el
                         emacs-org-roam
                         emacs-pdf-tools
                         emacs-with-simulated-input))
    (propagated-inputs (list emacs-org))
    (home-page "https://github.com/org-noter/org-noter")
    (synopsis "Synchronized, Org-mode, document annotator")
    (description
     "This package lets you create notes that are kept in sync when you
scroll through the document, but that are external to it---the notes
themselves live in an Org-mode file.  As such, this leverages the power of
Org-mode (the notes may have outlines, latex fragments, babel, etc...) while
acting like notes that are made @emph{in} the document.")
    (license license:gpl3+)))

(define-public emacs-org-redmine
  (let ((commit "e77d013bc3784947c46a5c53f03cd7d3c68552fc"))
    (package
      (name "emacs-org-redmine")
      (version (git-version "0.1" "1" commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/gongo/org-redmine")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "06miv3mf2a39vkf6mmm5ssc47inqh7dq82khsyc03anz4d4lj822"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/gongo/org-redmine/")
      (synopsis "Redmine tools using Emacs")
      (description "This program provides an Emacs client for Redmine.")
      (license license:gpl3+))))

(define-public emacs-multi-term
  ;; No upstream release.  Extract version from main file.
  (let ((commit "017c77c550115936860e2ea71b88e585371475d5")
        (revision "0"))
    (package
      (name "emacs-multi-term")
      (version (git-version "1.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/manateelazycat/multi-term")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "043dqd8i8h6hbcg11rzprxin2yq5lb902zlrb7mxah44vyp8wrdi"))))
      (build-system emacs-build-system)
      (inputs
       (list zsh))
      (home-page "https://github.com/manateelazycat/multi-term")
      (synopsis "Manage multiple terminal buffers in Emacs")
      (description
       "This package enhances @code{term.el} with the following features:

@enumerate
@item Functions to switch between multiple terminal buffers
@item List of keys to be intercepted by @code{emacs-multi-term} instead of by
the underlying terminal
@item Kills the unused buffer left after exiting the terminal
@item Kills the running sub-processes along with the terminal when killing the
it forcibly
@item Dedicated window for debugging program.
@end enumerate")
      (license license:gpl3+))))

(define-public emacs-elpher
  (package
    (name "emacs-elpher")
    (version "3.6.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "git://thelambdalab.xyz/elpher")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15cgqzzfjikq4spsmf7mmhvrd6igcsv75d9mdsxl5j6zhq784hh8"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:emacs emacs-no-x                ;need libxml support
      #:tests? #f                       ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install 'build-doc
            (lambda _
              (invoke "makeinfo" "elpher.texi"))))))
    (native-inputs
     (list texinfo))
    (home-page "gopher://thelambdalab.xyz/1/projects/elpher/")
    (synopsis "Gopher and gemini client for Emacs")
    (description "Elpher is a full-featured gopher and gemini client for
Emacs.  Its features include intuitive keyboard and mouse-driven browsing,
out-of-the-box compatibility with evil-mode, clickable links in plain text,
caching of visited sites, pleasant and configurable visualization of Gopher
directories, direct visualisation of image files, jumping directly to links by
name (with autocompletion), a simple bookmark management system and
connections using TLS encryption.")
    (license license:gpl3+)))

(define-public emacs-gemini
  (package
    (name "emacs-gemini")
    (version "1.2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.carcosa.net/jmcbray/gemini.el")
                    (commit "a7dd7c6ea4e036d0d5ecc4a5d284874c400f10ba")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1pvlk56mhh4xh4gwzqldfk79jsjbcpivv5scd9811pv3afc30gsx"))))
    (build-system emacs-build-system)
    (home-page "https://git.carcosa.net/jmcbray/gemini.el")
    (synopsis "Syntax highlighting for text/gemini")
    (description
     "This is a very simple syntax-highlighting mode for text/gemini documents.
Currently, support is not complete, but it should be enough to help with basic
documents.")
    (license license:agpl3+)))

(define-public emacs-zerodark-theme
  (package
    (name "emacs-zerodark-theme")
    (version "4.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/NicolasPetton/zerodark-theme")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1r5s4mvwlxsb9ylr6dkfxpm1l0pbqkmn5gwjdcfk762cnxlam8cm"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-flycheck emacs-all-the-icons))
    (home-page
     "https://gitlab.petton.fr/nico/zerodark-theme")
    (synopsis
     "Dark, medium contrast theme for Emacs")
    (description
     "Zerodark is a dark theme inspired from One Dark and Niflheim.
An optional mode-line format can be enabled with @code{zerodark-setup-modeline-format}.")
    (license license:gpl3+)))

(define-public emacs-gnus-alias
  ;; There are no release no tag.  Use the latest commit.
  (let ((commit "cf1783a9294bc2f72bfafcaea288c159c4e3dee5")
        (revision "0"))
    (package
      (name "emacs-gnus-alias")
      ;; The version string is specified in gnus-alias.el.
      (version (git-version "1.7.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/hexmode/gnus-alias")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0cs0cyi7hj7ga9aiqz4dafc07xrk3l5g9zzlbda9l90xbvyfssa0"))
                (patches
                 (search-patches "emacs-gnus-alias-reference-signature.patch"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/hexmode/gnus-alias")
      (synopsis "Alternative to @code{gnus-posting-styles}")
    (description "Gnus-alias provides a simple mechanism to switch
identities when using a @code{message-mode} or a @code{message-mode} derived
mode.  Identities can include @code{From} and @code{Organization} headers,
extra headers, body and signature.  Other features include:
@itemize
@item Switch identities in a message buffer.
@item Access original message to help determine identity of the followup/reply
message.
@item Act on a forwarded message as if it were a message being replied to.
@item Start a new message with a given Identity pre-selected.
@end itemize")
      (license license:gpl2+))))

(define-public emacs-gnus-desktop-notify
  (package
    (name "emacs-gnus-desktop-notify")
    ;; There is no version tag; use a MELPA style date corresponding to that
    ;; of the last commit.
    (version "20250616.0809")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/wavexx/gnus-desktop-notify.el.git")
             (commit "12d2a52c0340a6d822f23cf8bc3f4d929c2d8838")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15gs8j5z88yvbpxjx9760isdiv6rz43m11f38yp5xh8i79x2gzwp"))))
    (build-system emacs-build-system)
    (home-page "https://www.thregr.org/wavexx/software/gnus-desktop-notify.el/")
    (synopsis "Gnus desktop notification global minor mode")
    (description
     "@code{gnus-desktop-notify} provides a simple mechanism to notify the
user when new messages are received.  To get started, place the following
configuration snippet in your @file{~/.gnus.el} configuration file:
@lisp
(require 'gnus-desktop-notify)
(gnus-desktop-notify-mode)
(gnus-demon-add-rescan)
;; Alternatively, configure the period and idle times specifically, e.g.:
;; (gnus-demon-add-handler 'gnus-demon-scan-news 10 1)
@end lisp
The above causes Gnus to scan all configured groups every two hours when
Emacs has been idle for one hour, with desktop notifications emitted for new
messages received.")
    (license license:gpl3+)))

(define-public emacs-ox-epub
  (package
    (name "emacs-ox-epub")
    (version "0.3")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ofosos/ox-epub")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "057sqmvm8hwkhcg3yd4i8zz2xlqsqrpyiklyiw750s3i5mxdn0k7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/ofosos/ox-epub")
    (synopsis "Export org mode projects to EPUB")
    (description "@code{ox-epub} extends the (X)HTML exporter to generate
@code{.epub} files directly from OrgMode.  This will export EPUB version 2,
which should give broad compatibility.  It should also be relatiely easy to
convert the resulting @code{.epub} to a @code{.mobi} file.  Needs a working
zip utility (default is @code{zip}).")
    (license license:gpl3+)))

(define-public emacs-ox-gemini
  ;; No releases yet
  (let ((commit "168f820ea401fb813435a3a55af295873a4c110b")
        (revision "1"))
    (package
      (name "emacs-ox-gemini")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.sr.ht/~abrahms/ox-gemini")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0jmiya3f9vv4v64p5kxla6wiiyv4wg4w7f4a6zmdrjcn11hflqmm"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no actual tests
      (home-page "https://sr.ht/~abrahms/ox-gemini")
      (synopsis "Export Org files in Gemini format")
      (description
       "@code{ox-gemini} adds support for exporting Org files in Gemini
format.  Many things were taken from the ASCII exporter, from which
@code{ox-gemini} derives.")
      (license license:gpl3+))))

(define-public emacs-ox-haunt
  (package
    (name "emacs-ox-haunt")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~jakob/ox-haunt")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1rs1n228c2fmpvirc57bqgf2616ijpphkgf4w9ln5j46snmkam25"))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~jakob/ox-haunt")
    (synopsis "Export Org files to HTML appropriate for Haunt")
    (description
     "This library implements an HTML back-end for the Org generic exporter,
producing output appropriate for Haunt's @code{html-reader}.")
    (license license:gpl3+)))

(define-public emacs-ox-hugo
  (package
    (name "emacs-ox-hugo")
    (version "0.12.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kaushalmodi/ox-hugo")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "054ln6x92qyicvc5l1m9yjqqzwpg3j66v0shxsypp97vfw2d3ww6"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "make" "ert")
           #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'pre-check
                 (lambda _
                   (mkdir ".git")
                   (call-with-output-file ".git/config"
                     (const #t))
                   (emacs-batch-edit-file "test/setup-ox-hugo.el"
                     '(progn
                       (search-forward "when ox-hugo-missing-packages")
                       (beginning-of-line)
                       (kill-sexp)
                       (basic-save-buffer)))
                   (mkdir ".ox-hugo-tmp")
                   (setenv "OX_HUGO_TMP_DIR"
                           (string-append (getcwd) "/.ox-hugo-tmp")))))))
    (propagated-inputs
     (list emacs-tomelr))
    (native-inputs (list emacs-toc-org
                         emacs-citeproc
                         emacs-org-ref
                         emacs-org))
    (home-page "https://ox-hugo.scripter.co")
    (synopsis "Hugo markdown back-end for Org export engine")
    (description
     "Ox-hugo is an Org exporter backend that exports Org to Hugo-compatible
Markdown, Blackfriday, and also generates the front-matter in TOML or YAML
format.")
    (license license:gpl3+)))

(define-public emacs-ox-pandoc
  (package
    (name "emacs-ox-pandoc")
    (version "2.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacsorphanage/ox-pandoc")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0sh8l18lc2hngbmb1vv99xb8cp4sfy90j9cbf7b09l82jmnlqmk1"))))
    (build-system emacs-build-system)
    (inputs
     (list pandoc))
    (propagated-inputs
     (list emacs-dash emacs-ht))
    (home-page "https://github.com/emacsorphanage/ox-pandoc")
    (synopsis "Org exporter for Pandoc")
    (description "@code{ox-pandoc} is an exporter for converting Org-mode
files to numerous other formats via Pandoc.")
    (license license:gpl3+)))

(define-public emacs-ox-reveal
  (let ((commit "07900f29fada581d0e1b0f1e2057cea5e1ba8ce1")
        (revision "0"))
    (package
      (name "emacs-ox-reveal")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hexmode/ox-reveal")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "132b0llxda8jivabvm2ssbrdny7q2q1c0z4ikb12k4kia3fvg6cg"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-org))
      (home-page "https://github.com/hexmode/ox-reveal")
      (synopsis "Org export engine reveal.js Presentation Back-End")
      (description
       "Org Reveal exports your Org documents to @code{reveal.js} presentations.
With org-reveal, you can create beautiful presentations with 3D effects from
simple but powerful Org contents.")
      (license license:gpl3+))))

(define-public emacs-ox-tufte
  (package
    (name "emacs-ox-tufte")
    (version "4.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ox-tufte/ox-tufte")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jn0f5r3yy0kcrdspkpk7hhblfd41qf8ayi7z207albvkvyisl4i"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:include #~(cons "^src/" %default-include)
      #:test-command #~(list "eldev" "--use-emacsloadpath" "-dtTC" "test")))
    (native-inputs (list emacs-buttercup emacs-eldev))
    (propagated-inputs (list emacs-org))
    (home-page "https://github.com/ox-tufte/ox-tufte")
    (synopsis "Tufte HTML Org mode export backend")
    (description
     "This is an export backend for Org mode that exports buffers to HTML that
is compatible with Tufte
CSS (@url{https://edwardtufte.github.io/tufte-css/}).")
    (license license:gpl3+)))

(define-public emacs-ox-rss
  ;; XXX: Upstream provides no version nor tags whatsoever.
  (let ((commit "83dc898fa5493925b01716e5dd495d5e07c3d41a")
        (revision "0"))
    (package
      (name "emacs-ox-rss")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/BenedictHW/ox-rss")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0513kixv9bgkignmji95m3rskn6px6c0fack4zdl61qq09fg8w6h"))))
      (build-system emacs-build-system)
      (home-page "https://gitlab.com/nsavage/ox-rss")
      (synopsis "RSS 2.0 back-end for Org export engine")
      (description
       "This library implements an RSS 2.0 back-end for Org exporter, based
on the HTML back-end.")
      (license license:gpl3+))))

(define-public emacs-ox-html-stable-ids
  (package
    (name "emacs-ox-html-stable-ids")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/jkreeftmeijer/ox-html-stable-ids.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1slfc1hx6mgx6rb0h0hz7200dmpqr04sz8009r6cy7msp2b91hg7"))))
    (build-system emacs-build-system)
    (license license:gpl3)
    (home-page "https://jeffkreeftmeijer.com/ox-html-stable-ids")
    (synopsis "Stable IDs for ox-html.el")
    (description
     "Ox-html-stable-ids is an Org export extension package that generates
 HTML with stable ID attributes instead of the random IDs Org's exporter uses
by default.")))

(define-public emacs-wc-mode
  (package
    (name "emacs-wc-mode")
    (version "1.4.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/bnbeckwith/wc-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1wzgb4z2qyyv223x5fc7ff2fn5xpz4s7lr1q1y33q8878a7w9d45"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/bnbeckwith/wc-mode")
    (synopsis "Running word count with goals (minor mode)")
    (description "@code{wc-mode} is a minor mode, providing a ‘wc’ function
for Emacs buffers as well as a modeline addition with live word, line and
character counts.  Additionally, a user can set specific goals for adding or
deleting words.  These goals were partly inspired by 750words.com where the
goal of the site is to encourage writing by setting a goal of 750 words at a
time.")
    (license license:gpl3+)))

(define-public emacs-mastodon
  (package
    (name "emacs-mastodon")
    (version "2.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/martianh/mastodon.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "18pgaxpg31kw0bdj90c79wv4wya2qqjl7hip2rx2k2jpfkfsv6zd"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; requires cask
      #:phases #~(modify-phases %standard-phases
                   ;; Move the source files to the top level, which is
                   ;; included in the EMACSLOADPATH.
                   (add-after 'unpack 'move-source-files
                     (lambda _
                       (let ((el-files (find-files "./lisp" ".*\\.el$")))
                         (for-each (lambda (f)
                                     (rename-file f
                                                  (basename f)))
                                   el-files)))))))
    (propagated-inputs
     (list emacs-persist emacs-tp emacs-transient))
    (home-page "https://codeberg.org/martianh/mastodon.el")
    (synopsis "Emacs client for Mastodon")
    (description "@code{mastodon.el} is an Emacs client for Mastodon, the
federated microblogging social network.")
    (license license:gpl3+)))

(define-public emacs-org-social
  (let ((commit "e52c727c08444a3c6ccceb75492504e59ad5e804")
        (revision "0"))
    (package
      (name "emacs-org-social")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tanrax/org-social.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "06izvlmqx2yhig84i4xfcc6wdv5jyj1jr3irc6xdwbvwpck2qbcg"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))
      (propagated-inputs (list emacs-request))
      (home-page "https://github.com/tanrax/org-social.el")
      (synopsis "Emacs client for Org-social")
      (description
       "This package provides an Emacs client for Org-social which is
a decentralized social network that runs on an Org Mode file over HTTP.")
      (license license:gpl3+))))

(define-public emacs-fedi
  ;; One year since last tagged release.
  (let ((commit "62aea20f11161d2665180498e79aade7e5f5a114")
        (revision "3"))
    (package
      (name "emacs-fedi")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/martianh/fedi.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1s2i6fgw3682h173mx287zjh8w1nsw9jykjkkmx1qjqwgg0hxpzz"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; no tests
      (propagated-inputs (list emacs-markdown-mode))
      (home-page "https://codeberg.org/martianh/fedi.el")
      (synopsis "Library to make writing clients for APIs easier")
      (description "@code{fedi.el} is an Emacs library used by several
  fediverse frontend packages.")
      (license license:gpl3+))))

(define-public emacs-ebdb
  (package
    (name "emacs-ebdb")
    (version "0.8.22")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "ebdb-" version ".tar"))
       (sha256
        (base32 "12sydb2lm571096gpb8r0jpg19wiqpl52rcnrhkvzlhzxgg18pg5"))))
    (build-system emacs-build-system)
    (inputs (list emacs-org-roam))
    (home-page "https://github.com/girzel/ebdb")
    (synopsis "EIEIO port of BBDB, Emacs's contact-management package")
    (description
     "EBDB is a contact management/addressbook package for Emacs.  It's
a re-write of the Insidious Big Brother Database (BBDB) using Emacs
Lisp's (relatively new) EIEIO object oriented libraries.")
    (license license:gpl3+)))

(define-public emacs-fj
  (package
    (name "emacs-fj")
    (version "0.27")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://codeberg.org/martianh/fj.el")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1hp8xaggb6fclgdjh7jz97rn248xbl8qy88a8c7xx3gvv2x7ahgx"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;depends on exemplify-ert
    (propagated-inputs (list emacs-fedi emacs-magit emacs-tp))
    (home-page "https://codeberg.org/martianh/fj.el")
    (synopsis "Client for Forgejo instances")
    (description
     "Fj contains basic functions for interacting with a Forgejo instance.")
    (license license:gpl3+)))

(define-public emacs-ebdb-i18n-chn
  (package
    (name "emacs-ebdb-i18n-chn")
    (version "1.3.2")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "ebdb-i18n-chn-" version ".tar"))
       (sha256
        (base32 "06ii9xi2y157vfbhx75mn80ash22d1xgcyp9kzz1s0lkxwlv74zj"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-ebdb emacs-pyim))
    (home-page "https://elpa.gnu.org/packages/ebdb-i18n-chn.html")
    (synopsis "China-specific internationalization support for EBDB")
    (description
     "EBDB-i18n-Chn makes EBDB nicer to use with China-based contacts, both
for handling Chinese characters, and for formatting of phones and addresses.
Be aware that using this library will incur a non-neglible slowdown at load
time.  It shouldn't have any real impact on search and completion times.")
    (license license:gpl3+)))

(define-public emacs-refactor
  (package
    (name "emacs-refactor")
    (version "0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Wilfred/emacs-refactor")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1yky7vlv91501xb43xk19rr8mxlvrsxhawsc98jivf64nad5dqay"))))
    (build-system emacs-build-system)
    (arguments
     (list #:phases
           #~(modify-phases %standard-phases
               (add-before 'check 'delete-failing-tests
                 (lambda _
                   (delete-file "test/emr-elisp-test.el"))))))
    (propagated-inputs
     (list emacs-dash emacs-s emacs-popup emacs-list-utils emacs-iedit))
    (native-inputs (list emacs-ert-runner emacs-undercover))
    (home-page "https://github.com/Wilfred/emacs-refactor/")
    (synopsis "Language-specific refactoring in Emacs")
    (description "Emacs Refactor (EMR) is a framework for providing
language-specific refactoring in Emacs.  It includes refactoring commands for
a variety of languages, including elisp itself.")
    (license license:gpl3+)))

(define-public emacs-flyspell-correct
  (package
    (name "emacs-flyspell-correct")
    (version "0.6.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/d12frosted/flyspell-correct")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1m5da6r82hk0c2x3lw03qnkk79sx67875afw0ybblj3cmfk6szd1"))))
    (build-system emacs-build-system)
    ;; XXX: emacs-avy-menu is not packaged, so we ignore the file below.
    (arguments
     `(#:exclude '("flyspell-correct-avy-menu\\.el")))
    (propagated-inputs
     (list emacs-helm emacs-ivy emacs-popup))
    (home-page "https://github.com/d12frosted/flyspell-correct")
    (synopsis "Correcting words with flyspell via custom interfaces")
    (description
     "This package provides functionality for correcting words via custom
interfaces.  Several interfaces are supported beside the classic Ido: Popup,
Helm and Ivy.")
    (license license:gpl3+)))

(define-public emacs-spell-fu
  ;; There are no tagged releases upstream, instead we are using the
  ;; most recent commit.
  (let ((commit "67a26b7a00449ee8ef3a80ab662c93a32adef679")
        (revision "1"))
    (package
      (name "emacs-spell-fu")
      (version (git-version "0.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://codeberg.org/ideasman42/emacs-spell-fu")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0gbfzd4zpqn0kbag3a6axc7y17r5qgwgpprsd1x5hnixji1vzhxr"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/ideasman42/emacs-spell-fu")
      (synopsis "Fast highlighting of misspelled words")
      (description
       "This is a light weight spell checker for Emacs,
that runs from the syntax highlighter without starting external processes.")
      (license license:gpl3+))))

(define-public emacs-org-emms
  (let ((commit "07a8917f3d628c32e5de1dbd118ac08203772533")
        (revision "1"))
    (package
      (name "emacs-org-emms")
      (version
       (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/jagrg/org-emms.git")
               (commit commit)))
         (file-name (git-file-name name commit))
         (sha256
          (base32
           "1sqsm5sv311xfdk4f4rsnvprdf2v2vm7l1b3vqi7pc0g8adlnw1d"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-emms emacs-org))
      (home-page "https://gitlab.com/jagrg/org-emms")
      (synopsis "Play multimedia files from org-mode")
      (description
       "This package provides a new org link type for playing back multimedia
files from org-mode using EMMS, The Emacs Multimedia System.  If the link
contains a track position, playback will start at the specified position.")
      (license license:gpl3+))))

(define-public emacs-org-jira
  (package
    (name "emacs-org-jira")
    (version "4.4.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ahungry/org-jira")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1mg7p9y4d4m6b6qkjvdz6lqby3kvvdb7qcjqgkrf75rzv0rsn1h2"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "jiralib.el"
                             "-l" "org-jira-sdk.el"
                             "-l" "org-jira.el"
                             "-l" "t/org-jira-t.el"
                             "-l" "t/jiralib-t.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (propagated-inputs
     (list emacs-dash emacs-org emacs-request))
    (home-page "https://github.com/ahungry/org-jira")
    (synopsis "Syncing between Jira and Org mode")
    (description
     "This package provides an extension to Org mode for syncing issues with
JIRA issue servers.")
    (license license:gpl3+)))

(define-public emacs-slime-volleyball
  (package
    (name "emacs-slime-volleyball")
    (version "1.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "slime-volleyball-" version ".tar"))
       (sha256
        (base32 "07xavg6xq5ckrfy5sk5k5ldb46m5w8nw1r1k006ck8f23ajaw5z2"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("\\.el$" "\\.svg$" "\\.b64$" "slime\\.el\\.gz$")))
    (home-page "https://elpa.gnu.org/packages/slime-volleyball.html")
    (synopsis "SVG slime volleyball game")
    (description
     "Emacs Slime Volleyball is a volleyball game.  Win points by
making the ball land on your opponent's side of the court.  The first
player to five points wins!  You can play against a friend, or
challenge the three computer opponents in one player mode.  You can
even train opponent slimes.")
    (license license:gpl3+)))

(define-public emacs-syslog-mode
  (package
    (name "emacs-syslog-mode")
    (version "20210910.1952")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/vapniks/syslog-mode.git")
                    (commit "072664784dae41a573a9de8d178bf577b7526b82")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "04ddpn6il6mh1f992x3fxl6yljryghi51q4845lx08cbc74wnfz0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-hide-lines emacs-ov emacs-hsluv))
    (home-page "https://github.com/vapniks/syslog-mode")
    (synopsis "Major-mode for viewing log files and strace output")
    (description "This library provides a major-mode for viewing syslog and
strace files.  You can highlight and filter the lines of the file by regular
expressions and by timestamp, view notes associated with files, extract text,
count matches, etc.")
    (license license:gpl3+)))

(define-public emacs-systemd-mode
  (package
    (name "emacs-systemd-mode")
    (version "1.6")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/holomorph/systemd-mode")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0ylgnvpfindg4cxccbqy02ic7p0i9rygf1w16dm1filwhbqvjplq"))))
    (build-system emacs-build-system)
    (arguments
     (list #:include #~(cons* "\\.txt$" %default-include)
           #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-L" "."
                                  "-l" "test/systemd-tests.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/holomorph/systemd-mode")
    (synopsis "Major mode for editing Systemd units")
    (description
     "This package provides a major mode for editing Systemd unit files in GNU
Emacs.")
    (license license:gpl3+)))

(define-public emacs-ssh-config-mode
  (let ((commit "d0596f5fbeab3d2c3c30eb83527316403bc5b2f7")
        (revision "2"))
    (package
      (name "emacs-ssh-config-mode")
      (version (git-version "8.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/jhgorrell/ssh-config-mode-el")
           (commit commit)))
         (file-name (git-file-name name commit))
         (sha256
          (base32
           "1xs9ixp2bgbn2whjpj7l1n15fklivfh7544sgai61225jprckyak"))))
      (build-system emacs-build-system)
      (arguments '(#:include '("\\.el$" "\\.txt$")
                   #:tests? #f))        ; no actual tests
      (home-page
       "https://github.com/jhgorrell/ssh-config-mode-el")
      (synopsis
       "Mode for fontification of ~/.ssh/config")
      (description
       "This package fontifies the ssh config keywords and creates
keybindings for skipping from host section to host section.")
      (license license:gpl3+))))

(define-public emacs-ssh-agency
  (package
    (name "emacs-ssh-agency")
    (version "0.4.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/magit/ssh-agency")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1i3zmsn0w2k7p2hlzssibckm32kf05l56mkhg96x4sf06g3pwq1d"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash))
    (home-page "https://github.com/magit/ssh-agency")
    (synopsis "Manage @code{ssh-agent} from Emacs")
    (description
     "This package provides functions to startup @code{ssh-agent}, set the
needed environment variables in Emacs, and prompt for passphrases from within
Emacs so that pushes and pulls from @code{magit} will not require entering any
passphrase.

It can also be useful on Unix-like platforms to delay having to enter your
passphrase until the first time you push to a remote.")
    (license license:gpl3+)))

(define-public emacs-ssh-deploy
  (package
    (name "emacs-ssh-deploy")
    (version "3.1.16")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/ssh-deploy-" version
                           ".tar"))
       (sha256
        (base32 "0fb88l3270d7l808q8x16zcvjgsjbyhgifgv17syfsj0ja63x28p"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "test")))
    (home-page "https://github.com/cjohansson/emacs-ssh-deploy")
    (synopsis "Deployment via Tramp, global or per directory")
    (description
     "SSH Deploy enables automatic deploys on explicit-save actions, manual
uploads, renaming, deleting, downloads, file and directory differences,
launching remote terminals (Eshell, Shell), detection of remote changes,
remote directory browsing, remote SQL database sessions and running custom
deployment scripts via Tramp.")
    (license license:gpl3+)))

(define-public emacs-super-save
  (package
    (name "emacs-super-save")
    (version "0.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bbatsov/super-save")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1nypbklgfxyrp55f0dazg9hm7gkqibijd6k4nlb0b0f1rhcm989b"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/bbatsov/super-save")
    (synopsis "Auto-save buffers, based on your activity")
    (description "Super-save auto-saves your buffers, when certain events
happen, e.g., when you switch between buffers or when an Emacs frame loses
focus.  You can think of it as both something that augments and replaces the
standard Auto-save mode.")
    (license license:gpl3+)))

(define-public emacs-tao-theme
  (let ((commit "468ee4f6ba7afb9dbfc8855ae2c333cb16ca4408")
        (revision "1"))
    (package
      (name "emacs-tao-theme")
      (version (git-version "1.1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/11111000000/tao-theme-emacs")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0yqibx6wcdsj5k6130c3qp0hmj6zwhfjrrvw98lny23ksw6k0s3s"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/11111000000/tao-theme-emacs")
      (synopsis "Parameterized uncolored color themes for Emacs")
      (description
       "This package provides two parameterized uncolored color themes for
Emacs: @code{tao-yin} and @code{tao-yang}.  The default
@code{tao-theme-scale-fn} is @code{tao-theme-golden-scale}.

You can customize: @code{tao-theme-scale-fn}, that returns 16 2-digit numbers;
@code{tao-theme-scale-filter-fn}, for edge filter; and
@code{tao-theme-use-height}.")
      (license license:gpl3+))))

(define-public emacs-almost-mono-themes
  (let ((commit "c3a85c1a665530a5d830665969725cdba8eceb75")
        (revision "0"))
    (package
      (name "emacs-almost-mono-themes")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/cryon/almost-mono-themes")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "034k32xkr5ma415hlkbl35z0jxc4sa1inf87hg3y6lrlfl83fyjh"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/cryon/almost-mono-themes")
      (synopsis "Almost monochromatic themes for emacs in a few variants")
      (description
       "This package provides a collection of almost monochrome Emacs themes:
@code{almost-mono-black} and @code{almost-mono-white}.")
      (license license:gpl3+))))

(define-public emacs-quasi-monochrome
  (let ((commit "68060dbbc0bbfe4924387392874186c5a29bb434")
        (revision "0"))
    (package
      (name "emacs-quasi-monochrome")
      (version (git-version "1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/lbolla/emacs-quasi-monochrome")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0zp2xr0bjfqrpb0bqczzick1vvbjmipjavrdi70kw6a9caynvq22"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/lbolla/emacs-quasi-monochrome")
      (synopsis "Dark color theme for Emacs")
      (description
       "This package provides a dark color theme with a black background, high
contrast and few colors.")
      (license license:gpl3+))))

(define-public emacs-doom-themes
  (let ((commit "188ab05eefe2bdc46b4464aadb4a52ff9cb42f7f")
        (revision "0"))
    (package
      (name "emacs-doom-themes")
      (version (git-version "2.3.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/doomemacs/themes")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32 "08avm5jfp887r2l77s6i0zn72wlv4kp47b2vzv3kywf3d0gkpgp8"))))
      (build-system emacs-build-system)
      (native-inputs
       (list emacs-ert-runner))
      (arguments
       (list #:modules '((guix build emacs-build-system)
                         (guix build utils)
                         (guix build emacs-utils)
                         (srfi srfi-1))
             #:phases
             #~(modify-phases %standard-phases
                 (add-after 'unpack 'move-themes
                   (lambda _
                     ;; Move the source files to the top level, which is in the
                     ;; EMACSLOADPATH.
                     (for-each (lambda (f)
                                 (rename-file f (basename f)))
                               (append
                                (find-files "./themes" ".*\\.el$")
                                (find-files "./extensions" ".*\\.el$"))))))))
      (synopsis "Wide collection of color themes for Emacs")
      (description "Emacs-doom-themes contains numerous popular color themes for
Emacs that integrate with major modes like Org-mode.")
      (home-page "https://github.com/doomemacs/themes")
      (license license:expat))))

(define-public emacs-modus-themes
  (package
    (name "emacs-modus-themes")
    (version "4.8.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/protesilaos/modus-themes")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1ivgs7hqgw8ndx76qzqmdg35ga4bwqcph7z0khqsy8xzg5qr299g"))))
    (native-inputs (list texinfo))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (home-page "https://protesilaos.com/modus-themes/")
    (synopsis "Accessible themes for Emacs (WCAG AAA standard)")
    (description
     "The Modus themes are designed for accessible readability.  They conform
with the highest standard for color contrast between any given combination of
background and foreground values.  This corresponds to the WCAG AAA standard,
which specifies a minimum rate of distance in relative luminance of 7:1.

The Modus themes consist of six themes.  Modus Operandi is a light theme,
while Modus Vivendi is dark.  Modus Operandi Tinted and Modus Vivendi Tinted
are variants of the two main themes.  They slightly tone down the intensity of
the background and provide a bit more color variety.  Modus Operandi
Deuteranopia and its companion Modus Vivendi Deuteranopia are optimized for
users with red-green color deficiency.")
    (license (list license:gpl3+
                   license:fdl1.3+)))) ; GFDLv1.3+ for the manual

(define-public emacs-plan9-theme
  (let ((commit "c2da2fcb241e9800d931a1ff19ecd9fd84d30382")
        (revision "0"))
    (package
      (name "emacs-plan9-theme")
      (home-page "https://github.com/john2x/plan9-theme.el")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0rjxbk9fljnjmg00vdqcyynzg591cgknyy2d92xsxsyg4d28dvwi"))))
      (build-system emacs-build-system)
      (synopsis "Light color theme for Emacs based on Plan 9")
      (description
       "@code{plan9} is an Emacs theme with light colors and a classic
look which is inspired by the colors of Plan 9 from Bell Labs.")
      (license license:gpl3+))))

(define-public emacs-punpun-theme
  (let ((commit "7026684cd568cb691af3ced5de14c375fe6f5a1a")
        (revision "0"))
    (package
      (name "emacs-punpun-theme")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://depp.brause.cc/punpun-theme")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1nwvlp93l5lj259mchd1a2glq3jxd0h1vazsbjqfi07hsg86xjp0"))))
      (build-system emacs-build-system)
      (home-page "https://depp.brause.cc/punpun-theme")
      (synopsis "Bleak Emacs theme")
      (description
       "A bleak theme.  Uses shades of gray and the occasional splash of
color.  Designed for 256-color terminals.  Comes in light and dark!")
      (license license:gpl3+))))

(define-public emacs-spacemacs-theme
  (package
    (name "emacs-spacemacs-theme")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nashamri/spacemacs-theme")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1yz8xg9ni9290nly5b93djkzk9235q6k4lhb5ghs6snr0r39157n"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nashamri/spacemacs-theme")
    (synopsis
     "Light and dark theme for spacemacs that supports GUI and terminal")
    (description
     "Spacemacs theme is an Emacs color theme that started as
a theme for Spacemacs.  The theme comes with dark and light variants
and it should work well with 256 color terminals.")
    (license license:gpl3+)))

(define-public emacs-starlit-theme
  (let ((commit "d6f327fb09497be7bee64d5d204d27f655cc5b04")
        (revision "0"))
    (package
      (name "emacs-starlit-theme")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/SFTtech/starlit-emacs")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "118b3ii9gpjq70q3qf0lyd53jp5a7qvhsl4bbjh4akck96cjdnnj"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/SFTtech/starlit-emacs")
      (synopsis "Deep blue and colorful Emacs theme like a clear night sky")
      (description
       "Starlit theme customizes your Emacs to be deep blue with bright colors
from a starlit sky.")
      (license license:gpl3+))))

(define-public emacs-elixir-mode
  (package
    (name "emacs-elixir-mode")
    (version "2.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/elixir-editors/emacs-elixir")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xqwlahy2m5b3h7jx0ksy970clqm253mn87jhq9xvbggvbvczp6l"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-pkg-info))
    (home-page
     "https://github.com/elixir-editors/emacs-elixir")
    (synopsis "Major mode for editing Elixir files")
    (description
     "Elixir-Mode provides font-locking, indentation and navigation support
 for the Elixir programming language.")
    (license license:gpl3+)))

(define-public emacs-dimmer
  (let ((commit "2f915b100044e09dd647b22085e1696249c4b115")
        (revision "1"))
    (package
      (name "emacs-dimmer")
      (version (git-version "0.4.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/gonewest818/dimmer.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "00y6645zjary1sz7517qy5pjwfm5ipsc46sypmdygin65hbbc8wg"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://github.com/gonewest818/dimmer.el")
      (synopsis "Visually highlights the selected buffer in Emacs")
      (description "Dimmer provides a minor mode that indicates which buffer is
currently active by dimming the faces in the other buffers.  It does this
nondestructively, and computes the dimmed faces dynamically such that your
overall color scheme is shown in a muted form without requiring you to define
what is a \"dim\" version of every face.")
      (license license:gpl3+))))

(define-public emacs-minibuffer-line
  (package
    (name "emacs-minibuffer-line")
    (version "0.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/minibuffer-line-"
             version
             ".el"))
       (sha256
        (base32 "1ny4iirp26na5118wfgxlv6fxlrdclzdbd9m0lkrv51w0qw7spil"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/minibuffer-line.html")
    (synopsis "Display status info in the minibuffer window")
    (description
     "This package lets you display various status information in the
minibuffer window instead of the mode-line.  Of course, this is only displayed
when the minibuffer window is not already used for other things (e.g. a
minibuffer or an each area message).

The contents and aspect is controlled by the @code{minibuffer-line-format}
variable and the @code{minibuffer-line} face.")
    (license license:gpl3+)))

(define-public emacs-minimap
  (package
    (name "emacs-minimap")
    (version "1.4")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/minimap-"
             version
             ".el"))
       (sha256
        (base32 "09fm0ziy8cdzzw08l7l6p63dxz2a27p3laia2v51mvbva8177ls1"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/minimap.html")
    (synopsis "Sidebar showing a @emph{mini-map} of a buffer")
    (description
     "Minimap provides Emacs with a minimap sidebar, which is a smaller
display of the current buffer on the side, like a scrollbar.  It highlights
the currently shown region and updates its position automatically.  You can
navigate in the minibar by dragging the active region with the mouse, which
will scroll the corresponding edit buffer.  Additionally, you can overlay
information from the tags gathered by CEDET's semantic analyzer.)")
    (license license:gpl3+)))

(define-public emacs-eshell-prompt-extras
  (package
    (name "emacs-eshell-prompt-extras")
    (version "1.1")
    (home-page "https://github.com/zwild/eshell-prompt-extras")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "04wgffj43lw1i853s8vkw8hvjx29vv5lnmhjyqcclwfnbj7ddvn9"))))
    (build-system emacs-build-system)
    (synopsis "Display extra information and color for your Eshell prompt")
    (description "This library displays various customizable elements for
@code{eshell} prompts: remote user, remote host, python virtual environment
info, git branch, git dirty info and git unpushed number.  Multiple themes are
available.")
    (license license:gpl3+)))

(define-public emacs-eshell-did-you-mean
  (package
    (name "emacs-eshell-did-you-mean")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xuchunyang/eshell-did-you-mean")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "158g8b4crm0gf5pilfxf89hdsb22gr1wbrjyx9gf45bmcll3i9vf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/xuchunyang/eshell-did-you-mean")
    (synopsis "Display suggestions on 'command not found' in Eshell")
    (description "This library adds a list of 'Did you mean...' suggestions
when the command was not found in Eshell.  The suggestions are found after the
commands that bear resemblance to the input command.")
    (license license:gpl3+)))

(define-public emacs-eshell-git-prompt
  (package
    (name "emacs-eshell-git-prompt")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xuchunyang/eshell-git-prompt")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "13b7nr0819pgzyvh0szi0zjyazgpxmsbqcz65cccyhh2pq48zb7j"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/xuchunyang/eshell-git-prompt")
    (synopsis "Themes for Emacs Shell (Eshell) prompt")
    (description
     "This package provides a variety of themes for Emacs Shell (Eshell)
prompt.")
    (license license:gpl3+)))

(define-public emacs-unfill
  (package
    (name "emacs-unfill")
    (version "0.3")
    (home-page "https://github.com/purcell/unfill")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pg64nza2mp4xyr69pjq51jsq1aaym0g38g4jzaxr0hh3w0ris1n"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "make" "unit" "INIT_PACKAGES=t")))
    (synopsis "Inverse of Emacs' @code{fill-paragraph} and @code{fill-region}")
    (description
     "The functions in this package provide the inverse of Emacs'
@code{fill-paragraph} and @code{fill-region}.")
    (license license:gpl3+)))

(define-public emacs-windower
  (package
    (name "emacs-windower")
    (version "0.0.1")
    (home-page "https://gitlab.com/ambrevar/emacs-windower")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0h24gb1ip0czfasxm8wwcc3v19g7mznzw2sxkmmfb5iis59p7dfy"))))
    (build-system emacs-build-system)
    (synopsis "Helper functions for window manipulation in Emacs")
    (description
     "This package provides helper functions for window manipulation in Emacs,
such as:

@itemize
@item switch to last buffer,
@item toggle single window display,
@item toggle between horizontal and vertical splits,
@item move borders more naturally,
@item swap windows à-la @code{windmove}.
@end itemize")
    (license license:gpl3+)))

(define-public emacs-framemove
  ;; Use the latest commit, as there are no tagged releases.
  (let ((commit "0faa8a4937f398e4971fc877b1c294100506b645")
        (revision "0"))
    (package
      (name "emacs-framemove")
      (version (git-version "0.10" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/framemove")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1z4xqx1cvllil03pdwsybsj5v9w7ggdrak1kxa856ki5mj1ja3gl"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/framemove.el")
      (synopsis "Directional frame selection routines")
      (description "Framemove is similar to the Windmove library, but for
frames.  It provides a simple set of keystrokes to move the input/focus
between windows.")
      (license license:gpl3))))

(define-public emacs-flycheck-cpplint
  (package
    (name "emacs-flycheck-cpplint")
    (version "1.0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/flycheck/flycheck-google-cpplint")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1nlyv81pyqmyz18dlzw5h23prhkvyzb0aasjxba8mm33avx0fvvb"))))
    (build-system emacs-build-system)
    (arguments
     `(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'set-cpplint-path
           (lambda _
             (substitute* "flycheck-google-cpplint.el"
               (("\"cpplint.py\"")
                (string-append "\"" (which "cpplint") "\""))))))))
    (inputs
     (list cpplint))
    (propagated-inputs
     (list emacs-flycheck))
    (synopsis "Google C++ checker for Flycheck")
    (description "This package provides a interface for @code{cpplint} over
Flycheck plugin.  @code{cpplint} is a static code checker for C++, following
Google guidelines.")
    (home-page "https://github.com/flycheck/flycheck-google-cpplint")
    (license license:gpl3+)))

(define-public emacs-highlight-doxygen
  ;; Upstream does not tag releases.  Commit below matches version bump.
  (let ((commit "eec4874e2e89d4eb39091aad89a67dff8f8ec84c"))
    (package
      (name "emacs-highlight-doxygen")
      (version "0.0.2")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Lindydancer/highlight-doxygen")
               (commit commit)))
         (sha256
          (base32
           "0r3rv1px43r265716l3g20c1ss4381h1mc1kjxin22vdmrj6cmxy"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/Lindydancer/highlight-doxygen")
      (synopsis "Highlight Doxygen comments in Emacs, including code blocks")
      (description
       "This package highlights Doxygen comments.

In addition to highlighting Doxygen commands and their arguments, entire
Doxygen comment are highlighted, making them stand out compared to other
comments.  The code blocks are highlighted according to the
language they are written in.")
      (license license:gpl3+))))

(define-public emacs-helm-fish-completion
  (package
    (name "emacs-helm-fish-completion")
    (version "0.6")
    (home-page "https://github.com/emacs-helm/helm-fish-completion")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1j2vfngq3512naaayv9kx0d1q2zg1xgs69l8afc7swg72h0l0imw"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-fish-completion))
    (synopsis "Helm interface for Emacs fish-completion")
    (description "Helm Fish Completion is a Helm interface for Emacs
fish-completion.  It can be used in both Eshell and M-x shell.")
    (license license:gpl3+)))

(define-public emacs-helm-themes
  (let ((commit "1fc4a5d6114bc6c8c444c5ca73f22abe141a690d")
        (revision "2"))
    (package
      (name "emacs-helm-themes")
      (version (git-version "0.05" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-themes")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1j74a9ynhfcikl4r0v5lym2ansvgwm643qbmj5hknblpn8g6016c"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f)) ; No tests despite Makefile.
      (propagated-inputs (list emacs-helm))
      (home-page "https://github.com/emacsorphanage/helm-themes")
      (synopsis "Emacs theme selection with Helm interface")
      (description
       "Helm Themes provide an Emacs theme selection with Helm interface.")
      (license license:gpl3+))))

(define-public emacs-helm-switch-to-repl
  (package
    (name "emacs-helm-switch-to-repl")
    (version "0.1.2")
    (home-page "https://github.com/emacs-helm/helm-switch-to-repl")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0n8qa549c5syvgqw1h2zrakjjbygddpxzaifaq5irscgdcajrads"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (synopsis "Helm action to switch directory in Emacs REPLs")
    (description "Helm \"Switch-to-REPL\" offers the
@code{helm-switch-to-repl} action, a generalized and extensible version of
@code{helm-ff-switch-to-shell}.  It can be added to @code{helm-find-files} and
other @code{helm-type-file} sources such as @code{helm-locate}.")
    (license license:gpl3+)))

(define-public emacs-telega-server
  (let ((commit "f5b48d2a605c1383ddb8522ed315b625115f16a6"))
    (package
      (name "emacs-telega-server")
      (version "0.8.5")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zevlg/telega.el")
               (commit commit)))
         (sha256
          (base32 "12h4jvqzw2s30c1wxd26qa9m8fhpb2nc1ijh05781fkxd7sqrdkr"))
         (file-name (git-file-name "emacs-telega" version))))
      (build-system gnu-build-system)
      (arguments
       (list
        #:make-flags
        #~(list (string-append "CC=" #$(cc-for-target))
                (string-append "INSTALL_PREFIX=" #$output "/bin"))
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'configure 'enter-subdirectory
              (lambda _ (chdir "server")))
            (replace 'configure
              (lambda _
                (substitute* "run_tests.py"
                  (("^(TELEGA_SERVER = ).*$" _all prefix)
                   (string-append prefix
                                  "\"" #$output "/bin/telega-server\"\n")))))
            (delete 'check)
            (add-after 'install 'check
              (assoc-ref %standard-phases 'check))
            (add-before 'install-license-files 'leave-subdirectory
              (lambda _ (chdir ".."))))
        #:test-target "test"))
      (inputs
       (list tdlib libappindicator))
      (native-inputs
       (list python pkg-config))
      (home-page "https://zevlg.github.io/telega.el/")
      (synopsis "Server process of Telega")
      (description "Telega-server is helper program to interact with Telegram
service, and connect it with Emacs via inter-process communication.")
      (license license:gpl3+))))

(define-public emacs-telega
  (let ((commit "50eea5dea4fdfb9fff46d71e3c3bcc6dbf09f26a"))
    (package
      (name "emacs-telega")
      (version "0.8.554")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/zevlg/telega.el")
               (commit commit)))
         (sha256
          (base32 "1w0hpiaaj6p5nlmdi99psc0lmvmy65d27pz2vv3gafp2la4dplgx"))
         (file-name (git-file-name "emacs-telega" version))
         (patches
          (search-patches "emacs-telega-path-placeholder.patch"
                          "emacs-telega-test-env.patch"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:emacs (if (target-64bit?)
                    emacs-minimal
                    ;; Require wide-int support for 32-bit platform.
                    emacs-wide-int)
        #:test-command #~(list "make" "test_el")
        #:include #~(cons "^etc\\/" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-sources
              (lambda* (#:key inputs #:allow-other-keys)
                ;; Hard-code paths to `ffplay` and `ffmpeg`.
                (let* ((ffplay-bin (search-input-file inputs "/bin/ffplay"))
                       (ffmpeg-bin (search-input-file inputs "/bin/ffmpeg"))
                       (tgs2png-bin (search-input-file inputs "/bin/tgs2png")))
                  (substitute* '("telega.el" "telega-sticker.el" "telega-customize.el")
                    (("\\(executable-find \"tgs2png\"\\)")
                     (string-append "\"" tgs2png-bin "\"")))
                  (substitute* '("telega-ffplay.el" "telega-vvnote.el")
                    (("(shell-command-to-string\|concat) \"(ffmpeg\|ffprobe)"
                      all func cmd)
                     (string-append func " \""
                                    (search-input-file
                                     inputs (string-append "/bin/" cmd))))
                    (("\\(executable-find \"ffplay\"\\)")
                     (string-append "(and (file-executable-p \"" ffplay-bin "\")"
                                    "\"" ffplay-bin "\")"))
                    (("\\(executable-find \"ffmpeg\"\\)")
                     (string-append "(and (file-executable-p \"" ffmpeg-bin "\")"
                                    "\"" ffmpeg-bin "\")"))))))
            (add-after 'unpack 'configure
              (lambda* (#:key inputs outputs #:allow-other-keys)
                (substitute* "telega-customize.el"
                  (("@TELEGA_SERVER_BIN@")
                   (search-input-file inputs "/bin/telega-server")))
                (substitute* "telega-core.el"
                  (("@TELEGA_SHARE@")
                   (string-append (elpa-directory (assoc-ref outputs "out"))
                                  "/etc")))))
            (delete 'check)
            (add-after 'install 'check (assoc-ref %standard-phases 'check))
            (add-before 'check 'set-home
              (lambda _
                (setenv "HOME" (getenv "TMPDIR"))))
            (add-before 'check 'skip-ensure-dependencies
              (lambda _
                (substitute* "etc/telega-make.el"
                  (("\\(telega-ensure-dependencies\\)" all)
                   (string-append ";; " all))))))))
      (inputs
       (list emacs-telega-server ffmpeg tgs2png))
      (native-inputs '())
      (propagated-inputs
       (list emacs-visual-fill-column emacs-company
             emacs-rainbow-identifiers))
      (home-page "https://zevlg.github.io/telega.el/")
      (synopsis "GNU Emacs client for the Telegram messenger")
      (description "Telega is a full-featured, unofficial GNU Emacs-based client
for the Telegram messaging platform.")
      (license license:gpl3+))))

(define-public emacs-telega-contrib
  (package
    (inherit emacs-telega)
    (name "emacs-telega-contrib")
    (arguments
     (list
      #:lisp-directory "contrib"
      #:exclude #~(list "telega-live-location.el")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'install-license-files 'leave-subdirectory
            (lambda _ (chdir ".."))))))
    (inputs '())
    (native-inputs '())
    (propagated-inputs
     (list emacs-alert emacs-all-the-icons emacs-dashboard emacs-telega))
    (synopsis "Contributed packages to Telega")
    (description "Telega-contrib is a collection of third-party
contributed packages to Telega.")))

(define-public emacs-doom-modeline
  (package
    (name "emacs-doom-modeline")
    (version "4.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/seagle0128/doom-modeline")
             (commit (string-append "v" version))))
       (sha256
        (base32 "1yhz32rfks48a40cczfzmdhzjh9ng8w96g7id7rnagnsn2b2lqzg"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-nerd-icons emacs-compat emacs-shrink-path))
    (synopsis "Fancy and fast mode-line inspired by minimalism design")
    (description "Doom modeline is a complete modeline for GNU Emacs inspired
by the Doom theme collection.  This modeline features support for mode-specific
icon support, git integration, and several other utilities.")
    (home-page "https://github.com/seagle0128/doom-modeline/")
    (license license:gpl3+)))

(define-public emacs-mood-line
  (package
    (name "emacs-mood-line")
    (version "3.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/jessieh/mood-line")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19yh93kkyailczv1yyg7jhmzwl768sg0rk4as5kgqays87h9bnfn"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/jessieh/mood-line")
    (synopsis "Minimal mode-line for Emacs")
    (description
     "Mood-line is a minimal Emacs mode-line configuration that aims to
replicate some of the features of the Doom modeline package.")
    (license license:gpl2+)))

(define-public emacs-simple-modeline
  (package
    (name "emacs-simple-modeline")
    (version "1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gexplorer/simple-modeline")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1rnzrx7gcaw056cqvnb1wai4hala0r0gpk3a4kyyghyp9hmrxbb5"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/gexplorer/simple-modeline")
    (synopsis "Simple mode-line configuration for Emacs")
    (description
     "This package provides a simple mode-line configuration for Emacs.")
    (license license:gpl3+)))

(define-public emacs-frames-only-mode
  ;; Latest release is from 8 years ago.
  (let ((commit "3c7d7d89398b999bac2d848c8c26d742572e8109")
        (revision "0"))
    (package
      (name "emacs-frames-only-mode")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/davidshepherd7/frames-only-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1rs01wiahqnz33x66mm4i7147jfjz75mx1q4mwjpds6yvir4mdkn"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'check 'fix-makefile
              (lambda _
                (substitute* "Makefile"
                  (("cask") "")))))
        #:test-command #~(list "make" "test-unit")))
      (propagated-inputs
       (list emacs-dash emacs-s))
      (native-inputs (list emacs-flycheck emacs-magit emacs-validate))
      (home-page "https://github.com/davidshepherd7/frames-only-mode")
      (synopsis "Use frames instead of Emacs windows")
      (description
       "This is an Emacs global minor mode to use Emacs frames instead of Emacs'
internal windowing system.  This combines particularly well with tiling window
managers such as XMonad.")
      (license license:gpl3+))))

(define-public emacs-modalka
  (package
    (name "emacs-modalka")
    (version "0.1.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/mrkkrp/modalka")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ggj8q92sb6wp3hs1vhpmy56id0p3i9zwnw24g2v7xa7w8ac9s7l"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/mrkkrp/modalka")
    (synopsis "Minor mode to easily define native custom modal editing")
    (description
     "This is a building kit to help switch to modal editing in Emacs.  The
main goal of the package is to make modal editing in Emacs as natural and
native as possible.  Modalka lets you define your own keys and does not come
with a preconfigured set of keys.")
    (license license:gpl3+)))

(define-public emacs-shrink-path
  (package
    (name "emacs-shrink-path")
    (version "0.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/bennya/shrink-path.el.git")
             (commit (string-append "v" version))))
       (sha256
        (base32
         "0kx0c4syd7k6ff9j463bib32pz4wq0rzjlg6b0yqnymlzfr1mbki"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s emacs-dash emacs-f))
    (native-inputs (list emacs-buttercup))
    (home-page "https://gitlab.com/bennya/shrink-path.el")
    (synopsis "Fish-style path truncation in emacs-lisp")
    (description "This package provides utility functions that allow for
Fish-style truncated directories in eshell and various modelines.")
    (license license:gpl3+)))

(define-public emacs-org-present
  (let ((commit "4ec04e1b77dea76d7c30066ccf3200d2e0b7bee9")
        (revision "1"))
    (package
      (name "emacs-org-present")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rlister/org-present")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0bcrgwc80968zx52lwg71cs7v2yrygynzbnrakxdja1l5a6h3xy6"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-org))
      (synopsis "Minimalist presentation minor-mode for Emacs Org mode")
      (description "Org Present is a minimalist presentation tool for Emacs
Org mode.  Simply layout your presentation with each slide under a top-level
header, start the minor mode, and page through each slide with Left and Right
keys.")
      (home-page "https://github.com/rlister/org-present")
      (license license:gpl3+))))

(define-public emacs-fullframe
  (package
    (name "emacs-fullframe")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~tomterl/fullframe")
             (commit version)))
       (sha256
        (base32 "1q276p3bagx9fhzyzjmz449f95k1z287x4p34980d06klj11lrab"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~tomterl/fullframe")
    (synopsis "Generalized automatic execution in a single frame")
    (description
     "This library provides helpers for single-window-per-frame execution of
buffer-exposing commands.")
    (license license:gpl3+)))

(define-public emacs-eshell-toggle
  (let ((commit "ddfbe0a693497c4d4bc5494a19970ba4f6ab9033")
        (revision "1"))
    (package
      (name "emacs-eshell-toggle")
      (version (git-version "0.10.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/4DA/eshell-toggle")
               (commit commit)))
         (sha256
          (base32
           "0xqrp8pwbmfxjdqipgpw5nw633mvhjjjm3k3j9sh9xdpmw05hhws"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (home-page "https://github.com/4DA/eshell-toggle")
      (synopsis "Show and hide an @code{eshell} instance")
      (description "This package toggles an @code{eshell} instance for the
current buffer.")
      (license license:gpl3+))))

(define-public emacs-repl-toggle
  (package
    (name "emacs-repl-toggle")
    (version "0.7.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~tomterl/repl-toggle")
             (commit version)))
       (sha256
        (base32
         "18dpy7a7yrn7m7qifrjk5zcr6zbd3kwp9pb55la9052vwipxxvfk"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-fullframe))
    (home-page "https://git.sr.ht/~tomterl/repl-toggle")
    (synopsis "Switch to and from current major mode's REPL")
    (description "This package provides a function to switch to and from a
REPL appropriate to the current major mode.")
    (license license:gpl3+)))

(define-public emacs-rime
  (package
    (name "emacs-rime")
    (version "1.0.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/DogLooksGood/emacs-rime")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0z0iwsqr92g8ykxb51gkawwxwzx0faw0027zgdi7c38ngjqld237"))))
    (build-system emacs-build-system)
    (arguments
     '(#:include (cons "\\.so$" %default-include)
       #:test-command (list "emacs" "--batch" "-l" "test.el")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-rime-data-path
           (lambda* (#:key inputs #:allow-other-keys)
             (make-file-writable "rime.el")
             (emacs-substitute-variables "rime.el"
               ("rime-share-data-dir"
                (search-input-directory inputs
                                        "share/rime-data")))))
         (add-before 'install 'build-emacs-module
           (lambda _
             (invoke "make" "lib")))
         (add-before 'check 'pre-check
           (lambda _
             (setenv "HOME" (getenv "TMPDIR"))
             (mkdir-p (string-append (getenv "HOME")
                                     "/.emacs.d/rime")))))))
    (inputs
     (list librime rime-data))
    (propagated-inputs
     (list emacs-dash emacs-popup emacs-posframe))
    (home-page "https://github.com/DogLooksGood/emacs-rime")
    (synopsis "Rime input method in Emacs")
    (description
     "Rime is an Emacs input method built upon Rime input method engine.")
    (license license:gpl3+)))

(define-public emacs-liberime
  (let ((commit "cc9eb9812fd6f68e78ed6a0c0a85da7a18765753")
        (revision "0"))
    (package
      (name "emacs-liberime")
      (version (git-version "0.0.6" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/merrickluo/liberime")
               (commit commit)))
         (sha256
          (base32
           "11c2wj00wwbdxqkzl60sd77cp43rja5v8hrvhrvhg75v62kawva2"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "test" "EMACS=emacs --batch")
        #:include #~(cons "^src/liberime-core.so$" %default-include)
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'delete-files-and-patch-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (delete-file-recursively "emacs-module")
                (emacs-substitute-variables "liberime.el"
                  ("liberime-module-file"
                   (string-append #$output "/src/liberime-core.so"))
                  ("liberime-shared-data-dir"
                   (search-input-directory inputs "share/rime-data")))))
            (add-before 'install 'build-emacs-module
              (lambda _
                (invoke "make"))))))
      (inputs (list librime rime-data))
      (home-page "https://github.com/merrickluo/liberime")
      (synopsis "Librime Emacs Lisp binding")
      (description
       "Liberime is an Emacs dynamic module provide librime bindings.")
      (license license:gpl3+))))

(define-public emacs-bison-mode
  (package
    (name "emacs-bison-mode")
    (version "0.4")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://elpa.nongnu.org/nongnu/bison-mode-"
               version ".tar"))
        (sha256
          (base32 "19n9kz1ycjpxngd3clzr8lzrnnw19l8sfvlx1yqn35hk7017z7ab"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.nongnu.org/nongnu/bison-mode.html")
    (synopsis "Major mode for editing Bison, Yacc, and Lex files")
    (description
     "This Emacs package provides a major mode for editing Bison, Yacc, and
Lex files.")
    (license license:gpl2+)))

(define-public emacs-blackout
  (let ((commit "4bac44671fca4c98d96aa94c79946bf4d4baf0ee")
        (revision "1"))
    (package
      (name "emacs-blackout")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/raxod502/blackout")
               (commit commit)))
         (sha256
          (base32
           "1wnh0nwy6r3a18sy9sqmrwv04vnmaflxy4g7mq8jiyyjijri7l1b"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (home-page "https://github.com/raxod502/blackout")
      (synopsis "Clean up mode lighters")
      (description "This package provides a function for hiding and customizing
display of major and minor modes in the mode line.")
      (license license:gpl3+))))

(define-public emacs-ivy-omni-org
  (let ((commit "5460a9fc061a4a5ae8372dc8df966ced94abab58")
        (revision "1"))
    (package
      (name "emacs-ivy-omni-org")
      (version (git-version "0.2.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/akirak/ivy-omni-org")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1np1f51hc3phkl5w02a9a79gl38ra2d535i784fn4pqaasvm0rq8"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))
      (propagated-inputs
       (list emacs-ivy emacs-dash))
      (synopsis "Browse anything in Org mode")
      (description "This package allows Org items to be accessed via the Ivy
interface.")
      (home-page "https://github.com/akirak/ivy-omni-org")
      (license license:gpl3+))))

(define-public emacs-ivy-posframe
  (package
    (name "emacs-ivy-posframe")
    (version "0.6.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "ivy-posframe-" version ".tar"))
       (sha256
        (base32 "0b498qzaydjrhplx4d7zcrs883dlrhfiz812sv4m3pmhfwifcchh"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy emacs-posframe))
    (home-page "https://github.com/tumashu/ivy-posframe")
    (synopsis "Pop a posframe (a child frame) to show Ivy candidates")
    (description
     "This package provides an Emacs Ivy extension, which let Ivy use
posframe to show its candidate menu.")
    (license license:gpl3+)))

(define-public emacs-shackle
  (package
    (name "emacs-shackle")
    (version "1.0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://depp.brause.cc/shackle.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0s4br59zpd5qq7z9074ddq9lmwnddq2ixijwi666wp5gxw45fpgg"))))
    (build-system emacs-build-system)
    (synopsis "Enforce rules for popups")
    (description
     "This package provides a global minor mode in which users
can specify how popup-displaying functions occupy the screen.")
    (home-page "https://depp.brause.cc/shackle")
    (license license:gpl3+)))

(define-public emacs-showtip
  (let ((commit "930da302809a4257e8d69425455b29e1cc91949b")
        (revision "0"))
    (package
      (name "emacs-showtip")
      (version (git-version "0.01" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/showtip")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "01zak0zhha6dp7a2hm28d065gjnc462iwpsfyxhbxgfzcdlicqc7"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsorphanage/showtip")
      (synopsis "Show tip at cursor")
      (description
       "This library provide one function to show tooltip near the cursor.")
      (license license:gpl2+))))

(define-public emacs-sdcv
  ;; No tagged version upstream.
  (let ((commit "943ae3e90cc9a0a88a37cc710acd7424fd4defc4" )
        (revision "0"))
    (package
      (name "emacs-sdcv")
      (version (git-version "1.5.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/stardiviner/sdcv.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0i1ylvw7p46pkf3yyyzcdmdhsspzymnnnvx8s0i7vynngr5x0vzh"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-popup emacs-pos-tip emacs-showtip))
      (home-page "https://www.emacswiki.org/emacs/download/sdcv.el")
      (synopsis "Emacs interface for @code{sdcv}")
      (description
       "This plugin translates words with @code{sdcv}, and displays
translation using a tooltip or in a dedicated buffer.")
      (license license:gpl3+))))

(define-public emacs-helm-lacarte
  (let ((commit "40a6c449720be521435b6b1da7911af3a0b9dca0")
        (revision "1"))
    (package
      (name "emacs-helm-lacarte")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-helm/helm-lacarte")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0dkfd3lap2v7b4nckzv8v7hczmzwzhbl75haqkra107ln91ldbwc"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-lacarte))
      (synopsis "Helm interface to @code{lacarte.el}")
      (description "This package provides a Helm interface to
@code{lacarte.el}, a package that displays mode-specific commands as menu
items.")
      (home-page "https://github.com/emacs-helm/helm-lacarte")
      (license license:gpl3+))))

(define-public emacs-esh-help
  (let ((commit "417673ed18a983930a66a6692dbfb288a995cb80")
        (revision "1"))
    (package
      (name "emacs-esh-help")
      (version (git-version "1.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/tom-tan/esh-help")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0x7d51a6ljl014zy7mi27vzcqqbcwg9z4drq29fr2ajk82mqhlgd"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (synopsis "Help functions for Eshell")
      (description "This package provides a @code{run-help} function inspired
by @code{zsh} as well as @code{eldoc} support.")
      (home-page "https://github.com/tom-tan/esh-help")
      (license license:gpl3+))))

(define-public emacs-isearch-dabbrev
  (let ((commit "1efe7abba4923015cbc2462395deaec5446a9cc8")
        (revision "1"))
    (package
      (name "emacs-isearch-dabbrev")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Dewdrops/isearch-dabbrev")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "17d0816awadvsw1qc7r0p6ira75jmgxaj9hsk9ypayxsaf6ynyrb"))))
      (build-system emacs-build-system)
      (synopsis "Use @code{dabbrev} within @code{isearch}")
      (description "This package allows @code{dabbrev-expand} to be used
within @code{isearch-mode}.")
      (home-page "https://github.com/Dewdrops/isearch-dabbrev")
      (license license:gpl3+))))

(define-public emacs-helm-linux-disks
  (let ((commit "2cdc8116a08534289eb0dc76461d0f93a0bdf231")
        (revision "1"))
    (package
      (name "emacs-helm-linux-disks")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/Akirak/helm-linux-disks")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1limw82zd8jz3mhh9rqlmhj4cjhfgybs9argfjid1an3vpyhc85i"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-helm))
      (synopsis "Mount/unmount volumes in Linux via Helm")
      (description "This package provides a Helm interface to run operations
on removable volumes in Linux.")
      (home-page "https://github.com/Akirak/helm-linux-disks")
      (license license:gpl3+))))

(define-public emacs-debase
  (let ((commit "0b6fc2af3440d68798e3a85d4c889341aae07936")
        (revision "1"))
    (package
      (name "emacs-debase")
      (version (git-version "0.7" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/debase.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "112vk1svnc6516vhs47sx5jw6bg8lwrc15l99dxj0sc313lxjy3k"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/debase")
      (synopsis "D-Bus convenience layer for Emacs")
      (description
       "Debase provides a higher-level API for using and implementing D-Bus
services inside Emacs.")
      (license (list license:gpl3+)))))

(define-public emacs-discomfort
  (let ((commit "873eea833bbae7196b92bb1102494b8bf5dc5df6")
        (revision "1"))
    (package
      (name "emacs-discomfort")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/discomfort.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "01p4bfiasqxfmp9x1bxdc7763bh712d3vlp2014y8pzrwb1jqdaq"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-debase))
      (home-page "https://codeberg.org/emacs-weirdware/discomfort")
      (synopsis "User interface to mount and unmount disks in Emacs")
      (description "Discomfort is an interface to mount and unmount disks in Emacs, using UDisks2.")
      (license (list license:gpl3+)))))

(define-public emacs-psession
  (let ((commit "3e97267c92b164584e06a6c70ee7491714c7c12c")
        (revision "1"))
    (package
      (name "emacs-psession")
      (version (git-version "1.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/thierryvolpiatto/psession")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "15frl618393bc891d0yi3mdxzvbq790a86vfvp3dyd5riz4ddg95"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs
       (list emacs-async))
      (synopsis "Persistent save of @code{elisp} objects")
      (description "This package provides minor modes for saving Emacs session
data, including buffers, window configuration, variables, and more.")
      (home-page "https://github.com/thierryvolpiatto/psession")
      (license license:gpl3+))))

(define-public emacs-parseedn
  (package
    (name "emacs-parseedn")
    (version "1.2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clojure-emacs/parseedn")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0b2jralm5lm4z4lpkn8ygzfga67xsalaszc8gqqv36khmz2mrckc"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "eldev" "--use-emacsloadpath" "-dtT" "-p" "test")))
    (native-inputs (list emacs-eldev))
    (propagated-inputs
     (list emacs-a emacs-parseclj))
    (home-page "https://cider.mx")
    (synopsis "EDN parser for Emacs Lisp")
    (description
     "Parseedn is an Emacs Lisp library for parsing EDN (Clojure) data.
It uses parseclj's shift-reduce parser internally.")
    (license license:gpl3+)))

(define-public emacs-parseclj
  (package
    (name "emacs-parseclj")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/clojure-emacs/parseclj")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1iz7qbsq4whmb3iqy777jlm47chjp62313hc6nfcp0lfqsanmcmv"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "eldev" "--use-emacsloadpath" "-dtT" "-p" "test")))
    (native-inputs (list emacs-eldev))
    (propagated-inputs (list emacs-a))
    (home-page "https://cider.mx")
    (synopsis "Clojure parser for Emacs Lisp")
    (description
     "Parseclj is an Emacs Lisp library for parsing Clojure code and EDN data.
It supports several input and output formats, all powered by the same
shift-reduce parser function.")
    (license license:gpl3+)))

(define-public emacs-hide-mode-line
  ;; XXX: Commit below refers to the un-tagged latest release.
  (let ((commit "bc5d293576c5e08c29e694078b96a5ed85631942"))
    (package
      (name "emacs-hide-mode-line")
      (version "1.0.3")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/hlissner/emacs-hide-mode-line")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "12mfhg0r3gvy59ijy44vsircn251nmisp04k9vvgd2yhykpsr1j6"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/hlissner/emacs-hide-mode-line")
      (synopsis "Emacs plugin that hides the mode-line")
      (description
       "A minor mode that hides the mode-line in your current buffer.  It can be
used to toggle an alternative mode-line, toggle its visibility, or simply
disable the mode-line in buffers where it is not very useful.")
      (license license:expat))))

(define-public emacs-helm-cider
  (package
    (name "emacs-helm-cider")
    (version "0.5.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/clojure-emacs/helm-cider")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0jjjy68pmmsx0biawyi5581cqh2b4zb0q8f5vs49ihpzn6zc04vk"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm emacs-cider))
    (home-page "https://github.com/clojure-emacs/helm-cider")
    (synopsis "Helm interface to Clojure's CIDER")
    (description "Helm-CIDER adds Helm interfaces to
@command{cider-apropos}, @command{cider-apropos-documentation},
@command{cider-browse-ns} (namespaces).

It also provides original Helm commands: @command{helm-cider-spec},
@command{helm-cider-spec-ns}, @command{helm-cider-repl-history},
@command{helm-cider-cheatsheet}.")
    (license license:gpl3+)))

(define-public emacs-edn
  ;; No release since February 2016
  (let ((commit "be9e32d1b49e35247b263b0243df7cfdc8d413ab"))
    (package
      (name "emacs-edn")
      (version (git-version "1.1.2" "1" commit))
      (home-page "https://github.com/expez/edn.el")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1xp2hjhn52k6l1g6ypva6dsklpawni7gvjafbz6404f9dyxflh7l"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f      ; XXX: void-variable peg-stack
                       #:test-command
                       #~(list "emacs" "--batch" "-L" "." "-L" "tests"
                               "-l" "tests/edn-tests"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs
       (list emacs-peg))
      (synopsis "Read and write EDN from Elisp")
      (description "This is an Emacs Lisp library for reading and writing the
data format @code{edn}.  See @url{https://github.com/edn-format/edn}.")
      (license license:gpl3+))))

(define-public emacs-ednc
  (package
    (name "emacs-ednc")
    (version "0.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/sinic/ednc")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1jdlwngxipq5pzs3kgmzwc99aqk6mi3cf1wv228hhmb8nsm1dqgd"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/sinic/ednc")
    (synopsis "Emacs Desktop Notification Center")
    (description
     "The Emacs Desktop Notification Center (EDNC) is an Emacs package written
in pure Lisp that implements a Desktop Notifications service according to the
freedesktop.org specification.  EDNC aspires to be a small, but flexible
drop-in replacement of standalone daemons like Dunst.")
    (license license:gpl3+)))

(define-public emacs-helm-clojuredocs
  (let ((commit "5a7f0f2cb401be0b09e73262a1c18265ab9a3cea"))
    (package
      (name "emacs-helm-clojuredocs")
      (version (git-version "0.3" "1" commit))
      (home-page "https://github.com/mbuczko/helm-clojuredocs")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "015b8zxh91ljhqvn6z43gy08di54xcw9skw0i7frj3d7gk984qhl"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-helm emacs-edn))
      (synopsis "Search help on clojuredocs.org with Helm")
      (description "This package provides a Helm interface to lookup Clojure
documentation on @url{https://clojuredocs.org} with Helm.

Two function are exposed:
@itemize
@item @command{helm-clojuredocs}: opens a Helm session with no initial
pattern.  Searching starts with minimal 3 characters entered.
@item @command{helm-clojuredocs-at-point}: opens a Helm session with initial
pattern guessed from thing under current cursor position.
@end itemize\n")
      (license license:gpl3+))))

(define-public emacs-helm-selector
  (package
    (name "emacs-helm-selector")
    (version "0.6.1")
    (home-page "https://github.com/emacs-helm/helm-selector")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "01lh1df0bnas1p7xlqc4i1jd67f8lxgq0q2zsvx10z8828i76j3v"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (synopsis "Convenient related-buffer selection for Emacs Helm")
    (description "Helm Selector is a collection of Helm helper functions for
convenient buffer selection.

It is especially helpful to create Helm sessions to navigate buffers of a
given mode in a “do what I mean” fashion:

If current buffer is not of mode X, switch to last buffer of mode X.  If
current buffer is of mode X, show a Helm session of all buffers in mode X.  In
the Helm session, it’s also possible to input an arbitrary name which will be
used for the creation of a new buffer of mode X.")
    (license license:gpl3+)))

(define-public emacs-helm-wordnut
  (let ((commit "9681a9535a839cd5d042c302945ae595852fe7bf"))
    (package
      (name "emacs-helm-wordnut")
      (version (git-version "0.1" "1" commit))
      (home-page "https://github.com/emacs-helm/helm-wordnut")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0msj7nbsb363pxamxi7n2z08cp5jizkpjbwia8f5a161wjglrihs"))))
      (build-system emacs-build-system)
      (inputs
       (list wordnet))
      (propagated-inputs
       (list emacs-helm))
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'configure
             (lambda* (#:key inputs #:allow-other-keys)
               (let ((wn (assoc-ref inputs "wordnet")))
                 ;; .el is read-only in git.
                 (chmod "helm-wordnut.el" #o644)
                 ;; Specify the absolute file names of the various
                 ;; programs so that everything works out-of-the-box.
                 (emacs-substitute-variables "helm-wordnut.el"
                   ("helm-wordnut-prog" (string-append wn "/bin/wn"))
                   ("helm-wordnut-wordnet-location"
                    (string-append wn "/dict")))))))))
      (synopsis "Emacs Helm interface for Wordnet")
      (description "This package is merely a combination of two other Emacs
packages: @code{helm-wordnet} and @code{wordnut}.  It features word completion
with Helm and displays a buffer of all the different result types available to
Wordnet.")
      (license license:gpl3+))))

(define-public emacs-helm-xref
  (package
    (name "emacs-helm-xref")
    (version "1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/brotzeit/helm-xref")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0v0wm1x11r1h9p139c5rl0r4s5q6092bmwrsnr2140ddbq34mnvy"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-helm))
    (home-page "https://github.com/brotzeit/helm-xref")
    (synopsis "Helm interface for @code{xref}")
    (description "This package provides a Helm interface for selecting
@code{xref} results.")
    (license license:gpl3+)))

(define-public emacs-helm-css-scss
  (let ((commit "2169d83d8fdc661241df208cb3235112735d936e")
        (revision "0"))
    (package
      (name "emacs-helm-css-scss")
      (version (git-version "1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-css-scss")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0jjjw7fw2ngrpgvd599vjd291zr8zr1m7xnxfq2dpqc3mf0s397z"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-helm))
      (home-page "https://github.com/emacsorphanage/helm-css-scss")
      (synopsis
       "Helm interface for navigating CSS, SCSS, and LESS selectors in Emacs")
      (description
       "This package provides Helm integration for quickly navigating and
 searching CSS, SCSS, and LESS selectors in Emacs.  It enables you to view and
 jump to selectors across multiple buffers, enhancing your workflow when
 editing stylesheets.")
      (license license:gpl3+))))

(define-public emacs-metal-mercury-mode
  (let ((commit "99e2d8fb7177cae3bfa2dec2910fc28216d5f5a8")
        (revision "1")
        (version "0.0.0"))
    (package
      (name "emacs-metal-mercury-mode")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ahungry/metal-mercury-mode")
               (commit commit)))
         (sha256
          (base32
           "0iil5k3rgifz2vqwsy12rbv5rzyvidq4sgwazsb2hzys8xynmfn5"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash))
      (synopsis "Major mode for editing Mercury files")
      (description
       "Major mode for editing Mercury files.  This is a rewrite of the original
mercury-mode provided by Emacs as a wrapper around prolog-mode.")
      (home-page "https://github.com/ahungry/metal-mercury-mode")
      (license license:gpl3+))))

(define-public emacs-boxquote
  (package
    (name "emacs-boxquote")
    (version "2.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/davep/boxquote.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0d7m9kcwhbgv4pikaa2dzlg9zkmwdhyx2ksn68di6xzbh838892q"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/davep/boxquote.el")
    (synopsis "Quote text with different kinds of boxes")
    (description "@code{boxquote} provides a set of functions for using
a text quoting style that partially boxes in the left hand side of an area of
text, such a marking style might be used to show externally included text or
example code.")
    (license license:gpl3+)))

(define-public emacs-boxy
  (package
    (name "emacs-boxy")
    (version "2.0.0")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/boxy-"
                                  version ".tar"))
              (sha256
               (base32 "1vfgwgk3vzzp2cy7n0qwhn7hzjxbp9vzxp1al1pkynv9hfs503gb"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/grinn.amy/boxy")
    (synopsis "A boxy layout framework for Emacs")
    (description "@code{boxy} provides an interface to create a 3D
representation of boxes. Other packages can use this library to create
expandable menus for interacting with hierarchical data.")
    (license license:gpl3+)))

(define-public emacs-buffer-env
  (package
    (name "emacs-buffer-env")
    (version "0.6")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://elpa.gnu.org/packages/buffer-env-"
                                  version ".tar"))
              (sha256
               (base32
                "08li070s2s64lifgzns0z6xjk1qyaik56d6sbdp3gsyghc1sx7rn"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/astoff/buffer-env")
    (synopsis "Create buffer-local process environments")
    (description "This package creates buffer-local environments using scripts
similar to Direnv.  This allows Emacs to call the correct version of external
programs such as linters, compilers, and language servers on a per-project
basis.")
    (license license:gpl3+)))

(define-public emacs-buffer-move
  (package
    (name "emacs-buffer-move")
    (version "0.6.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lukhas/buffer-move")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0xdks4jfqyhkh34y48iq3gz8swp0f526kwnaai5mhgvazvs4za8c"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/lukhas/buffer-move")
    (synopsis "Functions for moving Emacs' buffers around")
    (description
     "This package define functions for swapping buffers between windows
contained in the same frame.  An alternate behavior is to have the current
window switch to the previous buffer instead of swapping with the other
window.")
    (license license:gpl3+)))

(define-public emacs-company-ebdb
  (package
    (name "emacs-company-ebdb")
    (version "1.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "company-ebdb-" version ".el"))
       (sha256
        (base32 "146qpiigz12zp1823ggxfrx090g0mxs7gz1ba7sa0iq6ibgzwwm9"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company))
    (home-page "https://elpa.gnu.org/packages/company-ebdb.html")
    (synopsis "Company completion backend for EBDB in Message mode")
    (description "@code{company-ebdb} provides Company mode integration for
EBDB.  It is copied more or less intact from @code{company-bbdb}, originally
by Jan Tatarik.")
    (license license:gpl3+)))

(define-public emacs-mwim
  ;; Use the latest commit not in a release version as of yet, since it
  ;; contains a bug fix for the cases where `comment-start-skip' is nil.
  (let ((commit "b4f3edb4c0fb8f8b71cecbf8095c2c25a8ffbf85")
        (revision "0"))
    (package
      (name "emacs-mwim")
      (version (git-version "0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/alezost/mwim.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0l3k611gp9g2x2vfmh92wnhnda81dslpwwpb8mxmzk308man77ya"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/alezost/mwim.el")
      (synopsis "Move to the beginning/end of line, code or comment")
      (description "@code{mwim} provides several commands to switch between
various line positions, like moving to the beginning/end of code, line, or
comment.")
      (license license:gpl3+))))

(define-public emacs-delight
  (package
    (name "emacs-delight")
    (version "1.7")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "delight-" version ".el"))
       (sha256
        (base32 "0pihsghrf9xnd1kqlq48qmjcmp5ra95wwwgrb3l8m1wagmmc0bi1"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/delight.html")
    (synopsis "Dimmer switch for your mode-line lighter text")
    (description "@code{delight} enables customizing or hiding the
mode-line text (lighter) of major and minor modes.")
    (license license:gpl3+)))

(define-public emacs-unkillable-scratch
  ;; Use the latest (unreleased) commit as of now, since it contains a handy
  ;; `unkillable-scratch-do-not-reset-scratch-buffer' customization to not
  ;; repopulate the scratch buffer with `initial-scratch-message'.
  (let ((commit "b24c2a760529833f230c14cb02ff6e7ec92288ab")
        (revision "0"))
    (package
      (name "emacs-unkillable-scratch")
      (version (git-version "1.0.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/EricCrosson/unkillable-scratch")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "13wjbcxr3km4s96yhpavgs5acs5pvqv3ih1p84diqb3x3i6wd4pa"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command #~(list "ert-runner" "ert-tests")))
      (native-inputs (list emacs-ert-runner))
      (home-page "https://github.com/EricCrosson/unkillable-scratch")
      (synopsis "Prevents the *scratch* buffer from being killed")
      (description "@code{unkillable-scratch} helps prevent killing buffers
matching a given regexp.")
      (license license:gpl2+))))

(define-public emacs-switch-buffer-functions
  (package
    (name "emacs-switch-buffer-functions")
    (version "0.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/10sr/switch-buffer-functions-el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pq53b8wrjbrxd5hnrcdi0z7mffp4bax55hn90k9ca3j76lhbn1k"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/10sr/switch-buffer-functions-el")
    (synopsis "Hooks run when switching current buffer")
    (description "This package provides a hook variable
@code{switch-buffer-functions}.  The hooks will be run when the current buffer
is changed after an interactive command, i.e., when @code{post-command-hook}
hooks are run.  The hooked functions will be called with both the previous and
the current buffer.")
    (license license:unlicense)))

(define-public emacs-erc-scrolltoplace
  (package
    (name "emacs-erc-scrolltoplace")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://gitlab.com/jgkamat/erc-scrolltoplace.git")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "11zpqwh1mlfifbgnvhc63bvnhg340jgxssm3m43hr1sxsyb52lh6"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-switch-buffer-functions))
    (home-page "https://gitlab.com/jgkamat/erc-scrolltoplace")
    (synopsis "ERC module to replace scrolltobottom while using keep-place")
    (description "@code{erc-scrolltoplace} is an ERC module to try
to emulate @code{scrolltobottom} while @code{keep-place} is enabled.")
    (license license:gpl3+)))

(define-public emacs-dmenu
  ;; Use the latest commit, as there are no tagged releases.
  (let ((commit "e8cc9b27c79d3ecc252267c082ab8e9c82eab264")
        (revision "0"))
    (package
      (name "emacs-dmenu")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/lujun9972/el-dmenu")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "098ncygms1r33zhjlq4fj2p4jc91v5whqrm3fazzdk7sd6dilf25"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/lujun9972/el-dmenu")
      (synopsis "Simulate the @command{dmenu} command line program")
      (description "This package provides a @command{dmenu} command for
launching other commands/applications from within Emacs, similar to the
@command{dmenu} program.  This is especially useful when using EXWM.")
      (license license:gpl3+))))

(define-public emacs-no-littering
  (package
    (name "emacs-no-littering")
    (version "1.8.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/emacscollective/no-littering")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "063h1qspqmbv818fnz3ygsq1ksmxl4xscq1hlv0cp24z6d3gbia5"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/emacscollective/no-littering")
    (synopsis "Help keep @file{~/.emacs.d/} clean")
    (description "The default paths used to store configuration files and
persistent data are not consistent across Emacs packages, be them built-in or
third-party ones.  @code{no-littering} sets out to help clean
@file{~/.emacs.d/} by putting configuration files and persistent data files in
two user-defined directories, as well as using more descriptive names for
files and subdirectories when appropriate.")
    (license license:gpl3+)))

(define-public emacs-meson-mode
  (package
    (name "emacs-meson-mode")
    (version "0.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/wentasah/meson-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "135glcrnbr7wmrygrngsxpma8bxajpxlanbkvk08v92p7ar6a21j"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "test")))
    (native-inputs (list emacs-ert-runner))
    (home-page "https://github.com/wentasah/meson-mode")
    (synopsis "Major mode for Meson build system files")
    (description
     "This is an Emacs major mode for Meson build system files.  Syntax
highlighting works reliably.  Indentation works too, but there are probably
cases where it breaks.")
    (license license:gpl3+)))

(define-public emacs-message-x
  ;; Use the latest commit, as there are no tagged releases.
  (let ((commit "5524de7bbfdd8749c110f48de5afb024d9f83133")
        (revision "0"))
    (package
      (name "emacs-message-x")
      (version (git-version "1.23" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/message-x")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0qy1xf11j357lsnbb829hnbg7fq1cii4cx54fwf0wgjh1bv2abvj"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; no tests
      (home-page "https://www.emacswiki.org/emacs/message-x.el")
      (synopsis "Customizable completion in message headers")
      (description "@code{message-x} assigns a context-sensitive function to
the TAB key in Message mode.  When on a header line, it performs completion
based on which header we are in (for example, newsgroup name completion makes
sense on the @samp{Newsgroups} header, whereas mail alias expansion makes
sense in the @samp{To} and @samp{Cc} headers).  When in the message body, this
executes a different function (default: @code{indent-relative}).")
      (license license:gpl2+))))

(define-public emacs-gleam-mode
  ;; No tag, version grabbed from source .el file.
  (let ((commit "8e981614536f0e36fb14721a9fae8bf72c287a40")
        (revision "0"))
    (package
      (name "emacs-gleam-mode")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/gleam-lang/gleam-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0xspx3hpiw21pqcqpp82ngxzsdbc209cbp7yjl5i1j5rwj6d09r7"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/gleam-lang/gleam-mode")
      (synopsis "Gleam support for Emacs")
      (description
       "This package provides an Emacs major mode for the Gleam language.")
      (license (list license:asl2.0 license:gpl3+)))))

(define-public emacs-glsl-mode
  ;; No tag, version grabbed from source .el file.
  (let ((commit "b07112016436d9634cd4ef747f9af6b01366d136")
        (revision "0"))
    (package
      (name "emacs-glsl-mode")
      (version (git-version "2.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jimhourihan/glsl-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0bav9ipfm0vy26n74ngsmjzc7fsyqz6xmriadzx55s44h8p5dn1s"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jimhourihan/glsl-mode")
      (synopsis "Major mode for Open GLSL shader files")
      (description
       "This package provides a major mode for editing OpenGLSL grammar files,
usually files ending with @file{.vert}, @file{.frag}, @file{.glsl} or
@file{.geom}.  It is based on C mode plus some features and pre-specified
fontifications.")
      (license license:gpl3+))))

(define-public emacs-gnus-harvest
  (let ((commit "feda071a87b799bd5d23cacde3ee71f0b166e75d")
        (revision "0"))
    (package
      (name "emacs-gnus-harvest")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jwiegley/gnus-harvest")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "08zb7vc3v3wdxkzgi902vlc5ybfvm8fxrvm5drnwfsjj9873pbcb"))))
      (build-system emacs-build-system)
      (inputs
       (list sqlite))
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-before 'build 'patch-exec-paths
             (lambda* (#:key inputs #:allow-other-keys)
               (let ((sqlite (assoc-ref inputs "sqlite"))
                     (file "gnus-harvest.el"))
                 (make-file-writable file)
                 (emacs-substitute-variables file
                   ("gnus-harvest-sqlite-program"
                    (string-append sqlite "/bin/sqlite3"))))
               #t)))))
      (home-page "https://github.com/jwiegley/gnus-harvest")
      (synopsis
       "Harvest email addresses from read/written Gnus articles")
      (description "@code{gnus-harvest} notices email address in every message
or post you read or write, and collects them in a SQLite database, which can
be easily and quickly queried to determine the completion list.  It optionally
uses BBDB and Message-X.")
      (license license:gpl3+))))

(define-public emacs-auto-dictionary-mode
  (package
    (name "emacs-auto-dictionary-mode")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/nschum/auto-dictionary-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "191294k92qp8gmfypf0q8j8qrym96aqikzvyb9p03wqvbr3r1dsk"))))
    (build-system emacs-build-system)
    (home-page "https://nschum.de/src/emacs/auto-dictionary/")
    (synopsis "Automatic dictionary switcher for Emacs spell checking")
    (description "@code{auto-dictionary} is a minor mode that hooks into
Flyspell's on-the-fly spell checking and extends these checks to also detect
language.  Auto-dictionary then sets @code{ispell-dictionary} to use the
detected language.")
    (license license:gpl2+)))

(define-public emacs-persid
  (let ((commit "cf84a4340bd3e5b16b4412e98c4243da9f72503a")
        (revision "2"))
    (package
      (name "emacs-persid")
      (version (git-version "0.1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rougier/persid")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "16nij3sv1fgpbxz7z3z4vdwxavz5hbad2y0585vp24h3zxhqq74y"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/rougier/persid")
      (synopsis "Persistent Identifier Library")
      (description "This package provides a library to manipulate
persistent identifiers that are used to locate scholar resources
online.  The library knows about the following formats:
@itemize
@item isbn: @url{https://isbn.org, International Standard Book Number}
@item issn: @url{https://www.issn.org, International Standard Serial Number}
@item doi: @url{https://www.doi.org, Digital Object identifier}
@item pmid: @url{https://pubmed.ncbi.nlm.nih.gov, PubMed}
@item pmcid: @url{https://www.ncbi.nlm.nih.gov/pmc, PubMed Central}
@item arxiv: @url{https://arxiv.org, Cornell University}
@end itemize

Given an identifier in one of the known formats, the libray can query
information about the resources and format it as a bibtex entry.")
      (license license:gpl3+))))

(define-public emacs-persist
  (package
    (name "emacs-persist")
    (version "0.7")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/"
                           "persist-" version ".tar"))
       (sha256
        (base32 "0g38vf4a4f4b8cp35qc7pwzj1qwrnw6dd6mc83mrjs35fx43lpjn"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/persist.html")
    (synopsis "Persist variables between Emacs sessions")
    (description
     "This package provides variables which persist across sessions.
Values are stored in a directory in @code{user-emacs-directory}, using
one file per value.  This makes it easy to delete or remove unused
variables.")
    (license license:gpl3+)))

(define-public emacs-persistent-scratch
  (package
    (name "emacs-persistent-scratch")
    (version "0.3.9")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Fanael/persistent-scratch")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "187cyl005csmmmh292km1v3ffl8x49h5qyn87i4adz9l5sqnpdgj"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/persistent-scratch")
    (synopsis "Preserve the scratch buffer across Emacs sessions")
    (description
     "Preserve the state of scratch buffers across Emacs sessions by saving the
state to and restoring it from a file, with auto-saving and backups.")
    (license license:bsd-2)))

(define-public emacs-company-emoji
  (package
    (name "emacs-company-emoji")
    (version "3.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/egirl/company-emoji")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1afy2f1ymzr518npbhy5296kaqshax5hs2ij7wgl28h0hsa2mnk1"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-company))
    (home-page "https://codeberg.org/egirl/company-emoji")
    (synopsis "Company completion back-end for emoji")
    (description
     "This library is a Company back-end providing auto-completion for
emoji.")
    (license license:gpl3+)))

(define-public emacs-exiftool
  (package
    (name "emacs-exiftool")
    (version "0.3.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.systemreboot.net/exiftool.el/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0bv58is66cz21yhc0qqkp1z4nk13zfi2l7i6pjbhyi0g1n88qqyv"))))
    (build-system emacs-build-system)
    (arguments
     `(#:test-command '("make" "-C" "tests")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'configure
           (lambda* (#:key inputs #:allow-other-keys)
             (make-file-writable "exiftool.el")
             (emacs-substitute-variables "exiftool.el"
               ("exiftool-executable"
                (search-input-file inputs "/bin/exiftool"))))))))
    (inputs
     (list perl-image-exiftool))
    (home-page "https://git.systemreboot.net/exiftool.el/about/")
    (synopsis "Elisp wrapper around ExifTool")
    (description "@code{emacs-exiftool} is an Elisp wrapper around ExifTool.
ExifTool supports reading and writing metadata in various formats including
EXIF, XMP and IPTC.")
    (license license:gpl3+)))

(define-public emacs-password-generator
  (package
    (name "emacs-password-generator")
    (version "1.01")
    (home-page "https://github.com/zargener/emacs-password-genarator")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit "904cdb591a04305ba882ce19e1d117f5fa60f7d3")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1qgvn79qz1h8ykm5i1qv2fja4v2y0g2i0n5sf7byhnqhqlwn63nv"))))
    (build-system emacs-build-system)
    (synopsis "Generate passwords inside Emacs")
    (description "@code{emacs-password-generator} provides simple functions to
generate random passwords and insert them into the current buffer.  It also
supports generation of phonetic and numeric passwords.")
    (license license:artistic2.0)))

(define-public emacs-qrencode
  (package
    (name "emacs-qrencode")
    (version "1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ruediger/qrencode-el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0yrshahci319lnjdpsksdy11a69k1n91qk9r2zfyhqmng09s6i0y"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command #~(list "emacs" "-Q" "--batch"
                                  "-l" "qrencode.el"
                                  "-l" "qrencode-tests.el"
                                  "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/ruediger/qrencode-el")
    (synopsis "QRCode encoder for Emacs in pure elisp")
    (description
     "This package provides two user facing interactive functions, that will encode
text into a QR Code and show it in a separate buffer.")
    (license license:gpl3+)))

(define-public emacs-quick-fasd
  (package
    (name "emacs-quick-fasd")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/jamescherti/quick-fasd.el/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1fsl6l67jf8fm5h6i5qxqvibzssbiyyjzchq3r5sbqry3d8yx3mk"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ;no tests
    (home-page "https://github.com/jamescherti/quick-fasd.el/")
    (synopsis "Navigate file system within Emacs by using @code{fasd}")
    (description
     "@code{quick-fasd} integrates the @code{fasd} tool within the Emacs
environment, providing fast access to frequently used files and directories.")
    (license license:gpl3+)))

(define-public emacs-quiet
  (package
    (name "emacs-quiet")
    (version "20230530.859")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://codeberg.org/zzkt/quiet.git")
              (commit
               "985b56606517971330c08686c49a8d06db763f3c")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0141z6acdffy96ghrwghzgqnv3mypvfkgci413dfaym4z80iwqdz"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))
    (home-page "https://codeberg.org/zzkt/quiet")
    (synopsis "Disconnect from the online world for a while")
    (description
     "Simple package to disconnect from the online world for a while,
possibly reconnecting later.  Any interruptions or distractions which occur
once the command is run are guaranteed to be local.")
    (license license:gpl3+)))

(define-public emacs-csv
  (package
    (name "emacs-csv")
    (version "2.1")
    (home-page "https://gitlab.com/u11/csv.el")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url home-page)
             (commit (string-append "V" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1vmazjrfcsa9aa9aw8bq5sazdhqvhxyj837dyw5lmh8gk7z0xdaa"))))
    (build-system emacs-build-system)
    (synopsis "Elisp functions for reading and parsing CSV files")
    (description
     "@code{csv.el} provides functions for reading and parsing @acronym{CSV,
Comma-Separated Values} files.  It follows the format as defined in RFC 4180
@emph{Common Format and MIME Type for CSV
Files} (@url{http://tools.ietf.org/html/rfc4180}).")
    (license license:gpl3+)))

(define-public emacs-org-journal
  (package
    (name "emacs-org-journal")
    (version "2.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bastibe/org-journal")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0vbafihx0p7prxkhssv32spz4kz0f0xglwyimz0lvh7nqqs83i50"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-L" "."
                             "-l" "tests/org-journal-test"
                             "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'disable-failing-tests
            (lambda _
              (let-syntax
                  ((disable-tests
                    (syntax-rules ()
                      ((_ file ())
                       (syntax-error "test names list must not be empty"))
                      ((_ file (test-name ...))
                       (substitute* file
                         (((string-append "^\\(ert-deftest " test-name ".*") all)
                          (string-append all "(skip-unless nil)\n")) ...)))))
                ;; These tests fail for unknown reasons (see:
                ;; https://github.com/bastibe/org-journal/issues/427).
                (disable-tests
                 "tests/org-journal-test.el"
                 ("org-journal-carryover-delete-empty-journal-test"
                  "org-journal-carryover-items-test"
                  "org-journal-scheduled-weekly-test"))))))))
    (home-page "https://github.com/bastibe/org-journal")
    (synopsis "Simple Org mode journaling mode")
    (description
     "Org Journal is a set of functions to maintain a simple personal diary /
journal using in Emacs, adapted from
@url{https://www.emacswiki.org/emacs/PersonalDiary}.  Convenient bindings
allow the creation of journal records in the current daily, weekly, monthly or
yearly file and search within all records or specified time intervals.  All
records can be browsed and searched from the Emacs Calendar for convenience.
All entries in a specified TODO state will be carried over to the next day.")
    (license license:bsd-3)))

(define-public emacs-org-static-blog
  (package
    (name "emacs-org-static-blog")
    (version "1.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/bastibe/org-static-blog")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1b07q89j153i7al78cg9pxaz93yk0qbdf4mwaalrwiqfkdbm5msn"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/bastibe/org-static-blog")
    (synopsis
     "Simple Org mode based static blog generator")
    (description
     "@code{emacs-org-static-blog} is one more static blog generator, it
focuses on being simple.  All files are simple Org files in a directory.  The
only requirement is that every Org file must have a @samp{title} and
a @samp{date} keywords, and optionally, a @samp{filetags} keyword.")
    (license license:bsd-3)))

(define-public emacs-weblorg
  (let ((commit "0db218bd6b2e083546d3a69a022dfb1a08900acd")
        (revision "0"))
    (package
      (name "emacs-weblorg")
      (version (git-version "0.1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacs-love/weblorg")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0fijrzc96p3jkq53i65bzhmxqyg28a49n21glkzb5b21agy0cdqh"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "--quick" "--batch"
                               "-l" "t/weblorg-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (propagated-inputs (list emacs-templatel))
      (home-page "https://emacs.love/weblorg/")
      (synopsis "Static site generator for Org mode")
      (description
       "Weblorg is a static site generator particularly suitable for blogs,
written in Emacs Lisp and with support for templates and themes.  It
requires no external dependencies.")
      (license license:gpl3+))))

(define-public emacs-ddskk
  (let ((commit "8c47f46e38a29a0f3eabcd524268d20573102467")
        (revision "0"))
    (package
      (name "emacs-ddskk")
      (version (git-version "17.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/skk-dev/ddskk")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vfdbab3ncns8wwrna8h6y2w0grkphzr9s65sgxq98lpqmxbbr72"))))
      (build-system gnu-build-system)
      (arguments
       (list #:modules '((guix build gnu-build-system)
                         (guix build utils)
                         (guix build emacs-utils))
             #:imported-modules `(,@%default-gnu-imported-modules
                                  (guix build emacs-utils))
             #:test-target "test"
             #:phases
             #~(modify-phases %standard-phases
                 (replace 'configure
                   (lambda _
                     (emacs-substitute-variables "SKK-MK"
                       ("PREFIX" #$output)
                       ("LISPDIR" '(expand-file-name "/share/emacs/site-lisp" PREFIX))
                       ("SKK_PREFIX" "")
                       ("SKK_INFODIR" '(expand-file-name "info" PREFIX)))))
                 (add-after 'unpack 'fix-test
                   (lambda _
                     (substitute* "Makefile"
                       (("/bin/rm") (which "rm")))
                     (substitute* "nicola/Makefile"
                       (("/bin/rm") (which "rm"))))))))
      (native-inputs
       (list emacs-minimal ruby))
      (home-page "https://github.com/skk-dev/ddskk")
      (synopsis "Simple Kana to Kanji conversion program")
      (description
       "Daredevil SKK is a version of @acronym{SKK, Simple Kana to Kanji
conversion program}, a Japanese input method on Emacs.")
      (license license:gpl2+))))

(define-public emacs-ddskk-nicola
  (package
    (inherit emacs-ddskk)
    (name "emacs-ddskk-nicola")
    (propagated-inputs
     (list emacs-ddskk))
    (arguments
     (append
      (list #:make-flags
            #~(append
                 (list (string-append "PREFIX=" #$output)
                       (string-append "LISPDIR=" #$output "/share/emacs/site-lisp")))
            ;; no tests in this subtree
            #:tests? #f)
      (substitute-keyword-arguments (package-arguments emacs-ddskk)
        ((#:phases phases)
         #~(modify-phases #$phases
             (add-after 'fix-test 'chdir
               (lambda _
                 (chdir "nicola")))
             (replace 'configure
               (lambda _
                 (emacs-substitute-sexps "NICOLA-DDSKK-CFG"
                   ("setq NICOLA-DDSKK_PREFIX" "")))))))))
    (synopsis "Nicola layout for Daredevil SKK")
    (description
     "Daredevil SKK is a version of @acronym{SKK, Simple Kana to Kanji
conversion program}, a Japanese input method on Emacs.  This package adds
support for the Nicola keyboard layout to it.")))

(define-public emacs-tamil99
  (package
    (name "emacs-tamil99")
    (version "0.1.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://git.systemreboot.net/tamil99/")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "12sr59b2ngay66snb2m4a5zy6n11ahnmc5wy42l3ks7fd4cc5rgs"))))
    (build-system emacs-build-system)
    (home-page "https://git.systemreboot.net/tamil99/about/")
    (synopsis "Tamil99 input method for Emacs")
    (description "This package implements the @code{tamil99} input method for
Emacs.  Tamil99 is a keyboard layout and input method that is specifically
designed for the Tamil language.  Vowels and vowel modifiers are input with
your left hand, and consonants are input with your right hand.")
    (license license:gpl3+)))

(define-public emacs-objed
  (package
    (name "emacs-objed")
    (version "0.8.3")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://elpa.gnu.org/packages/objed-" version ".tar"))
        (sha256
          (base32
            "1s38d6bvggdk5p45ww1jb4gxifzgjwgw1m6ar920nlg0j4fgbcvr"))))
    (build-system emacs-build-system)
    (arguments
     (list #:test-command
           #~(list "emacs" "-Q" "-batch"
                   "-l" "test/elpa.el" "-l" "test/make-test.el")))
    (home-page "https://github.com/clemera/objed")
    (synopsis "Navigate and edit text objects")
    (description
      "@code{emacs-objed} allows navigating and editing text objects.  It
enables modal editing and composition of commands, too.  It combines ideas of
other Editors like Vim or Kakoune and tries to align them with regular Emacs
conventions.")
    (license license:gpl3+)))

(define-public emacs-haskell-snippets
  ;; The commit below is 7 commits ahead of release, and includes a build fix.
  ;; And also a fix in one snippet.
  (let ((commit "1c29c4a68ce89848b8d371c6510d1de3b586c8b3"))
    (package
      (name "emacs-haskell-snippets")
      (version (git-version "0.1.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/haskell/haskell-snippets")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1lwnggarmavyf164cfzbzzkq9ffahhd3bz7gw644czs49sndcawf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'install 'install-snippets
              (lambda* (#:key outputs #:allow-other-keys)
                (let ((snippets
                       (string-append
                        (elpa-directory (assoc-ref outputs "out"))
                        "/snippets/haskell-mode")))
                  (mkdir-p snippets)
                  (copy-recursively "snippets/haskell-mode" snippets)))))))
      (propagated-inputs
       (list emacs-yasnippet))
      (home-page "https://github.com/haskell/haskell-snippets")
      (synopsis "Official collection of YASnippet Haskell snippets for Emacs")
      (description "Haskell-Snippets is a collection of YASnippet Haskell
snippets for Emacs.")
      (license license:expat))))

(define-public emacs-orca
  ;; XXX: Upstream did not tag any commit so far.  Base version is extracted
  ;; from Version keyword.
  (let ((commit "0687f416a5573f63b691d384454f5a793266ed97")
        (revision "0"))
    (package
      (name "emacs-orca")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/abo-abo/orca")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "00a363vkqvryw5s7pj0kh8pqq5vvbf1pmbzz0b1z1fckwr49sv0f"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-zoutline))
      (home-page "https://github.com/abo-abo/orca")
      (synopsis "Handler for Org Capture")
      (description
       "This package provides several convenient recipes for configuring Org
Capture, mainly for capturing from a browser.  It can match URLs and inject
the capture in a targeted Org file, under a targeted heading.  The more this
package is configured, the less refiling is needed on your captures: they will
go directly to where they belong.")
      (license license:gpl3+))))

(define-public emacs-org-roam
  (package
    (name "emacs-org-roam")
    (version "2.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/org-roam/org-roam")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0cl0f50din00hj541iskl5mxr8ijaf5pnpy6z7zvsam8l4gj8f73"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "ert-runner" "tests")
      #:phases
      #~(modify-phases %standard-phases
          ;; Move the extensions source files to the top level, which
          ;; is included in the EMACSLOADPATH.
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./extensions" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files))))
          (add-after 'move-source-files 'patch-exec-paths
            (lambda* (#:key inputs #:allow-other-keys)
              (make-file-writable "org-roam-graph.el")
              (emacs-substitute-variables "org-roam-graph.el"
                ("org-roam-graph-executable"
                 (search-input-file inputs "/bin/dot")))))
          (add-after 'install 'install-image
            (lambda _
              (install-file "doc/images/org-ref-citelink.png"
                            (string-append #$output "/share/info/images"))))
          (add-after 'unpack 'make-info
            (lambda _
              (invoke "make" "-C" "doc" "info")
              (copy-file "doc/org-roam.info" "org-roam.info"))))))
    (inputs
     (list graphviz))
    (native-inputs
     (list emacs-ert-runner texinfo))
    (propagated-inputs
     (list emacs-dash
           emacs-emacsql
           emacs-magit))
    (home-page "https://github.com/org-roam/org-roam/")
    (synopsis "Non-hierarchical note-taking with Org mode")
    (description "Emacs Org Roam is a solution for taking non-hierarchical
notes with Org mode.  Notes are captured without hierarchy and are connected
by tags.  Notes can be found and created quickly.  Org Roam should also work
as a plug-and-play solution for anyone already using Org mode for their
personal wiki.")
    (license license:gpl3+)))

(define-public emacs-org-node
  (package
    (name "emacs-org-node")
    (version "2.4.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/meedstrom/org-node/")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "03600cxy8dr2sd49d07v61izxpvdxgfyiangjzkbma4qdpbkmjgh"))))
    (build-system emacs-build-system)
    (arguments
     '(#:tests? #f ; fails
       #:test-command '("./makem.sh" "tests")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'dont-git
           (lambda _
             (substitute* "makem.sh"
               (("^cd.*\"")
                "")))))))
    (propagated-inputs
     (list emacs-el-job
           emacs-llama
           emacs-magit))
    ;; tests
    (native-inputs
     (list emacs-buttercup
           emacs-dash
           util-linux
           grep
           sed))
    (home-page "https://github.com/meedstrom/org-node/")
    (synopsis "Non-hierarchical note-taking with Org-mode, faster than
org-roam")
    (description "This package provides a notetaking system like Roam,
using org mode; faster than org-roam.")
    (license license:gpl3+)))

(define-public emacs-org-mem
  (package
    (name "emacs-org-mem")
    (version "0.23.2")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/meedstrom/org-mem/")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1yrax4qmaqczmpmqd4k19fbqh3lsnf36nc0k0dwya9gr9ibmls3f"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./lisp" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files))))
          (add-after 'unpack 'disable-failing-tests
            (lambda _
              (substitute* (find-files "test/" "\\.el$")
                (((string-append
                   "\\(ert-deftest "
                   "test-split-refs-field .*") all)
                 (string-append all "(skip-unless nil)\n"))))))))
    (native-inputs (list emacs-ert-runner))
    (propagated-inputs
     (list emacs-el-job emacs-llama))
    (synopsis "Org structure cache")
    (description "This package provides a cache of metadata about the
structure of all your Org files – headings, links and so on..")
    (home-page "https://github.com/meedstrom/org-node/")
    (license license:gpl3+)))

(define-public emacs-org-node-3
  (package
    (name "emacs-org-node")
    (version "3.9.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/meedstrom/org-node/")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0nvi1gjll8qlin2adv556wgd030rzjzdj6wpflldw16m87cff7x0"))))
    (build-system emacs-build-system)
    (arguments
     '(#:tests? #f ; fails
       #:test-command '("./makem.sh" "tests")
       #:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'dont-git
           (lambda _
             (substitute* "makem.sh"
               (("^cd.*\"")
                "")))))))
    (propagated-inputs
     (list emacs-llama
           emacs-magit
           emacs-org-mem))
    ;; tests
    (native-inputs
     (list emacs-buttercup
           emacs-dash
           util-linux
           grep
           sed))
    (home-page "https://github.com/meedstrom/org-node/")
    (synopsis "Non-hierarchical note-taking with Org-mode, faster than
org-roam")
    (description "This package provides a notetaking system like Roam,
using org mode; faster than org-roam.  This version of org-node has
different configuration options to org-node 2 so you DO have to set
it up again.")
    (license license:gpl3+)))

(define-public emacs-org-super-links
  (package
    (name "emacs-org-super-links")
    (version "0.4")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/toshism/org-super-links.git")
                     (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "025hlb8nqhn63y51ddjsclvyj9ys0bh4r0lycyc2jwpy9v79n10q"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-org))
    (synopsis "Create links with auto backlinks")
    (description "This package provides functions that automatically create
backlinks when inserting a link.")
    (home-page "https://github.com/toshism/org-super-links")
    (license license:gpl3+)))

(define-public emacs-org-roam-bibtex
  ;; Latest release from 3 years ago.
  (let ((commit "b065198f2c3bc2a47ae520acd2b1e00e7b0171e6")
        (revision "0"))
    (package
      (name "emacs-org-roam-bibtex")
      (version (git-version "0.6.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/org-roam/org-roam-bibtex")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1hywqrab07lpssc08aqpwa2asly92dhdn09ikx8jp0bi3l26wryy"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ;no tests
      (propagated-inputs
       (list emacs-helm-bibtex emacs-org-ref emacs-org-roam))
      (home-page "https://github.com/org-roam/org-roam-bibtex")
      (synopsis "Connector between Org Roam, BibTeX-completion, and Org Ref")
      (description
       "Org Roam BibTeX is a library which offers a tighter integration between
Org Roam, Helm-BibTeX, and Org Ref.  It allows users to access their
bibliographical notes in Org Roam directory via Helm BibTeX, Ivy BibTeX, or by
opening Org Ref's @code{cite:} links.")
      (license license:gpl3+))))

(define-public emacs-org-generate
  (package
    (name "emacs-org-generate")
    (version "1.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/conao3/org-generate.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0z2frp5mn3lp2xskwanw2rncrwa50x3aphy87vfxmhx4fqlqrzy8"))))
    (inputs
     (list emacs-cort emacs-with-simulated-input))
    (propagated-inputs
     (list emacs-mustache))
    (arguments
     ;; FIXME: Tests fail with "Wrong type argument: sequencep, :equal".  It
     ;; seems to be an issue with Cort library.
     `(#:tests? #f
       #:test-command '("emacs" "--batch" "--quick"
                        "--directory=." "--load=org-generate-tests.el"
                        "--funcall=cort-test-run")))
    (build-system emacs-build-system)
    (home-page "https://github.com/conao3/org-generate.el")
    (synopsis "Generate template files and folders from Org document")
    (description "This package generates files and folders from Emacs
org-mode templates.")
    (license license:gpl3+)))

(define-public emacs-org-glossary
  (let ((commit "1b9b7fd3d1e6c214c34463e568daaba6df00ec27")
        (revision "0"))
    (package
      (name "emacs-org-glossary")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://git.tecosaur.net/tec/org-glossary")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "09mg8aqxamnxx8kpdyk074wf2wkm4rx62z7q66azw70hjr1ggwa3"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'install 'makeinfo
              (lambda _ (emacs-makeinfo "org-glossary.org"))))))
      (native-inputs (list texinfo))
      (home-page "https://git.tecosaur.net/tec/org-glossary")
      (synopsis "Interact with glossary-like structures in Org documents")
      (description
       "Org Glossary defines a flexible model for working with glossary-like
constructs (glossaries, acronyms, indices, etc.) within Org documents, with
support for in-buffer highlighting of defined terms and high-quality exports
across all Org export back-ends.")
      (license license:gpl3+))))

(define-public emacs-org-gnosis
  (let ((commit "7db80112f08547ae4526f4ca645dbe6e224d27c6")) ;version bump
    (package
      (name "emacs-org-gnosis")
      (version "0.1.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://git.thanosapollo.org/org-gnosis")
                (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0y4qna0m5pdf2m53sac792rzsyp8lm7lfcl92981zwx3sqfy25gv"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (propagated-inputs (list emacs-compat emacs-emacsql))
      (home-page "https://thanosapollo.org/projects/org-gnosis/")
      (synopsis "Roam-like note taking system")
      (description
       "Org Gnosis is a knowledge management tool that leverages Org mode for
storing notes and journal entries, integrating them with an SQLite database
for efficient retrieval and relationship mapping.")
      (license license:gpl3+))))

(define-public emacs-uml-mode
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "4c37ac1c4424b2313cd8f16ba48a98a4cc214200")
        (revision "1"))
    (package
      (name "emacs-uml-mode")
      (version (git-version "0.0.4" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ianxm/emacs-uml")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "145i4srnfvd1vyibri2a1l6p9mbjvkkwlrpi41134pbarqffcnka"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/ianxm/emacs-uml")
      (synopsis "Minor mode for editing ASCII UML sequence diagrams")
      (description "Emacs UML mode is a minor mode that makes it easy to build
ASCII UML sequence diagrams in Emacs, which can be embedded in source code,
comments or emails.")
      (license license:gpl3+))))

(define-public emacs-sv-kalender-namnsdagar
  (let ((commit "31ef6ac82e448de3db1cf0c37df54581eb9b00f6")) ;versiom bump
    (package
      (name "emacs-sv-kalender-namnsdagar")
      (version "1.0")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/matsl/sv-kalender-namnsdagar")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1sv5p2f0i4zhfrh8pv39p5aaa9wnbzxkb58p9qslw7qli1wax2l0"))))
      (arguments
       (list #:tests? #false))            ;no tests
      (build-system emacs-build-system)
      (home-page "https://github.com/matsl/sv-kalender-namnsdagar")
      (synopsis "Swedish name day calendar")
      (description
       "This package provides the current day's name from the Swedish name
day calendar.  It is integrated with the Emacs calendar and diary.")
      (license license:gpl3+))))

(define-public emacs-ukrainian-holidays
  ;; There is no proper release.
  ;; The base version is extracted from the source code.
  (let ((revision "0")
        (commit  "e52b0c92843e9f4d0415a7ba3b8559785497d23d"))
    (package
      (name "emacs-ukrainian-holidays")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/abo-abo/ukrainian-holidays")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "033v4ck979lhkpwblci5clacfc1xnkq03p5d1m566wff8dp5flwz"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/abo-abo/ukrainian-holidays")
      (synopsis "Ukrainian holidays for Emacs calendar")
      (description
       "This package provides Ukrainian holidays for Emacs calendar.")
      (license license:gpl3+))))

(define-public emacs-trashed
  (package
    (name "emacs-trashed")
    (version "2.1.4")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/shingo256/trashed/")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "091c9b4glx7d5svwgr3jvqv1d8lw10mw4hvv4mq7kx1j54zmbnbf"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/shingo256/trashed/")
    (synopsis "View and edit system trash can in Emacs")
    (description "Open, view, browse, restore or permanently delete trashed
files or directories in trash can with Dired-like look and feel.  The trash
can has to be compliant with freedesktop.org.  In Emacs, you can trash files
by deleting them with @code{(setq delete-by-moving-to-trash t)}.  This package
provides a simple but convenient user interface to manage those trashed
files.")
    (license license:gpl3+)))

(define-public emacs-placeholder
  ;; No tags.
  (let ((commit "b80cb152ddd63db40cc581eafee9d2ac08328df8"))
    (package
      (name "emacs-placeholder")
      (version "0.1")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/oantolin/placeholder")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1ifiaxrp7inj70a3zf5137dih4b1sw38zmkp3h7dj79k2bv7h34h"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/oantolin/placeholder")
      (synopsis "Treat any buffer as a template with placeholders to fill-in")
      (description
       "This package provides a simple way to treat text in a buffer as a template
with placeholders where text needs to be filled in.  Any occurrence of
@code{<++>} in the buffer is a placeholder.  You can navigate among the
placeholder with the placeholder-forward and placeholder-backward commands.
They move the point to the next placeholder in the specified direction and
delete the placeholder so you can immediately start typing the text that
should replace it.  However, if you call them again immediately after, they
restore that occurrence of the placeholder and move to the next.")
      (license license:gpl3+))))

(define-public emacs-pddl-mode
  (package
    (name "emacs-pddl-mode")
    (version "0.100")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/emacsmirror/pddl-mode")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1zq5a0sv8am1c1gxky80dsi39gqsgnwbasv3nw4993r3ccz180r8"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/emacsmirror/pddl-mode")
    (synopsis "Emacs mode for PDDL files")
    (description "This package provides a major mode for browsing and editing
PDDL files with syntax highlighting, templates, auto-completion, and more.")
    (license license:gpl2+)))

(define-public emacs-plantuml-mode
  (package
    (name "emacs-plantuml-mode")
    (version "1.8.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skuro/plantuml-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1h68bfczpvbzi29ggl3dciiz5187px14xi2sz5pywwl84sg5x2b5"))))
    (arguments
     (list
      #:tests? #f  ; Unclear why tests fail.
      #:test-command #~(list "ert-runner")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'use-local-plantuml
            (lambda* (#:key inputs #:allow-other-keys)
              (symlink (search-input-file inputs "/bin/plantuml")
                       "bin/plantuml")
              (let ((file "plantuml-mode.el"))
                (chmod file #o644)
                (emacs-substitute-variables file
                  ("plantuml-jar-path"
                   (search-input-file inputs "/share/java/plantuml.jar"))
                  ("plantuml-executable-path"
                   (search-input-file inputs "/bin/plantuml"))
                  ("plantuml-server-url" 'nil)
                  ("plantuml-default-exec-mode" ''executable))
                (emacs-batch-edit-file file
                  `(progn (progn
                           (goto-char (point-min))
                           (re-search-forward "(defun plantuml-download-jar")
                           (beginning-of-line)
                           (kill-sexp))
                          (basic-save-buffer)))))))))
    (inputs (list plantuml))
    (native-inputs (list emacs-ert-runner icedtea))
    (propagated-inputs (list emacs-dash emacs-deflate))
    (build-system emacs-build-system)
    (home-page "https://github.com/skuro/plantuml-mode")
    (synopsis "Major mode for editing PlantUML sources")
    (description "This package provides a major mode for editing PlantUML
sources.  It features syntax highlighting, autocompletion, preview of buffer
or region and use of locally installed binaries.")
    (license license:gpl3+)))

(define-public emacs-execline
  (package
    (name "emacs-execline")
    (version "1.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/KAction/emacs-execline/")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "02q531c9wvdwflhggflnci4a36h2bb90bq25bbhw6i2lvrd9sk55"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s))
    (arguments
     `(;; XXX: Tests fail with error.
       ;; "Not enough arguments for format string"
       #:tests? #f
       #:test-command '("emacs" "-Q" "-batch" "-L" "."
                        "-l" "t/indent.el"
                        "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://gitlab.com/KAction/emacs-execline/")
    (synopsis "Major Emacs mode for editing execline scripts")
    (description
     "This package provides a major mode for editing execline scripts.

Features:
@itemize
@item Syntax highlighting of commends, builtin commands and variable substitution.
@item Completion of builtin commands.
@item Working @code{comment-region} command.
@item Indentation of blocks.
@item Automatic enable of mode in @file{*.exec} files.
@item Automatic enable of mode in files with @code{execlineb} interpreter.
@end itemize\n")
    (license license:gpl3+)))

(define-public emacs-pcmpl-args
  (package
    (name "emacs-pcmpl-args")
    (version "0.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/JonWaltman/pcmpl-args.el")
             (commit version)))
       (sha256
        (base32 "19xwwpfcf0l9jh7xixyjd5adivj27jw00zvxb7n1240k5p332pzi"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f)) ; No tests.
    (home-page "https://github.com/JonWaltman/pcmpl-args.el")
    (synopsis "Enhanced shell command completion")
    (description
     "pcmpl-args extends option and argument completion of shell commands read
by Emacs.  It is intended to make shell completion in Emacs comparable to the
rather excellent completion provided by both Bash and Zsh.")
    (license license:gpl3+)))

(define-public emacs-shell-command+
  (let ((commit "8388de44c488106a53913e7028b0e3f3859982bb")) ;version bump
    (package
      (name "emacs-shell-command+")
      (version "2.5.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                       (url "https://codeberg.org/pkal/shell-command-plus.el")
                       (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1mrik2cwz9fs6mqfry00nxlpk6ky02zgpwr7dh5n4fqlavjly4j2"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command #~(list "make" "test")))
      (home-page "https://elpa.gnu.org/packages/shell-command+.html")
      (synopsis "Extended Emacs @code{shell-command}")
      (description
       "Shell-command+ is a @code{shell-command} substitute that extends the
regular Emacs command with several features.  You can for example count all
the lines in a buffer with @code{> wc -l}, or delete all lower case letters in
the selected region with @code{| tr -d a-z}.")
      (license license:gpl3+))))

(define-public emacs-shell-pop
  (let ((commit "4b4394037940a890a313d715d203d9ead2d156a6")
        (revision "0"))
    (package
      (name "emacs-shell-pop")
      (version (git-version "0.64" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kyagi/shell-pop-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0s77n6b9iw1x3dv91ybkpgy3zvqd12si7zw3lg0m2b6j1akrawsg"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/kyagi/shell-pop-el")
      (synopsis "Utility which helps with pop up shell buffer")
      (description
       "This Emacs utility helps you pop up and pop out shell buffer window
easily.  Four pre-set options are: @samp{shell}, @samp{terminal},
@samp{ansi-term}, and @samp{eshell}.  You can also set your custom shell if
you use some other configuration.")
      (license license:gpl3+))))

(define-public emacs-shell-here
  (let ((commit "eeb437ff26d62a5009046b1b3b4503b768e3131a")
        (revision "1"))
    (package
      (name "emacs-shell-here")
      (version (git-version "1.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/shell-here.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0x8lnybxj7k6wj941lgqmm57f3qqnmb0gc7573l1fxwfhf39fl20"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/shell-here")
      (synopsis "Launch a shell relative to default-directory")
      (description
       "This package provides commands to open a shell buffer in (or relative
to) the default-directory or – using projectile or find-file-in-project – a
project root.")
      (license (list license:gpl3+)))))

(define-public emacs-hyperspace
  (let ((commit "f574d07fd8715e806ba4f0487b73c699963baed3")
        (revision "1"))
    (package
      (name "emacs-hyperspace")
      (version (git-version "0.8.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/hyperspace.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "19h3d12a99i7a92k3iw4zmjmw3dazsgnkc6j4965h033r1s40amx"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-s))
      (home-page "https://codeberg.org/emacs-weirdware/hyperspace")
      (synopsis "Get there from here")
      (description
       "Hyperspace is a way to get nearly anywhere from wherever
you are, whether that's within Emacs or on the web.  It's somewhere in between
Quicksilver and keyword URLs, giving you a single, consistent interface to get
directly where you want to go.  It’s for things that you use often, but not
often enough to justify a dedicated binding.")
      (license (list license:gpl3+)))))

(define-public emacs-nssh
  (let ((commit "74d43738565749af680e4d1388e0c2f88e93498d")
        (revision "1"))
    (package
      (name "emacs-nssh")
      (version (git-version "0.9.12" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://codeberg.org/emacs-weirdware/nssh.git")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0i2nnrg7xv7b2bbby6idszs9byk2jd83q7vqj6lxgn80w94i56nn"))))
      (build-system emacs-build-system)
      (home-page "https://codeberg.org/emacs-weirdware/nssh")
      (synopsis "SSH mode for Emacs")
      (description "This package provides an SSH mode for Emacs, built on
top of Tramp and shell mode.  It keeps a history of previously connected
hosts and supports auto-completion of known hosts.")
      (license (list license:gpl3+)))))

(define-public emacs-tshell
  ;; XXX: Upstream has no tagged release.  Version is extracted from keyword
  ;; in main file.
  (let ((commit "47ef3a6c537b06eb422d9a124e1c44062223e323")
        (revision "0"))
    (package
      (name "emacs-tshell")
      (version (git-version "0.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/TatriX/tshell")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0yv38bqdp6b614lbj4v408vv5mlic3vs1v7266xrfxm1cm903apj"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/TatriX/tshell")
      (synopsis "Experimental buffer-oriented Emacs shell")
      (description
       "Tshell is an experimental buffer-oriented shell.  It supports shell
and Emacs lisp commands.")
      (license license:gpl3+))))

(define-public emacs-extmap
  (package
    (name "emacs-extmap")
    (version "1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/doublep/extmap")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1djqvqxjhc8rzzcrwby2jwbj73q7m5368jv0b011dnnq11rinna4"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/doublep/extmap")
    (synopsis "Externally-stored constant mapping for Emacs Lisp")
    (description "Extmap is a very simple package that lets you build a
read-only, constant database that maps Emacs Lisp symbols to
arbitrary Emacs Lisp objects.")
    (license license:gpl3+)))

(define-public emacs-csound-mode
  ;; XXX: Upstream did not tag last release.  Using the commit matching
  ;; version bump.
  (let ((commit "44c49e5a9262ede4b4477bafb13b42b1ba047b9c"))
    (package
      (name "emacs-csound-mode")
      (version "0.2.3")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hlolli/csound-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0kfhca1n0iv1400jf4ggjbarg7ry8ccd5bs7cf2brjdiqp74cvwb"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'disable-breaking-compilation
              (lambda _
                (let ((file "csound-font-lock.el"))
                  (make-file-writable file)
                  (emacs-batch-disable-compilation file)))))))
      (propagated-inputs
       (list emacs-dash emacs-highlight emacs-multi emacs-shut-up))
      (home-page "https://github.com/hlolli/csound-mode")
      (synopsis "Emacs major mode for coding in CSound")
      (description "This package provides both a basic major mode for editing
CSound files, as well as a REPL for fast feedback when composing and
sound-designing using CSound.")
      (license license:gpl3+))))

(define-public emacs-multi
  (package
    (name "emacs-multi")
    (version "2.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kurisuwhyte/emacs-multi")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "11zabs7qpdhri6n90ck7pgwcbz46d813nyl73h5m1i8jvz1wzx7v"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/kurisuwhyte/emacs-multi")
    (synopsis "Clojure-style multi-methods for Emacs Lisp")
    (description "Provides Emacs Lisp with a form of polymorphism
by way of predicate dispatching.  Methods consist of a dispatch
function, and a series of branches.  The dispatch function is
applied to the arguments, and the result value is checked against
the expectations of each branch to define which one to invoke.")
    (license license:expat)))

(define-public emacs-highlight
  (let ((commit "24366dfd5062a6902a13a03d724fc099db3121b8")
        (revision "2"))
    (package
      (name "emacs-highlight")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/emacsmirror/highlight/")
               (commit commit)))
         (file-name (git-file-name name commit))
         (sha256
          (base32
           "17r7f4y6b05nq2pzaq8pwww0s6j64vd6fikyv7pliv1n74sljj0d"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/emacsmirror/highlight")
      (synopsis "Highlighting commands for GNU Emacs")
      (description "This library adds the possibility for ad-hoc
applying highlighting to any face in GNU Emacs.  The functionality
of this library depends on overlays, which by default are not
picked up when copy-pasting text from buffer to buffer.")
      (license license:gpl2+))))

(define-public emacs-org-webring
  (package
    (name "emacs-org-webring")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~brettgilio/org-webring")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1si0jah7n2gvlvghjy5dpannqpkxni5rczfp1x2a4z6ydalr3bn5"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'install 'install-assets
            (lambda _
              (copy-recursively
               "assets"
               (string-append #$output "/share/emacs/org-webring-assets")))))))
    (propagated-inputs
     (list emacs-xmlgen))
    (home-page "https://sr.ht/~brettgilio/org-webring")
    (synopsis "Generate webrings for Org-based sites / blogs")
    (description "Org-webring is an alternative implementation of a
feed-based webring, taking inspiration from openring by Drew DeVault.
Intended to integrate with Org-based websites and blogs (either
directly, or indirectly, as in ox-hugo), it will fetch a given list of
web feed files and correctly parse and format the elements to be
displayed for sharing.")
    (license license:gpl3+)))

(define-public emacs-orglink
  (package
    (name "emacs-orglink")
    (version "1.2.7")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tarsius/orglink")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0any5ff30v6qaf687hrga8x20wlpkf6ggqmnjdvxal0csnrnijbg"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/tarsius/orglink")
    (synopsis "Use Org mode links in other modes")
    (description "This library implements support for some Org mode link types
in other major modes.  Links can be opened and edited like in Org mode.")
    (license license:gpl3+)))

(define-public emacs-scpaste
  (package
    (name "emacs-scpaste")
    (version "0.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~technomancy/scpaste")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0hahk2m0cvky77h9p5zrfx0qcig4r3qyp9c1ji02kal64i9aib1s"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-htmlize))
    (home-page "https://git.sr.ht/~technomancy/scpaste")
    (synopsis "Emacs-based static HTML pastebin")
    (description "This library will place an HTML copy of a
buffer on an active webserver to which the user has SSH access.
It is similar in purpose to services such as Gist or Pastebin,
but is much simpler since it assumes the user has access to a
publicly-accessible HTTP server.")
    (license license:gpl3+)))

(define-public emacs-company-reftex
  (package
    (name "emacs-company-reftex")
    (version "0.1.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/TheBB/company-reftex")
             (commit "275ef708f08d3bf0eb30632148e5c6184eeaacdb")))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "118cgw5lsffqdqz95mnkw36mmnsbg9m52r2np4m7v14mjjwr9fby"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-company emacs-s))
    (home-page "https://github.com/TheBB/company-reftex")
    (synopsis "RefTeX backends for company-mode")
    (description "This package provides company-mode backends for completing
label references and citations in LaTeX.  It is based on RefTeX, which is
included with Emacs.")
    (license license:gpl3+)))

(define-public emacs-company-org-block
  (let ((commit "115af0a3625f4669358eca568466d468cacc78bd")
        (revision "1"))
    (package
      (name "emacs-company-org-block")
      (version (git-version "0.3" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/xenodium/company-org-block")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "13kdwi4d1pvba6wv9yn1s0dl4cnq61zwf3j647d1s5ybqlrw5f4r"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-company))
      (home-page "https://github.com/xenodium/company-org-block")
      (synopsis "Emacs @code{company-complete} for Org blocks")
      (description
       "Insert Emacs Org blocks with completion via @code{company} mode.")
      (license license:gpl3+))))

(define-public emacs-html-to-hiccup
  ;; Package has no release.  Version is extracted from "Version:" keyword in
  ;; main file.
  (let ((commit "50a52e2b0d13d865187acdf775b8203d5003f2f1")
        (revision "0"))
    (package
      (name "emacs-html-to-hiccup")
      (version (git-version "1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/plexus/html-to-hiccup")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1qi092mw2n08v6yr0j6hlpx0pnlcnhxjqbsrlw9pn4yin6zk91yp"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash emacs-s))
      (home-page "https://github.com/plexus/html-to-hiccup")
      (synopsis "Turn HTML into Hiccup syntax")
      (description
       "This is an Emacs package that turns HTML into Hiccup syntax
which is a popular notation to use when doing Clojure/ClojureScript
web development.")
      ;; There is a conflict between the repository official LICENSE
      ;; file and the header of the main elisp file which indicates
      ;; that it is licensed under the GPL version 3 or later.
      (license (list license:mpl2.0 license:gpl3+)))))

(define-public emacs-iter2
  (package
    (name "emacs-iter2")
    (version "2.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/doublep/iter2")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "09g2sa364g1s25q9a3d9kn6xs78rgpn6w2axkkd0qviakr290ilz"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/doublep/iter2")
    (synopsis "Reimplementation of Elisp generators")
    (description "@code{iter2} is a fully compatible reimplementation of
built-in generator package.  It provides @code{iter2-defun} and
@code{iter2-lambda} forms that can be used in place of @code{iter-defun} and
@code{iter-lambda}.  All other functions and macros (e.g. @code{iter-yield},
@code{iter-next}) are intentionally not duplicated: just use the ones from the
original package.")
    (license license:gpl3+)))

(define-public emacs-bind-map
  (let ((commit "510a24138d8de3b8df0783f1ac493a551fc9bd74")
        (revision "0"))
    (package
      (name "emacs-bind-map")
      (version (git-version "1.1.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/justbur/emacs-bind-map")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0crxjy1ykgb429z8ikjv5iy8vg5i0qn8n86p2lgri4glx45sxxx0"))))
      (build-system emacs-build-system)
      (arguments (list #:test-command
                       #~(list "emacs" "--batch" "-l" "bind-map-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")))
      (native-inputs (list emacs-evil))
      (home-page "https://github.com/justbur/emacs-bind-map")
      (synopsis "Bind personal keymaps in multiple locations")
      (description
       "@code{emacs-bind-map} provides a macro bind-map which can be used to
make a keymap available across different leader keys including ones
tied to evil states.  It is essentially a generalization of the idea
of a leader key as used in Vim or the @code{emacs-evil-leader} package,
and allows for an arbitrary number of leader keys.")
      (license license:gpl3+))))

(define-public emacs-binder
  (package
    (name "emacs-binder")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://codeberg.org/divyaranjan/binder")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        "1fdgl31zc15cysv1yys95j0106i2fwfxb3qcwwh7f3mcz2snr2md")))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))       ; no actual tests
    (home-page "https://codeberg.org/divyaranjan/binder")
    (synopsis
     "Binder is a global minor mode to facilitate working on multiple files")
    (description
     "Primarily, Binder provides a global minor mode Binder Mode.
This allows working with files in the current @code{binder-project-directory}.")
    (license license:gpl3+)))

(define-public emacs-spaceleader
  (let ((commit "5d88d120494623d6777d464ec40ff4bb7d6b1d57")
        (revision "1"))
    (package
      (name "emacs-spaceleader")
      (version (git-version "0.0.3" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/mohkale/spaceleader")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1prnjf7zs49z5a8qwhn8d0qnp60b3l0xhjkqg6v237acvk2axixr"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-dash
             emacs-general
             emacs-which-key
             emacs-use-package
             emacs-bind-map))
      (home-page "https://github.com/mohkale/spaceleader")
      (synopsis "Emacs leader key implementation from Spacemacs")
      (description
       "@code{emacs-spaceleader} replicates Spacemacs' leader key features,
without requiring all of Spacemacs.  The @code{<Leader>} key, inspired by Vim,
provides an easy way to bind keys under a configurable prefix key.")
      (license license:gpl3+))))

(define-public emacs-spacious-padding
  (package
    (name "emacs-spacious-padding")
    (version "0.7.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/protesilaos/spacious-padding/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "00mwzbvhzlvnhsbc5rki5cx08fnx4s7cmnlz8lqh534wmsmh3wf0"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f                       ;no tests
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'build-info-manual
            (lambda _
              (invoke "emacs"
                      "--batch"
                      "--eval=(require 'ox-texinfo)"
                      "--eval=(find-file \"README.org\")"
                      "--eval=(org-texinfo-export-to-info)"))))))
    (native-inputs (list texinfo))
    (home-page "https://github.com/protesilaos/spacious-padding")
    (synopsis "Increase the padding or spacing of frames and windows")
    (description
     "The Spacious Padding mode increases the space or padding around several
elements of the Emacs interface, such as window dividers, the internal frame
border, the padding of the mode line, and more.  The idea is to produce a more
comfortable presentation.")
    (license license:gpl3+)))

(define-public emacs-spamfilter
  (package
    (name "emacs-spamfilter")
    (version "1.13")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://web.archive.org/web/20190227001412/"
                    "http://www.geocities.co.jp/SiliconValley-PaloAlto/7043/"
                    "spamfilter-1.1.tar.gz"))
              (sha256
               (base32
                "1rd7wfn24bqlqlrrhq0d87vfhhcq09pnmrkkr7jpcnsls081a2iv"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f  ; No tests.
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'convert-encoding
            (lambda _
              (for-each
               (lambda (name)
                 (invoke "iconv" "-f" "EUC-JP" "-t" "UTF-8" name "-o" name))
               (find-files "." "\\.el")))))))
    (home-page
     (string-append
      "https://web.archive.org/web/20190326203214/"
      "http://www.geocities.co.jp/SiliconValley-PaloAlto/7043/"
      "index.html#spamfilter.el"))
    (synopsis "Bayesian spam filter")
    (description
     "This package provides a spam filtering library for Emacs MUAs.  It
supports Japanese and has the following features:

@itemize
@item Pure Emacs Lisp implementation.
@item Interactive process within the MUA.
@item Incremental corpus learning.
@item Three different methods for Japanese word segmentation.
@item Built-in support for @code{emacs-wanderlust} and @code{emacs-mew}.
@item @url{https://github.com/naota/navi2ch, Navi2ch} integration.
@end itemize\n")
    (license license:gpl2+)))

(define-deprecated-package emacs-spamfilter-el
  emacs-spamfilter)

(define-public emacs-promise
  ;; XXX: Last stable release fails to build with "(wrong-number-of-arguments
  ;; (3 . 4) 2)" error.
  (let ((commit "cec51feb5f957e8febe6325335cf57dc2db6be30")
        (revision "1"))
    (package
      (name "emacs-promise")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/chuntaro/emacs-promise")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1kxsdgg5byw9zddf8jkc3h87mb4k5pnjdpskaagkahc0xg3w18d7"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/chuntaro/emacs-promise")
      (synopsis "Promises/A+ for Emacs")
      (description "This is a simple implementation of Promises/A+.

This implementation ports the following Promises/A+ features faithfully.  See
@url{https://github.com/then/promise}.

The same API as the JavaScript version of Promise can be used.  It has all the
@code{then}, @code{catch}, @code{resolve}, @code{reject}, @code{all},
@code{race}, etc.  It also supports @code{thenable}, inheritance of promise
and rejection tracking.")
      (license license:gpl3+))))

(define-public emacs-async-await
  (package
    (name "emacs-async-await")
    (version "1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/chuntaro/emacs-async-await")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0aav9qdswnw7ynqlzn0sm34as5fj2d85syxgg8zjabzp6646ay29"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-promise emacs-iter2))
    (home-page "https://github.com/chuntaro/emacs-async-await")
    (synopsis "Async/Await for Emacs")
    (description "This is a simple implementation of Async/Await inspired by
the TypeScript implementation.")
    (license license:gpl3+)))

(define-public emacs-rocket-chat
  ;; No release.
  (let ((commit "96fe27a8678de5ae4061f635108a7192eee13f98"))
    (package
      (name "emacs-rocket-chat")
      (version (git-version "0.0.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/4hiziri/rocket-chat")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "02a4j0yy7330kfr3rd3k2agdj01ii6989nki598anbamq6xvj5ql"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-async-await emacs-request))
      (home-page "https://github.com/4hiziri/rocket-chat")
      (synopsis "Emacs Rocket.chat client")
      (description "This package provides an Emacs client for the Rocket.chat
service.")
      (license license:expat))))

(define-public emacs-lojban
  (let ((commit "d80bccd72cd46a3a6eeb57b765ec54081da55431")) ;initial commit
    (package
      (name "emacs-lojban")
      ;; XXX: Repository contains two Elisp files: "lojban.el" and
      ;; "lojban-mode.el". The former has version set to 0.23 and the latter
      ;; to 0.7. Choosing the higher one.
      (version "0.23")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rev22/lojban-mode.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1jm47kl6xqyymwy3dw6zgngf58xwm3mz0q2iiy9br6z66b3r5l5z"))))
      (build-system emacs-build-system)
      (home-page "https://www.emacswiki.org/emacs/LojbanMode")
      (synopsis "Emacs utilities for operating on Lojban text")
      (description
       "Lojban is an Emacs library of functions, variables, regexps and
interactive commands for handling Lojban text.")
      (license license:gpl2+))))

(define-public emacs-xonsh-mode
  ;; There is no tagged release yet.
  (let ((commit "7fa581524533a9b6b770426e4445e571a69e469d")
        (revision "0"))
    (package
      (name "emacs-xonsh-mode")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/seanfarley/xonsh-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0lfi2372clkkzi4a940fwparsfhxxzb7bmysfd50n1myakgldri5"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/seanfarley/xonsh-mode")
      (synopsis "Emacs major mode for editing Xonsh files")
      (description
       "This package implements a major mode for Xonsh scripts.  The basic
functionality includes syntax highlight for Xonsh operators.  Files with the
@file{.xonshrc} or @file{.xsh} extension are automatically opened with this
mode.")
      (license license:gpl3+))))

(define-public emacs-monokai-theme
  (package
    (name "emacs-monokai-theme")
    (version "3.5.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/oneKelvinSmith/monokai-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0dy8c3349j7fmp8052hbgvk0b7ldlv5jqpg0paq1i0hlypivd30i"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/oneKelvinSmith/monokai-emacs")
    (synopsis "High contrast color theme for Emacs")
    (description
     "Monokai theme is a port of the popular TextMate Monokai theme for
Emacs.")
    (license license:gpl3+)))

(define-public emacs-nord-theme
  (package
    (name "emacs-nord-theme")
    (version "0.6.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/arcticicestudio/nord-emacs")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gsfjb07mgmch3vw7wx4q1xhmagrkiqjx7k3529nsii5xd2rwmbn"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; no tests
    (home-page "https://www.nordtheme.com/")
    (synopsis "Low contrast arctic color theme for Emacs")
    (description
     "Nord is an arctic, north-bluish color scheme created for a clean and
uncluttered design pattern to achieve optimal focus and readability for code
syntax highlighting and UI components.")
    (license license:expat)))

(define-public emacs-weyland-yutani-theme
  (let ((commit "e89a63a62e071180c9cdd9067679fadc3f7bf796")
        (revision "0"))
    (package
      (name "emacs-weyland-yutani-theme")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/jstaursky/weyland-yutani-theme")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0gxlz9b7fvbjkqxsyb4l75g7jsxyms0i1vpnb6y499hl115akcaz"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/jstaursky/weyland-yutani-theme")
      (synopsis "Emacs theme based on the Alien movie franchise")
      (description
       "Weyland Yutani is a dark Emacs theme based on the Alien movie
franchise.")
      (license license:gpl3+))))

(define-public emacs-janet-mode
  (let ((commit "2f5bcabcb6953e1ed1926ba6a2328c453e8b4ac7"))
    (package
      (name "emacs-janet-mode")
      (version (git-version "0.1.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ALSchwalm/janet-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0qj0gpycv2f3z1dgz1a27bjn983hrr3ppvrp7csl34lagnmp89rz"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/ALSchwalm/janet-mode")
      (synopsis "Emacs major mode for the Janet programming language")
      (description
       "This package provides an Emacs major mode for editing Janet files.")
      (license license:gpl3))))

(define-public emacs-inf-janet
  (let ((commit "df46651d3aad32593b2195c80ca91fb64d571fb7"))
    (package
      (name "emacs-inf-janet")
      (version (git-version "0.1.0" "1" commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/velkyel/inf-janet")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0g0y7q62667j0p32md1h6zb2cap9fga9qgdg7138xwjqnk0328v7"))))
      (build-system emacs-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'fix-program-name
             (lambda _
               (make-file-writable "inf-janet.el")
               (emacs-substitute-variables "inf-janet.el"
                 ("inf-janet-program" "janet")))))))
      (propagated-inputs
       (list emacs-janet-mode))
      (home-page "https://github.com/velkyel/inf-janet")
      (synopsis "Run an external Janet process in an Emacs buffer")
      (description
       "This Emacs package provides a Janet REPL to evaluate @code{janet-mode}
s-expression.")
      (license license:expat))))

(define-public emacs-map
  (package
    (name "emacs-map")
    (version "3.3.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/map-"
                           version ".tar"))
       (sha256
        (base32
         "1gvywhdfg27nx6pyq7yfwq9x6j96jama59i5s9rp41pvg2dlmvm0"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/map.html")
    (synopsis "Map manipulation functions")
    (description "This package provides Emacs map-manipulation functions that
work on alists, hash-table and arrays.  All functions are prefixed with
@code{map-}.")
    (license license:gpl3+)))

(define-public emacs-xref
  (package
    (name "emacs-xref")
    (version "1.7.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/xref-"
                           version ".tar"))
       (sha256
        (base32 "0jy49zrkqiqg9131k24y6nyjnq2am4dwwdrqmginrrwzvi3y9d24"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/xref.html")
    (synopsis "Cross-referencing commands")
    (description
     "This library provides a generic infrastructure for cross referencing
commands, in particular @code{find-definition}.")
    (license license:gpl3+)))

(define-public emacs-xref-union
  (package
    (name "emacs-xref-union")
    (version "0.2.0")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/xref-union-"
                           version ".tar"))
       (sha256
        (base32
         "0ghhasqs0xq2i576fp97qx6x3h940kgyp76a49gj5cdmig8kyfi8"))))
    (build-system emacs-build-system)
    (home-page "https://elpa.gnu.org/packages/xref-union.html")
    (synopsis "Combine multiple Xref backends")
    (description
     "This package provides a way to combine multiple Xref source
(e.g., Etags and Eglot) and have the results all at once.")
    (license license:gpl3+)))

(define-public emacs-burly
  (package
    (name "emacs-burly")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/alphapapa/burly.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "04qqxwb6pavgvis0irfg4s5rj2j5zja6gp78inb67fbvb0g4h84c"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-map))
    (home-page "https://github.com/alphapapa/burly.el")
    (synopsis "Save and restore frame/window configurations with buffers")
    (description "This package provides tools to save and restore frame and
window configurations in Emacs, including buffers that may not be live
anymore.  In this way, it's like a lightweight \"workspace\" manager, allowing
you to easily restore one or more frames, including their windows, the
windows' layout, and their buffers.")
    (license license:gpl3+)))

(define-public emacs-smart-hungry-delete
  (let ((commit "7c1d56a92481594e14d40b5fdf6c48657a0108a0"))
    (package
      (name "emacs-smart-hungry-delete")
      (version "0.1")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hrehfeld/emacs-smart-hungry-delete")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0mxaslx5823s68a8ggbbnmfk1jiswjvip5s4sg7ihfagnci72wni"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/hrehfeld/emacs-smart-hungry-delete")
      (synopsis "Smart hungry deletion of whitespace")
      (description "@code{emacs-smart-hungry-delete} hungrily deletes whitespace
between cursor and next word, parenthesis or delimiter while honoring some
rules about where space should be left to separate words and parentheses.")
      (license license:gpl2+))))

(define-public emacs-seriestracker
  (package
    (name "emacs-seriestracker")
    (version "1.3.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/MaximeWack/seriesTracker")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0gfm7ss3bwj3m2y1mb4sdmsv85mjnpkgmzasa3yfj69zbq46glhn"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/MaximeWack/seriesTracker")
    (synopsis "Keep track of the TV shows you watch from Emacs")
    (description
     "This package provides a major mode for tracking TV shows.
TV shows data (episode list, release dates, etc.) are sourced from
the free database hosted at @url{episodate.com}.  The mode presents an
outlined list of tracked shows, their episodes and release dates, and
enables the user to see when new episodes for their favorite shows get
released, and track their progress in watching a series.")
    (license license:gpl3+)))

(define-public emacs-webpaste
  (let ((commit "8ac7b2d409f158bcaa853aa1c5763e8acf2857bb")
        (revision "1"))
    (package
      (name "emacs-webpaste")
      (version (git-version "3.2.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/etu/webpaste.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1wl2q4q7c2a1m60q4dnajsyzkc9yprkyzx4hxzmxkwry22k906x3"))))
      (build-system emacs-build-system)
      (arguments
       `(#:test-command '("make" "unit" "integration")
         #:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'fix-tests
             (lambda _
               ;; Do not use cask to run tests.
               (substitute* "Makefile"
                 (("\\$\\{CASK\\} exec ") ""))
               ;; Disable tests that need network access.
               (substitute* (list "tests/unit/test-webpaste-provider-creation.el"
                                  "tests/integration/test-webpaste-providers.el")
                 (("describe") "xdescribe"))
               (emacs-batch-edit-file "tests/integration/test-webpaste-providers.el"
                 '(progn
                   (insert ";;; -*-lexical-binding:t -*-\n")
                   (basic-save-buffer))))))))
      (native-inputs
       (list emacs-buttercup))
      (propagated-inputs
       (list emacs-request))
      (home-page "https://github.com/etu/webpaste.el")
      (synopsis "Paste to pastebin-like services")
      (description "This mode pastes whole buffers or parts of buffers
to pastebin-like services.  It supports more than one service and will
failover if one service fails.  More services can easily be added over time
and preferred services can easily be configured.")
      (license license:gpl3+))))

(define-public emacs-keystore-mode
  (let ((release "0.0.1")
        (revision "0")
        (commit "43bd5926348298d077c7221f37902c990df3f951"))
    (package
      (name "emacs-keystore-mode")
      (version (git-version release revision commit))
      (home-page "https://github.com/peterpaul/keystore-mode")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "06cznkqkm04zz5lqfb514aqvsr2p13arzysixv0ss0bqpvdq7cv7"))))
      (build-system emacs-build-system)
      (arguments
       (list #:test-command
             #~(list "emacs" "--no-init-file" "--batch"
                     "--eval=(require 'ecukes)" "--eval=(ecukes)")))
      (native-inputs
       (list emacs-ecukes emacs-espuds emacs-undercover openjdk9))
      (propagated-inputs
       (list emacs-origami emacs-s))
      (synopsis "Major mode for viewing and managing Java keystores")
      (description
       "This package provides an Elisp wrapper around the Java
@command{keytool} command and major mode for viewing Java keystores.")
      (license license:expat))))

(define-public emacs-ivy-avy
  (package
    (name "emacs-ivy-avy")
    (version "0.15.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/"
             "ivy-avy-" version ".tar"))
       (sha256
        (base32 "0csysx22sf3bbfh000c2m48rzfn274km0zxbfbcx2871haskwva1"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy emacs-avy))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Avy integration for Ivy")
    (description
     "This package adds a \"C-'\" binding to Ivy minibuffer that uses Avy.")
    (license license:gpl3+)))

(define-public emacs-vertico
  (package
    (name "emacs-vertico")
    (version "2.5")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/vertico")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1cc7myy92sc6rks0fp0916cbgfdh5ars0z918cpyfrm0pkingq7x"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:tests? #f ; There are no tests.
      #:phases
      #~(modify-phases %standard-phases
          ;; Move the extensions source files to the top level, which is
          ;; included in the EMACSLOADPATH.
          (add-after 'unpack 'move-source-files
            (lambda _
              (let ((el-files (find-files "./extensions" ".*\\.el$")))
                (for-each (lambda (f)
                            (rename-file f (basename f)))
                          el-files))))
          (add-after 'move-source-files 'makeinfo
            (lambda _ (emacs-makeinfo))))))
    (native-inputs
     (list texinfo))
    (propagated-inputs
     (list emacs-compat))
    (home-page "https://github.com/minad/vertico")
    (synopsis "Vertical interactive completion")
    (description
     "Vertico provides a minimalistic vertical completion UI, which is based
on Emacs' default completion system.  By reusing the default system, it
achieves full compatibility with built-in Emacs commands and completion
tables.  Vertico is pretty bare-bone and only provides a minimal set of
commands.  Additional optional enhancements can be provided externally by
complementary packages.")
    (license license:gpl3+)))

(define-public emacs-wisp-mode
  (package
    (name "emacs-wisp-mode")
    (version "1.0.12")
    (source
     (origin
       (method hg-fetch)
       (uri (hg-reference
             (url "https://hg.sr.ht/~arnebab/wisp")
             (changeset (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0m5ssl4ngk2jl1zk0fnsss0asyvwanjaa5rrcksldqnh2ikcr4bm"))))
    (build-system emacs-build-system)
    (home-page "https://www.draketo.de/software/wisp")
    (synopsis "Syntax highlighting and indentation support for Wisp files")
    (description
     "This package provides @code{wisp-mode}, an Emacs major mode for Wisp
files, providing syntax highlighting and indentation rules.")
    (license license:gpl3+)))

(define-public emacs-ivy-hydra
  (package
    (name "emacs-ivy-hydra")
    (version "0.15.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append
             "https://elpa.gnu.org/packages/"
             "ivy-hydra-" version ".tar"))
       (sha256
        (base32 "16z3ic50zbx9iaw0w6fv04cxpl6qz81424jdian1br1942pz3kdy"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-ivy emacs-hydra))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Additional key bindings for Ivy")
    (description
     "This package provides the @command{hydra-ivy/body} command, which is a
quasi-prefix map, with many useful bindings.  These bindings are shorter than
usual, using mostly unprefixed keys.")
    (license license:gpl3+)))

(define-public emacs-cwl-mode
  (package
    (name "emacs-cwl-mode")
    (version "0.2.6")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/tom-tan/cwl-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0507acyr9h4646scx316niq27vir6hl2gsgz7wdbiw0cb2drfkd1"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-yaml-mode))
    (home-page "https://github.com/tom-tan/cwl-mode")
    (synopsis "Emacs mode for @acronym{CWL, Common Workflow Language} files")
    (description "This package provides a major mode for editing
@acronym{CWL, Common Workflow Language} files.")
    (license license:gpl3+)))

(define-public emacs-dictionary
  (package
    (name "emacs-dictionary")
    (version "1.11")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/myrkr/dictionary-el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0zsjbpq0s0xdxd9r541f04bj1khhgzhdlzr0m4p17zjh1zardbpi"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://www.myrkr.in-berlin.de/dictionary/index.html")
    (synopsis "Emacs client for dictionary servers")
    (description "This package provides commands for interacting with a
dictionary server (as defined by RFC 2229; by default, the public server at
dict.org) from within Emacs.")
    (license license:gpl2+)))

(define-public emacs-multitran
  (package
    (name "emacs-multitran")
    (version "0.4.16")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/zevlg/multitran.el")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0zjl7zyydx2pan2ashbwbp70nlmw17hq5w03sfk12wi7j1nihwbz"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f))      ; no tests
    (home-page "https://github.com/zevlg/multitran.el")
    (synopsis "Emacs interface to the multitran.com online dictionary")
    (description "@code{emacs-multitran} is a zero-dependency Emacs interface
to the @url{https://multitran.com} online dictionary.")
    (license license:gpl3+)))

(define-public emacs-lexic
  (let ((commit "f9b3de4d9c2dd1ce5022383e1a504b87bf7d1b09")
        (revision "0"))
    (package
      (name "emacs-lexic")
      (version (git-version "0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.tecosaur.net/tec/lexic")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "02iz8dh18gb1q97v8ghcd3lavkf28sqbrk0bx6jzzryp69ickk4h"))))
      (build-system emacs-build-system)
      (inputs (list sdcv))
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'set-sdcv-path
             (lambda* (#:key inputs outputs #:allow-other-keys)
               (emacs-substitute-variables "lexic.el"
                 ("lexic-program-path"
                  (string-append (assoc-ref inputs "sdcv")
                                 "/bin/sdcv"))))))))
      (home-page "https://git.tecosaur.net/tec/lexic")
      (synopsis "Find out more about words using Stardict dictionaries")
      (description "This provides a major mode to view the output of
dictionary tools, and utilities that perform searches and nicely format the
results.  Currently tied to sdcv, but this is intended to be changed in the
future.")
      (license license:gpl3+))))

(define-public emacs-blacken
  (package
    (name "emacs-blacken")
    (version "0.2.0")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/pythonic-emacs/blacken")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0pf9yllx0h78m925sdrg6hbv54ky2pi7cpkdsnx891qjsahvjnpy"))))
    (build-system emacs-build-system)
    (inputs
      (list python-black))
    (arguments
      `(#:phases
         (modify-phases %standard-phases
           (add-after 'unpack 'patch-python-black
             (lambda* (#:key inputs #:allow-other-keys)
               (make-file-writable "blacken.el")
               (emacs-substitute-variables "blacken.el"
                 ("blacken-executable"
                   (search-input-file inputs "/bin/black"))))))))
    (home-page "https://github.com/pythonic-emacs/blacken")
    (synopsis "Python Black for Emacs")
    (description
"Use the @command{python} @command{black} package to reformat
@command{python} buffers.")
    (license license:gpl3)))

(define-public emacs-code-cells
  ;; XXX: Upstream does not tag releases.  The commit below matches version
  ;; bump.
  (let ((commit "caffb420be106cebbdfe4474ed0507a601603f83"))
    (package
      (name "emacs-code-cells")
      (version "0.5")
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/astoff/code-cells.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0ba5125pq0im27rl964il78543n56jm88129zv05dfq6pv7fkplv"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/astoff/code-cells.el")
      (synopsis "Emacs utilities for code split into cells, including Jupyter
notebooks")
      (description "This package lets you efficiently navigate, edit and
execute code split into cells according to certain magic comments.")
      (license license:gpl3+))))

(define-public emacs-ein
  ;; XXX: Upstream doesn't make any release, and didn't set any version.
  (let ((commit "998ba22660be2035cd23bed1555e47748c4da8a2"))
    (package
      (name "emacs-ein")
      (version "20230826")
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/millejoh/emacs-ipython-notebook")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "09qbswzz6kbxc74dmdgagrk5wgbm89sabf0bfy76j4qlcg6550mx"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "-Q" "--batch"
                "-L" "test"
                "--load" "test/testein-loader.el")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'move-source-files
              (lambda _
                (let ((el-files (find-files "./lisp" ".*\\.el$")))
                  (for-each (lambda (f)
                              (rename-file f (basename f)))
                            el-files)))))))
      (native-inputs
       (list emacs-f emacs-mocker))
      (propagated-inputs
       (list emacs-anaphora
             emacs-dash
             emacs-deferred
             emacs-polymode
             emacs-request
             emacs-websocket
             emacs-with-editor))
      (home-page "https://github.com/millejoh/emacs-ipython-notebook")
      (synopsis "Jupyter client for all languages")
      (description
       "The Emacs IPython Notebook (EIN) package provides a Jupyter Notebook
client and integrated REPL (like SLIME) in Emacs.  EIN improves notebook
editing by allowing you to use Emacs.  It also expose IPython features such as
code evaluation, object inspection and code completion.  These features can be
accessed anywhere in Emacs and improve Python code editing and reading in
general in Emacs.")
      (license license:gpl3+))))

(define-public emacs-kibit-helper
  (package
    (name "emacs-kibit-helper")
    (version "0.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/brunchboy/kibit-helper")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ky167xh1hrmqsldybzjhyqjizgjzs1grn5mf8sm2j9qwcvjw2zv"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-s))
    (home-page "http://www.github.com/brunchboy/kibit-helper")
    (synopsis "Use the Kibit Leiningen plugin from Emacs")
    (description
     "Kibit Helper provides functions to work with the Kibit Leiningen plugin
for detecting and improve non-idiomatic Clojure source code.")
    (license license:gpl3+)))

(define-public emacs-mint-mode
  (package
    (name "emacs-mint-mode")
    (version "2.0.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/creatorrr/emacs-mint-mode")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0fwxhkkhvbwdxrg9j9pjgkh864fa8rvc6dcr46a69spyjja3rw90"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/creatorrr/emacs-mint-mode")
    (synopsis "Major mode for Mint language")
    (description "Mint mode provides syntax highlighting for Mint language.")
    (license license:gpl3+)))

(define-public emacs-seeing-is-believing
  (let ((version "1.2.0") ; from .el file
        (commit "fbbe246c0fda87bb26227bb826eebadb418a220f")
        (revision "0"))
    (package
      (name "emacs-seeing-is-believing")
      (home-page "https://github.com/jcinnamond/seeing-is-believing")
      (version (git-version version revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url home-page)
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "1h1b48s2iirswdlvfz41jbflm4x09ksc2lycrc1awzlwd6r8hdhg"))))
      (build-system emacs-build-system)
      (synopsis
       "Minor mode for running the seeing-is-believing Ruby gem")
      (description
       "@uref{https://github.com/JoshCheek/seeing_is_believing,Seeing Is
Believing} is a ruby gem to evaluate Ruby code, recording the results of each
line.  This minor mode provides an easy way to run it from Emacs on the
current region or entire buffer.")
      (license license:gpl3+))))

(define-public emacs-discover
  (package
    (name "emacs-discover")
    (version "0.3")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://github.com/mickeynp/discover.el")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "0qxw30zrlcxhxb0alrgyiclrk44dysal8xsbz2mvgrb6jli8wg18"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-makey))
    (home-page "https://github.com/mickeynp/discover.el")
    (synopsis "Discover more of Emacs using context menus")
    (description
     "Discover adds context menus to commonly-used features in Emacs.")
    (license license:gpl3+)))

(define-public emacs-nasm-mode
  (package
    (name "emacs-nasm-mode")
    (version "1.1.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/skeeto/nasm-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "1dyc50a1zskx9fqxl2iy2x74f3bkb2ccz908v0aj13rqfqqnns9j"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/skeeto/nasm-mode")
    (synopsis "NASM x86 assembly major mode")
    (description
     "NASM mode is a major mode for editing NASM x86 assembly programs.
It includes syntax highlighting, automatic indentation, and imenu integration.
Unlike Emacs' generic ASM mode, it understands NASM-specific syntax.")
    (license license:unlicense)))

(define-public emacs-riscv-mode
  (let ((commit "8e335b9c93de93ed8dd063d702b0f5ad48eef6d7")
        (revision "1"))
    (package
      (name "emacs-riscv-mode")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/AdamNiederer/riscv-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "06jlf84mx49scw3zm1wjj25zinr2yr9abiyh83rli78wb1hdc0l4"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'hardcode-spike
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "riscv-mode.el"
                  ("riscv-interpreter"
                   (search-input-file inputs "/bin/spike"))))))))
      (inputs (list spike))
      (home-page "https://github.com/AdamNiederer/riscv-mode")
      (synopsis "Emacs major mode for RISC-V assembly")
      (description
       "RISC-V mode is a major mode for editing RISC-V assembly programs.
It includes syntax highlighting, syntactic indentation and code evaluation
with spike.")
      (license license:gpl3+))))

(define-public emacs-validate-html
  ;; XXX: Upstream did not tag commits yet.  However, commit below matches the
  ;; last version bump.  Version is extracted from the keyword in main file.
  (let ((commit "748e874d50c3a95c61590ae293778e26de05c5f9"))
    (package
      (name "emacs-validate-html")
      (version "1.3")
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/arthurgleckler/validate-html")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0b2b5dm85jwgkqvga23r3vfya07vxv2n7a3a6r1pxpk8asqlw41c"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/arthurgleckler/validate-html")
      (synopsis "Run the W3C HTML Validator directly from Emacs")
      (description
       "@command{emacs-validate-html} installs the command @code{validate-html},
which sends the current buffer to the World Wide Web Consortium’s HTML
Validator service and displays the results in a buffer in Compilation mode.")
      (license license:gpl3+))))

(define-public emacs-volatile-highlights
  (package
    (name "emacs-volatile-highlights")
    (version "1.20")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "http://github.com/k-talo/volatile-highlights.el")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1cljb6vs0c0gffby41cw85jxdvbqnykdz0b3fr08y9nwbhnsiq6w"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/k-talo/volatile-highlights.el")
    (synopsis "Emacs minor mode for visual feedback on some operations")
    (description "@code{volatile-highlights-mode} brings visual feedback to
some operations by highlighting portions relating to the operations.  All of
highlights made by this library will be removed when any new operation is
executed.")
    (license license:gpl3+)))

(define-public emacs-global-tags
  (let ((commit "06db25d91cc8bfb5e24e02adc04de1226c7e742d")
        (revision "0"))
    (package
      (name "emacs-global-tags")
      (version (git-version "0.7" revision commit))
      (home-page "https://git.launchpad.net/global-tags.el/")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1q30cbqq0h1gfwlcbnx9s930li7w7a0y8sx2ivbvvyyc2j5gsk4j"))
                (modules '((guix build utils)))
                (snippet
                 #~(begin
                     (substitute* "global-tags.el"
                       (("\\(require 'cl-lib\\)" all)
                        (string-append all "(require 'eieio)")))))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; XXX: 18/24 test failures
      (propagated-inputs
       (list emacs-async emacs-ht))
      (native-inputs (list emacs-buttercup
                           emacs-f))
      (synopsis "Testeable Emacs Lisp API that wraps around GNU Global")
      (description "This package provides a testeable Emacs Lisp API that
wraps GNU Global calls and integration to editor using this API with
project.el and xref.el.")
      (license license:gpl3+))))

(define-public emacs-citre
  (package
    (name "emacs-citre")
    (version "0.4.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/universal-ctags/citre/")
             (commit (string-append "v" version))))
       (sha256
        (base32 "1x5kxlzhzr2x4cszcqaxcg2lc71nwmmfnm2vzx7iz7h74hn4f1ld"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      ;; Note: "check" also enforces a style that is broken by our
      ;; ‘set-external-programs’ phase.
      #:test-command #~(list "make" "test")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'set-external-programs
            (lambda* (#:key inputs #:allow-other-keys)
              (emacs-substitute-variables "citre-ctags.el"
                ("citre-ctags-program"
                 ;; XXX: Do not use SEARCH-INPUT-FILE in this place, for it
                 ;; will get ctags of emacs-minimal instead of
                 ;; universal-ctags.
                 (string-append #$(this-package-input "universal-ctags")
                                "/bin/ctags")))
              (emacs-substitute-variables "citre-readtags.el"
                ("citre-readtags-program"
                 (search-input-file inputs "/bin/readtags")))
              (emacs-substitute-variables "citre-global.el"
                ("citre-gtags-program"
                 (search-input-file inputs "/bin/gtags")))
              (emacs-substitute-variables "citre-global.el"
                ("citre-global-program"
                 (search-input-file inputs "/bin/global"))))))))
    (inputs (list global universal-ctags))
    (home-page "https://github.com/universal-ctags/citre")
    (synopsis "Ctags IDE on Emacs")
    (description
     "Citre is an advanced Ctags (or actually, readtags) frontend for
Emacs.  It offers Completion At Point, Xref and Imenu integration.  It also
provides a Completing Read UI for jumping to definition and a powerful code
reading tool that lets you go down the rabbit hole without leaving current
buffer.")
    (license license:gpl3+)))

(define-public emacs-setup
  (package
    (name "emacs-setup")
    (version "1.5.0")
    (source
      (origin
        (method url-fetch)
        (uri (string-append "https://elpa.gnu.org/packages/setup-"
                            version ".tar"))
        (sha256
          (base32 "184g3kd9caxyhwq41w94spkjs1j45vblg4sqfb5h5pqb5h9p95n5"))))
    (build-system emacs-build-system)
    (home-page "https://git.sr.ht/~pkal/setup")
    (synopsis "Helpful configuration macro")
    (description
"The @code{setup} macro simplifies repetitive configuration patterns, by
providing context-sensitive local macros in @code{setup} bodies.  These macros
can be mixed with regular elisp code without any issues, allowing for
flexible and terse configurations.  The list of local macros can be
extended by the user via @code{setup-define}.  A list of currently known
local macros are documented in the docstring for @code{setup}.")
    (license license:gpl3+)))

(define-public emacs-tomelr
  (package
    (name "emacs-tomelr")
    (version "0.4.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/kaushalmodi/tomelr/")
             (commit (string-append "v" version))))
       (sha256
        (base32 "03iih7arjlfg8gdp4v2xglas9z519q1s11l28igr8l0m5y0pdrnk"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command
      #~(list "emacs" "--batch" "-L" "test" "-l" "all-tests.el"
              "-f" "ert-run-tests-batch-and-exit")
      #:phases
      #~(modify-phases %standard-phases
          (add-before 'check 'patch-tests
            (lambda _
              (setenv "HOME" (dirname (getcwd)))
              (substitute* "test/all-tests.el"
                (("\\(file-truename \\(vc-git-root default-directory\\)\\)")
                 (format #f "~s" (getcwd)))))))))
    (propagated-inputs (list emacs-map))
    (home-page "https://github.com/kaushalmodi/tomelr/")
    (synopsis "Emacs-Lisp library for converting S-expressions to TOML")
    (description
     "This package provides the @code{tomelr-encode} function to convert a Lisp
data expression in Alist or Plist format to a TOML string.")
    (license license:gpl3+)))

(define-public emacs-ed-mode
  ;; XXX: Upstream did not tag any commits yet.
  (let ((commit "69f4fb34eca8df6a3bfe24bd8d8075551f0264ac")
        (revision "0"))
    (package
      (name "emacs-ed-mode")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/ryanprior/ed-mode")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "058siccx6znw1bcp820bll0jg300xz8w1wf97zr1fa6jwfxyhhvi"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/ryanprior/ed-mode")
      (synopsis "Emacs ed emulation")
      (description
"@code{ed-mode} lets you interact with Emacs buffers like you would do
with the ed editor.")
      (license license:gpl3+))))

(define-public emacs-alsamixer
  (package
    (name "emacs-alsamixer")
    (version "0.2.1")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://codeberg.org/rwv/alsamixer-el.git")
         (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0c40vycphv5nf374rp8pnzvi50vlmgab3wrdq92hyprjw76gwxhk"))))
    (build-system emacs-build-system)
    (home-page "https://codeberg.org/rwv/alsamixer-el")
    (synopsis "Emacs interface to amixer")
    (description "@code{emacs-alsamixer} provides basic commands to control
audio volume via amixer.")
    (license license:gpl3+)))

(define-deprecated-package emacs-alsamixer-el
  emacs-alsamixer)

(define-public emacs-fennel-mode
  (package
    (name "emacs-fennel-mode")
    (version "0.9.2")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://git.sr.ht/~technomancy/fennel-mode")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0jkvcq13q4a0r15cn19gyqxg6k2jsm0argykpchac29xhzm4p5v1"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-L" "."
                             "-L" "test/."
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://git.sr.ht/~technomancy/fennel-mode")
    (synopsis "Emacs major-mode for editing Fennel code")
    (description
     "Fennel mode provides font-lock, indentation, navigation, and REPL for
Fennel code within Emacs.")
    (license license:gpl3+)))

(define-public emacs-org-modern
  (package
    (name "emacs-org-modern")
    (version "1.9")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/minad/org-modern")
             (commit version)))
       (sha256
        (base32 "08ddrzqvlckj10b0anhdis6cfx448dw3n027cswklmzx6bj3rmfz"))
       (file-name (git-file-name name version))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/org-modern")
    (synopsis "Modern Org style")
    (description
     "Org Modern implements a modern style for your Org buffers using font locking
and text properties.  The package styles headlines, keywords, tables and
source blocks.")
    (license license:gpl3+)))

(define-public emacs-org-modern-indent
  (package
    (name "emacs-org-modern-indent")
    (version "0.5.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/jdtsmith/org-modern-indent")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "09bg1shw06ddlxq678abr9q6g9wfc6b483xi0iwldxk4qbgzgpdj"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #false))            ;no tests
    (propagated-inputs
     ;; XXX: Bundled Org mode (as of Emacs 29.4) is too old; Org Modern
     ;; Indent mode cannot work properly with it.
     (list emacs-compat emacs-org))
    (home-page "https://github.com/jdtsmith/org-modern-indent")
    (synopsis "Modern block styling with Org Indent mode")
    (description
     "Org Modern mode cannot style various Org blocks properly when used in
conjunction with Org Indent mode.  This small package approximately reproduces
the block styling of Org Modern mode when using Org Indent mode.  It can be
used with or without Org Modern mode.")
    (license license:gpl3+)))

(define-public emacs-org-margin
  (let* ((commit "4013b59ff829903a7ab86b95593be71aa5c9b87d")
         (revision "0"))
    (package
      (name "emacs-org-margin")
      (version (git-version "0.2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rougier/org-margin")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "13x5568yfqm1lfmy29vcii2bdkjxjygmhslbr0fwgm2xq9rn63yv"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-before 'install 'makeinfo
              (lambda _
                (emacs-makeinfo)
                (rename-file "README.info" "org-margin.info"))))))
      (native-inputs (list texinfo))
      (license license:gpl3+)
      (home-page "https://github.com/rougier/org-margin")
      (synopsis "Outdent headlines in emacs org-mode")
      (description "@code{org-margin} mode outdents org headlines by
moving leading stars into the margin and transform them into markers depending
on the chosen style."))))

(define-public emacs-pyimport
  (let ((commit "a6f63cf7ed93f0c0f7c207e6595813966f8852b9")
        (revision "0"))
    (package
      (name "emacs-pyimport")
      (version (git-version "1.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/Wilfred/pyimport")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1q5gqhvh4zq5dy8vns694warcz48j1hdnxg16sjck4gsi9xivbvs"))))
      (build-system emacs-build-system)
      (inputs
        (list python-pyflakes))
      (propagated-inputs
        (list emacs-dash emacs-s emacs-shut-up))
      (arguments
        (list #:phases
              #~(modify-phases %standard-phases
                  (add-after 'unpack 'patch-pyflakes-executable
                    (lambda* (#:key inputs #:allow-other-keys)
                      (let ((pyflakes (search-input-file inputs "/bin/pyflakes")))
                        (make-file-writable "pyimport.el")
                        (substitute* "pyimport.el"
                          (("\"pyflakes")
                           (string-append "\"" pyflakes)))))))))
      (home-page "https://github.com/Wilfred/pyimport")
      (synopsis "Manage Python imports from Emacs")
      (description
"@code{emacs-pyimport} manages python imports from Emacs via @code{python-pyflakes}.")
      (license license:gpl3+)))) ; License is in pyimport.el

(define-public emacs-straight
  (let ((commit "44a866f28f3ded6bcd8bc79ddc73b8b5044de835")
        (revision "4"))
    (package
      (name "emacs-straight")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/radian-software/straight.el/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "086ly0szbf1lxkdi76jzjd6znz9shrmdbw7a9mr977s27219l8mf"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command
        #~(list "emacs" "-Q" "--batch"
                "-L" "."
                "--load" "ert"
                "--load" "tests/straight-test.el"
                "--eval" "(progn (require 'straight-ert-print-hack) (ert-run-tests-batch-and-exit))")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-git-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (make-file-writable "straight.el")
                (substitute* "straight.el"
                  (("\"git\"")
                   (string-append "\""
                                  (search-input-file inputs "/bin/git") "\"")))))
            (add-before 'check 'skip-failing-tests
              (lambda _
                (setenv "EMACS_DOCKER" "close-enough"))))))
      (inputs (list git))
      (propagated-inputs (list emacs-magit))
      (home-page "https://github.com/radian-software/straight.el/")
      (synopsis "Purely functional package manager for the Emacs hacker")
      (description
       "@code{emacs-straight} is a purely functional package manager for the Emacs
hacker.")
      (license license:expat))))

(define-deprecated-package emacs-straight-el
  emacs-straight)

(define-public emacs-osm
  (package
    (name "emacs-osm")
    (version "1.8")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/minad/osm")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1azydrknczkn9gvy9ynxr4dk7xy5cwrg985fx8bz2apmalfvmpzw"))))
    (build-system emacs-build-system)
    (arguments
     (list #:tests? #f                  ;no tests
           #:phases #~(modify-phases %standard-phases
                        (add-after 'unpack 'set-curl-file-name
                          (lambda* (#:key inputs #:allow-other-keys)
                            (substitute* "osm.el"
                              (("\"curl( ?)\"" _ space)
                               (string-append "\""
                                              (search-input-file inputs
                                                                 "/bin/curl")
                                              space "\"")))))
                        (add-after 'unpack 'makeinfo
                          (lambda _
                            (emacs-makeinfo
                             "README.org"
                             '(progn
                               (require 'ox-texinfo)
                               (setq org-texinfo-with-broken-links t)
                               (org-texinfo-export-to-info))))))))
    (inputs (list curl))
    (native-inputs (list texinfo))
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/osm")
    (synopsis "OpenStreetMap viewer for Emacs")
    (description
     "This package provides an OpenStreetMap viewer for Emacs, featuring
zoomable and moveable map display, display of tracks and POIs from GPX files,
parallel fetching of tiles with cURL, and more.")
    (license license:gpl3+)))

(define-public emacs-corfu-terminal
  (package
    (name "emacs-corfu-terminal")
    (version "0.7")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://codeberg.org/akib/emacs-corfu-terminal")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0ddj0x1mivrnxpdmnim9vkdpyjrhkfkvmcpfas1wznn4wfr559yj"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-corfu emacs-popon))
    (home-page "https://codeberg.org/akib/emacs-corfu-terminal/")
    (synopsis "Replace corfu child frames with popups")
    (description
     "This package replaces the child frames @code{emacs-corfu} uses
with popups, which also work in the terminal.")
    (license license:gpl3+)))

(define-public emacs-corfu-doc-terminal
  ;; Upstream does not tag releases, version taken from package header.
  (let ((commit "be9fd5cd6c293dea862f1a1877378f1391e6a7e5")
        (revision "0"))
    (package
      (name "emacs-corfu-doc-terminal")
      (version (git-version "0.9" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://codeberg.org/akib/emacs-corfu-doc-terminal")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0vx5r9v2gx747zsz4x1dgrkvl1iya9pcgvcbghc0pwjs3jfi6r0k"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-corfu emacs-corfu-doc emacs-corfu-terminal emacs-popon))
      (home-page "https://codeberg.org/akib/emacs-corfu-doc-terminal/")
      (synopsis "Replace corfu docmentation child frames with popups")
      (description
       "This package replaces the child frames @code{emacs-corfu-doc} uses
with popups, which also work in the terminal.")
      (license license:gpl3+))))

(define-public emacs-popon
  (package
    (name "emacs-popon")
    (version "0.13")
    (source
     (origin
       (method git-fetch)
       (uri
        (git-reference
         (url "https://codeberg.org/akib/emacs-popon")
         (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "046l8is3rg0c6qhiy7wh91pcdhwqhnw47md8q231w8mxnw5b1n5j"))))
    (build-system emacs-build-system)
    (home-page "https://codeberg.org/akib/emacs-popon/")
    (synopsis "Pop floating text on a window")
    (description
     "@code{emacs-popon} allows you to pop text on a window, what we call
a popon.  Popons are window-local and sticky, they don't move while
scrolling, and they even don't go away when switching buffer, but you
can bind a popon to a specific buffer to only show on that buffer.")
    (license license:gpl3+)))

(define-public emacs-consult-lsp
  (package
    (name "emacs-consult-lsp")
    (version "2.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gagbo/consult-lsp")
             (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1y0dgpgvw90phqi44dyijnnz3z0rys4bkmbnrkkx2fbd3pyvqs1i"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-consult emacs-lsp-mode emacs-f))
    (home-page "https://github.com/gagbo/consult-lsp/")
    (synopsis "LSP mode and Consult helping each other")
    (description
"@code{emacs-consult-lsp} provides helpers for interactively selecting LSP
workspace diagnostics, symbols, and file symbols from @code{emacs-lsp-mode}
by leveraging @code{emacs-consult} APIs.")
    (license license:expat)))

(define-public emacs-consult-projectile
  (let ((commit "400439c56d17bca7888f7d143d8a11f84900a406")
        (revision "1"))
    (package
      (name "emacs-consult-projectile")
      (version (git-version "0.7" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://gitlab.com/OlMon/consult-projectile")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1abd2dw3zpiln9pd7l3j78wl3lwapcmf1ilijv3vin9g0wqb7hmn"))))
      (build-system emacs-build-system)
      (propagated-inputs (list emacs-consult emacs-projectile))
      (home-page "https://gitlab.com/OlMon/consult-projectile")
      (synopsis "Consult integration for Projectile")
      (description
       "This package provides a multiview for displaying open buffers, files
and directories associated with a project.  When no project is open in the
current buffer, it displays a list of known projects.  One can then pick
a file from the selected project.")
      (license license:gpl3+))))

(define-public emacs-context-transient
  (package
    (name "emacs-context-transient")
    (version "1.0.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/licht1stein/context-transient.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1slj9js7c4cggdidr7miri9gf9xm7ij4hmd7y99km7bqmg57837l"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/licht1stein/context-transient.el")
    (synopsis "Context specific transients")
    (description "This package makes it easy to define and call
context-specific @code{emacs-transient} menus for current project, git repo,
buffer or any other condition.")
    (license license:gpl3+)))

(define-public emacs-purs-mode
  ;; XXX: Upstream set no tag nor any Version keyword.  Using 0 as the base
  ;; version.
  (let ((commit "16553383915cf453747a491715ed0427c107cc9e")
        (revision "1"))
    (package
      (name "emacs-purs-mode")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/PureFunctor/purs-mode")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0174p0g38jd34jwpww7zgh48i3lkhqrnrxz8ca09idz4adri38z7"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/PureFunctor/purs-mode/")
      (synopsis "PureScript major mode for Emacs")
      (description
       "Purs mode provides a PureScript major mode for Emacs.")
      (license license:gpl3+))))

(define-public emacs-pdb-capf
  (let ((commit "31602ccab53aa7dcf26a1af222c7da2bcc1390ed")
        (revision "0"))
    (package
      (name "emacs-pdb-capf")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/muffinmad/emacs-pdb-capf")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0x2pg03csf25vj8y2zb5sv493dk3n0s4xbkihii2mzhkx82vgpxg"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/muffinmad/emacs-pdb-capf")
      (synopsis "Completion-at-point function for pdb")
      (description
"@code{emacs-pdb-capf} provides a @code{completion-at-point} function
for pdb allowing completion in a @code{*gud-pdb*} buffer.")
      (license license:gpl3+))))

(define-public emacs-bitbake-modes
  (package
   (name "emacs-bitbake-modes")
   (version "0.5.3")
   (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://bitbucket.org/olanilsson/bitbake-modes")
             (commit (string-append "v" version))))
       (sha256
        (base32 "1580cfpfmsjwiq6v2vsqjwhzj9m4lrhhf3nffmbzp36r6q5n8611"))
       (file-name (git-file-name name version))))
   (build-system emacs-build-system)
   (arguments (list #:tests? #f))       ; tests require networking
   (propagated-inputs (list emacs-mmm-mode))
   (home-page "https://bitbucket.org/olanilsson/bitbake-modes")
   (synopsis "Emacs major modes for bitbake")
   (description
"@code{emacs-bitbake-modes} is a collection of major modes and tools that can
be useful when working with the bitbake files in Yocto and OpenEmbedded
projects.")
   (license license:gpl3+)))

(define-public emacs-vunit-mode
  (let ((commit "b26ecc46464a57eb00bf62b15c0d717774ec804e")
        (revision "0"))
    (package
      (name "emacs-vunit-mode")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
                (url "https://github.com/embed-me/vunit-mode/")
                (commit commit)))
         (sha256
          (base32
           "1b6qn824jywg57yy9has123zmrmsxhb3i0rdr7xnqbnhvq0zkp65"))
         (file-name (git-file-name name version))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "make" "tests")
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-vunit-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "vunit-mode.el"
                  ("vunit-python-executable"
                   (search-input-file inputs "/bin/python3"))))))))
      (native-inputs (list emacs-el-mock))
      (inputs (list python))
      (propagated-inputs (list emacs-hydra python-vunit))
      (home-page "https://github.com/embed-me/vunit-mode/")
      (synopsis "Emacs front end to @code{python-vunit}")
      (description
       "This emacs package can be used to interface with VUnit, a testing
framework for VHDL/SystemVerilog.")
      (license license:gpl3+))))

(define-public emacs-vundo
  (package
    (name "emacs-vundo")
    (version "2.4.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/casouri/vundo/")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "034ynwfk374i27vvfpr13n3qw02ihm0189m8frxfqdbd3hismjkb"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "vundo.el"
                             "-l" "test/vundo-test.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/casouri/vundo/")
    (synopsis "Visualize the undo tree")
    (description
     "Vundo (visual undo) displays the undo history as a tree and lets you
move in the tree to go back to previous buffer states.  To use vundo, type
@kbd{M-x vundo RET} in the buffer you want to undo.  An undo tree buffer
should pop up.")
    (license license:gpl3+)))

(define-public emacs-hare-mode
  ;; XXX: Upstream did not tag any commit.  Using "Version:" keyword as base
  ;; version.
  (let ((commit "bb7b2faccb5939b0c8d4ffa6a6e28a0d2bc93dd6")
        (revision "0"))
    (package
      (name "emacs-hare-mode")
      (version (git-version "0.1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://git.sr.ht/~bbuccianti/hare-mode")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "13vjlmxfgwiljzjwkzhxzz565y34fggsbp840bxlwbwa6lsfrsa8"))))
      (build-system emacs-build-system)
      (home-page "https://git.sr.ht/~bbuccianti/hare-mode")
      (synopsis "Hare major mode for Emacs")
      (description
       "This package an Emacs major mode for the Hare programming language.")
      (license license:gpl3+))))

(define-public emacs-org-cliplink
  (let ((commit "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
        (revision "0"))
    (package
      (name "emacs-org-cliplink")
      (version (git-version "0.2" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/rexim/org-cliplink")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1avyiw8vlv4n1r7zqvc6wjlsz7jl2pqaprzpm782gzp0c999pssl"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-curl-executable
              (lambda* (#:key inputs #:allow-other-keys)
                (substitute* "org-cliplink-transport.el"
                  (("\\(executable-find \"curl\"\\)")
                   (let ((curl (search-input-file inputs "/bin/curl")))
                     (string-append "\"" curl "\""))))))
            (add-before 'check 'fix-failing-test
              ;; XXX: Fix randomly (!) failing test, which doesn't account for
              ;; the fact that (random) may return a negative number.
              (lambda _
                (substitute* "test/org-cliplink-transport-test.el"
                  (("curl-rexim.me-\\[a-z0-9\\]\\+")
                   "curl-rexim.me--?[a-z0-9]+")))))))
      (native-inputs
       (list emacs-el-mock emacs-ert-runner emacs-undercover))
      (inputs
       (list curl))
      (home-page "https://github.com/rexim/org-cliplink/")
      (synopsis "Insert Org mode links from the clipboard")
      (description
       "Org Cliplink provides a simple command that takes a URL from the
clipboard and inserts an Org mode link with a title of a page found by the URL
into the current buffer.")
      (license license:expat))))

(define-public emacs-org-wild-notifier
  (package
    (name "emacs-org-wild-notifier")
    (version "0.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/akhramov/org-wild-notifier.el")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32
         "00xssqg0mvh5ma2053719bcchbrl7mmj8wzhbrjk34cl4lx9p9fb"))))
    (build-system emacs-build-system)
    (propagated-inputs
     (list emacs-dash emacs-alert emacs-async))
    (license license:gpl3+)
    (home-page "https://github.com/akhramov/org-wild-notifier.el")
    (synopsis "Customizable Org Agenda notifications")
    (description
     "This package provides notification functions for Org Agenda.")))

(define-public emacs-flymake-mypy
  (package
    (name "emacs-flymake-mypy")
    (version "0.3.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/com4/flymake-mypy")
                    (commit version)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1w9bx0ay7jshwflndmf0ix5ghglw57isp2903x3jiv79lkd28xhg"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/com4/flymake-mypy")
    (synopsis "Flymake checker for mypy")
    (description
     "This package provides Flymake support for Python static type checking
using mypy.")
    (license license:bsd-2)))

(define-public emacs-mpv
  ;; No release since Dec 28, 2021.
  (let ((commit "2e0234bc21a3dcdf12d94d3285475e7f6769d3e8")
        (revision "0"))
    (package
      (name "emacs-mpv")
      (version (git-version "0.2.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/kljohann/mpv.el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "0mvzg2wqpycny2dmiyp8jm0fflvll7ay6scvsb9rxgfwimr2vbw5"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ;there are no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "mpv.el"
                  ("mpv-executable"
                   (search-input-file inputs "/bin/mpv"))))))))
      (inputs (list mpv))
      (home-page "https://github.com/kljohann/mpv.el/")
      (synopsis "Control MPV for easy note taking")
      (description
       "This package is a potpourri of helper functions to control a MPV
process via its IPC interface.")
      (license license:gpl3+))))

(define-public emacs-apel-lb
  ;; No release since Jun 15, 2010.
  (let ((version "10.8")                ;tag chise-base-0_25
        (revision "82")
        (commit "1a6fd3bab2cc6b0a450c2d801f77a1c9da0f72fb"))
    (package
      (name "emacs-apel-lb")
      (version (git-version version revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/wanderlust/apel")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "03yjg14rvcxn59wga4jvx28ii16bx5ym93fzfyssm67gqwgyb2gf"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f))    ; no tests
      (home-page "https://www.emacswiki.org/emacs/WanderLust")
      (synopsis "Library for making portable Emacs Lisp programs")
      (description
       "A Portable Emacs Library (APEL) is a library for making portable Emacs
Lisp programs.  APEL-LB is a variant of APEL, which features supports to
latest Emacs.")
      (license license:gpl2+))))

(define-public emacs-flim-lb
  ;; No release since Nov 28, 2007.
  (let ((commit "774e40da2b7de769e79c782dc82f09026a69163f")
        (revision "147"))
    (package
      (name "emacs-flim-lb")
      (version (git-version "1.14.9" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/wanderlust/flim")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0alc6vn9nrw1gbliampacx238jwihif4sfa96j3p2q2nkaqin0p0"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-before 'check 'set-home
                   (lambda _
                     (setenv "HOME" (getenv "TMPDIR"))
                     (mkdir-p (string-append (getenv "HOME")
                                             "/.emacs.d/elpa")))))))
      (propagated-inputs (list emacs-apel-lb emacs-oauth2))
      (home-page "https://www.emacswiki.org/emacs/WanderLust")
      (synopsis
       "Library for basic features about message representation or encoding")
      (description
       "FLIM is a library to provide basic features about message representation
or encoding.  FLIM-LB is a variant of FLIM, which features supports to latest
Emacs.")
      (license license:gpl2+))))

(define-public emacs-fpga
  (package
    (name "emacs-fpga")
    (version "0.3.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/gmlarumbe/fpga")
              (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "107vmjwk74iwp2xlpkx3f2q8a9bbygl15p09sfj0h4k9jzl4ia9m"))))
    (build-system emacs-build-system)
    ;;there are no tests
    (arguments
     (list #:tests? #f))
    (home-page "https://github.com/gmlarumbe/fpga")
    (synopsis "Emacs fpga & asic utilities")
    (description
     "Emacs-fpga provides emacs facilities to interface with fpga & asic
tools from major vendors.")
    (license license:gpl3+)))

(define-public emacs-semi-epg
  ;; No release since Dec 24, 2003.
  (let ((commit "85a52b899ac89be504d9e38d8d406bba98f4b0b3")
        (revision "250"))
    (package
      (name "emacs-semi-epg")
      (version (git-version "1.14.6" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/wanderlust/semi")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "13sfwv889i99l5zv10ibzm221wvwbp3m45nf4nsr0dhvln90zrjj"))))
      (build-system emacs-build-system)
      (arguments
       (list #:tests? #f)) ; No tests.
      (propagated-inputs (list emacs-flim-lb))
      (inputs (list emacs-bbdb-vcard))
      (home-page "https://www.emacswiki.org/emacs/WanderLust")
      (synopsis "Library to provide MIME feature for GNU Emacs")
      (description
       "SEMI is a package for GNU Emacs to provide features related with MIME
user interface.  SEMI-EPG is a variant of SEMI, which features supports to
EasyPG and latest Emacs.")
      (license license:gpl2+))))

(define-public emacs-wallabag
  (let ((commit "686fabf477b903857bc5d54a0a8e49620822e14e")
        (revision "1"))
    (package
      (name "emacs-wallabag")
      (version (git-version "1.1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/chenyanming/wallabag.el/")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "09xpc65psh8nf7gww3y2chnfkyi8b8mz1bs71g0zmz8h5djf821i"))))
      (build-system emacs-build-system)
      (arguments
       '(#:tests? #f ;no tests
         #:include (cons* "emojis.alist" %default-include)))
      (propagated-inputs (list emacs-emacsql emacs-request emacs-s emacs-gptel))
      (home-page "https://github.com/chenyanming/wallabag.el/")
      (synopsis "Emacs interface to wallabag")
      (description "This package manages articles from a wallabag instance.")
      (license license:gpl3+))))

(define-public emacs-wanderlust
  ;; No release since Jan 15, 2010.
  (let ((commit "d6dcbad228cd5cf39a918181da7c4c4ed934bd81")
        (revision "846"))
    (package
      (name "emacs-wanderlust")
      (version (git-version "2.15.9" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/wanderlust/wanderlust")
                      (commit commit)))
                (file-name (git-file-name name version))
                (modules '((guix build utils)))
                (snippet
                 '(begin (substitute* "WL-CFG"
                           ((".*WL_PREFIX.*")
                            (string-append "(setq wl-install-utils t)" "\n"
                                           "(setq WL_PREFIX \"\")" "\n"
                                           "(setq ELMO_PREFIX \"\")" "\n")))
                         (substitute* "Makefile"
                           (("package-user-dir") "NONE"))))
                (sha256
                 (base32
                  "0120rgq1zf254q39jswykqk2i69f7wq5m0b5b5x80w7wfj9405lg"))))
      (build-system emacs-build-system)
      (arguments
       (list #:phases
             #~(modify-phases %standard-phases
                 (add-after 'expand-load-path 'chdir-elmo
                   (lambda _
                     (chdir "elmo")))
                 (add-after 'chdir-elmo 'expand-load-path-elmo
                   (assoc-ref %standard-phases 'expand-load-path))
                 (add-after 'expand-load-path-elmo 'chdir-utils
                   (lambda _
                     (chdir "../utils")))
                 (add-after 'chdir-utils 'expand-load-path-utils
                   (assoc-ref %standard-phases 'expand-load-path))
                 (add-after 'expand-load-path-utils 'chdir-wl
                   (lambda _
                     (chdir "../wl")))
                 (add-after 'chdir-wl 'expand-load-path-wl
                   (assoc-ref %standard-phases 'expand-load-path))
                 (add-after 'expand-load-path-wl 'change-directory
                   (lambda _
                     (chdir "..")))
                 (add-after 'install 'install-via-makefile
                   (lambda* (#:key inputs #:allow-other-keys)
                     (let ((emacs (search-input-file inputs "/bin/emacs"))
                           (lispdir (elpa-directory #$output))
                           (infodir (string-append #$output "/share/info")))
                       (for-each mkdir-p (list lispdir infodir))
                       (substitute* "Makefile"
                         (("(EMACS\t= )emacs" all m)
                          (string-append m emacs))
                         (("(LISPDIR = )NONE" all m)
                          (string-append m lispdir))
                         (("(PIXMAPDIR = )NONE" all m)
                          (string-append m lispdir "/icons"))
                         (("(INFODIR = )NONE" all m)
                          (string-append m infodir))))
                     (invoke "make" "install")
                     (invoke "make" "install-info"))))))
      (propagated-inputs (list emacs-semi-epg))
      (inputs (list emacs-spamfilter))
      (home-page "https://www.emacswiki.org/emacs/WanderLust")
      (synopsis "Yet Another Message Interface on Emacsen")
      (description
       "Wanderlust is an mail/news management system on Emacsen.  It supports
IMAP4rev1(RFC2060), NNTP, POP and local message files.

The main features of Wanderlust:

@itemize
@item Pure elisp implementation.
@item Supports IMAP4rev1, NNTP, POP(POP3/APOP), MH and Maildir format.
@item Unified access method to messages based on Mew-like Folder Specification.
@item Mew-like Key-bind and mark handling.
@item Manages unread messages.
@item Interactive thread display.
@item Folder Mode shows the list of subscribed folders.
@item Message Cache, Disconnected Operation.
@item MH-like FCC (Fcc: %Backup and Fcc: $Backup is allowed).
@item MIME compliant (by SEMI).
@item Transmission of news and mail are unified by Message transmitting draft.
@item Graphical list of folders.
@item View a part of message without retrieving the whole message (IMAP4).
@item Server-side message look up (IMAP4), multi-byte characters are allowed.
@item Virtual Folders.
@item Supports compressed folder using common archiving utilities.
@item Old articles in folders are automatically removed/archived (Expiration).
@item Automatic re-file.
@item Template function makes it convenient to send fixed form messages.
@end itemize\n")
      (license license:gpl2+))))

(define-public emacs-waveform
  ;; XXX: Upstream provides no Version keyword.  Using 0 as base version.
  (let ((commit "ee52c6a72b3e9890743e3a6e2fc1f3195f5687b2")
        (revision "0"))
    (package
      (name "emacs-waveform")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sachac/waveform-el")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "082ls7khd22fjwnk7h1zxrmqqcmxqh2wx2vljlxhjh9bcp1y2pyr"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:tests? #f                     ;there are no tests
        #:phases
        #~(modify-phases %standard-phases
            (add-after 'unpack 'patch-exec-paths
              (lambda* (#:key inputs #:allow-other-keys)
                (emacs-substitute-variables "waveform.el"
                  ("waveform-ffmpeg-executable"
                   (search-input-file inputs "/bin/ffmpeg"))))))))
      (inputs (list ffmpeg))
      (propagated-inputs (list emacs-mpv))
      (home-page "https://github.com/sachac/waveform-el/")
      (synopsis "Display a waveform and use it to navigate")
      (description
       "This package displays a waveform of a sound file.  You can then play
or navigate through it.")
      (license license:gpl3+))))

(define-public emacs-project-x
  ;; There is no proper release.
  ;; The base version is extracted from the README.org.
  (let ((revision "0")
        (commit "eafc9828f54dddd594887bb28a7249cf1584230c"))
    (package
      (name "emacs-project-x")
      (version (git-version "0.1.6" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference
           (url "https://github.com/karthink/project-x")
           (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "141zym1libs14bpqv27ln8f6csxgy67pgcn1l3f44p15g1rc8mhr"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/karthink/project-x")
      (synopsis "Enhancement to Emacs built-in Project library")
      (description
       "Project-X provides convenience features for Emacs' Project library.
In particular, it saves and restores project files and window configurations
across sessions.")
      (license license:gpl3+))))

(define-public emacs-poke-mode
  (package
    (name "emacs-poke-mode")
    (version "3.1")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/poke-mode-" version
                           ".tar"))
       (sha256
        (base32 "1lirhws5d8l16qs5ddrvvz0f9xfl004q9yp333pdgsmcpk3ww7sr"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ; there are no tests
    (home-page "https://elpa.gnu.org/packages/poke-mode.html")
    (synopsis "Major mode for editing GNU poke programs")
    (description
     "This package provides a major mode for editing GNU poke programs.")
    (license license:gpl3+)))

(define-public emacs-vcard-mode
  ;; Use the latest commit, as there are no tagged releases.
  (let ((commit "ab1a2885a5720d7fb02d9b6583ee908ba2260b78")
        (revision "0"))
    (package
      (name "emacs-vcard-mode")
      (home-page "https://github.com/dochang/vcard-mode")
      (version (git-version "0.0.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "0w44ax9dxkj8mh4np9mg3yp2yakjwrgy13izq53p0vimrhywza0w"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; there are no tests
      (synopsis "Emacs major mode to edit vCard files")
      (description "This package provides a major mode for editing vCard files
in Emacs.")
      (license license:gpl3+))))

(define-public emacs-vertico-posframe
  (package
    (name "emacs-vertico-posframe")
    (version "0.9.0")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://elpa.gnu.org/packages/vertico-posframe-" version
                    ".tar"))
              (sha256
               (base32
                "16vnacmz52d1rwdmddsr1rm1zki1p3bw10ngpw39a3dszbwqkl3m"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-posframe emacs-vertico))
    (arguments (list #:tests? #f)) ; there are no tests
    (home-page "https://github.com/tumashu/vertico-posframe")
    (synopsis "Pop up a frame at point to show vertical completion UI")
    (description
     "Vertico is an Emacs package that provides a vertical completion UI based
on the default completion system.  Posframe is an Emacs package that provides
a way to pop up a frame at point.  Vertico-posframe is an Emacs package and
a Vertico extension which provides a way to pop up a frame at point to show
a vertical completion UI.")
    (license license:gpl3+)))

;; No tagged release upstream
(define-public emacs-transient-posframe
  (let ((commit "dcd898d1d35183a7d4f2c8f0ebcb43b4f8e70ebe")
        (revision "0"))
    (package
      (name "emacs-transient-posframe")
      (version (git-version "0.1.0" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url "https://github.com/yanghaoxie/transient-posframe")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1aq1vbkww55xplyaa3xagz9z4kdlsxk13x054asnk0dqps4bcgbf"))))
      (build-system emacs-build-system)
      (arguments (list #:tests? #f)) ; there are no tests
      (propagated-inputs (list emacs-posframe emacs-transient))
      (home-page "https://github.com/yanghaoxie/transient-posframe")
      (synopsis "Pop up a posframe (a child frame) to show Transients")
      (description
       "This package is a @code{transient} extension, which uses @code{posframe}
(a child frame) to show @code{transient} popups in Emacs.  It was developed with
@code{transient} popups of @code{magit} in mind.")
      (license license:gpl3+))))

(define-public emacs-window-tool-bar
  (package
    (name "emacs-window-tool-bar")
    (version "0.3")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://elpa.gnu.org/packages/window-tool-bar-"
                           version ".tar"))
       (sha256
        (base32 "00kggfpfi1nj05mzy5zig0fs4as7qh99wqgvya3xj2kw8141cvd6"))))
    (build-system emacs-build-system)
    (arguments (list #:tests? #f)) ;there are no tests
    (propagated-inputs (list emacs-compat))
    (home-page "http://github.com/chaosemer/window-tool-bar")
    (synopsis "Add tool bars inside Emacs windows")
    (description
     "This package puts a tool bar in each Emacs window.  This allows you to see
multiple tool bars simultaneously directly next to the buffer it acts on which
feels much more intuitive.
Emacs \"browsing\" modes generally have sensible tool bars, for example:
*info*, *help*, and *eww* have them.

It does this while being mindful of screen real estate.
If `tool-bar-map is nil, then this package will not take up any space for an
empty tool bar.

Most modes do not define a custom tool bar, so calling (setq tool-bar-map nil)
in your init file will make most buffers not take up space for a tool bar.

To get the default behavior, run (global-window-tool-bar-mode 1) or enable
via M-x customize-group RET window-tool-bar RET.

This uses the per-window tab line to show the tool bar.
If you want to share space with an existing tab line, mode line, or header line,
add (:eval (window-tool-bar-string)) to `tab-line-format', `mode-line-format',
or `header-line-format'.  For additional documentation, see info node
`(emacs)Window Tool Bar'.")
    (license license:gpl3+)))

(define-public emacs-tintin-mode
  (let ((commit "82e71e1db92ee3d94c7d0208bafc5de337193de8")
        (revision "1"))
    (package
      (name "emacs-tintin-mode")
      (version (git-version "1.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/sunwayforever/tintin-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32 "1p6ryqb8m30cp0zyawb6bs8wy3ga7gm60lcan0xx1fy3wx8qip33"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/sunwayforever/tintin-mode")
      (synopsis "Emacs major mode for TinTin++ scripts")
      (description
       "This major mode focuses on highlighting as many aspects of the
TinTin++ scripting language as possible, organizing commands into functional
categories and highlighting specific modes that many commands use to
accomplish different tasks.")
      (license license:asl2.0))))

(define-public emacs-titlecase
  (package
    (name "emacs-titlecase")
    (version "0.4.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
              (url "https://github.com/duckwork/titlecase.el/")
              (commit version)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0kpg1l0rbbwqcmlj9i8xs2dv9h6yik9wgngik5z6wdgxbkaxjln7"))))
    (build-system emacs-build-system)
    (arguments
     (list
      #:phases
      #~(modify-phases %standard-phases
          ;; Disable 3/26 unexpected results.
          (add-before 'check 'disable-error-tests
            (lambda _
              (emacs-batch-edit-file "tests/titlecase-tests.el"
                '(progn
                  (defun remove-test (test-name test-param)
                    (save-excursion
                     (re-search-forward
                      (format "(ert-deftest-%s %s" test-name test-param))
                     (goto-char (match-beginning 0))
                     (kill-sexp)))
                  (remove-test "decl-pair\n" "contractions_1")
                  (remove-test "decl-geneated-ascii\n" "generated_1_chars")
                  (remove-test "decl-nop" "nop_1")
                  (basic-save-buffer))))))
      #:test-command #~(list "emacs" "-Q" "--batch"
                             "-l" "tests/titlecase-tests.el"
                             "-f" "ert-run-tests-batch-and-exit")))
    (home-page "https://github.com/duckwork/titlecase.el/")
    (synopsis "Capitalise titles")
    (description
     "This package provides a best-effort attempt at capitalizing titles, only
in English, with Emacs.")
    (license license:gpl3)))

(define-public emacs-x509-mode
  (let ((commit "3830cbfdadab4cd68e6f0b6a3a7a4931be8328ea")
        (revision "1"))
    (package
      (name "emacs-x509-mode")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/jobbflykt/x509-mode")
               (commit commit)))
         (file-name (git-file-name name version))
         (sha256
          (base32
           "0ff6kpnh9bzhxx15p18fijjjsqv0mcqwsd5pidyx8v2yzq699k7x"))))
      (build-system emacs-build-system)
      (arguments
       (list
        #:test-command #~(list "emacs" "-Q" "--batch"
                               "-l" "x509-mode.el"
                               "-l" "x509-mode-tests.el"
                               "-f" "ert-run-tests-batch-and-exit")
        #:include #~(cons "\\.txt$" %default-include)
        #:phases #~(modify-phases %standard-phases
                     (add-after 'unpack 'set-openssl-location
                       (lambda* (#:key inputs #:allow-other-keys)
                         (emacs-substitute-variables "x509-mode.el"
                           ("x509-openssl-cmd"
                            (search-input-file inputs "/bin/openssl"))))))))
      (inputs (list openssl))
      (home-page "https://github.com/jobbflykt/x509-mode")
      (synopsis "Major mode for viewing certificates, CRLs, and other
PKI-related files")
      (description
       "This package provides a major mode for viewing certificates, CRLs, and
other PKI-related files.  It uses OpenSSL for viewing PEM and DER encoded PKI
entities.")
      (license license:expat))))

(define-public emacs-totp
  (let ((commit "fe05ce6130ff1e9a76fc2aca289083475f70fd52") ;no releases
        (revision "1"))
    (package
      (name "emacs-totp")
      (home-page "https://github.com/juergenhoetzel/emacs-totp")
      (version (git-version "0.1" revision commit))
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url home-page)
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "04hazm8viy6dqakdj2dl849aj435jgsv3rqwq7sl7lgflrn8r45b"))))
      ;; tests requires gnutls
      (arguments (list #:emacs emacs))
      (build-system emacs-build-system)
      (native-inputs (list emacs-buttercup))
      (synopsis "Generate Time-based One-time Passwords (TOTP) in Emacs")
      (description
       "emacs-TOTP implements @acronym{TOTP, Time-based One-time Passwords} as
specified in RFC 6238.  It supports reading secrets in HEX and multiple base32
variations, including non-standard base32 encodings.")
      (license license:gpl3+))))

(define-public emacs-back-button
  (package
    (name "emacs-back-button")
    (version "0.6.6")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/rolandwalker/back-button.git")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0hmn3jlsqgpc602lbcs9wzw0hgr5qpjdcxi2hjlc1cp27ilyscnf"))))
    (build-system emacs-build-system)
    (arguments (list #:test-command #~(list "ert-runner" "ert-tests")))
    (native-inputs (list emacs-ert-runner))
    (synopsis "Visual navigation through mark rings in Emacs")
    (description "This package provides a way for the user to navigate
through mark rings (in both directions, and globally or locally).")
    (home-page "https://www.emacswiki.org/emacs/BackButton")
    (license license:bsd-2)))

;;;
;;; Avoid adding new packages to the end of this file. To reduce the chances
;;; of a merge conflict, place them above by existing packages with similar
;;; functionality or similar names.
;;;
