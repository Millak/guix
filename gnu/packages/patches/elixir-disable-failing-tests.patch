Most of these tests fail for unknown reasons when run in the chroot
environment of a Guix build process.

Common failures are:

 * Mix.Shell.cmd() fails with error 130
 * The git_repo fixture cannot be found
 * Communication with spawned processes fails with EPIPE
 * Failure to copy files


diff --git a/lib/elixir/test/elixir/kernel/cli_test.exs b/lib/elixir/test/elixir/kernel/cli_test.exs
index 3ffd56c..1232d19 100644
--- a/lib/elixir/test/elixir/kernel/cli_test.exs
+++ b/lib/elixir/test/elixir/kernel/cli_test.exs
@@ -39,6 +39,7 @@ end
 defmodule Kernel.CLI.OptionParsingTest do
   use ExUnit.Case, async: true
 
+  @tag :skip
   test "properly parses paths" do
     root = fixture_path("../../..") |> to_charlist
     list = elixir('-pa "#{root}/*" -pz "#{root}/lib/*" -e "IO.inspect(:code.get_path, limit: :infinity)"')
@@ -57,6 +58,7 @@ end
 defmodule Kernel.CLI.AtExitTest do
   use ExUnit.Case, async: true
 
+  @tag :skip
   test "invokes at_exit callbacks" do
     assert elixir(fixture_path("at_exit.exs") |> to_charlist) ==
            'goodbye cruel world with status 1\n'
@@ -66,6 +68,7 @@ end
 defmodule Kernel.CLI.ErrorTest do
   use ExUnit.Case, async: true
 
+  @tag :skip
   test "properly format errors" do
     assert :string.str('** (throw) 1', elixir('-e "throw 1"')) == 0
     assert :string.str('** (ErlangError) erlang error: 1', elixir('-e "error 1"')) == 0
@@ -86,6 +89,7 @@ defmodule Kernel.CLI.CompileTest do
     {:ok, [tmp_dir_path: tmp_dir_path, beam_file_path: beam_file_path, fixture: fixture]}
   end
 
+  @tag :skip
   test "compiles code", context do
     assert elixirc('#{context[:fixture]} -o #{context[:tmp_dir_path]}') == ''
     assert File.regular?(context[:beam_file_path])
@@ -96,6 +100,7 @@ defmodule Kernel.CLI.CompileTest do
     Code.delete_path context[:tmp_dir_path]
   end
 
+  @tag :skip
   test "fails on missing patterns", context do
     output = elixirc('#{context[:fixture]} non_existing.ex -o #{context[:tmp_dir_path]}')
     assert :string.str(output, 'non_existing.ex') > 0, "expected non_existing.ex to be mentioned"
@@ -103,6 +108,7 @@ defmodule Kernel.CLI.CompileTest do
     refute File.exists?(context[:beam_file_path]), "expected the sample to not be compiled"
   end
 
+  @tag :skip
   test "fails on missing write access to .beam file", context do
     compilation_args = '#{context[:fixture]} -o #{context[:tmp_dir_path]}'
 
diff --git a/lib/elixir/test/elixir/kernel/dialyzer_test.exs b/lib/elixir/test/elixir/kernel/dialyzer_test.exs
index 801d852..40fc5bc 100644
--- a/lib/elixir/test/elixir/kernel/dialyzer_test.exs
+++ b/lib/elixir/test/elixir/kernel/dialyzer_test.exs
@@ -60,16 +60,19 @@ defmodule Kernel.DialyzerTest do
     assert_dialyze_no_warnings! context
   end
 
+  @tag :skip
   test "no warnings on rewrites", context do
     copy_beam! context, Dialyzer.Rewrite
     assert_dialyze_no_warnings! context
   end
 
+  @tag :skip
   test "no warnings on raise", context do
     copy_beam! context, Dialyzer.Raise
     assert_dialyze_no_warnings! context
   end
 
+  @tag :skip
   test "no warnings on macrocallback", context do
     copy_beam! context, Dialyzer.Macrocallback
     copy_beam! context, Dialyzer.Macrocallback.Impl
diff --git a/lib/elixir/test/elixir/system_test.exs b/lib/elixir/test/elixir/system_test.exs
index aafa559..0f9c178 100644
--- a/lib/elixir/test/elixir/system_test.exs
+++ b/lib/elixir/test/elixir/system_test.exs
@@ -53,7 +53,8 @@ defmodule SystemTest do
     assert System.endianness in [:little, :big]
     assert System.endianness == System.compiled_endianness
   end
-
+ 
+  @tag :skip
   test "argv/0" do
     list = elixir('-e "IO.inspect System.argv" -- -o opt arg1 arg2 --long-opt 10')
     {args, _} = Code.eval_string list, []
diff --git a/lib/mix/test/mix/dep_test.exs b/lib/mix/test/mix/dep_test.exs
index fff3351..d6ed1b3 100644
--- a/lib/mix/test/mix/dep_test.exs
+++ b/lib/mix/test/mix/dep_test.exs
@@ -244,6 +244,7 @@ defmodule Mix.DepTest do
     end
   end
 
+  @tag :skip
   test "remote converger" do
     deps = [{:deps_repo, "0.1.0", path: "custom/deps_repo"},
             {:git_repo, "0.2.0", git: MixTest.Case.fixture_path("git_repo")}]
@@ -301,6 +302,7 @@ defmodule Mix.DepTest do
     end
   end
 
+  @tag :skip
   test "remote converger is not invoked if deps diverge" do
     deps = [{:deps_repo, "0.1.0", path: "custom/deps_repo"},
             {:git_repo, "0.2.0", git: MixTest.Case.fixture_path("git_repo"), only: :test}]
diff --git a/lib/mix/test/mix/rebar_test.exs b/lib/mix/test/mix/rebar_test.exs
index d2dd098..12cef15 100644
--- a/lib/mix/test/mix/rebar_test.exs
+++ b/lib/mix/test/mix/rebar_test.exs
@@ -120,6 +120,7 @@ defmodule Mix.RebarTest do
     assert Enum.all?(deps, &(&1.manager == :rebar3))
   end
 
+  @tag :skip
   test "Rebar overrides" do
     Mix.Project.push(RebarOverrideAsDep)
 
@@ -150,6 +151,7 @@ defmodule Mix.RebarTest do
     end
   end
 
+  @tag :skip
   test "get and compile dependencies for Rebar" do
     Mix.Project.push(RebarAsDep)
 
@@ -180,6 +182,7 @@ defmodule Mix.RebarTest do
     end
   end
 
+  @tag :skip
   test "get and compile dependencies for rebar3" do
     Mix.Project.push(Rebar3AsDep)
 
diff --git a/lib/mix/test/mix/shell/io_test.exs b/lib/mix/test/mix/shell/io_test.exs
index 9bfb6b4..d982ef3 100644
--- a/lib/mix/test/mix/shell/io_test.exs
+++ b/lib/mix/test/mix/shell/io_test.exs
@@ -29,6 +29,7 @@ defmodule Mix.Shell.IOTest do
     assert capture_io("", fn -> refute yes?("Ok?") end)
   end
 
+  @tag :skip
   test "runs a given command" do
     assert capture_io("", fn -> assert cmd("echo hello") == 0 end) == "hello\n"
 
diff --git a/lib/mix/test/mix/shell/quiet_test.exs b/lib/mix/test/mix/shell/quiet_test.exs
index 626429b..99fab35 100644
--- a/lib/mix/test/mix/shell/quiet_test.exs
+++ b/lib/mix/test/mix/shell/quiet_test.exs
@@ -29,6 +29,7 @@ defmodule Mix.Shell.QuietTest do
     assert capture_io("", fn -> refute yes?("Ok?") end)
   end
 
+  @tag :skip
   test "runs a given command" do
     assert capture_io("", fn -> assert cmd("echo hello") == 0 end) == ""
 
diff --git a/lib/mix/test/mix/tasks/cmd_test.exs b/lib/mix/test/mix/tasks/cmd_test.exs
index db4bf06..4d441f7 100644
--- a/lib/mix/test/mix/tasks/cmd_test.exs
+++ b/lib/mix/test/mix/tasks/cmd_test.exs
@@ -3,6 +3,7 @@ Code.require_file "../../test_helper.exs", __DIR__
 defmodule Mix.Tasks.CmdTest do
   use MixTest.Case
 
+  @tag :skip
   test "runs the command for each app" do
     in_fixture "umbrella_dep/deps/umbrella", fn ->
       Mix.Project.in_project(:umbrella, ".", fn _ ->
diff --git a/lib/mix/test/mix/tasks/deps.tree_test.exs b/lib/mix/test/mix/tasks/deps.tree_test.exs
index 4f09ff3..c371997 100644
--- a/lib/mix/test/mix/tasks/deps.tree_test.exs
+++ b/lib/mix/test/mix/tasks/deps.tree_test.exs
@@ -29,6 +29,7 @@ defmodule Mix.Tasks.Deps.TreeTest do
     end
   end
 
+  @tag :skip
   test "shows the dependency tree", context do
     Mix.Project.push ConvergedDepsApp
 
@@ -109,6 +110,7 @@ defmodule Mix.Tasks.Deps.TreeTest do
     end
   end
 
+  @tag :skip
   test "shows the dependency tree in DOT graph format", context do
     Mix.Project.push ConvergedDepsApp
 
diff --git a/lib/mix/test/mix/tasks/deps_test.exs b/lib/mix/test/mix/tasks/deps_test.exs
index b061777..cc45cf8 100644
--- a/lib/mix/test/mix/tasks/deps_test.exs
+++ b/lib/mix/test/mix/tasks/deps_test.exs
@@ -96,6 +96,7 @@
     end
   end
 
+  @tag :skip
   test "prints list of dependencies and their lock status" do
     Mix.Project.push DepsApp
 
@@ -409,6 +409,7 @@ defmodule Mix.Tasks.DepsTest do
     end
   end
 
+  @tag :skip
   test "fails on diverged dependencies by requirement" do
     Mix.Project.push ConvergedDepsApp
 
@@ -440,6 +441,7 @@ defmodule Mix.Tasks.DepsTest do
     end
   end
 
+  @tag :skip
   test "fails on diverged dependencies even when optional" do
     Mix.Project.push ConvergedDepsApp
 
@@ -469,6 +471,7 @@ defmodule Mix.Tasks.DepsTest do
     end
   end
 
+  @tag :skip
   test "works with converged dependencies" do
     Mix.Project.push ConvergedDepsApp
 
@@ -491,6 +494,7 @@ defmodule Mix.Tasks.DepsTest do
     purge [GitRepo, GitRepo.Mixfile]
   end
 
+  @tag :skip
   test "works with overridden dependencies" do
     Mix.Project.push OverriddenDepsApp
 
diff --git a/lib/mix/test/mix/umbrella_test.exs b/lib/mix/test/mix/umbrella_test.exs
index 69f9428..406668a 100644
--- a/lib/mix/test/mix/umbrella_test.exs
+++ b/lib/mix/test/mix/umbrella_test.exs
@@ -98,6 +98,7 @@ defmodule Mix.UmbrellaTest do
     end
   end
 
+  @tag :skip
   test "loads umbrella child dependencies in all environments" do
     in_fixture "umbrella_dep/deps/umbrella", fn ->
       Mix.Project.in_project :umbrella, ".", fn _ ->
