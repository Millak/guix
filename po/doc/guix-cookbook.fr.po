# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Julien Lepiller <fedora-account@lepiller.eu>, 2021, 2022, 2023, 2024, 2025.
# Francois Polito <francois@polito.se>, 2021.
# tisse vert <tissevert+fedora@marvid.fr>, 2021.
# Florian Pelz <pelzflorian@pelzflorian.de>, 2023, 2024, 2025.
# Adriel Dumas--Jondeau <leirda@disroot.org>, 2023.
# D D <david.ducassou@gmail.com>, 2024.
# Léane GRASSER <leane.grasser@proton.me>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2025-10-21 03:18+0000\n"
"PO-Revision-Date: 2025-10-31 20:13+0000\n"
"Last-Translator: pelzflorian <pelzflorian@noreply.codeberg.org>\n"
"Language-Team: French <https://translate.codeberg.org/projects/guix/documentation-cookbook/fr/>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 5.14\n"

msgid "@documentencoding UTF-8"
msgstr ""
"@documentencoding UTF-8\n"
"@documentlanguage fr\n"
"@frenchspacing on"

msgid "GNU Guix Cookbook"
msgstr "Livre de recettes de GNU Guix"

msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023-2025 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong@* Copyright @copyright{} 2024 Florian Pelz@* Copyright @copyright{} 2025 45mg@* Copyright @copyright{} 2023 Marek Felšöci@* Copyright @copyright{} 2023 Konrad Hinsen@* Copyright @copyright{} 2023 Philippe Swartvagher@*"
msgstr ""
"Copyright @copyright{} 2019, 2022 Ricardo Wurmus@*\n"
"Copyright @copyright{} 2019 Efraim Flashner@*\n"
"Copyright @copyright{} 2019 Pierre Neidhardt@*\n"
"Copyright @copyright{} 2020 Oleg Pykhalov@*\n"
"Copyright @copyright{} 2020 Matthew Brooks@*\n"
"Copyright @copyright{} 2020 Marcin Karpezo@*\n"
"Copyright @copyright{} 2020 Brice Waegeneire@*\n"
"Copyright @copyright{} 2020 André Batista@*\n"
"Copyright @copyright{} 2020 Christine Lemmer-Webber@*\n"
"Copyright @copyright{} 2021 Joshua Branson@*\n"
"Copyright @copyright{} 2022, 2023 Maxim Cournoyer@*\n"
"Copyright @copyright{} 2023-2025 Ludovic Courtès@*\n"
"Copyright @copyright{} 2023 Thomas Ieong@*\n"
"Copyright @copyright{} 2024 Florian Pelz@*\n"
"Copyright @copyright{} 2025 45mg@*\n"
"Copyright @copyright{} 2023 Marek Felšöci@*\n"
"Copyright @copyright{} 2023 Konrad Hinsen@*\n"
"Copyright @copyright{} 2023 Philippe Swartvagher@*"

msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Vous avez la permission de copier, distribuer ou modifier ce document sous les termes de la Licence GNU Free Documentation, version 1.3 ou toute version ultérieure publiée par la Free Software Foundation ; sans section invariante, texte de couverture et sans texte de quatrième de couverture.  Une copie de la licence est incluse dans la section intitulée « GNU Free Documentation License »."

msgid "System administration"
msgstr "Administration système"

msgid "Guix cookbook: (guix-cookbook)"
msgstr "Livre de recettes de Guix: (guix-cookbook.fr)"

msgid "Tutorials and examples for GNU Guix."
msgstr "Didacticiels et exemples pour GNU Guix."

msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "Didacticiels et exemples d'utilisation du gestionnaire de paquets GNU Guix"

msgid "The GNU Guix Developers"
msgstr "Les développeurs de GNU Guix"

msgid "Top"
msgstr "Top"

msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr "Ce document propose des didacticiels et des exemples détaillés pour GNU@tie{}Guix, un outil de gestion des paquets fonctionnel écrit pour le système GNU. @pxref{Top,,, guix.fr, le manuel de référence de Guix} pour plus de détails sur le système, son API et les concepts associés."

msgid "This manual is also available in Simplified Chinese (@pxref{Top,,, guix-cookbook.zh_CN, GNU Guix 烹饪书}), French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}), German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), Korean (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), Spanish (@pxref{Top,,, guix-cookbook.es, Libro de recetas de GNU Guix}), Italian (@pxref{Top,,, guix-cookbook.it, Ricettario di GNU Guix}), Brazilian Portuguese (@pxref{Top,,, guix-cookbook.pt_BR, Livro de receitas do GNU Guix}), Russian (@pxref{Top,,, guix-cookbook.ru, GNU Guix Рецепты}), Slovak (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}), and Swedish (@pxref{Top,,, guix-cookbook.sv, Kokbok för GNU Guix}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.codeberg.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix Reference Manual})."
msgstr "Ce manuel est aussi disponible en anglais (@pxref{Top,,, guix-cookbook, GNU Guix Cookbook}), en chinois simplifié (@pxref{Top,,, guix-cookbook.zh_CN, GNU Guix 烹饪书}), en allemand (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), en coréen (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), en espagnol (@pxref{Top,,, guix-cookbook.es, Libro de recetas de GNU Guix}), en italien (@pxref{Top,,, guix-cookbook.it, Ricettario di GNU Guix}), en portugais brésilien (@pxref{Top,,, guix-cookbook.pt_BR, Livro de receitas do GNU Guix}), en russe (@pxref{Top,,, guix-cookbook.ru, GNU Guix Рецепты}), en slovaque (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}) et en suédois (@pxref{Top,,, guix-cookbook.sv, Kokbok för GNU Guix}). Si vous désirez traduire ce document dans votre langue maternelle, rejoignez @uref{https://translate.codeberg.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Traduire Guix,,, guix.fr, le manuel de référence de Guix})."

msgid "Scheme tutorials"
msgstr "Didacticiels pour Scheme"

msgid "Meet your new favorite language!"
msgstr "Découvrez votre nouveau langage préféré !"

msgid "Packaging"
msgstr "Empaquetage"

msgid "Packaging tutorials"
msgstr "Didacticiels d'empaquetage"

msgid "System Configuration"
msgstr "Configuration du système"

msgid "Customizing the GNU System"
msgstr "Personnalisation du système GNU"

msgid "Containers"
msgstr "Conteneurs"

msgid "Isolated environments and nested systems"
msgstr "Environnements isolés et systèmes imbriqués"

msgid "Virtual Machines"
msgstr "Machines virtuelles"

msgid "Virtual machines usage and configuration"
msgstr "Utilisation et configuration des machines virtuelles"

msgid "Advanced package management"
msgstr "Gestion avancée des paquets"

msgid "Power to the users!"
msgstr "Le pouvoir aux utilisateurs !"

msgid "Software Development"
msgstr "Développement logiciel"

msgid "Environments, continuous integration, etc."
msgstr "Environnements, intégration continue, etc."

msgid "Environment management"
msgstr "Gestion de l'environnement"

msgid "Control environment"
msgstr "Environnement de contrôle"

msgid "Reproducible Research"
msgstr "Recherche reproductible"

msgid "A foundation for reproducible research."
msgstr "Les bases pour la recherche reproductible."

msgid "Installing Guix on a Cluster"
msgstr "Installer Guix sur une grappe de calcul"

msgid "High-performance computing."
msgstr "Calcul haute-performance."

msgid "Guix System Management"
msgstr "Gestion du système Guix"

msgid "System Management specifics."
msgstr "Spécificités de la gestion système."

msgid "Acknowledgments"
msgstr "Remerciements"

msgid "Thanks!"
msgstr "Merci !"

msgid "GNU Free Documentation License"
msgstr "La licence GNU Free Documentation"

msgid "The license of this document."
msgstr "La licence de ce document."

msgid "Concept Index"
msgstr "Index des concepts"

msgid "Concepts."
msgstr "Les concepts."

msgid "--- The Detailed Node Listing ---"
msgstr "--- Liste détaillée des nœuds ---"

msgid "A Scheme Crash Course"
msgstr "Cours accéléré du langage Scheme"

msgid "Packaging Tutorial"
msgstr "Didacticiel d'empaquetage"

msgid "A tutorial on how to add packages to Guix."
msgstr "Un didacticiel sur la manière d'ajouter des paquets à Guix."

msgid "Packaging Workflows"
msgstr "Fonctionnement de l'empaquetage"

msgid "Real life examples on working with specific build systems."
msgstr "Exemples réels sur la manière de travailler avec des systèmes de construction particuliers."

msgid "A ``Hello World'' package"
msgstr "Un paquet « hello world »"

msgid "Setup"
msgstr "Configuration"

msgid "Extended example"
msgstr "Exemple avancé"

msgid "Other build systems"
msgstr "Autres systèmes de construction"

msgid "Programmable and automated package definition"
msgstr "Définition programmable et automatisée"

msgid "Getting help"
msgstr "Se faire aider"

msgid "Conclusion"
msgstr "Conclusion"

msgid "References"
msgstr "Références"

msgid "Local file"
msgstr "Fichier local"

msgid "Channels"
msgstr "Canaux"

msgid "Direct checkout hacking"
msgstr "Bidouillage direct dans le dépôt git"

msgid "Recursive importers"
msgstr "Les importateurs récursifs"

msgid "Automatic update"
msgstr "Mise à jour automatique"

msgid "Inheritance"
msgstr "Héritage"

msgid "Packaging Rust Crates"
msgstr "Empaqueter des crates Rust"

msgid "Common Workflow for Rust Packaging"
msgstr "Méthode de travail habituelle pour l'empaquetage Rust"

msgid "Cargo Workspaces and Development Snapshots"
msgstr "Espaces de travail Cargo et images de développement"

msgid "Using Rust Libraries in Other Build Systems"
msgstr "Utiliser les bibliothèques Rust dans d'autres systèmes de construction"

msgid "Auto-Login to a Specific TTY"
msgstr "Connexion automatique à un TTY donné"

msgid "Automatically Login a User to a Specific TTY"
msgstr "Connecter automatiquement un utilisateur sur un TTY donné"

msgid "Customizing the Kernel"
msgstr "Personnalisation du noyau"

msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Créer et utiliser un noyau Linux personnalisé sur le système Guix."

msgid "Guix System Image API"
msgstr "L'API de création d'images du système Guix"

msgid "Customizing images to target specific platforms."
msgstr "Personnaliser des images pour des plateformes particulières."

msgid "Using security keys"
msgstr "Utiliser des clés de sécurité"

msgid "How to use security keys with Guix System."
msgstr "Comment utiliser des clés de sécurité avec le système Guix."

msgid "Dynamic DNS mcron job"
msgstr "Tâche mcron pour le DNS dynamique"

msgid "Job to update the IP address behind a DuckDNS host name."
msgstr "Tâche pour mettre à jour l'adresse IP derrière un nom d'hôte DuckDNS."

msgid "Connecting to Wireguard VPN"
msgstr "Se connecter à un VPN Wireguard"

msgid "Connecting to a Wireguard VPN."
msgstr "Se connecter à un VPN Wireguard."

msgid "Customizing a Window Manager"
msgstr "Personnaliser un gestionnaire de fenêtres"

msgid "Handle customization of a Window manager on Guix System."
msgstr "Gérer la personnalisation d'un gestionnaire de fenêtres sur le système Guix."

msgid "Running Guix on a Linode Server"
msgstr "Lancer Guix sur un serveur Linode"

msgid "Running Guix on a Linode Server."
msgstr "Lancer Guix sur un serveur Linode."

msgid "Running Guix on a Kimsufi Server"
msgstr "Lancer Guix sur un serveur Kimsufi"

msgid "Running Guix on a Kimsufi Server."
msgstr "Lancer Guix sur un serveur Kimsufi."

msgid "Setting up a bind mount"
msgstr "Mettre en place un montage dupliqué"

msgid "Setting up a bind mount in the file-systems definition."
msgstr "Mettre en place un montage dupliqué dans une définition de système de fichiers."

msgid "Getting substitutes from Tor"
msgstr "Récupérer des substituts via Tor"

msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr "Configurer le démon Guix pour récupérer les substituts via Tor."

msgid "Setting up NGINX with Lua"
msgstr "Configurer NGINX avec Lua"

msgid "Configuring NGINX web-server to load Lua modules."
msgstr "Configurer le serveur web NGINX pour qu'il charge des modules Lua."

msgid "Music Server with Bluetooth Audio"
msgstr "Serveur de musique avec l'audio bluetooth"

msgid "Headless music player with Bluetooth output."
msgstr "Lecteur de musique sans affichage avec entrée bluetooth."

msgid "StumpWM"
msgstr "StumpWM"

msgid "Session lock"
msgstr "Verrouillage de session"

msgid "Xorg"
msgstr "Xorg"

msgid "Guix Containers"
msgstr "Conteneurs Guix"

msgid "Perfectly isolated environments"
msgstr "Environnements parfaitement isolés"

msgid "Guix System Containers"
msgstr "Conteneurs pour le système Guix"

msgid "A system inside your system"
msgstr "Un système dans votre système"

msgid "A Database Container"
msgstr "Un conteneur de base de données"

msgid "Container Networking"
msgstr "Utilisation du réseau dans le conteneur"

msgid "Network bridge for QEMU"
msgstr "Pont réseau pour QEMU"

msgid "Routed network for libvirt"
msgstr "Réseau routé pour libvirt"

msgid "Custom NAT-based network for libvirt"
msgstr "Réseau personnalisé basé sur le NAT pour libvirt"

msgid "References: VM References"
msgstr "Références : Références sur les VM"

msgid "Further reading on virtual machines."
msgstr "De la lecture à propose des machines virtuelles."

msgid "Guix Profiles in Practice"
msgstr "Les profils Guix en pratique"

msgid "Strategies for multiple profiles and manifests."
msgstr "Stratégies pour gérer plusieurs profils et manifestes."

msgid "Basic setup with manifests"
msgstr "Utilisation de base avec des manifestes"

msgid "Required packages"
msgstr "Paquets requis"

msgid "Default profile"
msgstr "Profil par défaut"

msgid "The benefits of manifests"
msgstr "Les avantages des manifestes"

msgid "Reproducible profiles"
msgstr "Profils reproductibles"

msgid "Getting Started"
msgstr "Guide de démarrage"

msgid "Step 0: using `guix shell'."
msgstr "Étape 0 : Utiliser `guix shell'."

msgid "Building with Guix"
msgstr "Compilation avec Guix"

msgid "Step 1: building your code."
msgstr "Étape 1 : compiler votre code."

msgid "The Repository as a Channel"
msgstr "Le dépôt comme canal"

msgid "Step 2: turning the repo in a channel."
msgstr "Étape 2 : Transformer le dépôt en canal."

msgid "Package Variants"
msgstr "Variantes de paquets"

msgid "Bonus: Defining variants."
msgstr "Bonus : Définir des variants."

msgid "Setting Up Continuous Integration"
msgstr "Mettre en place une intégration continue"

msgid "Step 3: continuous integration."
msgstr "Étape 3 : intégration continue."

msgid "Build Manifest"
msgstr "Manifeste de construction"

msgid "Bonus: Manifest."
msgstr "Bonus : Manifeste."

msgid "Wrapping Up"
msgstr "Récapitulatif"

msgid "Recap."
msgstr "Récapitulatif"

msgid "Guix environment via direnv"
msgstr "Environnement Guix avec direnv"

msgid "Setup Guix environment with direnv"
msgstr "Créer un environnement Guix avec direnv"

msgid "Using Guix for Reproducible Research"
msgstr "Utiliser Guix pour la recherche reproductible"

msgid "Setting Up the Environment"
msgstr "Mettre en place l'environnement"

msgid "Step 1: using `guix shell'."
msgstr "Étape 1 : Utiliser `guix shell'."

msgid "Recording the Environment"
msgstr "Enregistrer l'environnement"

msgid "Step 2: using `guix describe'."
msgstr "Étape 2 : Utiliser `guix describe'."

msgid "Ensuring Long-Term Source Code Archiving"
msgstr "S'assurer d'un archivage du code source sur le long-terme"

msgid "Step 3: Software Heritage."
msgstr "Étape 3 : Software Heritage."

msgid "Referencing the Software Environment"
msgstr "Référencer l'environnement logiciel"

msgid "Step 4: SWHIDs."
msgstr "Étape 4 : les SWHID."

msgid "Setting Up a Head Node"
msgstr "Mettre en place un nœud principal"

msgid "The node that runs the daemon."
msgstr "Le nœud qui fait tourner le démon."

msgid "Setting Up Compute Nodes"
msgstr "Mettre en place des nœuds de calcul"

msgid "Client nodes."
msgstr "Les nœuds clients."

msgid "Cluster Network Access"
msgstr "Accès réseau de la grappe"

msgid "Dealing with network access restrictions."
msgstr "Gérer les restrictions d'accès réseau."

msgid "Cluster Disk Usage"
msgstr "Utilisation de disque de la grappe"

msgid "Disk usage considerations."
msgstr "Considérations d'utilisation de l'espace disque."

msgid "Cluster Security Considerations"
msgstr "Considérations de sécurité de la grappe"

msgid "Keeping the cluster secure."
msgstr "Garder votre grappe sécurisée."

msgid "Upgrade Postgres for Cuirass"
msgstr "Mise à jour de Postgres pour Cuirass"

msgid "Upgrading from the default postgres."
msgstr "Mise à jour des paramètres par défaut de postgres."

msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr "GNU@tie{}Guix est écrit dans le langage de programmation Scheme.  Nombre de ses fonctionnalités peuvent être consultées et manipulées par programmation. Vous pouvez utiliser Scheme entre autres pour générer des définitions de paquets, pour les modifier, pour les compiler ou pour déployer des systèmes d'exploitation entiers."

msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr "Connaître les bases de la programmation en Scheme vous permettra d'utiliser de nombreuses fonctionnalités avancées de Guix --- et vous n'avez pas besoin d'être un·e programmeur·euse chevronné·e !"

msgid "Let's get started!"
msgstr "C'est parti !"

msgid "Scheme, crash course"
msgstr "Scheme, cours accéléré"

msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr "Guix utilise l'implémentation Guile du langage Scheme. Pour commencer à jouer avec le langage, installez-le avec @code{guix install guile} et démarrer une @dfn{BLÉA} (@dfn{REPL} en anglais), une @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{boucle de lecture, évaluation, affichage}}, en lançant @code{guile} sur la ligne de commande."

msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr "Vous pouvez également lancer la commande @code{guix shell guile -- guile} si vous préférez ne pas installer Guile dans votre profil utilisateur."

msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr "Dans les exemples suivants, les lignes montrent ce que vous devez taper sur la REPL ; les lignes commençant par « @result{} » montrent le résultat de l'évaluation, tandis que les lignes commençant par « @print{} » montrent ce qui est affiché. @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, pour plus d'information sur la REPL."

msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr "La syntaxe de Scheme se résume à un arbre d'expressions (ou une @emph{s-expression} dans le jargon Lisp). Une expression peut être un litéral comme un nombre ou une chaîne de caractères, ou composée d'une liste d'autres éléments composés et litéraux, entourée de parenthèses. @code{#true} et @code{#false} (abrégés @code{#t} et @code{#f}) correspondent aux booléens « vrai » et « faux »."

msgid "Examples of valid expressions:"
msgstr "Voici des exemples d'expressions valides :"

msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""
"\"Bonjour le monde !\"\n"
"@result{} \"Bonjour le monde !\"\n"
"\n"

msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""
"17\n"
"@result{} 17\n"
"\n"

msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""
"(display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"@print{} Bonjour Guix\n"
"@result{} #<unspecified>\n"

msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr "Ce dernier exemple est un appel de fonction imbriqué dans un autre appel de fonction. Lorsqu'une expression parenthésée est évaluée, le premier élément est la fonction et le reste sont les arguments passés à la fonction. Chaque fonction renvoie la dernière expression évaluée."

msgid "Anonymous functions---@dfn{procedures} in Scheme parlance---are declared with the @code{lambda} term:"
msgstr "On peut déclarer des fonctions anonymes — des @dfn{procédures} en Scheme — avec le terme @code{lambda} :"

msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"

msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr "La procédure ci-dessus renvoie le carré de son argument. Comme tout est une expression, l'expression @code{lambda} renvoie une procédure anonyme, qui peut ensuite être appliquée à un argument :"

msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"

msgid "Procedures are regular values just like numbers, strings, Booleans, and so on."
msgstr "Les procédures sont des valeurs normales comme les nombres, les chaines de caractère, les booléens, etc."

msgid "Anything can be assigned a global name with @code{define}:"
msgstr "On peut assigner un nom global à tout ce qu'on veut avec @code{define} :"

msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"

msgid "Procedures can be defined more concisely with the following syntax:"
msgstr "On peut définir des procédure de manière plus concise avec la syntaxe suivante :"

msgid "(define (square x) (* x x))\n"
msgstr "(define (square x) (* x x))\n"

msgid "A list structure can be created with the @code{list} procedure:"
msgstr "On peut créer une structure de liste avec la procédure @code{list} :"

msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"

msgid "Standard procedures are provided by the @code{(srfi srfi-1)} module to create and process lists (@pxref{SRFI-1, list processing,, guile, GNU Guile Reference Manual}).  Here are some of the most useful ones in action:"
msgstr "Des procédures standards sont fournies par le module @code{(srfi srfi-1)} pour créer et traiter des listes (@pxref{SRFI-1, list processing,, guile, le manuel de référence de GNU Guile}). Voici certaines des plus utiles en action :"

msgid ""
"(use-modules (srfi srfi-1))  ;import list processing procedures\n"
"\n"
msgstr ""
"(use-modules (srfi srfi-1))  ; importe les procédures de traitement des listes\n"
"\n"

msgid ""
"(append (list 1 2) (list 3 4))\n"
"@result{} (1 2 3 4)\n"
"\n"
msgstr ""
"(append (list 1 2) (list 3 4))\n"
"@result{} (1 2 3 4)\n"
"\n"

msgid ""
"(map (lambda (x) (* x x)) (list 1 2 3 4))\n"
"@result{} (1 4 9 16)\n"
"\n"
msgstr ""
"(map (lambda (x) (* x x)) (list 1 2 3 4))\n"
"@result{} (1 4 9 16)\n"
"\n"

msgid ""
"(delete 3 (list 1 2 3 4))        @result{} (1 2 4)\n"
"(filter odd? (list 1 2 3 4))     @result{} (1 3)\n"
"(remove even? (list 1 2 3 4))    @result{} (1 3)\n"
"(find number? (list \"a\" 42 \"b\")) @result{} 42\n"
msgstr ""
"(delete 3 (list 1 2 3 4))        @result{} (1 2 4)\n"
"(filter odd? (list 1 2 3 4))     @result{} (1 3)\n"
"(remove even? (list 1 2 3 4))    @result{} (1 3)\n"
"(find number? (list \"a\" 42 \"b\")) @result{} 42\n"

msgid "Notice how the first argument to @code{map}, @code{filter}, @code{remove}, and @code{find} is a procedure!"
msgstr "Remarquez que le premier argument de @code{map}, @code{filter}, @code{remove} et @code{find} est une procédure !"

msgid "S-expression"
msgstr "S-expression"

msgid "The @dfn{quote} disables evaluation of a parenthesized expression, also called an S-expression or ``s-exp'': the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr "La @dfn{quote} (l'apostrophe) désactive l'évaluation d'une expression parenthésée, aussi appelée S-expression ou « s-exp » : le premier élément n'est pas appelé avec les autres éléments en argument (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}). Donc, il renvoie une liste de termes."

msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""
"'(display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"\n"

msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"

msgid "The @code{quasiquote} (@code{`}, a backquote) disables evaluation of a parenthesized expression until @code{unquote} (@code{,}, a comma)  re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr "La @code{quasiquote} (@code{`}, l'apostrophe à l'envers) désactive l'évaluation d'une expression parenthésée jusqu'à ce qu'un @code{unquote} (@code{,}, une virgule) la réactive. De cette manière, on garde un contrôle fin sur ce qui est évalué et sur ce qui ne l'est pas."

msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"

msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr "Remarquez que le résultat ci-dessus est une liste d'éléments mixtes : des nombres, des symboles (ici @code{a}) et le dernier élément est aussi une liste."

msgid "G-expressions, syntax"
msgstr "G-expressions, syntaxe"

msgid "gexps, syntax"
msgstr "gexps, syntaxe"

msgid "#~"
msgstr "#~"

msgid "#$"
msgstr "#$"

msgid "gexp"
msgstr "gexp"

msgid "ungexp"
msgstr "ungexp"

msgid "Guix defines a variant of S-expressions on steroids called @dfn{G-expressions} or ``gexps'', which come with a variant of @code{quasiquote} and @code{unquote}: @code{#~} (or @code{gexp}) and @code{#$} (or @code{ungexp}).  They let you @emph{stage code for later execution}."
msgstr "Guix définit une variante des S-expressions gonflées aux stéroïdes appelées @dfn{G-expressions} ou « gexps », qui fournit une variante de @code{quasiquote} et @code{unquote} : @code{#~} (ou @code{gexp}) et @code{#$} (ou @code{ungexp}). Elles vous permettent @emph{d'échelonner du code pour une future exécution}."

msgid "For example, you'll encounter gexps in some package definitions where they provide code to be executed during the package build process.  They look like this:"
msgstr "Par exemple, vous rencontrerez des gexps dans certaines définitions de paquets qui fournissent du code à exécuter pendant la construction du paquet. Elles ressemblent à ceci :"

msgid ""
"(use-modules (guix gexp)           ;so we can write gexps\n"
"             (gnu packages base))  ;for 'coreutils'\n"
"\n"
msgstr ""
"(use-modules (guix gexp)           ;pour qu'on puisse écrire des gexps\n"
"             (gnu packages base))  ;pour « coreutils »\n"
"\n"

msgid ""
";; Below is a G-expression representing staged code.\n"
"#~(begin\n"
"    ;; Invoke 'ls' from the package defined by the 'coreutils'\n"
"    ;; variable.\n"
"    (system* #$(file-append coreutils \"/bin/ls\") \"-l\")\n"
"\n"
msgstr ""
";; Ci-dessous, une G-expression représentant du code échelonné.\n"
"#~(begin\n"
"    ;; Invoque « ls » du paquet défini par la variable\n"
"    ;; « coreutils ».\n"
"    (system* #$(file-append coreutils \"/bin/ls\") \"-l\")\n"
"\n"

msgid ""
"    ;; Create this package's output directory.\n"
"    (mkdir #$output))\n"
msgstr ""
"    ;; Crée le répertoire de sortie de ce paquet.\n"
"    (mkdir #$output))\n"

msgid "@xref{G-Expressions,,, guix, GNU Guix Reference Manual}, for more on gexps."
msgstr "@xref{G-Expressions,,, guix.fr, le manuel de référence de GNU Guix}, pour plus de détails sur les gexps."

msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr "On peut nommer localement plusieurs variables avec @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}) :"

msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"

msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""
"x\n"
"@result{} 10\n"
"\n"

msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"

msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr "On peut utiliser @code{let*} pour permettre au déclarations de variables ultérieures d'utiliser les définitions précédentes."

msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"

msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr "On utilise typiquement des @dfn{mot-clés} pour identifier les paramètres nommés d'une procédure. Ils sont précédés de @code{#:} (dièse, deux-points) suivi par des caractères alphanumériques : @code{#:comme-ça}. @xref{Keywords,,, guile, GNU Guile Reference Manual}."

msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr "On utilise souvent le signe pourcent @code{%} pour les variables globales non modifiables à l'étape de construction. Remarquez que ce n'est qu'une convention, comme @code{_} en C. Scheme traite @code{%} de la même manière que les autres lettres."

msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr "On peut créer des modules avec @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}). Par exemple"

msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"

msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr "défini le module @code{guix build-system ruby} qui doit se situer dans @file{guix/build-system/ruby.scm} quelque part dans le chemin de recherche de Guile. Il dépend du module @code{(guix store)} et exporte deux variables, @code{ruby-build} et @code{ruby-build-system}."

msgid "@xref{Package Modules,,, guix, GNU Guix Reference Manual}, for info on modules that define packages."
msgstr "@xref{Modules de paquets,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'information sur les modules qui définissent des paquets."

msgid "Going further"
msgstr "Pour aller plus loin"

msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr "Scheme est un langage qui a été beaucoup utilisé pour enseigner la programmation et vous trouverez plein de supports qui l'utilisent. Voici une liste de documents qui vous en apprendront plus sur le Scheme :"

msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, par Christine Lemmer-Webber et le Spritely Institute."

msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, Scheme at a Glance}, par Steve Litt."

msgid "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, par Harold Abelson et Gerald Jay Sussman, avec Julie Sussman.  Souvent appelé ``SICP'', ce livre est une référence."

msgid "You can also install it and read it from your computer:"
msgstr "Vous pouvez aussi l'installer et le lire sur votre ordinateur :"

msgid ""
"guix install book-sicp info-reader\n"
"info sicp\n"
msgstr ""
"guix install book-sicp info-reader\n"
"info sicp\n"

msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr "Vous trouverez plus de livres, de didacticiels et d'autres ressources sur @url{https://schemers.org/}."

msgid "packaging"
msgstr "empaquetage"

msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr "Ce chapitre est conçu pour vous enseigner comment ajouter des paquets à la collection de paquets de GNU Guix. Pour cela, vous devrez écrire des définitions de paquets en Guile Scheme, les organiser en modules et les construire."

msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr "GNU Guix se démarque des autres gestionnaire de paquets en étant @emph{bidouillable}, surtout parce qu'il utilise @uref{https://www.gnu.org/software/guile/,GNU Guile}, un langage de programmation de haut-niveau puissant, l'un des dialectes @uref{https://fr.wikipedia.org/wiki/Scheme, Scheme} de @uref{https://fr.wikipedia.org/wiki/Lisp, la famille Lisp}."

msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr "Les définitions de paquets sont aussi écrites en Scheme, ce qui le rend plus puissant de manière assez unique par rapport aux autres gestionnaires de paquets qui utilisent des scripts shell ou des langages simples."

msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr "Vous pouvez utiliser des fonctions, des structures, des macros et toute l'expressivité de Scheme dans vos définitions de paquets."

msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr "L'héritage facilite la personnalisation d'un paquet en héritant d'un autre et en modifiant uniquement les points nécessaires."

msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr "Traitement par lot : la collection des paquets entière peut être analysée, filtrée et traitée. Vous voulez construire un serveur sans interface graphique ? C'est possible. Vous voulez tout reconstruire à partir des sources avec des drapeaux d'optimisation spécifiques ? Passez l'argument @code{#:make-flags \"…\"} à la liste des paquets. Ce ne serait pas aberrant de penser @uref{https://wiki.gentoo.org/wiki/USE_flag, au drapeau USE de Gentoo}, mais cela va plus loin : la personne qui crée les paquets n'a pas besoin de penser à l'avance à ces changements, ils peuvent être @emph{programmés} par l'utilisateur ou l'utilisatrice !"

msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr "Le didacticiel suivant traite des bases de la création de paquets avec Guix. Il ne présuppose aucune connaissance du système Guix ni du langage Lisp. On ne s'attend qu'à ce que vous aillez une certaine familiarité avec la ligne de commande et des connaissances de base en programmation."

msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr "La section « Définition des paquets » du manuel explique les bases de l'empaquetage avec Guix (@pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix}). Dans la section suivante, nous reparlerons en partie de ces bases."

msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr "GNU@tie{}Hello est un exemple de projet qui sert d'exemple idiomatique pour l'empaquetage. Il utilise le système de construction de GNU (@code{./configure && make && make install}). Guix fournit déjà une définition de paquet qui est un parfait exemple pour commencer. Vous pouvez voir sa déclaration avec @code{guix edit hello} depuis la ligne de commande. Voyons à quoi elle ressemble :"

msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr "Comme vous pouvez le voir, la plus grosse partie est assez simple. Mais examinons les champs ensemble :"

msgid "name"
msgstr "name"

msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr "Le nom du projet. Avec les conventions de Scheme, on préfère le laisser en minuscule, sans tiret du bas, en séparant les mots par des tirets."

msgid "source"
msgstr "source"

msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr "Ce champ contient une description de l'origine du code source. L'enregistrement @code{origin} contient ces champs :"

msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr "La méthode, ici @code{url-fetch} pour télécharger via HTTP/FTP, mais d'autres méthodes"

msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr "existent, comme @code{git-fetch} pour les dépôts Git."

msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr "L'URI, qui est typiquement un emplacement @code{https://} pour @code{url-fetch}. Ici"

msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr "le code spécial « mirror://gnu » fait référence à une ensemble d'emplacements bien connus, qui peuvent tous être utilisés par Guix pour récupérer la source, si l'un d'entre eux échoue."

msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr "La somme de contrôle @code{sha256} du fichier demandé. C'est essentiel pour s'assurer"

msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr "que la source n'est pas corrompue. Remarquez que Guix fonctionne avec des chaînes en base32, d'où l'appel à la fonction @code{base32}."

msgid "build-system"
msgstr "build-system"

msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr "C'est ici que la puissance d'abstraction du langage Scheme brille de toute sa splendeur : dans ce cas, le @code{gnu-build-system} permet d'abstraire les fameuses invocations shell @code{./configure && make && make install}. Parmi les autres systèmes de construction on trouve le @code{trivial-build-system} qui ne fait rien et demande de programmer toutes les étapes de construction, le @code{python-build-system}, @code{emacs-build-system} et bien d'autres (@pxref{Systèmes de construction,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "synopsis"
msgstr "synopsis"

msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr "Le synopsis devrait être un résumé court de ce que fait le paquet. Pour beaucoup de paquets, le slogan de la page d'accueil du projet est approprié pour le synopsis."

msgid "description"
msgstr "description"

msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr "Comme le synopsis, vous pouvez réutiliser la description de la page d'accueil du projet. Remarquez que Guix utilise la syntaxe Texinfo."

msgid "home-page"
msgstr "home-page"

msgid "Use HTTPS if available."
msgstr "Utilisez l'adresse en HTTPS si elle est disponible."

msgid "license"
msgstr "license"

msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr "Voir @code{guix/licenses.scm} dans les sources du projet pour une liste complète des licences disponibles."

msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr "Il est temps de construire notre premier paquet ! Rien de bien compliqué pour l'instant : nous allons garder notre exemple avec @code{my-hello}, une copie de la déclaration montrée plus haut."

msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr "Comme avec le rituel « Hello World » enseigné avec la plupart des langages de programmation, ce sera sans doute l'approche la plus « manuelle » d'empaquetage que vous utiliserez. Nous vous montrerons une configuration idéale plus tard, pour l'instant nous allons suivre la voie la plus simple."

msgid "Save the following to a file @file{my-hello.scm}."
msgstr "Enregistrez ce qui suit dans un fichier nommé @file{my-hello.scm}."

msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"

msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"

msgid "We will explain the extra code in a moment."
msgstr "Nous allons expliquer le code supplémentaire dans un moment."

msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr "Essayez de jouer avec les différentes valeurs des différents champs. Si vous changez la source, vous devrez mettre à jour la somme de contrôle. En fait, Guix refusera de construire quoi que ce soit si la somme de contrôle donnée ne correspond pas à la somme de contrôle calculée de la source téléchargée. Pour obtenir la bonne somme de contrôle pour une déclaration de paquet, vous devrez télécharger la source, calculer la somme de contrôle sha256 et la convertir en base32."

msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr "Heureusement, Guix peut automatiser cette tache pour nous ; tout ce qu'on doit faire est de lui fournir l'URI :"

msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"

msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"

msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr "Dans ce cas particulier, la sortie nous dit quel miroir a été choisi. Si le résultat de la commande au-dessus n'est pas le même que ce qui est montré, mettez à jour votre déclaration @code{my-hello} en fonction."

msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr "Remarquez que les archives des paquets GNU sont accompagnées de leur signature OpenPGP, donc vous devriez vérifier la signature de cette archive avec « gpg » pour l'authentifier avant d'aller plus loin :"

msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"

msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature faite le dim. 16 nov. 2014 13:08:37 CET\n"
"gpg:                avec la clef RSA A9553245FDE9B739\n"
"gpg: Bonne signature de « Sami Kerola (https://www.iki.fi/kerolasa/) <kerolasa@@iki.fi> » [inconnu]\n"
"gpg: Attention : cette clef n'est pas certifiée avec une signature de confiance.\n"
"gpg:             Rien n'indique que la signature appartient à son propriétaire.\n"
"Empreinte de clef principale : 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"

msgid "You can then happily run"
msgstr "Vous pouvez ensuite lancer"

msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr "$ guix package --install-from-file=my-hello.scm\n"

msgid "You should now have @code{my-hello} in your profile!"
msgstr "Vous devriez maintenant avoir @code{my-hello} dans votre profil !"

msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"

msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @xref{A Scheme Crash Course} to get up to speed."
msgstr "Nous sommes allés aussi loin que possible sans aucune connaissance de Scheme. Avant de continuer sur des paquets plus complexes, il est maintenant temps de vous renforcer sur votre connaissance du langage Scheme. @xref{A Scheme Crash Course} pour démarrer."

msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr "Dans le reste de ce chapitre, nous nous appuierons sur vos connaissances de base du langage Scheme. Maintenant voyons les différentes configurations possibles pour travailler sur des paquets Guix."

msgid "There are several ways to set up a Guix packaging environment."
msgstr "Il y a plusieurs moyens de mettre en place un environnement d'empaquetage pour Guix."

msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr "Nous vous recommandons de travailler directement dans le dépôt des sources de Guix car ça facilitera la contribution au projet."

msgid "But first, let's look at other possibilities."
msgstr "Mais d'abord, voyons les autres possibilités."

msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr "C'est ce que nous venons de faire avec @samp{my-hello}. Avec les bases de Scheme que nous vous avons présentées, nous pouvons maintenant éclairer le sens du début du fichier. Comme le dit @code{guix package --help} :"

msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""
"  -f, --install-from-file=FICHIER\n"
"                         installer le paquet évalué par le code dans\n"
"                         FICHIER\n"

msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr "Ainsi, la dernière expression @emph{doit} renvoyer un paquet, ce qui est le cas dans notre exemple précédent."

msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr "L'expression @code{use-modules} indique quels modules sont nécessaires dans le fichier. Les modules sont des collections de valeurs et de procédures. Ils sont souvent appelés « bibliothèques » ou « paquets » dans d'autres langages de programmation."

msgid "channel"
msgstr "canal"

msgid "Guix and its package collection can be extended through @dfn{channels}.  A channel is a Git repository, public or not, containing @file{.scm} files that provide packages (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) or services (@pxref{Defining Services,,, guix, GNU Guix Reference Manual})."
msgstr "Guix et sa collection de paquet peut être étendu par des @dfn{canaux}. Un canal est un dépôt Git public ou non, qui contient des fichiers @file{.scm} qui fournissent des paquets (@pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix}) ou des services (@pxref{Définir des services,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "How would you go about creating a channel? First, create a directory that will contain your @file{.scm} files, say @file{~/my-channel}:"
msgstr "Comment créer un canal ? Tout d'abord, créez un répertoire qui contiendra vos fichiers @file{.scm}, disons @file{~/mon-canal} :"

msgid "mkdir ~/my-channel\n"
msgstr "mkdir ~/mon-canal\n"

msgid "Suppose you want to add the @samp{my-hello} package we saw previously; it first needs some adjustments:"
msgstr "Imaginons que vous souhaitiez ajouter le paquet @samp{my-hello} que nous avons vu plus tôt. Il a d'abord besoin de quelques ajustement :"

msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"

msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr "Remarquez que nous avons assigné la valeur du paquet à un nom de variable exportée avec @code{define-public}. Cela assigne en fait le paquet à la variable @code{my-hello} pour qu'elle puisse être utilisée, par exemple en dépendance d'un autre paquet."

msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr "Si vous utilisez @code{guix package --install-from-file=my-hello.scm} avec le fichier précédent, la commande échouera car la dernière expression, @code{define-public}, ne renvoie pas un paquet. Si vous voulez utiliser @code{define-public} dans ce cas tout de même, assurez-vous que le fichier termine par une évaluation de @code{my-hello} :"

msgid ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"
msgstr ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"

msgid "my-hello\n"
msgstr "my-hello\n"

msgid "This last example is not very typical."
msgstr "Ce dernier exemple n'est pas très typique."

msgid "Now how do you make that package visible to @command{guix} commands so you can test your packages? You need to add the directory to the search path using the @option{-L} command-line option, as in these examples:"
msgstr "Maintenant, comme rendre ce paquet visible pour les commandes @command{guix} afin de tester vos paquets ? Vous devez ajouter le répertoire au chemin de recherche avec l'option en ligne de commande @option{-L}, comme dans ces exemples :"

msgid ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"
msgstr ""
"guix show -L ~/mon-canal my-hello\n"
"guix build -L ~/mon-canal my-hello\n"

msgid "The final step is to turn @file{~/my-channel} into an actual channel, making your package collection seamlessly available @i{via} any @command{guix} command.  To do that, you first need to make it a Git repository:"
msgstr "L'étape finale consiste à transformer @file{~/mon-canal} en un vrai canal, pour rendre disponible votre collection de paquets via n'importe quelle commande @command{guix}. Pour cela, vous devez d'abord en faire un dépôt Git :"

msgid ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"
msgstr ""
"cd ~/mon-canal\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"Premier commit sur mon canal.\"\n"

msgid "And that's it, you have a channel! From there on, you can add this channel to your channel configuration in @file{~/.config/guix/channels.scm} (@pxref{Specifying Additional Channels,,, guix, GNU Guix Reference Manual}); assuming you keep your channel local for now, the @file{channels.scm} would look something like this:"
msgstr "Et voilà, vous avez un canal ! À partir de maintenant, vous pouvez ajouter ce canal à votre configuration des canaux dans @file{~/.config/guix/channels.scm} (@pxref{Spécifier des canaux supplémentaires,,, guix.fr, le manuel de référence de GNU Guix}). En supposant que vous gardez votre canal localement pour l'instant, le fichier @file{channels.scm} ressemblerait à quelque chose comme ça :"

msgid ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"
msgstr ""
"(append (list (channel\n"
"                (name 'mon-canal)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/mon-canal\"))))\n"
"        %default-channels)\n"

msgid "Next time you run @command{guix pull}, your channel will be picked up and the packages it defines will be readily available to all the @command{guix} commands, even if you do not pass @option{-L}.  The @command{guix describe} command will show that Guix is, indeed, using both the @code{my-channel} and the @code{guix} channels."
msgstr "La prochaine fois que vous exécuterez @command{guix pull}, votre canal sera récupéré et les paquets qu'il définit seront directement disponibles pour toutes les commandes @command{guix}, même si vous n'utilisez pas @option{-L}. La commande @command{guix describe} vous montrera que Guix utilise effectivement à la fois @code{mon-canal} et les canaux @code{guix}."

msgid "@xref{Creating a Channel,,, guix, GNU Guix Reference Manual}, for details."
msgstr "@xref{Écrire de nouveaux de canaux,,, guix.fr, le manuel de référence de GNU Guix} pour des détails."

msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr "Nous vous recommandons de travailler directement sur le projet Guix : cela réduit le travail nécessaire quand vous voudrez soumettre vos changements en amont pour que la communauté puisse bénéficier de votre dur labeur !"

msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr "Contrairement à la plupart des distributions logiciels, le dépôt Guix contient à la fois les outils (dont le gestionnaire de paquets) et les définitions des paquets. Nous avons fait ce choix pour permettre aux développeurs et développeuses de profiter de plus de flexibilité pour changer l'API sans rien casser, en mettant à jour tous les paquets en même temps. Cela réduit l'inertie dans le développement."

msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr "Clonez le dépôt @uref{https://git-scm.com/, Git} officiel :"

msgid "$ git clone https://git.guix.gnu.org/guix.git\n"
msgstr "$ git clone https://git.guix.gnu.org/guix.git\n"

msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr "Dans le reste de cet article, nous utiliserons @samp{$GUIX_CHECKOUT} pour faire référence à l'emplacement de ce clone."

msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr "Suivez les instructions du manuel (@pxref{Contribuer,,, guix.fr, le manuel de référence de GNU Guix}) pour mettre en place l'environnement du dépôt."

msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr "Une fois prêts, vous devriez pouvoir utiliser les définitions des paquets de l'environnement du dépôt."

msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr "N'ayez pas peur de modifier les définitions des paquets que vous trouverez dans @samp{$GUIX_CHECKOUT/gnu/packages}."

msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr "Le script @samp{$GUIX_CHECKOUT/pre-inst-env} vous permet d'utiliser @samp{guix} sur la collection de paquets du dépôt (@pxref{Lancer Guix avant qu’il ne soit installé,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "Search packages, such as Ruby:"
msgstr "Recherchez des paquets, comme Ruby :"

msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"

msgid "Build a package, here Ruby version 2.1:"
msgstr "Construisez un paquet, ici Ruby version 2.1 :"

msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"

msgid "Install it to your user profile:"
msgstr "Installez-le dans votre profil utilisateur :"

msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix package --install ruby@@2.1\n"

msgid "Check for common mistakes:"
msgstr "Vérifiez que vous n'avez pas fait l'une des erreurs courantes :"

msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix lint ruby@@2.1\n"

msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr "Guix essaye de maintenir un bon standard d'empaquetage ; quand vous contribuez au projet Guix, rappelez-vous de"

msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr "suivre le style de code (@pxref{Style de code,,, guix.fr, le manuel de référence de GNU Guix}),"

msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr "et de vérifier la check-list du manuel (@pxref{Envoyer des correctifs,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr "Une fois que vous êtes satisfait du résultat, vous pouvez envoyer votre contribution pour qu'elle rentre dans Guix. Ce processus est aussi détaillé dans le manuel (@pxref{Contribuer,,, guix.fr, le manuel de référence de GNU Guix})"

msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr "Guix est un projet communautaire, donc plus on est de fous, plus on rit !"

msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr "L'exemple « Hello World » précédent est le plus simple possible. Les paquets peuvent devenir plus complexes que cela et Guix peut gérer des scénarios plus avancés. Voyons un autre paquet plus sophistiqué (légèrement modifié à partir des sources) :"

msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages tls)\n"
"  #:use-module (gnu packages web))\n"
"\n"
msgstr ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages tls)\n"
"  #:use-module (gnu packages web))\n"
"\n"

msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda* (#:key tests? #:allow-other-keys)\n"
"               (when tests?\n"
"                 (invoke \"./libgit2_clar\" \"-v\" \"-Q\"))))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Suppression des logiciels embarqués.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Lancer la suite de tests (c'est la valeur par défaut)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; détection de collision SHA-1\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Lancer les tests avec plus de verbosité.\n"
"           (replace 'check\n"
"             (lambda* (#:key tests? #:allow-other-keys)\n"
"               (when tests?\n"
"                 (invoke \"./libgit2_clar\" \"-v\" \"-Q\"))))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; Ces deux bibliothèques sont dans « Requires.private », dans libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"

msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr "(Dans les cas où vous voulez seulement changer quelques champs d'une définition de paquets, vous devriez utiliser l'héritage au lieu de tout copier-coller. Voir plus bas.)"

msgid "Let's discuss those fields in depth."
msgstr "Parlons maintenant de ces champs en détail."

msgid "@code{git-fetch} method"
msgstr "La méthode @code{git-fetch}"

msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr "Contrairement à la méthode @code{url-fetch}, @code{git-fetch} a besoin d'un @code{git-reference} qui prend un dépôt Git et un commit. Le commit peut être n'importe quelle référence Git comme des tags, donc si la @code{version} a un tag associé, vous pouvez l'utiliser directement. Parfois le tag est précédé de @code{v}, auquel cas vous pouvez utiliser @code{(commit (string-append \"v\" version))}."

msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr "Pour vous assurer que le code source du dépôt Git est stocké dans un répertoire avec un nom descriptif, utilisez @code{(file-name (git-file-name name version))}."

msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr "Vous pouvez utiliser la procédure @code{git-version} pour calculer la version quand vous empaquetez des programmes pour un commit spécifique, en suivant le guide de contribution (@pxref{Numéros de version,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr "Comment obtenir le hash @code{sha256}, vous demandez-vous ? En invoquant @command{guix hash} sur un clone du commit voulu, de cette manière :"

msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"

msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr "@command{guix hash -rx} calcul un SHA256 sur le répertoire entier, en excluant le sous-répertoire @file{.git} (@pxref{Invoquer guix hash,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr "Dans le futur, @command{guix download} sera sans doute capable de faire cela pour vous, comme il le fait pour les téléchargements directs."

msgid "Snippets"
msgstr "Les bouts de code"

msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr "Les bouts de code (snippet) sont des fragments quotés (c.-à-d. non évalués) de code Scheme utilisés pour modifier les sources. C'est une alternative aux fichiers @file{.patch} traditionnels, plus proche de l'esprit de Guix. À cause de la quote, le code n'est évalué que lorsqu'il est passé au démon Guix pour la construction. Il peut y avoir autant de bout de code que nécessaire."

msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr "Les bouts de code on parfois besoin de modules Guile supplémentaires qui peuvent être importés dans le champ @code{modules}."

msgid "Inputs"
msgstr "Entrées"

msgid "There are 3 different input types.  In short:"
msgstr "Il y a trois types d'entrées. En résumé :"

msgid "native-inputs"
msgstr "native-inputs"

msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr "Requis pour construire mais pas à l'exécution -- installer un paquet avec un substitut n'installera pas ces entrées."

msgid "inputs"
msgstr "inputs"

msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr "Installées dans le dépôt mais pas dans le profil, et présentes à la construction."

msgid "propagated-inputs"
msgstr "propagated-inputs"

msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr "Installées dans le dépôt et dans le profil, et présentes à la construction."

msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr "@xref{Référence de package,,, guix.fr, le manuel de référence de GNU Guix} pour plus de détails."

msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr "La différence entre les différents types d'entrées est importante : si une dépendance peut être utilisée comme @emph{entrée} plutôt que comme @emph{entrée propagée}, il faut faire ça, sinon elle « polluera » le profil utilisateur sans raison."

msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr "Par exemple, si vous installez un programme graphique qui dépend d'un outil en ligne de commande, vous êtes probablement intéressé uniquement par la partie graphique, donc inutile de forcer l'outil en ligne de commande à être présent dans le profil utilisateur. Les dépendances sont gérés par les paquets, pas par les utilisateurs et utilisatrices. Les @emph{entrées} permettent de gérer les dépendances sans ennuyer les utilisateurs et utilisatrices en ajoutant des fichiers exécutables (ou bibliothèque) inutiles dans leur profil."

msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr "Pareil pour @emph{native-inputs} : une fois le programme installé, les dépendances à la construction peuvent être supprimées sans problème par le ramasse-miettes. Lorsqu'un substitut est disponible, seuls les @emph{entrées} et les @emph{entrées propagées} sont récupérées : les @emph{entrées natives} ne sont pas requises pour installer un paquet à partir d'un substitut."

msgid "Note"
msgstr "Remarque"

msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr "Vous trouverez ici et là des extraits où les entrées des paquets sont écrites assez différemment, comme ceci :"

msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""
";; « L'ancien style » pour les entrées.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"

msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr "C'est « l'ancien style », où chaque entrée est une liste que donne une étiquette explicite (une chaine). C'est une méthode prise en charge mais nous vous recommandons plutôt d'utiliser le style présenté plus haut. @xref{Référence de package,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations."

msgid "Outputs"
msgstr "Sorties"

msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr "De la même manière qu'un paquet peut avoir plusieurs entrées, il peut aussi avoir plusieurs sorties."

msgid "Each output corresponds to a separate directory in the store."
msgstr "Chaque sortie correspond à un répertoire différent dans le dépôt."

msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr "Vous pouvez choisir quelle sortie installer ; c'est utile pour préserver l'espace disque et éviter de polluer le profil utilisateur avec des exécutables et des bibliothèques inutiles."

msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr "La séparation des sorties est facultative. Lorsque le champ @code{outputs} n'est pas spécifié, l'unique sortie par défaut (le paquet complet donc) est @code{\"out\"}."

msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr "Les sorties séparées sont en général @code{debug} et @code{doc}."

msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr "Vous devriez séparer les sorties seulement si vous pouvez montrer que c'est utile : si la taille de la sortie est importante (vous pouvez comparer avec @code{guix size}) ou si le paquet est modulaire."

msgid "Build system arguments"
msgstr "Arguments du système de construction"

msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr "Le champ @code{arguments} est une liste de mot-clés et de valeurs utilisés pour configurer le processus de construction."

msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr "L'argument le plus simple est @code{#:tests?} et on l'utilise pour désactiver la suite de tests pendant la construction du paquet. C'est surtout utile si le paquet n'a pas de suite de tests. Nous vous recommandons fortement de laisser tourner la suite de tests s'il y en a une."

msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr "Un autre argument courant est @code{#:make-flags}, qui spécifie une liste de drapeaux à ajouter en lançant make, comme ce que vous feriez sur la ligne de commande. Par exemple, les drapeaux suivants"

msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"

msgid "translate into"
msgstr "se traduisent en"

msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr "$ make CC=gcc prefix=/gnu/store/...-<out>\n"

msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr "Cela indique que le compilateur C sera @code{gcc} et la variable @code{prefix} (le répertoire d'installation pour Make) sera @code{(assoc-ref %outputs \"out\")}, qui est une variable globale côté construction qui pointe vers le répertoire de destination dans le dépôt (quelque chose comme @file{/gnu/store/…-my-libgit2-20180408})."

msgid "Similarly, it's possible to set the configure flags:"
msgstr "De manière identique, vous pouvez indiquer les drapeaux de configuration :"

msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"

msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr "La variable @code{%build-inputs} est aussi générée dans cette portée. C'est une liste d'association qui fait correspondre les noms des entrées à leur répertoire dans le dépôt."

msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr "Le mot-clé @code{phases} liste la séquence d'étapes du système de construction. Les phases usuelles sont @code{unpack}, @code{configure}, @code{build}, @code{install} et @code{check}. Pour en savoir plus, vous devez trouver la bonne définition du système de construction dans @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm} :"

msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            make-dynamic-linker-cache\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""
"(define %standard-phases\n"
"  ;; Phases de construction standards, en tant que liste paires de symbole/procédure.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            make-dynamic-linker-cache\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"

msgid "Or from the REPL:"
msgstr "Ou depuis la REPL :"

msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map car %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files make-dynamic-linker-cache install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map car %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files make-dynamic-linker-cache install-license-files reset-gzip-timestamps compress-documentation)\n"

msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr "Si vous voulez en apprendre plus sur ce qui arrive pendant ces phases, consultez les procédures associées."

msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr "Par exemple, au moment d'écrire ces lignes, la définition de @code{unpack} dans le système de construction de GNU est :"

msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"

msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #t)\n"
"        ;; Make the source checkout files writable, for convenience.\n"
"        (for-each (lambda (f)\n"
"                    (false-if-exception (make-file-writable f)))\n"
"                  (find-files \".\")))\n"
"      (begin\n"
"        (cond\n"
"         ((string-suffix? \".zip\" source)\n"
"          (invoke \"unzip\" source))\n"
"         ((tarball? source)\n"
"          (invoke \"tar\" \"xvf\" source))\n"
"         (else\n"
"          (let ((name (strip-store-file-name source))\n"
"                (command (compressor source)))\n"
"            (copy-file source name)\n"
"            (when command\n"
"              (invoke command \"--decompress\" name)))))\n"
"        ;; Attempt to change into child directory.\n"
"        (and=> (first-subdirectory \".\") chdir))))\n"
msgstr ""
"        ;; Préserve les horodatages (remis à zéro) sur l'arborescence copiée pour que\n"
"        ;; tout fonctionne de manière déterministe.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #t)\n"
"        ;; Rend les fichiers sources du checkout inscriptibles, pour que ce soit plus pratique\n"
"        (for-each (lambda (f)\n"
"                    (false-if-exception (make-file-writable f)))\n"
"                  (find-files \".\")))\n"
"      (begin\n"
"        (cond\n"
"         ((string-suffix? \".zip\" source)\n"
"          (invoke \"unzip\" source))\n"
"         ((tarball? source)\n"
"          (invoke \"tar\" \"xvf\" source))\n"
"         (else\n"
"          (let ((name (strip-store-file-name source))\n"
"                (command (compressor source)))\n"
"            (copy-file source name)\n"
"            (when command\n"
"              (invoke command \"--decompress\" name)))))\n"
"        ;; Essaye de se déplacer dans le répertoire enfant.\n"
"        (and=> (first-subdirectory \".\") chdir))))\n"

msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr "Remarquez l'appel à @code{chdir} : il change de répertoire courant vers la source qui vient d'être décompressée. Ainsi toutes les phases suivantes utiliseront le répertoire des sources comme répertoire de travail, ce qui explique qu'on peut travailler directement sur les fichiers sources. Du moins, tant qu'une phase suivante ne change pas le répertoire de travail."

msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr "Nous modifions la liste des @code{%standard-phases} du système de construction avec la macro @code{modify-phases} qui indique la liste des modifications, sous cette formes :"

msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr "@code{(add-before @var{phase} @var{nouvelle-phase} @var{procédure})} : Lance une @var{procédure} nommée @var{nouvelle-phase} avant @var{phase}."

msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr "@code{(add-after @var{phase} @var{nouvelle-phase} @var{procédure})} : Pareil, mais après la @var{phase}."

msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr "@code{(replace @var{phase} @var{procédure})}."

msgid "@code{(delete @var{phase})}."
msgstr "@code{(delete @var{phase})}."

msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr "La @var{procédure} prend en charge les arguments @code{inputs} et @code{outputs} sous forme de mot-clés. Les entrées (@emph{natives}, @emph{propagées} et simples) et répertoires de sortie sont référencés par leur nom dans ces variables. Ainsi @code{(assoc-ref outputs \"out\")} est le répertoire du dépôt de la sortie principale du paquet. Une procédure de phase ressemble à cela :"

msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ... ))\n"
msgstr ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ... ))\n"

msgid "Its return value is ignored."
msgstr "Sa valeur de retour est ignorée."

msgid "Code staging"
msgstr "Échelonnage du code"

msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr "Si vous avez été attentif, vous aurez remarqué la quasi-quote et la virgule dans le champ argument. En effet, le code de construction dans la déclaration du paquet ne doit pas être évalué côté client, mais seulement après avoir été passé au démon Guix. Ce mécanisme de passage de code entre deux processus s'appelle @uref{https://arxiv.org/abs/1709.00833, l'échelonnage de code}."

msgid "Utility functions"
msgstr "Fonctions utilitaires"

msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr "Lorsque vous modifiez les @code{phases}, vous aurez souvent besoin d'écrire du code qui ressemble aux invocation équivalentes (@code{make}, @code{mkdir}, @code{cp}, etc) couramment utilisées durant une installatio plus standard dans le monde Unix."

msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr "Certaines comme @code{chmod} sont natives dans Guile. @xref{,,, guile, Guile reference manual} pour une liste complète."

msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr "Guix fournit des fonctions utilitaires supplémentaires qui sont particulièrement utiles pour la gestion des paquets."

msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr "Certaines de ces fonctions se trouvent dans @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}. La plupart copient le comportement des commandes systèmes Unix traditionnelles :"

msgid "which"
msgstr "which"

msgid "Like the @samp{which} system command."
msgstr "Fonctionne comme la commande système @samp{which}."

msgid "find-files"
msgstr "find-files"

msgid "Akin to the @samp{find} system command."
msgstr "Fonctionne un peu comme la commande @samp{find}."

msgid "mkdir-p"
msgstr "mkdir-p"

msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr "Fonctionne comme @samp{mkdir -p}, qui crée tous les parents si besoin."

msgid "install-file"
msgstr "install-file"

msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr "Fonctionne comme @samp{install} pour installer un fichier vers un répertoire (éventuellement non existant). Guile a @code{copy-file} qui fonctionne comme @samp{cp}."

msgid "copy-recursively"
msgstr "copy-recursively"

msgid "Like @samp{cp -r}."
msgstr "Fonctionne comme @samp{cp -r}."

msgid "delete-file-recursively"
msgstr "delete-file-recursively"

msgid "Like @samp{rm -rf}."
msgstr "Fonctionne comme @samp{rm -rf}."

msgid "invoke"
msgstr "invoke"

msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr "Lance un exécutable. Vous devriez utiliser cela à la place de @code{system*}."

msgid "with-directory-excursion"
msgstr "with-directory-excursion"

msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr "Lance le corps dans un répertoire de travail différent, puis revient au répertoire de travail précédent."

msgid "substitute*"
msgstr "substitute*"

msgid "A ``@command{sed}-like'' function."
msgstr "Une fonction similaire à @command{sed}."

msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr "@xref{Utilitaires de construction,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur ces utilitaires."

msgid "Module prefix"
msgstr "Préfixe de module"

msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr "La licence dans notre dernier exemple a besoin d'un préfixe à cause de la manière dont le module @code{licenses} a été importé dans le paquet, avec @code{#:use-module ((guix licenses) #:prefix license:)}. Le mécanisme d'import de module de Guile (@pxref{Using Guile Modules,,, guile, Guile reference manual}) permet de contrôler complètement l'espace de nom. Cela évite les conflits entre, disons, la variable @samp{zlib} de @samp{licenses.scm} (un @emph{licence}) et la variable @samp{zlib} de @samp{compression.scm} (un @emph{paquet})."

msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr "Ce que nous avons vu jusqu'ici couvre la majeur partie des paquets qui utilisent un système de construction autre que @code{trivial-build-system}. Ce dernier n'automatise rien et vous laisse tout construire par vous-même. C'est plus exigeant et nous n'en parlerons pas pour l'instant, mais heureusement il est rarement nécessaire d'aller jusqu'à ces extrémités."

msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr "Pour les autres systèmes de construction, comme ASDF, Emacs, Perl, Ruby et bien d'autres, le processus est très similaire à celui du système de construction de GNU en dehors de quelques arguments spécialisés."

msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr "@xref{Systèmes de construction,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur les systèmes de construction, ou voir le code source dans les répertoires @samp{$GUIX_CHECKOUT/guix/build} et @samp{$GUIX_CHECKOUT/guix/build-system}."

msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr "Nous ne le répéterons jamais assez : avoir un langage de programmation complet à disposition nous permet de faire bien plus de choses que la gestion de paquets traditionnelle."

msgid "Let's illustrate this with some awesome features of Guix!"
msgstr "Illustrons cela avec certaines fonctionnalités géniales de Guix !"

msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr "Certains systèmes de constructions sont si bons qu'il n'y a presque rien à écrire pour créer un paquet, au point que cela devient rapidement répétitif et pénible. L'une des raisons d'être des ordinateurs est de remplacer les êtres humains pour ces taches barbantes. Disons donc à Guix de faire cela pour nous et de créer les définitions de paquets pour un paquet R venant de CRAN (la sortie est coupée par souci de place) :"

msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""
"$ guix import cran --recursive walrus\n"
"\n"

msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"

msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"

msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr "L'importateur récursif n'importera pas les paquets pour lesquels Guix a déjà une définition, sauf pour le tout premier."

msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr "Toutes les applications ne peuvent pas être empaquetées de cette manière, seules celles qui s'appuient sur un nombre restreint de systèmes pris en charge le peuvent. Vous trouverez la liste complète des importateurs dans la section dédiée du manuel (@pxref{Invoquer guix import,,, guix.fr, le manuel de référence de GNU})."

msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr "Guix peut être assez intelligent pour vérifier s'il y a des mises à jour sur les systèmes qu'il connaît. Il peut rapporter les paquets anciens avec"

msgid "$ guix refresh hello\n"
msgstr "$ guix refresh hello\n"

msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr "La plupart du temps, mettre à jour un paquet vers une nouvelle version ne demande pas beaucoup plus que de changer le numéro de version et la somme de contrôle. Guix peut aussi le faire automatiquement :"

msgid "$ guix refresh hello --update\n"
msgstr "$ guix refresh hello --update\n"

msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr "Si vous avez commencé à regarder des définitions de paquets existantes, vous avez peut-être remarqué qu'un certain nombre d'entre elles ont un champ @code{inherit} :"

msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"

msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr "Tous les champs non spécifiés héritent du paquet parent. C'est très pratique pour créer un paquet alternatif, par exemple avec une source, une version ou des options de compilation différentes."

msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr "Malheureusement, certaines applications peuvent être difficiles à empaqueter. Parfois elles ont besoin d'un correctif pour fonctionner avec la hiérarchie du système de fichiers non standard imposée par de dépôt. Parfois les tests ne se lancent pas correctement (vous pouvez les passer mais ce n'est pas recommandé). Parfois le paquet n'est pas reproductible."

msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr "Si vous êtes bloqué·e, incapable de trouver comme corriger un problème d'empaquetage, n'hésitez pas à demander de l'aide à la communauté."

msgid "See the @uref{https://guix.gnu.org/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr "Voir la @uref{https://guix.gnu.org/fr/contact/,page d'accueil de Guix} pour plus d'informations sur les listes de diffusion, IRC, etc."

msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr "Ce didacticiel vous a montré la gestion des paquets sophistiquée dont Guix se targue. Maintenant, nous avons restreint cette introduction au système @code{gnu-build-system} qui est un niveau d'abstraction essentiel sur lequel des niveaux d'abstraction plus avancés se reposent."

msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr "Comment continuer ? Nous devrions ensuite disséquer le fonctionnement interne des systèmes de construction en supprimant toutes les abstractions, avec le @code{trivial-build-system} : cela vous permettra de bien comprendre le processus avant de voir des techniques plus avancées et certains cas particuliers."

msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr "D'autres fonctionnalités que vous devriez explorer sont l'édition interactive et les possibilités de débogage de Guix fournies par la REPL de Guile."

msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr "Ces fonctionnalités avancées sont complètement facultatives et peuvent attendre ; maintenant vous devriez prendre une pause bien méritée. Avec ce dont nous venons de parler ici vous devriez être bien armé·e pour empaqueter de nombreux paquets. Vous pouvez commencer dès maintenant et on espère voir votre contribution bientôt !"

msgid "The @uref{https://guix.gnu.org/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr "La @uref{https://guix.gnu.org/manual/devel/fr/html_node/Definition-des-paquets.html, référence des paquets dans le manuel}"

msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, le guide de bidouillage de GNU Guix de Pjotr}"

msgid "@uref{https://guix.gnu.org/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr "@uref{https://guix.gnu.org/guix-ghm-andreas-20130823.pdf, « GNU Guix: Package without a scheme! »}, d'Andreas Enge"

msgid "The following sections provide real-life examples on working with specific build systems, serving as extensions to the concise packaging guidelines (@pxref{Packaging Guidelines,,, guix, GNU Guix Reference Manual})."
msgstr "Les section suivantes montrent des exemples réels de la manière de travailler avec des systèmes de construction particuliers, et servent d'extension au guide d'empaquetage (@pxref{Consignes d'empaquetage,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "In preparation, add the following packages to our environment:"
msgstr "Pour commencer, ajoutez les paquets suivants à votre environnement :"

msgid "$ guix shell rust rust:cargo cargo-audit cargo-license\n"
msgstr "$ guix shell rust rust:cargo cargo-audit cargo-license\n"

msgid "In this example, we'll package @code{cargo-audit}, which is published on the @uref{https://crates.io, crates.io} Rust package repository.  All its dependencies are on crates.io as well."
msgstr "Dans cet exemple, nous empaquetterons @code{cargo-audit}, qui est publié sur @uref{https://crates.io, crates.io}, le dépôt de paquets Rust. Toutes ses dépendances sont également sur crates.io."

msgid "Since @code{cargo-audit} is available on crates.io, we can generate a template via the crates.io importer (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual}):"
msgstr "Comme @code{cargo-audit} est disponible sur crates.io, nous pouvons générer un modèle avec l'importateur crates.io (@pxref{Invoquer guix import,,, guix.fr, le manuel de référence de GNU Guix}) :"

msgid "$ guix import crate cargo-audit\n"
msgstr "$ guix import crate cargo-audit\n"

msgid "After manual editing, we'll have the following definiton:"
msgstr "Après l'avoir modifié manuellement, nous obtiendrons la définition suivante :"

msgid ""
"(define-public cargo-audit\n"
"  (package\n"
"    (name \"cargo-audit\")\n"
"    (version \"0.21.2\")\n"
"    (source\n"
"     (origin\n"
"       (method url-fetch)\n"
"       (uri (crate-uri \"cargo-audit\" version))\n"
"       (file-name (string-append name \"-\" version \".tar.gz\"))\n"
"       (sha256\n"
"        (base32 \"1a00yqpckkw86zh2hg7ra82c5fx0ird5766dyynimbvqiwg2ps0n\"))))\n"
"    (build-system cargo-build-system)\n"
"    (arguments (list #:install-source? #f))\n"
"    (inputs (cargo-inputs 'cargo-audit))\n"
"    (home-page \"https://rustsec.org/\")\n"
"    (synopsis \"Audit Cargo.lock for crates with security vulnerabilities\")\n"
"    (description\n"
"     \"This package provides a Cargo subcommand, @@command@{cargo audit@}, to\n"
"audit @@file@{Cargo.lock@} for crates with security vulnerabilities.\")\n"
"    (license (list license:asl2.0 license:expat))))\n"
msgstr ""
"(define-public cargo-audit\n"
"  (package\n"
"    (name \"cargo-audit\")\n"
"    (version \"0.21.2\")\n"
"    (source\n"
"     (origin\n"
"       (method url-fetch)\n"
"       (uri (crate-uri \"cargo-audit\" version))\n"
"       (file-name (string-append name \"-\" version \".tar.gz\"))\n"
"       (sha256\n"
"        (base32 \"1a00yqpckkw86zh2hg7ra82c5fx0ird5766dyynimbvqiwg2ps0n\"))))\n"
"    (build-system cargo-build-system)\n"
"    (arguments (list #:install-source? #f))\n"
"    (inputs (cargo-inputs 'cargo-audit))\n"
"    (home-page \"https://rustsec.org/\")\n"
"    (synopsis \"Audit Cargo.lock for crates with security vulnerabilities\")\n"
"    (description\n"
"     \"This package provides a Cargo subcommand, @@command@{cargo audit@}, to\n"
"audit @@file@{Cargo.lock@} for crates with security vulnerabilities.\")\n"
"    (license (list license:asl2.0 license:expat))))\n"

msgid "The identifier used to invoke @code{cargo-inputs}, in this case @code{'cargo-audit}, must be unique, usually matching the variable name of the package."
msgstr "L'identifiant utilisé pour invoquer @code{cargo-inputs}, dans notre cas de @code{'cargo-audit}, doit être unique, et en général correspond au nom de la variable du paquet."

msgid "Unpack package source and navigate to the unpacked directory, then run the following commands:"
msgstr "Désarchivez les sources du paquet et déplacez-vous dans le répertoire désarchivé, puis exécutez les commandes suivantes :"

msgid ""
"$ cargo generate-lockfile\n"
"$ cargo audit\n"
"$ cargo license\n"
msgstr ""
"$ cargo generate-lockfile\n"
"$ cargo audit\n"
"$ cargo license\n"

msgid "@command{cargo generate-lockfile} updates dependencies to compatible versions.  Applying it to all Rust applications helps reduce a great number of Rust libraries we need to check later.  Although sometimes libraries may fail to follow the @uref{https://semver.org/, semantic versioning} scheme, it's still acceptable."
msgstr "@command{cargo generate-lockfile} met à jour les dépendances vers des versions compatibles. L'appliquer à toutes les applications Rust permet de réduire drastiquement le nombre de bibliothèque Rust que nous devrons vérifier plus tard. Bien que certaines bibliothèques puissent ne pas suivre le @uref{https://semver.org/, versionnement sémantique}, cela reste acceptable."

msgid "@command{cargo audit} checks known vulnerabilities and @command{cargo license} checks licenses, for all the dependencies.  We must have an acceptable output of @command{cargo audit} and ensure all dependencies are licensed with our supported licenses (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual})."
msgstr "@command{cargo audit} vérifie les vulnérabilité connues et @command{cargo license} vérifie les licences, pour toutes les dépendances. Nous devons obtenir une sortie acceptable de la part de @command{cargo audit} et nous assurer que toutes les dépendances utilisent l'une des licences que nous prenons en charge (@pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "Import dependencies from the generated lockfile:"
msgstr "Importez les dépendances à partir du lockfile généré :"

msgid ""
"$ guix import --insert=gnu/packages/rust-crates.scm \\\n"
"      crate --lockfile=/path/to/Cargo.lock cargo-audit\n"
"\n"
msgstr ""
"$ guix import --insert=gnu/packages/rust-crates.scm \\\n"
"      crate --lockfile=/path/to/Cargo.lock cargo-audit\n"
"\n"

msgid ""
"# Or use short options, in this case the shell processes file names\n"
"# before passing them to Guix, allowing tilde expansion, for example.\n"
"$ guix import -i gnu/packages/rust-crates.scm \\\n"
"      crate -f /path/to/Cargo.lock cargo-audit\n"
msgstr ""
"# Ou utilisez les options courtes, dans notre cas le shell traite les noms de fichier\n"
"# avant de les passer à Guix, ce qui permet l'expansion du tilde par exemple.\n"
"$ guix import -i gnu/packages/rust-crates.scm \\\n"
"      crate -f /path/to/Cargo.lock cargo-audit\n"

msgid "@code{cargo-audit} here must be consistent with the identifier used for @code{cargo-inputs} invocation in the package definition."
msgstr "@code{cargo-audit} ici doit être cohérent avec les identifiants utilisés pour l'invocation @code{cargo-inputs} dans la définition du paquet."

msgid "At this stage, the package @code{cargo-audit} is buildable."
msgstr "À cette étape, le paquet @code{cargo-audit} peut être construit."

msgid "Finally we'll unbundle the vendored dependencies.  The lockfile importer inserts @code{TODO:} comments for libraries with high probability of bundled dependencies.  @code{cargo-build-system} also performs additional check for binary files in its @code{check-for-pregenerated-files} phase, which usually indicates bundling:"
msgstr "Enfin, nous retirons les dépendances embarquées. L'importateur de lockfile insère des commentaires @code{TODO:} pour les bibliothèques qui ont une forte probabilité d'avoir des dépendances embarquées. @code{cargo-build-système} effectue également des vérifications supplémentaires pour trouver des fichiers binaires dans sa phase @code{check-for-pregenerated-files}, ce qui indique en général des dépendances embarquées :"

msgid ""
"$ ./pre-inst-env guix build cargo-audit\n"
"@dots{}\n"
"starting phase `check-for-pregenerated-files'\n"
"Searching for binary files...\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/dictionary-rust\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/dictionary-rust-other\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/lib.rs.zst\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/long-window-size-lib.rs.zst\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_aclui.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_activeds.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_asycfilt.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_amsi.a\n"
"@dots{}\n"
msgstr ""
"$ ./pre-inst-env guix build cargo-audit\n"
"@dots{}\n"
"starting phase `check-for-pregenerated-files'\n"
"Searching for binary files...\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/dictionary-rust\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/dictionary-rust-other\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/lib.rs.zst\n"
"./guix-vendor/rust-async-compression-0.4.21.tar.gz/tests/artifacts/long-window-size-lib.rs.zst\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_aclui.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_activeds.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_asycfilt.a\n"
"./guix-vendor/rust-winapi-i686-pc-windows-gnu-0.4.0.tar.gz/lib/libwinapi_amsi.a\n"
"@dots{}\n"

msgid "Although Rust libraries are not publicly exported, we can still select them via the Guix command-line interface via a Guile expression:"
msgstr "Bien que les bibliothèques Rust ne soient pas publiquement exportées, nous pouvons toujours les sélectionner via la ligne de commande Guix à travers une expression Guile :"

msgid "$ guix build --expression='(@@@@ (gnu packages rust-crates) rust-ring-0.17.14)'\n"
msgstr "$ guix build --expression='(@@@@ (gnu packages rust-crates) rust-ring-0.17.14)'\n"

msgid "To unbundle most dependencies, a snippet is sufficient:"
msgstr "Pour retirer les dépendances embarquées, un bout de code est suffisant :"

msgid ""
"(define rust-curl-sys-0.4.80+curl-8.12.1\n"
"  (crate-source \"curl-sys\" \"0.4.80+curl-8.12.1\"\n"
"                \"0d7ppx4kq77hc5nyff6jydmfabpgd0i3ppjvn8x0q833mhpdzxsm\"\n"
"                #:snippet '(delete-file-recursively \"curl\")))\n"
msgstr ""
"(define rust-curl-sys-0.4.80+curl-8.12.1\n"
"  (crate-source \"curl-sys\" \"0.4.80+curl-8.12.1\"\n"
"                \"0d7ppx4kq77hc5nyff6jydmfabpgd0i3ppjvn8x0q833mhpdzxsm\"\n"
"                #:snippet '(delete-file-recursively \"curl\")))\n"

msgid ""
"(define rust-bzip2-sys-0.1.13+1.0.8\n"
"  (crate-source \"bzip2-sys\" \"0.1.13+1.0.8\"\n"
"                \"056c39pgjh4272bdslv445f5ry64xvb0f7nph3z7860ln8rzynr2\"\n"
"                #:snippet\n"
"                '(begin\n"
"                   (delete-file-recursively \"bzip2-1.0.8\")\n"
"                   (delete-file \"build.rs\")\n"
"                   (with-output-to-file \"build.rs\"\n"
"                     (lambda _\n"
"                       (format #t \"fn main() @{~@@\n"
"                        println!(\\\"cargo:rustc-link-lib=bz2\\\");~@@\n"
"                        @}~%\"))))))\n"
msgstr ""
"(define rust-bzip2-sys-0.1.13+1.0.8\n"
"  (crate-source \"bzip2-sys\" \"0.1.13+1.0.8\"\n"
"                \"056c39pgjh4272bdslv445f5ry64xvb0f7nph3z7860ln8rzynr2\"\n"
"                #:snippet\n"
"                '(begin\n"
"                   (delete-file-recursively \"bzip2-1.0.8\")\n"
"                   (delete-file \"build.rs\")\n"
"                   (with-output-to-file \"build.rs\"\n"
"                     (lambda _\n"
"                       (format #t \"fn main() @{~@@\n"
"                        println!(\\\"cargo:rustc-link-lib=bz2\\\");~@@\n"
"                        @}~%\"))))))\n"

msgid "In a more complex case, where unbundling one dependency requires a build process that involves other packages, we should make a full package in @code{(gnu packages rust-sources)} first and reference it in the imported definition."
msgstr "Dans un cas plus complexe, où le retrait d'une dépendance embarquée a besoin d'un processus de construction qui utilise d'autres paquets, nous devrions d'abord créer un paquet complet dans @code{(gnu packages rust-sources)} et le référencer dans la définition importée."

msgid "For example, we have defined a @code{rust-ring-0.17} in @code{(gnu packages rust-sources)}, then the imported definition in @code{(gnu packages rust-crates)} should be modified to reference it."
msgstr "Par exemple, nous avons défini @code{rust-ring-0.17} dans @code{(gnu packages rust-sources)}, puis la définition importée dans @code{(gnu packages rust-crates)} devrait être modifiée pour le référencer."

msgid "(define rust-ring-0.17.14 rust-ring-0.17)\n"
msgstr "(define rust-ring-0.17.14 rust-ring-0.17)\n"

msgid "When one dependency can be safely removed, modify it to @code{#f}."
msgstr "Lorsqu'une dépendance peut être supprimée sans problème, modifiez-la en @code{#f}."

msgid "(define rust-openssl-src-300.4.2+3.4.1 #f)\n"
msgstr "(define rust-openssl-src-300.4.2+3.4.1 #f)\n"

msgid "To facilitate various tasks in the common workflow, several scripts are provided in the @file{etc/teams/rust} directory of Guix source tree."
msgstr "Pour faciliter diverses tâches dans le fonctionnement général, plusieurs scripts sont fournis dans le répertoire @file{etc/teams/rust} de l'arborescence des sources de Guix."

msgid "In this example, we'll package @code{niri}, which depends on development snapshots (also Cargo workspaces here)."
msgstr "Dans cet exemple, nous allons empaqueter @code{niri}, qui dépend d'une image de développement (et d'espaces de travail Cargo)."

msgid "As we can't ensure compatibility of a development snapshot, before executing @command{cargo generate-lockfile}, we should modify @file{Cargo.toml} to pin it to a known working revision."
msgstr "Comme nous ne pouvons pas assurer la compatibilité d'une image de développement, avant d'exécuter @command{cargo generate-lockfile}, nous devrions modifier @file{Cargo.toml} pour le lier à une révision que l'on sait fonctionner."

msgid "To use our packaged development snapshots, it's also necessary to modify @file{Cargo.toml} in a build phase, with a package-specific substitution pattern."
msgstr "Pour utiliser nos images de développement empaquetées, il est également nécessaire de modifier @file{Cargo.toml} dans la phase build, avec un motif de substitution spécifique au paquet."

msgid ""
"(define-public niri\n"
"  (package\n"
"   (name \"niri\")\n"
"   (version \"25.02\")\n"
"   (source (origin\n"
"             (method git-fetch)\n"
"             (uri (git-reference\n"
"                   (url \"https://github.com/YaLTeR/niri\")\n"
"                   (commit (string-append \"v\" version))))\n"
"             (file-name (git-file-name name version))\n"
"             (sha256\n"
"              (base32\n"
"               \"0vzskaalcz6pcml687n54adjddzgf5r07gggc4fhfsa08h1wfd4r\"))))\n"
"   (build-system cargo-build-system)\n"
"   (arguments\n"
"    (list #:install-source? #f\n"
"          #:phases\n"
"          #~(modify-phases %standard-phases\n"
"              (add-after 'unpack 'use-guix-vendored-dependencies\n"
"                (lambda _\n"
"                  (substitute* \"Cargo.toml\"\n"
"                    ((\"# version =.*\")\n"
"                     \"version = \\\"*\\\"\")\n"
"                    ((\"git.*optional\")\n"
"                     \"version = \\\"*\\\", optional\")\n"
"                    ((\"^git = .*\")\n"
"                     \"\")))))))\n"
"   (native-inputs\n"
"    (list pkg-config))\n"
"   (inputs\n"
"    (cons* clang\n"
"           libdisplay-info\n"
"           libinput-minimal\n"
"           libseat\n"
"           libxkbcommon\n"
"           mesa\n"
"           pango\n"
"           pipewire\n"
"           wayland\n"
"           (cargo-inputs 'niri)))\n"
"   (home-page \"https://github.com/YaLTeR/niri\")\n"
"   (synopsis \"Scrollable-tiling Wayland compositor\")\n"
"   (description\n"
"    \"Niri is a scrollable-tiling Wayland compositor which arranges windows in a\n"
"scrollable format.  It is considered stable for daily use and performs most\n"
"functions expected of a Wayland compositor.\")\n"
"   (license license:gpl3+)))\n"
msgstr ""
"(define-public niri\n"
"  (package\n"
"   (name \"niri\")\n"
"   (version \"25.02\")\n"
"   (source (origin\n"
"             (method git-fetch)\n"
"             (uri (git-reference\n"
"                   (url \"https://github.com/YaLTeR/niri\")\n"
"                   (commit (string-append \"v\" version))))\n"
"             (file-name (git-file-name name version))\n"
"             (sha256\n"
"              (base32\n"
"               \"0vzskaalcz6pcml687n54adjddzgf5r07gggc4fhfsa08h1wfd4r\"))))\n"
"   (build-system cargo-build-system)\n"
"   (arguments\n"
"    (list #:install-source? #f\n"
"          #:phases\n"
"          #~(modify-phases %standard-phases\n"
"              (add-after 'unpack 'use-guix-vendored-dependencies\n"
"                (lambda _\n"
"                  (substitute* \"Cargo.toml\"\n"
"                    ((\"# version =.*\")\n"
"                     \"version = \\\"*\\\"\")\n"
"                    ((\"git.*optional\")\n"
"                     \"version = \\\"*\\\", optional\")\n"
"                    ((\"^git = .*\")\n"
"                     \"\")))))))\n"
"   (native-inputs\n"
"    (list pkg-config))\n"
"   (inputs\n"
"    (cons* clang\n"
"           libdisplay-info\n"
"           libinput-minimal\n"
"           libseat\n"
"           libxkbcommon\n"
"           mesa\n"
"           pango\n"
"           pipewire\n"
"           wayland\n"
"           (cargo-inputs 'niri)))\n"
"   (home-page \"https://github.com/YaLTeR/niri\")\n"
"   (synopsis \"Scrollable-tiling Wayland compositor\")\n"
"   (description\n"
"    \"Niri is a scrollable-tiling Wayland compositor which arranges windows in a\n"
"scrollable format.  It is considered stable for daily use and performs most\n"
"functions expected of a Wayland compositor.\")\n"
"   (license license:gpl3+)))\n"

msgid "@code{niri} has Cargo workspace dependencies.  When packaging a Cargo workspace dependency, parameter @code{#:cargo-package-crates} is required."
msgstr "@code{niri} a des dépendances à un espace de travail Cargo. Lorsque vous empaquetez une dépendance à un espace de travail Cargo, le paramètre @code{#:cargo-package-crates} est requis."

msgid ""
"(define-public rust-pipewire-0.8.0.fd3d8f7\n"
"  (let ((commit \"fd3d8f7861a29c2eeaa4c393402e013578bb36d9\")\n"
"        (revision \"0\"))\n"
"    (package\n"
"      (name \"rust-pipewire\")\n"
"      (version (git-version \"0.8.0\" revision commit))\n"
"      (source\n"
"       (origin\n"
"         (method git-fetch)\n"
"         (uri (git-reference\n"
"               (url \"https://gitlab.freedesktop.org/pipewire/pipewire-rs.git\")\n"
"               (commit commit)))\n"
"         (file-name (git-file-name name version))\n"
"         (sha256\n"
"          (base32 \"1hzyhz7xg0mz8a5y9j6yil513p1m610q3j9pzf6q55vdh5mcn79v\"))))\n"
"      (build-system cargo-build-system)\n"
"      (arguments\n"
"       (list #:skip-build? #t\n"
"             #:cargo-package-crates\n"
"             ''(\"libspa-sys\" \"libspa\" \"pipewire-sys\" \"pipewire\")))\n"
"      (inputs (cargo-inputs 'rust-pipewire-0.8.0.fd3d8f7))\n"
"      (home-page \"https://pipewire.org/\")\n"
"      (synopsis \"Rust bindings for PipeWire\")\n"
"      (description \"This package provides Rust bindings for PipeWire.\")\n"
"      (license license:expat))))\n"
msgstr ""
"(define-public rust-pipewire-0.8.0.fd3d8f7\n"
"  (let ((commit \"fd3d8f7861a29c2eeaa4c393402e013578bb36d9\")\n"
"        (revision \"0\"))\n"
"    (package\n"
"      (name \"rust-pipewire\")\n"
"      (version (git-version \"0.8.0\" revision commit))\n"
"      (source\n"
"       (origin\n"
"         (method git-fetch)\n"
"         (uri (git-reference\n"
"               (url \"https://gitlab.freedesktop.org/pipewire/pipewire-rs.git\")\n"
"               (commit commit)))\n"
"         (file-name (git-file-name name version))\n"
"         (sha256\n"
"          (base32 \"1hzyhz7xg0mz8a5y9j6yil513p1m610q3j9pzf6q55vdh5mcn79v\"))))\n"
"      (build-system cargo-build-system)\n"
"      (arguments\n"
"       (list #:skip-build? #t\n"
"             #:cargo-package-crates\n"
"             ''(\"libspa-sys\" \"libspa\" \"pipewire-sys\" \"pipewire\")))\n"
"      (inputs (cargo-inputs 'rust-pipewire-0.8.0.fd3d8f7))\n"
"      (home-page \"https://pipewire.org/\")\n"
"      (synopsis \"Rust bindings for PipeWire\")\n"
"      (description \"This package provides Rust bindings for PipeWire.\")\n"
"      (license license:expat))))\n"

msgid "Don't forget to modify all workspace members in @code{(gnu packages rust-crates)}:"
msgstr "N'oubliez pas de modifier tous les membres de l'espace de travail dans @code{(gnu packages rust-crates)} :"

msgid ""
"(define rust-pipewire-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"(define rust-pipewire-sys-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"@dots{}\n"
"(define rust-libspa-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"(define rust-libspa-sys-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
msgstr ""
"(define rust-pipewire-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"(define rust-pipewire-sys-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"@dots{}\n"
"(define rust-libspa-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"
"(define rust-libspa-sys-0.8.0.fd3d8f7 rust-pipewire-0.8.0.fd3d8f7)\n"

msgid "In this example, we'll package @code{libchewing}, which combines two build systems."
msgstr "Dans cet exemple, nous allons empaqueter @code{libchewing} qui combine deux systèmes de construction."

msgid "When building Rust packages in other build systems, we need to add @code{rust}, and @code{rust:cargo} to @code{native-inputs}, import and use modules from both build systems, and apply necessary build phases from @code{cargo-build-system}."
msgstr "Lorsque vous construisez des paquets Rust dans d'autres systèmes de construction, nous avons besoin d'ajouter @code{rust} et @code{rust:cargo} au @code{native-inputs}, d'importer et d'utiliser des modules des deux systèmes de constructions, et d'appliquer les phases de construction nécessaires du @code{cargo-build-system}."

msgid "For cross-compilation support, we'll also add @code{rust-sysroot} created with @code{(make-rust-sysroot (%current-target-system))} to @code{native-inputs}, and set @code{#:cargo-target} for @code{cargo-build-system}'s build phases."
msgstr "Pour la prise en charge de la compilation croisée, nous allons également ajouter @code{rust-sysroot} créé avec @code{(make-rust-sysroot (%current-target-system))} aux @code{native-inputs}, et indiquer @code{#:cargo-target} pour les phases de construction du @code{cargo-build-system}."

msgid ""
"(define-public libchewing\n"
"  (package\n"
"    (name \"libchewing\")\n"
"    (version \"0.9.1\")\n"
"    (source\n"
"     (origin\n"
"       (method git-fetch)\n"
"       (uri (git-reference\n"
"             (url \"https://github.com/chewing/libchewing\")\n"
"             (commit (string-append \"v\" version))))\n"
"       (file-name (git-file-name name version))\n"
"       (sha256\n"
"        (base32 \"0gh64wvrk5pn0fhmpvj1j99d5g7f7697rk96zbkc8l72yjr819z5\"))))\n"
"    (build-system cmake-build-system)\n"
"    (arguments\n"
"     (list #:imported-modules\n"
"           (append %cmake-build-system-modules\n"
"                   %cargo-build-system-modules)\n"
"           #:modules\n"
"           '(((guix build cargo-build-system) #:prefix cargo:)\n"
"             (guix build cmake-build-system)\n"
"             (guix build utils))\n"
"           #:phases\n"
"           #~(modify-phases %standard-phases\n"
"               (add-after 'unpack 'prepare-cargo-build-system\n"
"                 (lambda args\n"
"                   (for-each\n"
"                    (lambda (phase)\n"
"                      (format #t \"Running cargo phase: ~a~%\" phase)\n"
"                      (apply (assoc-ref cargo:%standard-phases phase)\n"
"                             ;; For cross-compilation.\n"
"                             #:cargo-target #$(cargo-triplet)\n"
"                             args))\n"
"                    '(unpack-rust-crates\n"
"                      configure\n"
"                      check-for-pregenerated-files\n"
"                      patch-cargo-checksums)))))))\n"
"    (native-inputs\n"
"     (append\n"
"      (list rust `(,rust \"cargo\") )\n"
"      ;; For cross-compilation.\n"
"      (or (and=> (%current-target-system)\n"
"                 (compose list make-rust-sysroot))\n"
"          '())))\n"
"    (inputs\n"
"     (cons* corrosion ncurses sqlite (cargo-inputs 'libchewing)))\n"
"    (synopsis \"Chinese phonetic input method\")\n"
"    (description \"Chewing is an intelligent phonetic (Zhuyin/Bopomofo) input\n"
"method, one of the most popular choices for Traditional Chinese users.\")\n"
"    (home-page \"https://chewing.im/\")\n"
"    (license license:lgpl2.1+)))\n"
msgstr ""
"(define-public libchewing\n"
"  (package\n"
"    (name \"libchewing\")\n"
"    (version \"0.9.1\")\n"
"    (source\n"
"     (origin\n"
"       (method git-fetch)\n"
"       (uri (git-reference\n"
"             (url \"https://github.com/chewing/libchewing\")\n"
"             (commit (string-append \"v\" version))))\n"
"       (file-name (git-file-name name version))\n"
"       (sha256\n"
"        (base32 \"0gh64wvrk5pn0fhmpvj1j99d5g7f7697rk96zbkc8l72yjr819z5\"))))\n"
"    (build-system cmake-build-system)\n"
"    (arguments\n"
"     (list #:imported-modules\n"
"           (append %cmake-build-system-modules\n"
"                   %cargo-build-system-modules)\n"
"           #:modules\n"
"           '(((guix build cargo-build-system) #:prefix cargo:)\n"
"             (guix build cmake-build-system)\n"
"             (guix build utils))\n"
"           #:phases\n"
"           #~(modify-phases %standard-phases\n"
"               (add-after 'unpack 'prepare-cargo-build-system\n"
"                 (lambda args\n"
"                   (for-each\n"
"                    (lambda (phase)\n"
"                      (format #t \"Running cargo phase: ~a~%\" phase)\n"
"                      (apply (assoc-ref cargo:%standard-phases phase)\n"
"                             ;; Pour la compilation croisée.\n"
"                             #:cargo-target #$(cargo-triplet)\n"
"                             args))\n"
"                    '(unpack-rust-crates\n"
"                      configure\n"
"                      check-for-pregenerated-files\n"
"                      patch-cargo-checksums)))))))\n"
"    (native-inputs\n"
"     (append\n"
"      (list rust `(,rust \"cargo\") )\n"
"      ;; Pour la compilation croisée.\n"
"      (or (and=> (%current-target-system)\n"
"                 (compose list make-rust-sysroot))\n"
"          '())))\n"
"    (inputs\n"
"     (cons* corrosion ncurses sqlite (cargo-inputs 'libchewing)))\n"
"    (synopsis \"Chinese phonetic input method\")\n"
"    (description \"Chewing is an intelligent phonetic (Zhuyin/Bopomofo) input\n"
"method, one of the most popular choices for Traditional Chinese users.\")\n"
"    (home-page \"https://chewing.im/\")\n"
"    (license license:lgpl2.1+)))\n"

msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr "Guix propose un langage flexible pour déclarer la configuration de votre système Guix. Cette flexibilité peut parfois paraître écrasante. Le but de ce chapitre est de vous montrer quelques concepts de configuration avancés."

msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "@pxref{Configuration du système,,, guix.fr, le manuel de référence de GNU Guix} pour une référence complète."

msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs (@pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr "Tandis que le manuel de Guix explique comment connecter automatiquement un utilisateur sur @emph{tous} les TTY (@pxref{connexion automatique à un TTY,,, guix.fr, le manuel de référence de Guix}), vous pourriez préférer avoir un utilisateur connecté sur un TTY et configurer les autres TTY pour connecter d'autres utilisateurs ou personne. Remarquez que vous pouvez connecter automatiquement un utilisateur sur n'importe quel TTY, mais il est recommandé d'éviter @code{tty1}, car par défaut, il est utilisé pour afficher les avertissements et les erreurs des journaux systèmes."

msgid "Here is how one might set up auto login for one user to one tty:"
msgstr "Voici comment on peut configurer la connexion d'un utilisateur sur un tty :"

msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"

msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"

msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"

msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr "On peut aussi utiliser @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) avec @code{auto-login-to-tty} pour connecter plusieurs utilisateurs sur différents ttys."

msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr "Enfin, une mise en garde. Configurer la connexion automatique à un TTY signifie que n'importe qui peut allumer votre ordinateur et lancer des commandes avec votre utilisateur normal. Cependant, si vous avez une partition racine chiffrée, et donc qu'il faut déjà saisir une phrase de passe au démarrage du système, la connexion automatique peut être un choix pratique."

msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr "Guix est, en son cœur, une distribution source avec des substituts (@pxref{Substituts,,, guix.fr, le manuel de référence de GNU Guix}), et donc construire des paquets à partir de leur code source est normal pendant les installations et les mis à jour de paquets. Malgré tout, c'est aussi normal d'essayer de réduire le temps passé à compiler des paquets, et les changements récents et futurs concernant la construction et la distribution des substituts continue d'être un sujet de discussion dans le projet Guix."

msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr "Le noyau, bien qu'il ne demande pas énormément de RAM pour être construit, prend assez long à construire sur une machine usuelle. La configuration du noyau officielle, comme avec la plupart des autres distributions GNU/Linux, penche du côté de l'inclusivité, et c'est vraiment ça qui rend la construction aussi longue à partir des sources."

msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr "Le noyau Linux, cependant, peut aussi être décrit comme un simple paquet comme les autres, et peut donc être personnalisé comme n'importe quel autre paquet. La procédure est un peu différente, même si c'est surtout dû à la nature de la définition du paquet."

msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr "Le paquet du noyau @code{linux-libre} est en fait une procédure qui crée un paquet."

msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options (default-extra-linux-options version)))\n"
"  ...)\n"
msgstr ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; Une fonction qui prend une architecture et une variante\n"
"                            ;; Voir kernel-config si vous voulez un exemple.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options (default-extra-linux-options version)))\n"
"  ...)\n"

msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr "Le paquet @code{linux-libre} actuel pour la série 5.15.x, est déclaré comme ceci :"

msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\"\n"
"                       \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\"\n"
"                       \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"

msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr "Les clés qui n'ont pas de valeur associée prennent leur valeur par défaut dans la définition de @code{make-linux-libre}. Lorsque vous comparez les deux bouts de code ci-dessus, remarquez le commentaire qui correspond à @code{#:configuration-file}. À cause de cela, il n'est pas facile d'inclure une configuration personnalisée du noyau à partir de la définition, mais ne vous inquiétez pas, il y a d'autres moyens de travailler avec ce qu'on a."

msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{defconfig} to @code{customize-linux} procedure.  To produce such file you need to obtain Linux source code, create a @file{.config} file (using @code{make menuconfig} command, for example) or provide one you already have.  After that you will need to run @code{make savedefconfig} command within the kernel source tree---this will produce the @file{defconfig} file which we will use to build a custom kernel."
msgstr "Il existe deux manières de créer un noyau avec une configuration personnalisée. La première consiste à donner un fichier @file{defconfig} standard à la procédure @code{customize-linux}. Pour produire un tel fichier, vous devez obtenir le code source du noyau Linux, créer un fichier @file{.config} (avec la commande @code{make menuconfig}, par exemple) ou en fournir un que vous avez déjà. Ensuite, vous devrez exécuter la commande @code{make savedefconfig} dans l'arborescence des sources du noyau. Cela produira le fichier @file{defconfig} que nous utiliserons pour construire un noyau personnalisé."

msgid "Below is a sample kernel package."
msgstr "Vous trouverez ci-dessous un paquet de noyau d'exemple."

msgid ""
"(define-public my-linux-libre\n"
"  (package\n"
"    (inherit (customize-linux\n"
"              #:linux linux-libre\n"
"              #:defconfig\n"
"              (local-file \"defconfig\")))\n"
"    (name \"my-linux-libre\")))\n"
msgstr ""
"(define-public my-linux-libre\n"
"  (package\n"
"    (inherit (customize-linux\n"
"              #:linux linux-libre\n"
"              #:defconfig\n"
"              (local-file \"defconfig\")))\n"
"    (name \"mon-linux-libre\")))\n"

msgid "In the same directory as the file defining @code{my-linux-libre} is a file named @file{defconfig}. This way you can provide kernel options you want to have in the result kernel."
msgstr "Dans le même répertoire que le fichier définissant @code{mon-linux-libre} se trouve un fichier nommé @file{defconfig}. De cette manière, vous pouvez fournir les options du noyau que vous souhaitez avoir dans le noyau qui en résulte."

msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr "La deuxième manière de créer un noyau personnalisé est de passer une nouvelle valeur au mot-clé @code{extra-options} de la procédure @code{make-linux-libre}. Le mot-clé @code{extra-options} fonctionne avec une autre fonction définie juste en dessous :"

msgid ""
"(define (default-extra-linux-options version)\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""
"(define (default-extra-linux-options version)\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules requis pour initrd :\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"

msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"

msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr "Et dans le script configure personnalisé du paquet « make-linux-libre » :"

msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"

msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr "(invoke \"make\" \"oldconfig\")\n"

msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr "Donc, en ne fournissant pas de fichier de configuration le fichier @file{.config} est au départ vide et on écrit ensuite l'ensemble des drapeaux que l'on veut. Voici un autre noyau personnalisé :"

msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          ((@@@@ (gnu packages linux) default-extra-linux-options) version)))\n"
"\n"
msgstr ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          ((@@@@ (gnu packages linux) default-extra-linux-options) version)))\n"
"\n"

msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Accède à la procédure interne « make-linux-libre* », qui est privée\n"
"  ;; et n'est pas exportée, et pourrait changer dans le futur.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"

msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  The @code{default-extra-linux-options} procedure is the one defined above, which had to be used to avoid losing the default configuration options of the @code{extra-options} keyword."
msgstr "Dans l'exemple ci-dessus @code{%file-systems} est un ensemble de drapeaux qui activent la prise en charge de différents systèmes de fichiers, @code{%efi-support} active la prise en charge de l'EFI et @code{%emulation} permet à une machine x86_64-linux de fonctionner aussi en mode 32-bits. La procédure @code{default-extra-linux-options} est définie plus haut, et elles devaient être utilisée pour éviter de perdre les options de configuration par défaut dans le mot-clé @code{extra-options}."

msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr "Tout ça est bien beau, mais comment savoir quels modules sont requis pour un système en particulier ? Il y a deux ressources qui peuvent être utiles pour répondre à cette question : le @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, manuel de Gentoo} et la @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation du noyau}. D'après la documentation du noyau, il semble que la commande @code{make localmodconfig} soit la bonne."

msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr "Pour lancer @code{make localmodconfig} on doit d'abord récupérer et décompresser le code source du noyau :"

msgid "tar xf $(guix build linux-libre --source)\n"
msgstr "tar xf $(guix build linux-libre --source)\n"

msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr "Une fois dans le répertoire contenant le code source lancez @code{touch .config} pour créer un fichier @file{.config} initialement vide pour commencer. @code{make localmodconfig} fonctionne en remarquant que avec déjà un @file{.config} et en vous disant ce qu'il vous manque. Si le fichier est vide, il vous manquera tout ce qui est nécessaire. L'étape suivante consiste à lancer :"

msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr "guix shell -D linux-libre -- make localmodconfig\n"

msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr "et regardez la sortie. Remarquez que le fichier @file{.config} est toujours vide. La sortie contient en général deux types d'avertissements. Le premier commence par « WARNING » et peut être ignoré dans notre cas. Le deuxième dit :"

msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"

msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr "Pour chacune de ces lignes, copiez la partie @code{CONFIG_XXXX_XXXX} dans le @file{.config} du répertoire et ajoutez @code{=m} pour qu'à la fin il ressemble à cela :"

msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"

msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr "Après avoir copié toutes les options de configuration, lancez @code{make localmodconfig} de nouveau pour vous assurer que vous n'avez pas de sortie commençant par « module ». Après tous ces modules spécifiques à la machine, il y en a encore quelques uns que nous devons aussi définir. @code{CONFIG_MODULES} est nécessaire pour que nous puissions construire et charger les modules séparément et ne pas tout construire dans le noyau. @code{CONFIG_BLK_DEV_SD} est requis pour lire les disques durs. Il est possible que vous aillez besoin de quelques autres modules."

msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr "Cet article n'a pas pour but de vous guider dans la configuration de votre propre noyau cependant, donc si vous décidez de construire un noyau personnalisé vous devrez chercher d'autres guides pour créer un noyau qui vous convient."

msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr "La deuxième manière de configurer le noyau utilise un peu plus les fonctionnalités de Guix et vous permettent de partager des bouts de configuration entre différents noyaux. Par exemple, toutes les machines avec un démarrage EFI ont besoin d'un certain nombre de configurations. Tous les noyaux vont probablement partager une liste de systèmes de fichiers à prendre en charge. En utilisant des variables il est facile de voir du premier coup quelles fonctionnalités sont activées pour vous assurer que vous n'avez pas des fonctionnalités dans un noyau qui manquent dans un autre."

msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr "Cependant, nous ne parlons pas de la personnalisation du disque de ram initial. Vous devrez sans doute modifier le disque de ram initial sur les machines qui utilisent un noyau personnalisé, puisque certains modules attendus peuvent ne pas être disponibles."

msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr "Historiquement, le système Guix est centré sur une structure @code{operating-system}. Cette structure contient divers champs qui vont du chargeur d'amorçage et à la déclaration du noyau aux services à installer."

msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr "Les contraintes sur l'image peuvent grandement varier en fonction de la machine cible : une machine @code{x86_64} standard n'a pas les mêmes contraintes qu'un petit ordinateur monocarte ARM comme le Pine64. Les fabricants de matériel imposent donc des formats d'image distincts avec des tailles et des emplacements de partition variables."

msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr "Pour créer des images convenables pour toutes ces machines, une nouvelle abstraction est nécessaire : c'est le but de l'enregistrement @code{image}. Cet enregistrement contient toutes les informations requises pour être transformé en une image complète, qui peut être directement démarrée sur une machine cible."

msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"

msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr "Cet enregistrement contient le système d'exploitation à instancier. Le champ @code{format} défini le type d'image et peut être @code{efi-raw}, @code{qcow2} ou @code{iso9660} par exemple. Plus tard, on prévoit de l'étendre à @code{docker} et aux autres types d'images."

msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr "Un nouveau répertoire dans les sources de Guix est dédié aux définitions des images. Pour l'instant il y a quatre fichiers :"

msgid "gnu/system/images/hurd.scm"
msgstr "gnu/system/images/hurd.scm"

msgid "gnu/system/images/pine64.scm"
msgstr "gnu/system/images/pine64.scm"

msgid "gnu/system/images/novena.scm"
msgstr "gnu/system/images/novena.scm"

msgid "gnu/system/images/pinebook-pro.scm"
msgstr "gnu/system/images/pinebook-pro.scm"

msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr "Regardons le fichier @file{pine64.scm}. Il contient la variable @code{pine64-barebones-os} qui est une définition minimale d'un système d'exploitation dédié à la carte @b{Pine A64 LTS}."

msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"

msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr "Les champs @code{kernel} et @code{bootloader} pointent vers les paquets dédiés à cette carte."

msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr "Ci-dessous, la variable @code{pine64-image-type} est ainsi définie."

msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"

msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr "Elle utilise un enregistrement dont nous n'avons pas encore parlé, l'enregistrement @code{image-type}, défini de cette façon :"

msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"

msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr "Le but principal de cet enregistrement est d'associer un nom à une procédure transformant un @code{operating-system} en une image. Pour comprendre pourquoi c'est nécessaire, voyons la commande produisant une image à partir d'un fichier de configuration de type @code{operating-system} :"

msgid "guix system image my-os.scm\n"
msgstr "guix system image my-os.scm\n"

msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr "Cette commande demande une configuration de type @code{operating-system} mais comment indiquer que l'on veut cibler une carte Pine64 ? Nous devons fournir l'information supplémentaire, @code{image-type}, en passant le drapeau @code{--image-type} ou @code{-t}, de cette manière :"

msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-os.scm\n"

msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr "Ce paramètre @code{image-type} pointe vers le @code{pine64-image-type} défini plus haut. Ainsi, la déclaration @code{operating-system} dans @code{my-os.scm} se verra appliquée la procédure @code{[cut image-with-os arm64-disk-image <>)} pour la transformer en une image."

msgid "The resulting image looks like:"
msgstr "L'image qui en résulte ressemble à ceci :"

msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"

msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr "qui ajoute l'objet @code{operating-system} défini dans @code{my-os.scm} à l'enregistrement @code{arm64-disk-image}."

msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr "Mais assez de cette folie. Qu'est-ce que cette API pour les images apporte aux utilisateurs et utilisatrices ?"

msgid "One can run:"
msgstr "On peut lancer :"

msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"Les types d'image disponibles sont :\n"
"\n"

msgid ""
"   - unmatched-raw\n"
"   - rock64-raw\n"
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - iso9660\n"
"   - uncompressed-iso9660\n"
"   - tarball\n"
"   - efi-raw\n"
"   - mbr-raw\n"
"   - docker\n"
"   - wsl2\n"
"   - raw-with-offset\n"
"   - efi32-raw\n"
msgstr ""
"   - unmatched-raw\n"
"   - rock64-raw\n"
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - iso9660\n"
"   - uncompressed-iso9660\n"
"   - tarball\n"
"   - efi-raw\n"
"   - mbr-raw\n"
"   - docker\n"
"   - wsl2\n"
"   - raw-with-offset\n"
"   - efi32-raw\n"

msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr "et en écrivant un fichier de type @code{operating-system} basé sur @code{pine64-barebones-os}, vous pouvez personnaliser votre image selon vos préférences dasn un fichier (@file{my-pine-os.scm}) de cette manière :"

msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"

msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"

msgid "run:"
msgstr "lancez :"

msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-pine-os.scm\n"

msgid "or,"
msgstr "ou bien,"

msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-raw my-hurd-os.scm\n"

msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr "pour récupérer une image que vous pouvez écrire sur un disque dur pour démarrer dessus."

msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr "Sans rien changer à @code{my-hurd-os.scm}, en appelant :"

msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"

msgid "will instead produce a Hurd QEMU image."
msgstr "vous aurez une image QEMU pour le Hurd à la place."

msgid "2FA, two-factor authentication"
msgstr "2FA, authentification à double facteur"

msgid "U2F, Universal 2nd Factor"
msgstr "U2F, second facteur universel"

msgid "security key, configuration"
msgstr "clé de sécurité, configuration"

msgid "The use of security keys can improve your security by providing a second authentication source that cannot be easily stolen or copied, at least for a remote adversary (something that you have), to the main secret (a passphrase -- something that you know), reducing the risk of impersonation."
msgstr "L'utilisation de clés de sécurité peut améliorer votre sécurité en fournissant une seconde source d'authentification qui ne peut pas être facilement volée ni copiée, au moins pour les adversaires à distance (quelque chose que vous possédez) de votre secret principal (une phrase de passe — quelque chose que vous connaissez), ce qui réduit les risques de vol d'identité."

msgid "The example configuration detailed below showcases what minimal configuration needs to be made on your Guix System to allow the use of a Yubico security key.  It is hoped the configuration can be useful for other security keys as well, with minor adjustments."
msgstr "L'exemple de configuration détaillée plus bas montre la configuration minimale dont vous avez besoin sur votre système Guix pour permettre l'utilisation d'une clé de sécurité Yubico. Nous espérons que la configuration puisse être utile pour d'autres clés de sécurité aussi, avec quelques ajustements."

msgid "Configuration for use as a two-factor authenticator (2FA)"
msgstr "Configuration pour l'utiliser comme authentification à double facteur (2FA)"

msgid "To be usable, the udev rules of the system should be extended with key-specific rules.  The following shows how to extend your udev rules with the @file{lib/udev/rules.d/70-u2f.rules} udev rule file provided by the @code{libfido2} package from the @code{(gnu packages security-token)} module and add your user to the @samp{\"plugdev\"} group it uses:"
msgstr "Pour être utilisable, les règles udev du systèmes doivent être étendues avec des règles spécifiques à la clé. Ce qui suit montre comment étendre vos règles udev avec le fichier de règles @file{lib/udev/rules.d/70-u2f.rules} fournit par le paquet @code{libfido2} du module @code{(gnu packages security-token)} et ajouter votre utilisateur au groupe @samp{\"plugdev\"} qu'il utilise :"

msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"
msgstr ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"

msgid "After re-configuring your system and re-logging in your graphical session so that the new group is in effect for your user, you can verify that your key is usable by launching:"
msgstr "Après la reconfiguration de votre système et vous être authentifié dans votre session graphique pour que le nouveau groupe prenne effet pour votre utilisateur, vous pouvez vérifier que la clé est utilisable en exécutant :"

msgid "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"
msgstr "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"

msgid "and validating that the security key can be reset via the ``Reset your security key'' menu.  If it works, congratulations, your security key is ready to be used with applications supporting two-factor authentication (2FA)."
msgstr "et en validant que la clé de sécurité peut être remise à zéro via le menu « réinitialiser votre clé de sécurité ». Si cela fonctionne, bravo, votre clé de sécurité est prête à être utilisée avec les applications qui prennent en charge l'authentification à double facteur (2FA)."

msgid "Disabling OTP code generation for a Yubikey"
msgstr "Désactiver la génération de code OTP pour une Yubikey"

msgid "disabling yubikey OTP"
msgstr "désactiver l'OTP d'une yubikey"

msgid "If you use a Yubikey security key and are irritated by the spurious OTP codes it generates when inadvertently touching the key (e.g. causing you to become a spammer in the @samp{#guix} channel when discussing from your favorite IRC client!), you can disable it via the following @command{ykman} command:"
msgstr "Si vous utilisez une clé de sécurité Yubikey et que vous n'aimez pas les mauvais codes OTP qu'il génère lorsque vous touchez la clé par accident (p. ex. en vous faisant passer pour un spammer dans le canal @samp{#guix} alors que vous discutez depuis votre client IRC préféré !), vous pouvez les désactiver avec la commande @command{ykman} suivante :"

msgid "guix shell python-yubikey-manager -- ykman config usb --force --disable OTP\n"
msgstr "guix shell python-yubikey-manager -- ykman config usb --force --disable OTP\n"

msgid "Alternatively, you could use the @command{ykman-gui} command provided by the @code{yubikey-manager-qt} package and either wholly disable the @samp{OTP} application for the USB interface or, from the @samp{Applications -> OTP} view, delete the slot 1 configuration, which comes pre-configured with the Yubico OTP application."
msgstr "Autrement, vous pouvez utiliser la commande @command{ykman-gui} fournie par le paquet @code{yubikey-manager-qt} et soit désactiver complètement l'application @samp{OTP} pour l'interface USB ou, depuis la vue @samp{Applications -> OTP}, supprimer la configuration du slot 1, qui est pré-configuré avec l'application Yubico OTP."

msgid "Requiring a Yubikey to open a KeePassXC database"
msgstr "Demander une Yubikey pour ouvrir une base de données KeePassXC"

msgid "yubikey, keepassxc integration"
msgstr "yubikey, intégration avec keepassxc"

msgid "The KeePassXC password manager application has support for Yubikeys, but it requires installing a udev rules for your Guix System and some configuration of the Yubico OTP application on the key."
msgstr "Le gestionnaire de mots de passe KeePassXC prend en charge les Yubikeys, mais cela nécessite d'installer des règles udev pour votre système Guix et de configurer l'application OTP Yubico sur la clé."

msgid "The necessary udev rules file comes from the @code{yubikey-personalization} package, and can be installed like:"
msgstr "Le fichier de règles udev nécessaire provient du paquet @code{yubikey-personalization} et peut être installé de cette manière :"

msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'yubikey yubikey-personalization))))\n"
msgstr ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'yubikey yubikey-personalization))))\n"

msgid "After reconfiguring your system (and reconnecting your Yubikey), you'll then want to configure the OTP challenge/response application of your Yubikey on its slot 2, which is what KeePassXC uses.  It's easy to do so via the Yubikey Manager graphical configuration tool, which can be invoked with:"
msgstr "Après avoir reconfiguré votre système (et avoir reconnecté votre Yubikey), vous voudrez ensuite configurer l'application de défi/réponse OTP do votre Yubikey sur le slot 2, qui est utilisé par KeePassXC. C'est facile à faire via l'outil de configuration graphique Yubikey Manager, qui peut s'invoquer de cette manière :"

msgid "guix shell yubikey-manager-qt -- ykman-gui\n"
msgstr "guix shell yubikey-manager-qt -- ykman-gui\n"

msgid "First, ensure @samp{OTP} is enabled under the @samp{Interfaces} tab, then navigate to @samp{Applications -> OTP}, and click the @samp{Configure} button under the @samp{Long Touch (Slot 2)} section.  Select @samp{Challenge-response}, input or generate a secret key, and click the @samp{Finish} button.  If you have a second Yubikey you'd like to use as a backup, you should configure it the same way, using the @emph{same} secret key."
msgstr "Tout d'abord, assurez-vous d'avoir activé @samp{OTP} dans l'onglet @samp{Interfaces}, puis rendez-vous dans @samp{Applications -> OTP} et cliquez sur le bouton @samp{Configure} sous la section @samp{Long Touch (Slot 2)}. Choisissez @samp{Challenge-response}, saisissez ou générez une clé secrète, puis cliquez sur le bouton @samp{Finish}. Si vous avez une seconde Yubikey que vous voulez utiliser en réserve, vous devriez la configurer de la même manière avec la @emph{même} clé secrète."

msgid "Your Yubikey should now be detected by KeePassXC.  It can be added to a database by navigating to KeePassXC's @samp{Database -> Database Security...} menu, then clicking the @samp{Add additional protection...} button, then @samp{Add Challenge-Response}, selecting the security key from the drop-down menu and clicking the @samp{OK} button to complete the setup."
msgstr "Votre Yubikey devrait maintenant être détectée par KeePassXC. Elle peut être ajoutée à la base de données en se rendant dans le menu @samp{Base de données -> Sécurité de la base de données...} de KeePassXC, puis en cliquant sur le bouton @samp{Ajouter une autre protection...} puis @samp{Ajouter une question-réponse}, en choisissant la clé de sécurité dans le menu déroulant et en cliquant sur le bouton @samp{OK} pour terminer la configuration."

msgid "dynamic DNS, DDNS"
msgstr "DNS dynamique, DDNS"

msgid "If your @acronym{ISP, Internet Service Provider} only provides dynamic IP addresses, it can be useful to setup a dynamic @acronym{DNS, Domain Name System} (also known as @acronym{DDNS, Dynamic DNS}) service to associate a static host name to a public but dynamic (often changing) IP address.  There are multiple existing services that can be used for this; in the following mcron job, @url{https://duckdns.org, DuckDNS} is used.  It should also work with other dynamic DNS services that offer a similar interface to update the IP address, such as @url{https://freedns.afraid.org/}, with minor adjustments."
msgstr "Si votre @acronym{FAI, fournisseur d'accès à internet} ne fournit que des adresse IP dynamiques, il peut être utile de mettre en place un service @acronym{DNS, Domain Name System} dynamique (aussi appelé @acronym{DDNS, Dynamic DNS}) pour associer un nom d'hôte statique à une adresse IP publique mais dynamique (qui change souvent). Il y a plusieurs services existants qui peuvent être utilisés pour cela ; dans la tâche mcron suivante, nous utilisons @url{https://duckdns.org, DuckDNS}. Cela devrait aussi fonctionner avec d'autres services DNS dynamiques qui fournissent une interface similaire pour mettre à jour l'adresse IP, comme @url{https://freedns.afraid.org/}, avec quelques petits ajustements."

msgid "The mcron job is provided below, where @var{DOMAIN} should be substituted for your own domain prefix, and the DuckDNS provided token associated to @var{DOMAIN} added to the @file{/etc/duckdns/@var{DOMAIN}.token} file."
msgstr "La tâche mcron est fournie plus bas, où @var{DOMAINE} doit être remplacé par votre propre préfixe de domaine, et le jeton fournit par DuckDNS associé à @var{DOMAINE} est à ajouter au fichier @file{/etc/duckdns/@var{DOMAINE}.token}."

msgid ""
"(define duckdns-job\n"
"  ;; Update personal domain IP every 5 minutes.\n"
"  #~(job '(next-minute (range 0 60 5))\n"
"\t #$(program-file\n"
"            \"duckdns-update\"\n"
"            (with-extensions (list guile-gnutls) ;required by (web client)\n"
"              #~(begin\n"
"                  (use-modules (ice-9 textual-ports)\n"
"                               (web client))\n"
"                  (let ((token (string-trim-both\n"
"                                (call-with-input-file \"/etc/duckdns/@var{DOMAIN}.token\"\n"
"                                  get-string-all)))\n"
"                        (query-template (string-append \"https://www.duckdns.org/\"\n"
"                                                       \"update?domains=@var{DOMAIN}\"\n"
"                                                       \"&token=~a&ip=\")))\n"
"                    (http-get (format #f query-template token))))))\n"
"         \"duckdns-update\"\n"
"         #:user \"nobody\"))\n"
msgstr ""
"(define duckdns-job\n"
"  ;; Met à jour l'IP du domaine toutes les 5 minutes.\n"
"  #~(job '(next-minute (range 0 60 5))\n"
"\t #$(program-file\n"
"            \"duckdns-update\"\n"
"            (with-extensions (list guile-gnutls) ;requis par (web client)\n"
"              #~(begin\n"
"                  (use-modules (ice-9 textual-ports)\n"
"                               (web client))\n"
"                  (let ((token (string-trim-both\n"
"                                (call-with-input-file \"/etc/duckdns/@var{DOMAINE}.token\"\n"
"                                  get-string-all)))\n"
"                        (query-template (string-append \"https://www.duckdns.org/\"\n"
"                                                       \"update?domains=@var{DOMAINE}\"\n"
"                                                       \"&token=~a&ip=\")))\n"
"                    (http-get (format #f query-template token))))))\n"
"         \"duckdns-update\"\n"
"         #:user \"nobody\"))\n"

msgid "The job then needs to be added to the list of mcron jobs for your system, using something like:"
msgstr "La tâche a ensuite besoin d'être ajoutée à la liste des tâches mcron de votre système, avec quelque chose comme cela :"

msgid ""
"(operating-system\n"
" (services\n"
"  (cons* (service mcron-service-type\n"
"           (mcron-configuration\n"
"             (jobs (list duckdns-job ...))))\n"
"         ...\n"
"         %base-services)))\n"
msgstr ""
"(operating-system\n"
" (services\n"
"  (cons* (service mcron-service-type\n"
"           (mcron-configuration\n"
"             (jobs (list duckdns-job ...))))\n"
"         ...\n"
"         %base-services)))\n"

msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr "Pour se connecter à un serveur VPN Wireguard, il faut que le module du noyau soit chargé en mémoire et qu'un paquet fournissant des outils de réseau le prenne en charge (par exemple, @code{wireguard-tools} ou @code{network-manager})."

msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr "Voici un exemple de configuration pour Linux-Libre < 5.6, où le module est hors de l'arborescence des sources et doit être chargé manuellement--les révisions suivantes du noyau l'ont intégré et n'ont donc pas besoin d'une telle configuration :"

msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"

msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"

msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr "Après avoir reconfiguré et redémarré votre système, vous pouvez utiliser les outils Wireguard ou NetworkManager pour vous connecter à un serveur VPN."

msgid "Using Wireguard tools"
msgstr "Utilisation des outils Wireguard"

msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr "Pour tester votre configuration Wireguard, vous pouvez utiliser @command{wg-quick}. Donnez-lui simplement un fichier de configuration : @command{wg-quick up ./wg0.conf}, ou placez ce fichier dans @file{/etc/wireguard} et lancez @command{wg-quick up wg0} à la place."

msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr "Soyez averti que l'auteur a décrit cette commande comme un : « [...] script bash écrit à la va-vite [...] »."

msgid "Using NetworkManager"
msgstr "En utilisant NetworkManager"

msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr "Grâce à la prise en charge de NetworkManager pour Wireguard, nous pouvons nous connecter à notre VPN en utilisant la commande @command{nmcli}.  Jusqu'ici, ce guide suppose que vous utilisez le service Network Manager fourni par @code{%desktop-services}.  Dans le cas contraire, vous devez ajuster votre liste de services pour charger @code{network-manager-service-type} et reconfigurer votre système Guix."

msgid "To import your VPN configuration execute nmcli import command:"
msgstr "Pour importer votre configuration VPN, exécutez la commande d'import de nmcli :"

msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"

msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr "Cela va créer un fichier de configuration dans @file{/etc/NetworkManager/wg0.nmconnection}. Ensuite connectez-vous au serveur Wireguard :"

msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"

msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr "Par défaut, NetworkManager se connectera automatiquement au démarrage du système. Pour changer ce comportement vous devez modifier votre configuration :"

msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr "# nmcli connection modify wg0 connection.autoconnect no\n"

msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr "Pour des informations plus spécifiques sur NetworkManager et wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,voir ce billet par thaller}."

msgid "wm"
msgstr "wm"

msgid "stumpwm"
msgstr "stumpwm"

msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr "Vous pouvez installer StumpWM sur un système Guix en ajoutant @code{stumpwm} et éventuellement @code{`(,stumpwm \"lib\")} dans les paquets du fichier de système d'exploitation, p.@: ex.@: @file{/etc/config.scm}."

msgid "An example configuration can look like this:"
msgstr "Voici un exemple de configuration :"

msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"

msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"

msgid "stumpwm fonts"
msgstr "polices stumpwm"

msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr "Par défaut StumpWM utilise les polices X11, qui peuvent être petites ou pixelisées sur votre système. Vous pouvez corriger cela en installant le module Lisp pour StumpWM @code{sbcl-ttf-fonts}, en l'ajoutant aux paquets de votre système :"

msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"

msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"

msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr "Ensuite vous devrez ajouter le code suivant à au fichier de configuration de StumpWM @file{~/.stumpwm.d/init.lisp} :"

msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\")\n"
"                                                 \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\"\n"
"                                   :subfamily \"Book\" :size 11))\n"
msgstr ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\")\n"
"                                                 \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\"\n"
"                                   :subfamily \"Book\" :size 11))\n"

msgid "sessionlock"
msgstr "verrouillage de session"

msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr "En fonction de votre environnement, le verrouillage de l'écran peut être inclus, ou vous devrez le configurer vous-même. La fonctionnalité est souvent intégrée aux environnements de bureau comme GNOME ou KDE. Si vous utilisez un gestionnaire de fenêtre comme StumpWM ou EXWM, vous devrez sans doute le configurer vous-même."

msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr "Si vous utilisez Xorg, vous pouvez utiliser l'utilitaire @uref{https://www.mankier.com/1/xss-lock, xss-lock} pour verrouiller votre session. xss-lock est lancé par DPMS qui est détecté et activé automatiquement par Xorg 1.8 si ACPI est aussi activé à l'exécution dans le noyau."

msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr "Pour utiliser xss-lock, vous pouvez simplement l'exécuter et le laisser tourner en tache de fond avant de démarrer votre gestionnaire de fenêtre, par exemple dans votre @file{~/.xsession} :"

msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""
"xss-lock -- slock &\n"
"exec stumpwm\n"

msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr "Dans cet exemple, xss-lock utilise @code{slock} pour effectivement verrouiller l'écran quand il pense que c'est nécessaire, comme lorsque vous mettez votre machine en veille."

msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr "Pour que slock puisse verrouiller l'écran de la session graphique, il doit être en setuid-root pour qu'il puisse authentifier les utilisateurs, et il a besoin d'un service PAM. On peut y arriver en ajoutant le service suivant dans notre @file{config.scm} :"

msgid ""
"(service screen-locker-service-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"
msgstr ""
"(service screen-locker-service-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"

msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr "Si vous verrouillez l'écran manuellement, p.@: ex.@: en appelant slock directement si vous voulez verrouiller l'écran sans mettre l'ordinateur en veille, il vaut mieux notifier xss-lock pour éviter la confusion. Vous pouvez faire cela en exécutant @code{xset s activate} juste avant d'exécuter slock."

msgid "linode, Linode"
msgstr "linode, Linode"

msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr "Pour lancer Guix sur un serveur hébergé par @uref{https://www.linode.com, Linode}, commencez par un serveur Debian recommandé. Nous vous recommandons d'utiliser la distribution par défaut pour amorcer Guix. Créez vos clés SSH."

msgid "ssh-keygen\n"
msgstr "ssh-keygen\n"

msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr "Assurez-vous d'ajouter votre clé SSH pour vous connecter facilement sur le serveur distant. C'est facilité par l'interface graphique de Linode. Allez sur votre profil et cliquez sur le bouton pour ajouter une clé SSH. Copiez la sortie de :"

msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr "cat ~/.ssh/<username>_rsa.pub\n"

msgid "Power the Linode down."
msgstr "Éteignez votre Linode."

msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr "Dans l'onglet de stockage du Linode, modifiez la taille du disque Debian pour qu'il soit plus petit. Nous recommandons 30 Go d'espace libre. Ensuite, cliquez sur « Ajouter un disque » et remplissez le formulaire de cette manière :"

msgid "Label: \"Guix\""
msgstr "Label: \"Guix\""

msgid "Filesystem: ext4"
msgstr "Filesystem: ext4"

msgid "Set it to the remaining size"
msgstr "Donnez-lui la taille restante"

msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr "Dans l'onglet de configuration, cliquez sur « modifier » sur le profil Debian par défaut. Dans « Block Device Assignment » cliquez sur « Add a Device ». Il devrait apparaître en tant que @file{/dev/sdc} et vous pouvez sélectionner le disque « Guix ». Sauvegardez les changements."

msgid "Now \"Add a Configuration\", with the following:"
msgstr "Maintenant « Add a Configuration », avec ce qui suit :"

msgid "Label: Guix"
msgstr "Label: Guix"

msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr "Kernel: GRUB 2 (c'est à la toute fin ! Cette étape est @b{IMPORTANTE !})"

msgid "Block device assignment:"
msgstr "Périphériques blocs assignés :"

msgid "@file{/dev/sda}: Guix"
msgstr "@file{/dev/sda} : Guix"

msgid "@file{/dev/sdb}: swap"
msgstr "@file{/dev/sdb} : swap"

msgid "Root device: @file{/dev/sda}"
msgstr "Périphérique racine : @file{/dev/sda}"

msgid "Turn off all the filesystem/boot helpers"
msgstr "Désactivez tous les programmes d'aide pour les systèmes de fichiers et le démarrage"

msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr "Maintenant démarrez le serveur avec la configuration Debian. Une fois lancé, connectez vous en ssh au serveur avec @code{ssh root@@@var{<IP-de-votre-serveur-ici>}}. (Vous pouvez trouver l'adresse IP de votre serveur dans la section résumé de Linode). Maintenant vous pouvez lancer les étapes d'installation de @pxref{Installation binaire,,, guix.fr, GNU Guix} :"

msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr "Maintenant il est temps d'écrire une configuration pour le serveur. Voici ce que vous devrez obligatoirement écrire, en plus de vos propres configurations. Enregistrez le fichier avec le nom @file{guix-config.scm}."

msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"

msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; Ce code va générer un grub.cfg\n"
"  ;; sans installer le chargeur d'amorçage grub sur le disque.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"

msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"

msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Requis pour trouver le disque\n"
"                        %base-initrd-modules))\n"
"\n"

msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Ajoute le compte au groupe « wheel »\n"
"                ;; pour en faire un sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"

msgid ""
"  (packages (cons* openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""
"  (packages (cons* openssh-sans-x\n"
"                   %base-packages))\n"
"\n"

msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"

msgid "Replace the following fields in the above configuration:"
msgstr "Remplacez les champs suivants dans la configuration ci-dessus :"

msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""
"(host-name \"my-server\")       ; remplacez avec le nom de votre serveur\n"
"; si vous avez choisi un serveur Linode en dehors des U.S.,\n"
"; utilisez tzselect pour trouver le bon fuseau horaire\n"
"(timezone \"America/New_York\") ; remplacez le fuseau horaire si besoin\n"
"(name \"janedoe\")              ; remplacez avec votre nom d'utilisateur\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; remplacez par votre clé ssh\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; remplacez par votre clé ssh\n"

msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr "Cette dernière ligne vous permet de vous connecter au serveur en root et de créer le mot de passe initial de root (voir la note à la fin de cette recette sur la connexion en root). Après avoir fait cela, vous pouvez supprimer cette ligne de votre configuration et reconfigurer pour empêcher la connexion directe en root."

msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr "Copiez votre clé ssh publique (ex : @file{~/.ssh/id_rsa.pub}) dans @file{@var{<votre-nom-d'utilisateur>}_rsa.pub} et ajoutez votre @file{guix-config.scm} au même répertoire. Dans un nouveau terminal lancez ces commandes."

msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""
"sftp root@@<adresse IP du serveur distant>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"

msgid "In your first terminal, mount the guix drive:"
msgstr "Dans votre premier terminal, montez le disque guix :"

msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"

msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr "À cause de la manière dont nous avons paramétré la section du chargeur d'amorçage dans le fichier guix-config.scm, nous installons seulement notre fichier de configuration grub. Donc on doit copier certains fichiers GRUB déjà installés sur le système Debian :"

msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"

msgid "Now initialize the Guix installation:"
msgstr "Maintenant initialisez l'installation de Guix :"

msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr "guix system init guix-config.scm /mnt/guix\n"

msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr "Ok, éteignez maintenant le serveur ! Depuis la console Linode, démarrez et choisissez « Guix »."

msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr "Une fois démarré, vous devriez pouvoir vous connecter en SSH ! (La configuration du serveur aura cependant changé). Vous pouvez rencontrer une erreur de ce type :"

msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"

msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr "Vous pouvez soit supprimer @file{~/.ssh/known_hosts}, soit supprimer la ligne qui pose problème, qui commence par l'adresse IP de votre serveur."

msgid "Be sure to set your password and root's password."
msgstr "Assurez-vous de configurer votre mot de passe et celui de root."

msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""
"ssh root@@<remote ip address>\n"
"passwd  ; pour le mot de passe root\n"
"passwd <username> ; pour le mot de passe utilisateur\n"

msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr "Il se peut que vous ne puissiez pas lancer les commandes précédentes si vous n'arrivez pas à vous connecter à distance via SSH, auquel cas vous devrez peut-être configurer vos mot de passes utilisateurs et root en cliquant sur « Launch Console » dans votre espace Linode. Choisissez « Glish » au lieu de « Weblish ». Maintenant vous devriez pouvoir vous connecter en ssh à la machine."

msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr "Hourra ! Maintenant vous pouvez étendre le serveur, supprimer le disque Debian et redimensionner celui de Guix. Bravo !"

msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr "Au fait, si vous sauvegardez le résultat dans une image disque maintenant, vous pourrez plus facilement démarrer de nouvelles images de guix ! Vous devrez peut-être réduire la taille de l'image Guix à 6144 Mo, pour la sauvegarder en tant qu'image. Ensuite vous pouvez redimensionner la partition à la taille maximum."

msgid "kimsufi, Kimsufi, OVH"
msgstr "kimsufi, Kimsufi, OVH"

msgid "To run Guix on a server hosted by @uref{https://www.kimsufi.com/, Kimsufi}, click on the netboot tab then select rescue64-pro and restart."
msgstr "Pour lancer Guix sur un serveur hébergé par @uref{https://www.kimsufi.com/, Kimsufi}, cliquez sur l'onglet netboot puis choisissez rescue64-pro et redémarrez."

msgid "OVH will email you the credentials required to ssh into a Debian system."
msgstr "OVH vous enverra un courriel avec les identifiants requis pour vous connecter en ssh à un système Debian."

msgid "Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr "Maintenant vous pouvez exécuter les étapes de « installer guix de @pxref{Installation binaire,,, guix.fr, GNU Guix} » :"

msgid ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

msgid "Partition the drives and format them, first stop the raid array:"
msgstr "Partitionnez les lecteurs et formatez-les, en commençant par arrêter la grappe raid :"

msgid ""
"mdadm --stop /dev/md127\n"
"mdadm --zero-superblock /dev/sda2 /dev/sdb2\n"
msgstr ""
"mdadm --stop /dev/md127\n"
"mdadm --zero-superblock /dev/sda2 /dev/sdb2\n"

msgid "Then wipe the disks and set up the partitions, we will create a RAID 1 array."
msgstr "Ensuite, effacez les disques et créez les partitions. Nous allons créer une grappe RAID 1."

msgid ""
"wipefs -a /dev/sda\n"
"wipefs -a /dev/sdb\n"
"\n"
msgstr ""
"wipefs -a /dev/sda\n"
"wipefs -a /dev/sdb\n"
"\n"

msgid ""
"parted /dev/sda --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart bios_grub 1049kb 512MiB \\\n"
" set 1 bios_grub on\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart primary 512MiB -512MiB\n"
" set 2 raid on\n"
"parted /dev/sda --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
"\n"
msgstr ""
"parted /dev/sda --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart bios_grub 1049kb 512MiB \\\n"
" set 1 bios_grub on\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart primary 512MiB -512MiB\n"
" set 2 raid on\n"
"parted /dev/sda --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
"\n"

msgid ""
"parted /dev/sdb --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart bios_grub 1049kb 512MiB \\\n"
"     set 1 bios_grub on\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart primary 512MiB -512MiB \\\n"
"     set 2 raid on\n"
"parted /dev/sdb --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
msgstr ""
"parted /dev/sdb --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart bios_grub 1049kb 512MiB \\\n"
"     set 1 bios_grub on\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart primary 512MiB -512MiB \\\n"
"     set 2 raid on\n"
"parted /dev/sdb --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"

msgid "Create the array:"
msgstr "Créez la grappe :"

msgid ""
"mdadm --create /dev/md127 --level=1 --raid-disks=2 \\\n"
"  --metadata=0.90 /dev/sda2 /dev/sdb2\n"
msgstr ""
"mdadm --create /dev/md127 --level=1 --raid-disks=2 \\\n"
"  --metadata=0.90 /dev/sda2 /dev/sdb2\n"

msgid "Now create file systems on the relevant partitions, first the boot partitions:"
msgstr "Maintenant, créez les systèmes de fichiers sur les bonnes partitions, en commençant par la partition de démarrage :"

msgid ""
"mkfs.ext4  /dev/sda1\n"
"mkfs.ext4  /dev/sdb1\n"
msgstr ""
"mkfs.ext4  /dev/sda1\n"
"mkfs.ext4  /dev/sdb1\n"

msgid "Then the root partition:"
msgstr "Puis la partition racine :"

msgid "mkfs.ext4 /dev/md127\n"
msgstr "mkfs.ext4 /dev/md127\n"

msgid "Initialize the swap partitions:"
msgstr "Initialisez les partitions d'échange :"

msgid ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
"mkswap /dev/sdb3\n"
"swapon /dev/sdb3\n"
msgstr ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
"mkswap /dev/sdb3\n"
"swapon /dev/sdb3\n"

msgid "Mount the guix drive:"
msgstr "Montez le disque guix :"

msgid ""
"mkdir /mnt/guix\n"
"mount /dev/md127 /mnt/guix\n"
msgstr ""
"mkdir /mnt/guix\n"
"mount /dev/md127 /mnt/guix\n"

msgid "Now is time to write an operating system declaration @file{os.scm} file; here is a sample:"
msgstr "Maintenant vous pouvez écrire une déclaration de système d'exploitation dans un fichier @file{os.scm}. Voici un exemple :"

msgid ""
"(use-modules (gnu) (guix))\n"
"(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
"(use-package-modules ssh tls tmux vpn virtualization)\n"
"\n"
msgstr ""
"(use-modules (gnu) (guix))\n"
"(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
"(use-package-modules ssh tls tmux vpn virtualization)\n"
"\n"

msgid ""
"(operating-system\n"
"  (host-name \"kimsufi\")\n"
"\n"
msgstr ""
"(operating-system\n"
"  (host-name \"kimsufi\")\n"
"\n"

msgid ""
"  (bootloader (bootloader-configuration\n"
"\t       (bootloader grub-bootloader)\n"
"\t       (targets (list \"/dev/sda\" \"/dev/sdb\"))\n"
"\t       (terminal-outputs '(console))))\n"
"\n"
msgstr ""
"  (bootloader (bootloader-configuration\n"
"\t       (bootloader grub-bootloader)\n"
"\t       (targets (list \"/dev/sda\" \"/dev/sdb\"))\n"
"\t       (terminal-outputs '(console))))\n"
"\n"

msgid ""
"  ;; Add a kernel module for RAID-1 (aka. \"mirror\").\n"
"  (initrd-modules (cons* \"raid1\"  %base-initrd-modules))\n"
"\n"
msgstr ""
"  ;; Ajouter un module noyau pour le RAID-1 (appelé « miroir »).\n"
"  (initrd-modules (cons* \"raid1\"  %base-initrd-modules))\n"
"\n"

msgid ""
"  (mapped-devices\n"
"   (list (mapped-device\n"
"          (source (list \"/dev/sda2\" \"/dev/sdb2\"))\n"
"          (target \"/dev/md127\")\n"
"          (type raid-device-mapping))))\n"
"\n"
msgstr ""
"  (mapped-devices\n"
"   (list (mapped-device\n"
"          (source (list \"/dev/sda2\" \"/dev/sdb2\"))\n"
"          (target \"/dev/md127\")\n"
"          (type raid-device-mapping))))\n"
"\n"

msgid ""
"  (swap-devices\n"
"   (list (swap-space\n"
"          (target \"/dev/sda3\"))\n"
"         (swap-space\n"
"          (target \"/dev/sdb3\"))))\n"
"\n"
msgstr ""
"  (swap-devices\n"
"   (list (swap-space\n"
"          (target \"/dev/sda3\"))\n"
"         (swap-space\n"
"          (target \"/dev/sdb3\"))))\n"
"\n"

msgid ""
"  (issue\n"
"   ;; Default contents for /etc/issue.\n"
"   \"\\\n"
"This is the GNU system at Kimsufi.  Welcome.\\n\")\n"
"\n"
msgstr ""
"  (issue\n"
"   ;; Contenu par défaut de /etc/issue.\n"
"   \"\\\n"
"Ceci est le système GNU sur Kimsufi.  Bienvenue.\\n\")\n"
"\n"

msgid ""
"  (file-systems (cons* (file-system\n"
"\t\t         (mount-point \"/\")\n"
"\t\t         (device \"/dev/md127\")\n"
"\t\t         (type \"ext4\")\n"
"\t\t         (dependencies mapped-devices))\n"
"\t\t       %base-file-systems))\n"
"\n"
msgstr ""
"  (file-systems (cons* (file-system\n"
"\t\t         (mount-point \"/\")\n"
"\t\t         (device \"/dev/md127\")\n"
"\t\t         (type \"ext4\")\n"
"\t\t         (dependencies mapped-devices))\n"
"\t\t       %base-file-systems))\n"
"\n"

msgid ""
"  (users (cons (user-account\n"
"\t        (name \"guix\")\n"
"\t        (comment \"guix\")\n"
"\t        (group \"users\")\n"
"\t        (supplementary-groups '(\"wheel\"))\n"
"\t        (home-directory \"/home/guix\"))\n"
"\t       %base-user-accounts))\n"
"\n"
msgstr ""
"  (users (cons (user-account\n"
"\t        (name \"guix\")\n"
"\t        (comment \"guix\")\n"
"\t        (group \"users\")\n"
"\t        (supplementary-groups '(\"wheel\"))\n"
"\t        (home-directory \"/home/guix\"))\n"
"\t       %base-user-accounts))\n"
"\n"

msgid ""
"  (sudoers-file\n"
"   (plain-file \"sudoers\" \"\\\n"
"root ALL=(ALL) ALL\n"
"%wheel ALL=(ALL) ALL\n"
"guix ALL=(ALL) NOPASSWD:ALL\\n\"))\n"
"\n"
msgstr ""
"  (sudoers-file\n"
"   (plain-file \"sudoers\" \"\\\n"
"root ALL=(ALL) ALL\n"
"%wheel ALL=(ALL) ALL\n"
"guix ALL=(ALL) NOPASSWD:ALL\\n\"))\n"
"\n"

msgid ""
"  ;; Globally-installed packages.\n"
"  (packages (cons* tmux gnutls wireguard-tools %base-packages))\n"
"  (services\n"
"   (cons*\n"
"    (service static-networking-service-type\n"
"\t     (list (static-networking\n"
"\t\t    (addresses (list (network-address\n"
"\t\t\t\t      (device \"enp3s0\")\n"
"\t\t\t\t      (value \"@var{server-ip-address}/24\"))))\n"
"\t\t    (routes (list (network-route\n"
"\t\t\t\t   (destination \"default\")\n"
"\t\t\t\t   (gateway \"@var{server-gateway}\"))))\n"
"\t\t    (name-servers '(\"213.186.33.99\")))))\n"
"\n"
msgstr ""
"  ;; Paquets installés sur tout le système.\n"
"  (packages (cons* tmux gnutls wireguard-tools %base-packages))\n"
"  (services\n"
"   (cons*\n"
"    (service static-networking-service-type\n"
"\t     (list (static-networking\n"
"\t\t    (addresses (list (network-address\n"
"\t\t\t\t      (device \"enp3s0\")\n"
"\t\t\t\t      (value \"@var{adresse-ip-du-serveur}/24\"))))\n"
"\t\t    (routes (list (network-route\n"
"\t\t\t\t   (destination \"default\")\n"
"\t\t\t\t   (gateway \"@var{passerelle-du-serveur}\"))))\n"
"\t\t    (name-servers '(\"213.186.33.99\")))))\n"
"\n"

msgid ""
"    (service unattended-upgrade-service-type)\n"
"\n"
msgstr ""
"    (service unattended-upgrade-service-type)\n"
"\n"

msgid ""
"    (service openssh-service-type\n"
"\t     (openssh-configuration\n"
"\t      (openssh openssh-sans-x)\n"
"\t      (permit-root-login #f)\n"
"\t      (authorized-keys\n"
"\t       `((\"guix\" ,(plain-file \"@var{ssh-key-name.pub}\"\n"
"                                      \"@var{ssh-public-key-content}\"))))))\n"
"    (modify-services %base-services\n"
"      (sysctl-service-type\n"
"       config =>\n"
"       (sysctl-configuration\n"
"\t(settings (append '((\"net.ipv6.conf.all.autoconf\" . \"0\")\n"
"\t\t\t    (\"net.ipv6.conf.all.accept_ra\" . \"0\"))\n"
"\t\t\t  %default-sysctl-settings))))))))\n"
msgstr ""
"    (service openssh-service-type\n"
"\t     (openssh-configuration\n"
"\t      (openssh openssh-sans-x)\n"
"\t      (permit-root-login #f)\n"
"\t      (authorized-keys\n"
"\t       `((\"guix\" ,(plain-file \"@var{nom-de-clé-ssh.pub}\"\n"
"                                      \"@var{contenu-de-clé-ssh}\"))))))\n"
"    (modify-services %base-services\n"
"      (sysctl-service-type\n"
"       config =>\n"
"       (sysctl-configuration\n"
"\t(settings (append '((\"net.ipv6.conf.all.autoconf\" . \"0\")\n"
"\t\t\t    (\"net.ipv6.conf.all.accept_ra\" . \"0\"))\n"
"\t\t\t  %default-sysctl-settings))))))))\n"

msgid "Don't forget to substitute the @var{server-ip-address}, @var{server-gateway}, @var{ssh-key-name} and @var{ssh-public-key-content} variables with your own values."
msgstr "N'oubliez pas de modifier les variables @var{adresse-ip-du-serveur}, @var{passerelle-du-serveur}, @var{nom-de-clé-ssh} et @var{contenu-de-clé-ssh} avec vos propres valeurs."

msgid "The gateway is the last usable IP in your block so if you have a server with an IP of @samp{37.187.79.10} then its gateway will be @samp{37.187.79.254}."
msgstr "La passerelle est la dernière IP utilisable dans votre bloc donc si vous avez un serveur avec l'IP @samp{37.187.79.10}, sa passerelle sera @samp{37.187.79.254}."

msgid "Transfer your operating system declaration @file{os.scm} file on the server via the @command{scp} or @command{sftp} commands."
msgstr "Transférez votre déclaration de système d'exploitation @file{os.scm} sur le serveur via les commandes @command{scp} ou @command{sftp}."

msgid "Now all that is left is to install Guix with a @code{guix system init} and restart."
msgstr "Maintenant, tout ce qu'il reste à faire est d'installer Guix avec @code{guix system init} et redémarrer."

msgid "However we first need to set up a chroot, because the root partition of the rescue system is mounted on an aufs partition and if you try to install Guix it will fail at the GRUB install step complaining about the canonical path of \"aufs\"."
msgstr "Cependant nous devons d'abord paramétrer un chroot, car la partition racine du système de secours est monté sur une partition aufs et si vous essayez d'installer Guix cela ne marchera pas à l'étape d'installation de GRUB. Il se plaindra du chemin canonique de « aufs »."

msgid "Install packages that will be used in the chroot:"
msgstr "Installez les paquets qui seront utilisés dans le chroot :"

msgid "guix install bash-static parted util-linux-with-udev coreutils guix\n"
msgstr "guix install bash-static parted util-linux-with-udev coreutils guix\n"

msgid "Then run the following to create directories needed for the chroot:"
msgstr "Ensuite, exécutez ce qui suit pour créer les répertoires nécessaires au chroot :"

msgid ""
"cd /mnt && \\\n"
"mkdir -p bin etc gnu/store root/.guix-profile/ root/.config/guix/current \\\n"
"  var/guix proc sys dev\n"
msgstr ""
"cd /mnt && \\\n"
"mkdir -p bin etc gnu/store root/.guix-profile/ root/.config/guix/current \\\n"
"  var/guix proc sys dev\n"

msgid "Copy the host resolv.conf in the chroot:"
msgstr "Copiez le resolv.conf hôte dans le chroot :"

msgid "cp /etc/resolv.conf etc/\n"
msgstr "cp /etc/resolv.conf etc/\n"

msgid "Mount block devices, the store and its database and the current guix config:"
msgstr "Montez les périphériques de type bloc, le dépôt et sa base de données et la configuration guix actuelle :"

msgid ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
"mount --rbind /var/guix/ var/guix/\n"
"mount --rbind /gnu/store gnu/store/\n"
"mount --rbind /root/.config/ root/.config/\n"
"mount --rbind /root/.guix-profile/bin/ bin\n"
"mount --rbind /root/.guix-profile root/.guix-profile/\n"
msgstr ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
"mount --rbind /var/guix/ var/guix/\n"
"mount --rbind /gnu/store gnu/store/\n"
"mount --rbind /root/.config/ root/.config/\n"
"mount --rbind /root/.guix-profile/bin/ bin\n"
"mount --rbind /root/.guix-profile root/.guix-profile/\n"

msgid "Chroot in /mnt and install the system:"
msgstr "Entrez dans le chroot sur /mnt et installez le système :"

msgid ""
"chroot /mnt/ /bin/bash\n"
"\n"
msgstr ""
"chroot /mnt/ /bin/bash\n"
"\n"

msgid "guix system init /root/os.scm /guix\n"
msgstr "guix system init /root/os.scm /guix\n"

msgid "Finally, from the web user interface (UI), change @samp{netboot} to @samp{boot to disk} and restart (also from the web UI)."
msgstr "Enfin, à partir de l'interface utilisateur web, modifiez @samp{netboot} en @samp{boot to disk} et redémarrez (également depuis l'interface web)."

msgid "Wait a few minutes and try to ssh with @code{ssh guix@@@var{server-ip-address>} -i @var{path-to-your-ssh-key}}"
msgstr "Attendez quelques minutes et essayez de vous connecter en ssh avec @code{ssh guix@@@var{adresse-ip-du-serveur>} -i @var{chemin-vers-votre-clé-ssh}}"

msgid "You should have a Guix system up and running on Kimsufi; congratulations!"
msgstr "Votre système Guix devrait être opérationnel sur Kimsufi. Félicitations !"

msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr "Pour dupliquer le montage d'un système de fichier (@i{bind mount}), on doit d'abord ajouter quelques définitions avant la section @code{operating-system} de la définition de système d'exploitation. Dans cet exemple nous allons dupliquer le montage d'un dossier d'un disque dur vers @file{/tmp}, pour éviter d'épuiser le SSD principal, sans dédier une partition entière à @file{/tmp}."

msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr "Déjà, le disque source qui héberge de dossier dont nous voulons dupliquer le montage doit être défini, pour que le montage dupliqué puisse en dépendre."

msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;Make sure to set this to the appropriate type for your drive.\n"
msgstr ""
"(define source-drive ;; vous pouvez nommer « source-drive » comme vous le souhaitez.\n"
"   (file-system\n"
"    (device (uuid \"indiquez l'UUID ici\"))\n"
"    (mount-point \"/chemin-vers-le-disque-dur\")\n"
"    (type \"ext4\"))) ;Assurez-vous d'indiquer le bon type pour la partition\n"

msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr "Le dossier source doit aussi être défini, pour que guix sache qu'il ne s'agit pas d'un périphérique bloc, mais d'un dossier."

msgid ""
";; \"source-directory\" can be named any valid variable name.\n"
"(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\")\n"
msgstr ""
";; vous pouvez nommer « source-directory » comme vous le souhaitez.\n"
"(define (%source-directory) \"/chemin-vers-le-disque-dur/tmp\")\n"

msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr "Enfin, dans la définition @code{file-systems}, on doit ajouter le montage lui-même."

msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""
"(file-systems (cons*\n"
"\n"

msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                ...<d'autres montages omis pour rester concis>...\n"
"\n"

msgid ""
"                ;; Must match the name you gave the source drive in the earlier definition.\n"
"                source-drive\n"
"\n"
msgstr ""
"                ;; Doit correspondre au nom que vous avez donné au disque source\n"
"                ;; dans la définition précédente.\n"
"                source-drive\n"
"\n"

msgid ""
"                (file-system\n"
"                 ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (device (%source-directory))\n"
"                 (mount-point \"/tmp\")\n"
"                 ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (type \"none\")\n"
"                 (flags '(bind-mount))\n"
"                 ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 (dependencies (list source-drive))\n"
"                 )\n"
"\n"
msgstr ""
"                (file-system\n"
"                 ;; Assurez-vous que « source-directory » corresponde à\n"
"                 ;; la définition précédente.\n"
"                 (device (%source-directory))\n"
"                 (mount-point \"/tmp\")\n"
"                 ;; On monte un dossier, pas une partition, donc le montage est\n"
"                 ;; de type « none »\n"
"                 (type \"none\")\n"
"                 (flags '(bind-mount))\n"
"                 ;; Assurez-vous que « source-drive » corresponde au nom de\n"
"                 ;; la variable pour le disque.\n"
"                 (dependencies (list source-drive))\n"
"                 )\n"
"\n"

msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                 ...<d'autres montages omis pour rester concis>...\n"
"\n"

msgid "                ))\n"
msgstr "                ))\n"

msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr "Le démon Guix peut utiliser un mandataire HTTP pour récupérer des substituts. Nous le configurons ici pour les récupérer par Tor."

msgid "Warning"
msgstr "Attention"

msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr "@emph{Tout} le trafic du démon de passera @emph{pas} par Tor ! Seuls HTTP/HTTPS passer par le mandataire ; les connexions FTP, avec le protocol Git, SSH, etc, passeront toujours par le réseau en clair. De nouveau, cette configuration n'est pas parfaite et une partie de votre trafic ne sera pas routé par Tor du tout. Utilisez-la à vos risques et périls."

msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr "Remarquez aussi que la procédure décrite ici ne s'applique qu'à la substitution de paquets. Lorsque vous mettez à jour la distribution avec @command{guix pull}, vous aurez encore besoin de @command{torsocks} si vous voulez router la connexion vers les serveurs de dépôts git à travers Tor."

msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr "Le serveur de substitut de Guix est disponible sur un service Onion. Si vous voulez l'utiliser pour récupérer des substituts par Tor, configurez votre système de cette manière :"

msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"

msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls \"\\\n"
"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; sevice Onion de ci.guix.gnu.org\n"
"                      (substitute-urls \"\\\n"
"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"

msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr "Cela fera tourner le processus tor et fournira un tunnel HTTP CONNECT qui sera utilisé par @command{guix-daemon}. Le démon peut utiliser d'autres protocoles que HTTP(S) pour récupérer des ressources distantes. Les requêtes utilisant ces protocoles ne passeront pas par Tor puisqu'il s'agit d'un tunnel HTTP uniquement. Remarquez que @code{substitutes-urls} doit utiliser HTTPS et non HTTP, sinon ça ne fonctionne pas. C'est une limite du tunnel de Tor ; vous voudrez peut-être utiliser @command{privoxy} à la place pour éviter ces limites."

msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr "Si vous ne voulez pas toute le temps récupérer des substituts à travers Tor mais l'utiliser seulement de temps en temps, alors ne modifiez pas l'objet @code{guix-configuration}. Lorsque vous voulez récupérer un substitut par le tunnel Tor, lancez :"

msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"

msgid "nginx, lua, openresty, resty"
msgstr "nginx, lua, openresty, resty"

msgid "NGINX could be extended with Lua scripts."
msgstr "Les fonctionnalités de NGINX peuvent être étendues avec des scripts Lua."

msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr "Guix fournit un service NGINX qui est capable de charger des modules et des paquets Lua spécifiques, et de répondre aux requêtes en évaluant des scripts Lua."

msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr "L'exemple suivant montre une définition de système avec une configuration qui évalue le script Lua @file{index.lua} lors d'une requête HTTP à @uref{http://localhost/hello} :"

msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""
"local shell = require \"resty.shell\"\n"
"\n"

msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"

msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"

msgid "ngx.say(stdout)\n"
msgstr "ngx.say(stdout)\n"

msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"

msgid "mpd"
msgstr "mpd"

msgid "music server, headless"
msgstr "serveur de musique, sans affichage"

msgid "bluetooth, ALSA configuration"
msgstr "bluetooth, configuration ALSA"

msgid "MPD, the Music Player Daemon, is a flexible server-side application for playing music.  Client programs on different machines on the network --- a mobile phone, a laptop, a desktop workstation --- can connect to it to control the playback of audio files from your local music collection.  MPD decodes the audio files and plays them back on one or many outputs."
msgstr "MPD, le démon lecteur de musique, est une application serveur flexible pour jouer de la musique. Les programmes clients sur différentes machines du réseau — un téléphone portable, un ordinateur portable, un ordinateur de bureau — peuvent s'y connecter pour contrôler la lecture de fichiers audio de votre collection musicale locale. MPD décode les fichiers audio et les joue sur une ou plusieurs sorties."

msgid "By default MPD will play to the default audio device.  In the example below we make things a little more interesting by setting up a headless music server.  There will be no graphical user interface, no Pulseaudio daemon, and no local audio output.  Instead we will configure MPD with two outputs: a bluetooth speaker and a web server to serve audio streams to any streaming media player."
msgstr "Par défaut MPD jouera sur le périphérique audio par défaut. Dans l'exemple ci-dessous nous rendons les choses un peu plus intéressantes en configurant un serveur de musique sans affichage. Il n'y aura pas d'interface graphique, pas de démon Pulseaudio, ni de sortie audio locale. Au lieu de cela, nous configurons MPD avec deux sorties : un haut-parleur bluetooth et un serveur web pour servir des flux audio à n'importe quel lecture de musique."

msgid "Bluetooth is often rather frustrating to set up.  You will have to pair your Bluetooth device and make sure that the device is automatically connected as soon as it powers on.  The Bluetooth system service returned by the @code{bluetooth-service} procedure provides the infrastructure needed to set this up."
msgstr "Le Bluetooth est souvent frustrant à configurer. Vous devrez appairer vos périphériques Bluetooth et vous assurer que le périphérique se connecte automatiquement dès qu'il est branché. Le service système Bluetooth renvoyé par la procédure @code{bluetooth-service} fournit l'infrastructure requise pour cette configuration."

msgid "Reconfigure your system with at least the following services and packages:"
msgstr "Reconfigurez votre système avec au moins les services et les paquets suivants :"

msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"

msgid "Start the @code{bluetooth} service and then use @command{bluetoothctl} to scan for Bluetooth devices.  Try to identify your Bluetooth speaker and pick out its device ID from the resulting list of devices that is indubitably dominated by a baffling smorgasbord of your neighbors' home automation gizmos.  This only needs to be done once:"
msgstr "Démarrez le service @code{bluetooth} puis utilisez @command{bluetoothctl} pour scanner les périphériques Bluetooth. Essayez d'identifier votre haut-parleur Bluetooth et choisissez son ID de périphérique dans la liste de périphériques qui est indubitablement polluée par une armée de gadgets connectés chez votre voisin. Vous ne devrez le faire qu'une seule fois :"

msgid ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"
msgstr ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"

msgid ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"
msgstr ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"

msgid ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"
msgstr ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"

msgid ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"
msgstr ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"

msgid ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"
msgstr ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"

msgid ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"
msgstr ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"

msgid ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"
msgstr ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"

msgid ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"
msgstr ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"

msgid ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"
msgstr ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"

msgid ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"
msgstr ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"

msgid ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"
msgstr ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"

msgid "Congratulations, you can now automatically connect to your Bluetooth speaker!"
msgstr "Félicitations, vous pouvez maintenant vous connecter automatiquement à votre haut-parleur Bluetooth !"

msgid "It is now time to configure ALSA to use the @emph{bluealsa} Bluetooth module, so that you can define an ALSA pcm device corresponding to your Bluetooth speaker.  For a headless server using @emph{bluealsa} with a fixed Bluetooth device is likely simpler than configuring Pulseaudio and its stream switching behavior.  We configure ALSA by crafting a custom @code{alsa-configuration} for the @code{alsa-service-type}.  The configuration will declare a @code{pcm} type @code{bluealsa} from the @code{bluealsa} module provided by the @code{bluez-alsa} package, and then define a @code{pcm} device of that type for your Bluetooth speaker."
msgstr "Il est maintenant temps de configurer ALSA pour utiliser le module Bluetooth @emph{bluealsa}, pour que vous puissiez définir un périphérique pcm ALSA correspondant à votre haut-parleur Bluetooth. Un serveur sans affichage utilisant @emph{bluealsa} avec un périphérique fixe est probablement plus facile à configurer que Pulseaudio et son comportement de changement de flux. Nous configurons ALSA en créant un @code{alsa-configuration} personnalisé pour le service @code{alsa-service-type}. La configuration déclarera un type @code{pcm} @code{bluealsa} du module @code{bluealsa} fournit par le paquet @code{bluez-alsa}, puis définira un périphérique @code{pcm} de ce type pour le haut-parleur Bluetooth."

msgid "All that is left then is to make MPD send audio data to this ALSA device.  We also add a secondary MPD output that makes the currently played audio files available as a stream through a web server on port 8080.  When enabled a device on the network could listen to the audio stream by connecting any capable media player to the HTTP server on port 8080, independent of the status of the Bluetooth speaker."
msgstr "Tout ce qui reste à faire est de faire en sorte que MPD envoie les données audio à ce périphérique ALSA. Nous ajoutons aussi une sortie MPD secondaire qui rend les fichiers audio en lecture disponibles en streaming sur un serveur web sur le port 8080. Lorsque la sortie est activée, un appareil sur le réseau peut écouter le flux audio en se connectant avec n'importe quel lecteur multimédia au serveur HTTP sur le port 8080, indépendamment du statut du haut-parleur Bluetooth."

msgid "What follows is the outline of an @code{operating-system} declaration that should accomplish the above-mentioned tasks:"
msgstr "Voici les grandes lignes d'une déclaration @code{operating-system} qui devrait accomplir les tâches sus-mentionnées :"

msgid ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Use the same name as in the ALSA\n"
"                              ;; configuration below.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Declare Bluetooth audio device type \\\"bluealsa\\\" from bluealsa module\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Utilisez le même nom que dans la configuration\n"
"                              ;; ALSA plus bas.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Déclare un type de périphérique audio Bluetooth \\\"bluealsa\\\" du module bluealsa\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"

msgid ""
"# Declare control device type \\\"bluealsa\\\" from the same module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""
"# Déclare un type de périphérique de contrôle \\\"bluealsa\\\" du même module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"

msgid ""
"# Define the actual Bluetooth audio device.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"
msgstr ""
"# Définie le périphérique Bluetooth audio.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"

msgid ""
"# Define an associated controller.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"
msgstr ""
"# Définie un contrôleur associé.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"

msgid "Enjoy the music with the MPD client of your choice or a media player capable of streaming via HTTP!"
msgstr "Profitez de votre musique avec le client MPD de votre choix ou un lecteur multimédia capable de streamer en HTTP !"

msgid "The kernel Linux provides a number of shared facilities that are available to processes in the system.  These facilities include a shared view on the file system, other processes, network devices, user and group identities, and a few others.  Since Linux 3.19 a user can choose to @emph{unshare} some of these shared facilities for selected processes, providing them (and their child processes) with a different view on the system."
msgstr "Le noyau Linux fournit un certain nombre de dispositifs partagés qui sont disponibles pour les processus du système. Ces dispositifs sont entre autres un vue partagée du système de fichiers, des autres processus, des périphériques réseau, des identités de groupe et d'utilisateur et quelques autres. Depuis Linux 3.19 vous pouvez choisir de @emph{départager} certains de ces dispositifs partagés pour des processus choisis, en leur fournissant (ainsi qu'à leurs processus enfant) une vue différente du système."

msgid "A process with an unshared @code{mount} namespace, for example, has its own view on the file system --- it will only be able to see directories that have been explicitly bound in its mount namespace.  A process with its own @code{proc} namespace will consider itself to be the only process running on the system, running as PID 1."
msgstr "Un processus avec un espace de nom de montage (@code{mount}) départagé par exemple, a sa propre vue du système de fichier — il ne pourra voir que les répertoires qui ont été explicitement liés à son espace de nom de montage. Un processus avec son propre espace de nom de processus (@code{proc}) considérera qu'il est le seul processus lancé sur le système, avec le PID 1."

msgid "Guix uses these kernel features to provide fully isolated environments and even complete Guix System containers, lightweight virtual machines that share the host system's kernel.  This feature comes in especially handy when using Guix on a foreign distribution to prevent interference from foreign libraries or configuration files that are available system-wide."
msgstr "Guix utilise ces fonctionnalités du noyau pour fournir des environnement complètement isolés e même des conteneurs complets pour le système Guix, des machines virtuelles légères qui partagent le noyau de l'hôte. Cette fonctionnalité est particulièrement pratique si vous utilise Guix sur une distribution externe pour éviter les interférence avec les bibliothèques ou les fichiers de configuration externes disponibles sur l'ensemble du système."

msgid "The easiest way to get started is to use @command{guix shell} with the @option{--container} option.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual} for a reference of valid options."
msgstr "La manière la plus simple de démarrer est d'utiliser @command{guix shell} avec l'option @option{--container}. @xref{Invoquer guix shell,,, guix.fr, le manuel de référence de GNU Guix} pour la référence des options valides."

msgid "The following snippet spawns a minimal shell process with most namespaces unshared from the system.  The current working directory is visible to the process, but anything else on the file system is unavailable.  This extreme isolation can be very useful when you want to rule out any sort of interference from environment variables, globally installed libraries, or configuration files."
msgstr "Le bout de code suivant démarre un shell minimal avec la plupart des espaces de noms départagés du système. Le répertoire de travail actuel est visible pour le processus, mais tout le reste du système de fichiers est indisponible. Cette isolation extrême peut être très utile si vous voulez écarter toute interférence des variables d'environnement, des bibliothèques installées globalement ou des fichiers de configuration."

msgid "guix shell --container\n"
msgstr "guix shell --container\n"

msgid "It is a bleak environment, barren, desolate.  You will find that not even the GNU coreutils are available here, so to explore this deserted wasteland you need to use built-in shell commands.  Even the usually gigantic @file{/gnu/store} directory is reduced to a faint shadow of itself."
msgstr "C'est un environnement vierge, aride et désolé. Vous trouverez que même GNU coreutils n'y est pas disponible, donc pour explorer cet environnement désert vous devrez utiliser les commandes internes au shell. Même le répertoire @file{/gnu/store} habituellement énorme est réduit à peau de chagrin."

msgid ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"
msgstr ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"

msgid "exiting a container"
msgstr "quitter un conteneur"

msgid "There isn't much you can do in an environment like this other than exiting it.  You can use @key{^D} or @command{exit} to terminate this limited shell environment."
msgstr "Vous ne pouvez pas faire grand chose de plus dans un environnement comme celui-ci à part en sortir. Vous pouvez utiliser @key{Ctrl-D} ou @command{exit} pour quitter cet environnement shell limité."

msgid "exposing directories, container"
msgstr "exposer des répertoires, conteneur"

msgid "sharing directories, container"
msgstr "partager des répertoires, conteneur"

msgid "mapping locations, container"
msgstr "faire correspondre des emplacement, conteneur"

msgid "You can make other directories available inside of the container environment; use @option{--expose=DIRECTORY} to bind-mount the given directory as a read-only location inside the container, or use @option{--share=DIRECTORY} to make the location writable.  With an additional mapping argument after the directory name you can control the name of the directory inside the container.  In the following example we map @file{/etc} on the host system to @file{/the/host/etc} inside a container in which the GNU coreutils are installed."
msgstr "Vous pouvez rendre d'autres répertoires disponibles à l'intérieur de l'environnement du conteneur. Utilisez @option{--expose=RÉPERTOIRE} pour créer un montage lié au répertoire donné en lecture-seule à l'intérieur du conteneur, ou utilisez @option{--share=RÉPERTOIRE} pour rendre cet emplacement inscriptible. Avec un argument de correspondance supplémentaire après le nom du répertoire vous pouvez contrôler le nom du répertoire lié dans le conteneur. Dans l'exemple suivant nous faisons correspondre @file{/etc} du système hôte à @file{/l/hôte/etc} dans un conteneur dans lequel GNU coreutils est installé."

msgid ""
"$ guix shell --container --share=/etc=/the/host/etc coreutils\n"
"$ ls /the/host/etc\n"
msgstr ""
"$ guix shell --container --share=/etc=/l/hôte/etc coreutils\n"
"$ ls /l/hôte/etc\n"

msgid "Similarly, you can prevent the current working directory from being mapped into the container with the @option{--no-cwd} option.  Another good idea is to create a dedicated directory that will serve as the container's home directory, and spawn the container shell from that directory."
msgstr "De même, vous pouvez empêcher le répertoire actuel d'être ajouté au conteneur avec l'option @option{--no-cwd}. Une autre bonne idée est de créer un répertoire dédié qui servira de répertoire personnel dans le conteneur et de démarrer le shell du conteneur dans ce répertoire."

msgid "hide system libraries, container"
msgstr "cacher les bibliothèques système, conteneur"

msgid "avoid ABI mismatch, container"
msgstr "éviter les incompatibilités d'ABI, conteneur"

msgid "On a foreign system a container environment can be used to compile software that cannot possibly be linked with system libraries or with the system's compiler toolchain.  A common use-case in a research context is to install packages from within an R session.  Outside of a container environment there is a good chance that the foreign compiler toolchain and incompatible system libraries are found first, resulting in incompatible binaries that cannot be used by R.  In a container shell this problem disappears, as system libraries and executables simply aren't available due to the unshared @code{mount} namespace."
msgstr "Sur un système externe un environnement de conteneur peut être utilisé pour compiler un logiciel qui ne peut pas être lié aux bibliothèques du système ou avec la chaine d'outils du système. Un cas d'utilisation courant dans le contexte de la recherche est l'installation de paquets à partir d'une session R. En dehors de l'environnement du conteneur il est fort probable que la chaine de compilation externe et les bibliothèques systèmes incompatibles soient trouvés en premier, ce qui créer des binaires incompatibles qui ne peuvent pas être utilisés dans R. Dans un conteneur ce problème disparait car les bibliothèques du système et les executables ne sont simplement pas disponibles à cause de l'espace de nom @code{mount} départagé."

msgid "Let's take a comprehensive manifest providing a comfortable development environment for use with R:"
msgstr "Prenons un manifeste complet pour fournir un environnement de développement confortable pour R :"

msgid ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"
msgstr ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"

msgid ""
"        ;; base packages\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"
msgstr ""
"        ;; paquets de base\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"

msgid ""
"        ;; Common command line tools lest the container is too empty.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"
msgstr ""
"        ;; Outils en ligne de commande usuels, sans lesquels le conteneur est trop vide.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"

msgid ""
"        ;; R markdown tools\n"
"        \"pandoc\"\n"
"\n"
msgstr ""
"        ;; outils markdown pour R\n"
"        \"pandoc\"\n"
"\n"

msgid ""
"        ;; Toolchain and common libraries for \"install.packages\"\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"
msgstr ""
"        ;; Chaine d'outils et bibliothèques courantes pour « install.packages »\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"

msgid "Let's use this to run R inside a container environment.  For convenience we share the @code{net} namespace to use the host system's network interfaces.  Now we can build R packages from source the traditional way without having to worry about ABI mismatch or incompatibilities."
msgstr "Utilisons cela pour lancer R dans un environnement de conteneur. Pour se simplifier la vie, nous partageons l'espace de nom @code{net} pour utiliser les interfaces réseau du système hôte. Maintenant nous pouvons construire des paquets R à partir des sources de la manière traditionnelle sans avoir à se soucier des incompatibilités d'ABI."

msgid ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"
msgstr ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"

msgid ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"
msgstr ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"

msgid ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"
msgstr ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"

msgid "Using container shells is fun, but they can become a little cumbersome when you want to go beyond just a single interactive process.  Some tasks become a lot easier when they sit on the rock solid foundation of a proper Guix System and its rich set of system services.  The next section shows you how to launch a complete Guix System inside of a container."
msgstr "Utiliser des shells conteneurs est amusant, mais ils peuvent devenir un peu embêtant quand vous voulez plus qu'un seul processus interactif. Certaines tâches deviennent plus faciles lorsqu'elles se reposent sur les fondations solides d'un système Guix et de son riche ensemble de services systèmes. La section suivante vous montre comment lancer un système Guix complet à l'intérieur d'un conteneur."

msgid "The Guix System provides a wide array of interconnected system services that are configured declaratively to form a dependable stateless GNU System foundation for whatever tasks you throw at it.  Even when using Guix on a foreign distribution you can benefit from the design of Guix System by running a system instance as a container.  Using the same kernel features of unshared namespaces mentioned in the previous section, the resulting Guix System instance is isolated from the host system and only shares file system locations that you explicitly declare."
msgstr "Le système Guix fournit un large éventail de services systèmes interconnectés configurés déclarativement pour former les fondations d'un système GNU fiable et sans état pour n'importe quelle tâche que vous lui donnez. Même lorsque vous utilisez Guix sur une distribution externe, vous pouvez bénéficier de la conception du système Guix en lançant une instance du système dans un conteneur. Avec les mêmes fonctionnalités d'espaces de noms départagés mentionnés dans la section précédente, l'instance du système Guix qui en résulte est isolée du système hôte et ne partage que les emplacements de fichiers que vous avez explicitement déclarés."

msgid "A Guix System container differs from the shell process created by @command{guix shell --container} in a number of important ways.  While in a container shell the containerized process is a Bash shell process, a Guix System container runs the Shepherd as PID 1.  In a system container all system services (@pxref{Services,,, guix, GNU Guix Reference Manual}) are set up just as they would be on a Guix System in a virtual machine or on bare metal---this includes daemons managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services,,, guix, GNU Guix Reference Manual}) as well as other kinds of extensions to the operating system (@pxref{Service Composition,,, guix, GNU Guix Reference Manual})."
msgstr "Un conteneur du système Guix est différent du processus shell créé par @command{guix shell --container} de plusieurs façons importantes. Dans un shell conteneur le processus de conteneurisation est le processus de shell Bash alors qu'une conteneur du système Guix fait tourner le Shepherd en PID 1. Dans un conteneur système tous les services systèmes (@pxref{Services,,, guix.fr, le manuel de référence de GNU Guix}) sont paramétrés de la même manière que sur un système Guix dans une machine virtuelle ou directement sur le matériel. Cela comprend les démons gérés par le GNU@tie{}Shepherd (@pxref{Services Shepherd,,, guix.fr, le manuel de référence de GNU Guix}) ainsi que d'autres types d'extensions du système d'exploitation (@pxref{Composition de services,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "The perceived increase in complexity of running a Guix System container is easily justified when dealing with more complex applications that have higher or just more rigid requirements on their execution contexts---configuration files, dedicated user accounts, directories for caches or log files, etc.  In Guix System the demands of this kind of software are satisfied through the deployment of system services."
msgstr "La complexité perçue comme croissante d'un conteneur du système Guix est facilement justifiée lorsque vous devez traiter avec des applications plus complexes qui ont des prérequis plus grands ou plus rigides sur leur contexte d'exécution — des fichiers de configuration, des comptes utilisateurs dédiés, des répertoires pour les le cache ou les fichiers journaux, etc. Sur le système Guix, la demande de ce genre de logiciels est satisfaite en déployant des services systèmes."

msgid "A good example might be a PostgreSQL database server.  Much of the complexity of setting up such a database server is encapsulated in this deceptively short service declaration:"
msgstr "Un bon exemple pourrait être un serveur de base de données PostgreSQL. La majeure partie de la complexité de configuration d'un tel serveur de base de données est encapsulée dans cette déclaration trompeusement courtes :"

msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"
msgstr ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"

msgid "A complete operating system declaration for use with a Guix System container would look something like this:"
msgstr "Une déclaration de système d'exploitation complète utilisable avec un conteneur du système Guix ressemblerait à ceci :"

msgid ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"

msgid ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"
msgstr ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"

msgid "With @code{postgresql-role-service-type} we define a role ``test'' and create a matching database, so that we can test right away without any further manual setup.  The @code{postgresql-config-file} settings allow a client from IP address 10.0.0.1 to connect without requiring authentication---a bad idea in production systems, but convenient for this example."
msgstr "Avec @code{postgresql-role-service-type} nous définissons un rôle « test » et créons une base de données correspondante, pour que nous puissions le tester immédiatement sans autre paramétrage manuel. Les paramètres de @code{postgresql-config-file} permettent à un client de se connecter à partir de l'adresse IP 10.0.0.1 sans authentification — une mauvaise idée en production, mais pratique pour cet exemple."

msgid "Let's build a script that will launch an instance of this Guix System as a container.  Write the @code{operating-system} declaration above to a file @file{os.scm} and then use @command{guix system container} to build the launcher.  (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual})."
msgstr "Construisons un script qui exécutera une instance de ce système Guix dans un conteneur. Écrivez la déclaration @code{operating-system} ci-dessus dans un fichier @file{os.scm} puis utilisez @command{guix system container} pour construire le lanceur (@pxref{Invoquer guix system,,, guix.fr, le manuel de référence de GNU Guix})."

msgid ""
"$ guix system container os.scm\n"
"The following derivations will be built:\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"building /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"
msgstr ""
"$ guix system container os.scm\n"
"Les dérivations suivantes seront construites :\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"construction de /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"

msgid "Now that we have a launcher script we can run it to spawn the new system with a running PostgreSQL service.  Note that due to some as yet unresolved limitations we need to run the launcher as the root user, for example with @command{sudo}."
msgstr "Maintenant que nous avons le script de lancement nous pouvons le lancer pour démarrer le nouveau système avec un service PostgreSQL. Remarquez qu'à cause de limites non encore résolues, nous devons lancer le lanceur en root, par exemple avec @command{sudo}."

msgid ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"system container is running as PID 5983\n"
"@dots{}\n"
msgstr ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"le conteneur système tourne avec le PID 5983\n"
"@dots{}\n"

msgid "Background the process with @key{Ctrl-z} followed by @command{bg}.  Note the process ID in the output; we will need it to connect to the container later.  You know what? Let's try attaching to the container right now.  We will use @command{nsenter}, a tool provided by the @code{util-linux} package:"
msgstr "Mettez le processus en fond avec @key{Ctrl-z} suivie de @command{bg}. Prenez note de l'ID du processus dans la sortie ; nous en aurons besoin pour nous connecter au conteneur plus tard. Vous savez quoi ? Essayons de nous attacher au conteneur immédiatement. Nous utiliserons @command{nsenter}, un outil fournit par le paquet @code{util-linux} :"

msgid ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"
msgstr ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"

msgid "The PostgreSQL service is running in the container!"
msgstr "Le service PostgreSQL tourne dans le conteneur !"

msgid "container networking"
msgstr "configuration réseau d'un conteneur"

msgid "What good is a Guix System running a PostgreSQL database service as a container when we can only talk to it with processes originating in the container? It would be much better if we could talk to the database over the network."
msgstr "Que vaut un système Guix dans lequel tourne un service de bases de données PostgreSQL dans un conteneur si nous ne pouvons lui parler qu'avec des processus originaire de ce conteneur ? Il serait bien mieux de pouvoir parler à la base de données via le réseau."

msgid "The easiest way to do this is to create a pair of connected virtual Ethernet devices (known as @code{veth}).  We move one of the devices (@code{ceth-test}) into the @code{net} namespace of the container and leave the other end (@code{veth-test}) of the connection on the host system."
msgstr "La manière la plus simple de faire cela est de créer une paire de périphérique Ethernet virtuels (connus sous le nom de @code{veth}). Nous déplaçons l'un des périphériques (@code{ceth-test}) dans l'espace de nom @code{net} du conteneur et laissons l'autre côté (@code{veth-test}) de la connexion sur le système hôte."

msgid ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"
msgstr ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"

msgid ""
"# Attach the new net namespace \"guix-test\" to the container PID.\n"
"sudo ip netns attach $ns $pid\n"
"\n"
msgstr ""
"# Attache le nouvel espace de nom réseau « guix-test » au PID du conteneur.\n"
"sudo ip netns attach $ns $pid\n"
"\n"

msgid ""
"# Create the pair of devices\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"
msgstr ""
"# Crée une paire de périphériques\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"

msgid ""
"# Move the client device into the container's net namespace\n"
"sudo ip link set $client netns $ns\n"
msgstr ""
"# Déplace le périphérique client dans l'espace de nom réseau du conteneur\n"
"sudo ip link set $client netns $ns\n"

msgid "Then we configure the host side:"
msgstr "Puis nous configurons le côté de l'hôte :"

msgid ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"
msgstr ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"

msgid "@dots{}and then we configure the client side:"
msgstr "@dots{}puis nous configurons le côté client :"

msgid ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"
msgstr ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"

msgid "At this point the host can reach the container at IP address 10.0.0.2, and the container can reach the host at IP 10.0.0.1.  This is all we need to talk to the database server inside the container from the host system on the outside."
msgstr "Maintenant l'hôte peut atteindre le conteneur à l'adresse IP 10.0.0.2 et le conteneur peut atteindre l'hôte à l'adresse IP 10.0.0.1. C'est tout ce dont nous avons besoin pour communiquer avec le serveur de bases de données dans le conteneur à partir du système hôte, à l'extérieur."

msgid ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"
msgstr ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"

msgid ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"
msgstr ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"

msgid "Now that we're done with this little demonstration let's clean up:"
msgstr "Maintenant que nous avons fini cette petite démonstration, nettoyons tout ça :"

msgid ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"
msgstr ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"

msgid "Guix can produce disk images (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual}) that can be used with virtual machines solutions such as virt-manager, GNOME Boxes or the more bare QEMU, among others."
msgstr "Guix peut produire des images disque (@pxref{Invoquer guix system,,, guix.fr, le manuel de référence de GNU Guix}) qui peuvent être utilisées avec des solutions de machines virtuelles telles que virt-manager, GNOME Boxes ou les plus simples QEMU, entre autres."

msgid "This chapter aims to provide hands-on, practical examples that relates to the usage and configuration of virtual machines on a Guix System."
msgstr "Ce chapitre a pour but de fournir des exemples pratiques relatifs à l'utilisation et à la configuration de machines virtuelles sur un système Guix."

msgid "Network bridge interface"
msgstr "Interface de pont réseau"

msgid "networking, bridge"
msgstr "réseau, pont"

msgid "qemu, network bridge"
msgstr "qemu, pont réseau"

msgid "By default, QEMU uses a so-called ``user mode'' host network back-end, which is convenient as it does not require any configuration.  Unfortunately, it is also quite limited.  In this mode, the guest @abbr{VM, virtual machine} can access the network the same way the host would, but it cannot be reached from the host.  Additionally, since the QEMU user networking mode relies on ICMP, ICMP-based networking tools such as @command{ping} do @emph{not} work in this mode.  Thus, it is often desirable to configure a network bridge, which enables the guest to fully participate in the network.  This is necessary, for example, when the guest is to be used as a server."
msgstr "Par défaut, QEMU utilise un moteur réseau hôte en « mode utilisateur », qui est pratique comme il n'a pas besoin de configuration. Malheureusement, il est aussi très limité. Dans ce mode, la @abbr{VM, machine virtuelle} invitée peut accéder au réseau de la même manière que l'hôte, mais elle ne peut pas être atteinte depuis l'hôte. De plus, comme le mode de réseau utilisateur de QEMU se base sur ICMP, les outils de réseau basés sur ICMP comme @command{ping} ne fonctionnent @emph{pas} dans ce mode. Ainsi, il est souvent préférable de configurer un pont réseau, qui permet à l'invité de participer pleinement au réseau. Cela est nécessaire, par exemple, lorsque l'invité est utilisé comme serveur."

msgid "Creating a network bridge interface"
msgstr "Créer une interface réseau pont"

msgid "There are many ways to create a network bridge.  The following command shows how to use NetworkManager and its @command{nmcli} command line interface (CLI) tool, which should already be available if your operating system declaration is based on one of the desktop templates:"
msgstr "Il y a plusieurs manières de créer un pont réseau. La commande suivante indique comment utiliser NetworkManager et son outil en ligne de commande @command{nmcli}, qui devrait déjà être disponible si votre déclaration de système d'exploitation se base sur l'un des modèles de systèmes de bureau :"

msgid "# nmcli con add type bridge con-name br0 ifname br0\n"
msgstr "# nmcli con add type bridge con-name br0 ifname br0\n"

msgid "To have this bridge be part of your network, you must associate your network bridge with the Ethernet interface used to connect with the network.  Assuming your interface is named @samp{enp2s0}, the following command can be used to do so:"
msgstr "Pour que ce pont fasse partie de votre réseau, vous devez associer votre pont réseau à l’interface Ethernet utilisée pour vous connecter au réseau. En supposant que cette interface est nommée @samp{enp2s0}, la commande suivante peut être utilisée pour cela :"

msgid "# nmcli con add type bridge-slave ifname enp2s0 master br0\n"
msgstr "# nmcli con add type bridge-slave ifname enp2s0 master br0\n"

msgid "Important"
msgstr "Important"

msgid "Only Ethernet interfaces can be added to a bridge.  For wireless interfaces, consider the routed network approach detailed in @xref{Routed network for libvirt}."
msgstr "Seules les interfaces Ethernet peut être ajoutées à un pont. Pour les interfaces sans fil, envisagez l'approche par réseau routé détaillée dans @xref{Routed network for libvirt}."

msgid "By default, the network bridge will allow your guests to obtain their IP address via DHCP, if available on your local network.  For simplicity, this is what we will use here.  To easily find the guests, they can be configured to advertise their host names via mDNS."
msgstr "Par défaut, le pont réseau permet à vos invités d’obtenir leur adresse IP via DHCP s’il est disponible sur votre réseau local. Par souci de simplicité, c’est ce que nous utiliserons ici. Pour retrouver facilement les invités, vous pouvez les configurer pour que leurs noms d’hôte soient annoncés via mDNS."

msgid "Configuring the QEMU bridge helper script"
msgstr "Configurer le script auxiliaire du pont QEMU"

msgid "QEMU comes with a helper program to conveniently make use of a network bridge interface as an unprivileged user @pxref{Network options,,, QEMU, QEMU Documentation}.  The binary must be made setuid root for proper operation; this can be achieved by adding it to the @code{privileged-programs} field of your (host) @code{operating-system} definition, as shown below:"
msgstr "QEMU possède un programme auxiliaire qui permet aux utilisateurs non privilégiés d’utiliser facilement une interface de pont réseau @pxref{Network options,,, QEMU, QEMU Documentation}. Pour son bon fonctionnement, le binaire doit être en setuid-root. Cela se fait en l’ajoutant au champ @code{privileged-programs} de votre définition (hôte) @code{operating-system}, comme indiqué ci-dessous :"

msgid ""
"(privileged-programs\n"
" (cons (privileged-program\n"
"         (program (file-append qemu \"/libexec/qemu-bridge-helper\"))\n"
"         (setuid? #t))\n"
"       %default-privileged-programs))\n"
msgstr ""
"(privileged-programs\n"
" (cons (privileged-program\n"
"         (program (file-append qemu \"/libexec/qemu-bridge-helper\"))\n"
"         (setuid? #t))\n"
"       %default-privileged-programs))\n"

msgid "The file @file{/etc/qemu/bridge.conf} must also be made to allow the bridge interface, as the default is to deny all.  Add the following to your list of services to do so:"
msgstr "Vous devez configurer le fichier @file{/etc/qemu/bridge.conf} pour qu’il autorise l’interface de pont réseau, car il la refuse par défaut. Pour ce faire, ajoutez l’élément suivant à votre liste de services :"

msgid ""
"(extra-special-file \"/etc/qemu/host.conf\"\n"
"                    (plain-file \"host.conf\" \"allow br0\\n\"))\n"
msgstr ""
"(extra-special-file \"/etc/qemu/host.conf\"\n"
"                    (plain-file \"host.conf\" \"allow br0\\n\"))\n"

msgid "Invoking QEMU with the right command line options"
msgstr "Invoquer QEMU avec les bonnes options de la ligne de commande"

msgid "When invoking QEMU, the following options should be provided so that the network bridge is used, after having selected a unique MAC address for the guest."
msgstr "Lorsque vous invoquez QEMU, après avoir sélectionné une adresse MAC unique pour l’invité, vous devez fournir les options suivantes pour que le pont réseau soit utilisé."

msgid "By default, a single MAC address is used for all guests, unless provided.  Failing to provide different MAC addresses to each virtual machine making use of the bridge would cause networking issues."
msgstr "Par défaut, une seule adresse MAC est utilisée pour tous les invités, sauf si plusieurs adresses MAC ont été fournies. Si vous ne fournissez pas des adresses MAC différentes à chaque machine virtuelle qui utilise le pont, vous risquez d’avoir des problèmes de réseau."

msgid ""
"$ qemu-system-x86_64 [...] \\\n"
"    -device virtio-net-pci,netdev=user0,mac=XX:XX:XX:XX:XX:XX \\\n"
"    -netdev bridge,id=user0,br=br0 \\\n"
"    [...]\n"
msgstr ""
"$ qemu-system-x86_64 [...] \\\n"
"    -device virtio-net-pci,netdev=user0,mac=XX:XX:XX:XX:XX:XX \\\n"
"    -netdev bridge,id=user0,br=br0 \\\n"
"    [...]\n"

msgid "To generate MAC addresses that have the QEMU registered prefix, the following snippet can be employed:"
msgstr "Pour générer des adresses MAC qui commencent par le préfixe enregistrée par QEMU, vous pouvez utiliser l'extrait de code suivant :"

msgid ""
"mac_address=\"52:54:00:$(dd if=/dev/urandom bs=512 count=1 2>/dev/null \\\n"
"                           | md5sum \\\n"
"                           | sed -E 's/^(..)(..)(..).*$/\\1:\\2:\\3/')\"\n"
"echo $mac_address\n"
msgstr ""
"mac_address=\"52:54:00:$(dd if=/dev/urandom bs=512 count=1 2>/dev/null \\\n"
"                           | md5sum \\\n"
"                           | sed -E 's/^(..)(..)(..).*$/\\1:\\2:\\3/')\"\n"
"echo $mac_address\n"

msgid "Networking issues caused by Docker"
msgstr "Problèmes de réseau causés par Docker"

msgid "If you use Docker on your machine, you may experience connectivity issues when attempting to use a network bridge, which are caused by Docker also relying on network bridges and configuring its own routing rules.  The solution is add the following @code{iptables} snippet to your @code{operating-system} declaration:"
msgstr "Si vous utilisez Docker sur votre machine, vous pouvez rencontrer des problèmes de connectivité lorsque vous tentez d’utiliser un pont réseau. Ces problèmes sont causés par le fait que Docker s’appuie également sur des ponts réseau et configure ses propres règles de routage. Pour résoudre ce problème, vous pouvez ajouter le bout de code @code{iptables} suivant à votre déclaration @code{operating-system} :"

msgid ""
"(service iptables-service-type\n"
"             (iptables-configuration\n"
"              (ipv4-rules (plain-file \"iptables.rules\" \"\\\n"
"*filter\n"
":INPUT ACCEPT [0:0]\n"
":FORWARD DROP [0:0]\n"
":OUTPUT ACCEPT [0:0]\n"
"-A FORWARD -i br0 -o br0 -j ACCEPT\n"
"COMMIT\n"
"\"))\n"
msgstr ""
"(service iptables-service-type\n"
"             (iptables-configuration\n"
"              (ipv4-rules (plain-file \"iptables.rules\" \"\\\n"
"*filter\n"
":INPUT ACCEPT [0:0]\n"
":FORWARD DROP [0:0]\n"
":OUTPUT ACCEPT [0:0]\n"
"-A FORWARD -i br0 -o br0 -j ACCEPT\n"
"COMMIT\n"
"\"))\n"

msgid "Virtual network bridge interface"
msgstr "Interface de pont réseau virtuel"

msgid "networking, virtual bridge"
msgstr "réseau, pont virtuel"

msgid "libvirt, virtual network switch"
msgstr "libvirt, commutateur réseau virtuel"

msgid "If the machine hosting your virtual machines is connected wirelessly to the network, you won't be able to use a true network bridge as explained in the preceding section (@pxref{Network bridge for QEMU}).  In this case, the next best option is to use a @emph{virtual network switch} with static routing and to configure a libvirt-powered virtual machine to use it (via the @command{virt-manager} GUI for example).  This is similar to the default mode of operation of QEMU/libvirt, except that instead of using @abbr{NAT, Network Address Translation}, it relies on static routes to join the @abbr{VM, virtual machine} IP address to the @abbr{LAN, local area network}.  This provides two-way connectivity to and from the virtual machine, which is needed for exposing services hosted on the virtual machine."
msgstr "Si la machine qui héberge vos machines virtuelles est connectée à un réseau sans fil, vous ne pourrez pas utiliser un vrai pont réseau comme expliqué dans la section précédente (@pxref{Network bridge for QEMU}). Dans ce cas, la deuxième meilleure option est d'utiliser un @emph{commutateur réseau virtuel} avec un routage statique et de configurer une machine virtuelle dans libvirt pour l'utiliser (via l'interface graphique @command{virt-manager} par exemple). Cela est semblable au mode de fonctionnement par défaut de QEMU/libvirt, sauf qu'au lieu d'utiliser le @abbr{NAT, Network Address Translation (traduction d'adresse réseau)}, il se repose sur des routes statiques pour relier l'adresse IP de la @abbr{VM, machine virtuelle} au @abbr{LAN, réseau local}. Cela fournit une connectivité bidirectionnelle depuis et vers la machine virtuelle, ce qui est requis pour exposer des services hébergés sur la machine virtuelle."

msgid "Creating a virtual network switch"
msgstr "Créer un commutateur réseau virtuel"

msgid "A virtual network switch consists of a virtual network device called a `virtual bridge', DHCP server (dnsmasq) and firewall rules (iptables). See the @url{https://wiki.libvirt.org/VirtualNetworking.html, libvirt Wiki article on Virtual Networking} for more details on the modes of operation, management and implementation of virtual network switches."
msgstr "Un commutateur réseau virtuel consiste en un périphérique réseau virtuel appelé un « pont virtuel », un serveur DHCP (dnsmasq) et de règles de pare-feu (iptables). Consultez @url{https://wiki.libvirt.org/VirtualNetworking.html, l'article Wiki de libvirt sur la virtualisation du réseau} pour plus de détails sur les modes de fonctionnement, la gestion et l'implémentation des commutateurs réseau virtuels."

msgid "The @command{virsh} command, provided by the @code{libvirt} package, makes it very easy to create a virtual switch.  You first need to choose a network subnet for your virtual switch; if your home LAN is in the @samp{192.168.1.0/24} network, you could opt to use e.g.@: @samp{192.168.2.0/24}.  Define an XML file, e.g.@: @file{/tmp/virbr0.xml}, containing the following:"
msgstr "La commande @command{virsh}, fournie par le paquet @code{libvirt}, simplifie grandement la création d'un commutateur virtuel. Vous devez d'abord choisir un sous-réseau pour votre commutateur virtuel. Si votre réseau local est dans le réseau @samp{192.168.1.0/24}, vous pourriez choisir par exemple @samp{192.168.2.0/24}. Définissez un fichier XML, par exemple @file{/tmp/virbr0.xml}, avec le contenu suivant :"

msgid ""
"<network>\n"
"  <name>virbr0</name>\n"
"  <bridge name=\"virbr0\" />\n"
"  <forward mode=\"route\"/>\n"
"  <ip address=\"192.168.2.0\" netmask=\"255.255.255.0\">\n"
"    <dhcp>\n"
"      <range start=\"192.168.2.1\" end=\"192.168.2.254\"/>\n"
"    </dhcp>\n"
"  </ip>\n"
"</network>\n"
msgstr ""
"<network>\n"
"  <name>virbr0</name>\n"
"  <bridge name=\"virbr0\" />\n"
"  <forward mode=\"route\"/>\n"
"  <ip address=\"192.168.2.0\" netmask=\"255.255.255.0\">\n"
"    <dhcp>\n"
"      <range start=\"192.168.2.1\" end=\"192.168.2.254\"/>\n"
"    </dhcp>\n"
"  </ip>\n"
"</network>\n"

msgid "Then create and configure the interface using the @command{virsh} command, as root:"
msgstr "Ensuite, créez et configurez l’interface en utilisant la commande @command{virsh}, en tant qu'utilisateur root :"

msgid ""
"virsh net-define /tmp/virbr0.xml\n"
"virsh net-autostart virbr0\n"
"virsh net-start virbr0\n"
msgstr ""
"virsh net-define /tmp/virbr0.xml\n"
"virsh net-autostart virbr0\n"
"virsh net-start virbr0\n"

msgid "The @samp{virbr0} interface should now be visible e.g.@: via the @samp{ip address} command.  It will be automatically started every time your libvirt virtual machine is started."
msgstr "L’interface @samp{virbr0} devrait à présent être visible, par exemple via la commande @samp{ip address}. Elle sera automatiquement lancée chaque fois que la machine virtuelle libvirt est démarrée."

msgid "Configuring the static routes for your virtual bridge"
msgstr "Configurer les routes statiques pour votre pont virtuel"

msgid "If you configured your virtual machine to use your newly created @samp{virbr0} virtual bridge interface, it should already receive an IP via DHCP such as @samp{192.168.2.15} and be reachable from the server hosting it, e.g.@: via @samp{ping 192.168.2.15}.  There's one last configuration needed so that the VM can reach the external network: adding static routes to the network's router."
msgstr "Si vous avez configuré votre machine virtuelle pour utiliser votre interface de pont virtuel nouvellement créée @samp{virbr0}, elle devrait déjà recevoir une adresse IP via DHCP, telle que @samp{192.168.2.15}, et être accessible depuis le serveur qui l'héberge, par exemple via @samp{ping 192.168.2.15}. Il reste une dernière configuration à effectuer pour que la VM puisse atteindre le réseau externe : ajouter des routages statiques au routeur du réseau."

msgid "In this example, the LAN network is @samp{192.168.1.0/24} and the router configuration web page may be accessible via e.g.@: the @url{http://192.168.1.1} page.  On a router running the @url{https://librecmc.org/, libreCMC} firmware, you would navigate to the @clicksequence{Network @click{} Static Routes} page (@url{https://192.168.1.1/cgi-bin/luci/admin/network/routes}), and you would add a new entry to the @samp{Static IPv4 Routes} with the following information:"
msgstr "Dans cet exemple, le réseau LAN est @samp{192.168.1.0/24} et la page de configuration du routeur peut être accessible, par exemple, via la page @url{http://192.168.1.1}. Sur un routeur exécutant le micrologiciel @url{https://librecmc.org/, libreCMC}, vous navigueriez vers la page @clicksequence{Network @click{} Static Routes} (@url{https://192.168.1.1/cgi-bin/luci/admin/network/routes}), et vous ajouteriez une nouvelle entrée aux @samp{Static IPv4 Routes} avec les informations suivantes :"

msgid "Interface"
msgstr "Interface"

msgid "lan"
msgstr "lan"

msgid "Target"
msgstr "Target"

msgid "192.168.2.0"
msgstr "192.168.2.0"

msgid "IPv4-Netmask"
msgstr "IPv4-Netmask"

msgid "255.255.255.0"
msgstr "255.255.255.0"

msgid "IPv4-Gateway"
msgstr "IPv4-Gateway"

msgid "server-ip"
msgstr "ip-du-serveur"

msgid "Route type"
msgstr "Route type"

msgid "unicast"
msgstr "unicast"

msgid "where @var{server-ip} is the IP address of the machine hosting the VMs, which should be static."
msgstr "où @var{ip-du-serveur} est l'adresse IP de la machine hébergeant les VM, qui devrait être statique."

msgid "After saving/applying this new static route, external connectivity should work from within your VM; you can e.g.@: run @samp{ping gnu.org} to verify that it functions correctly."
msgstr "Après avoir sauvegardé/appliqué cette nouvelle route statique, la connectivité externe devrait fonctionner depuis votre VM ; vous pouvez, par exemple, exécuter la commande @samp{ping gnu.org} pour vérifier que cela fonctionne correctement."

msgid "As mentioned in the preceding section (@pxref{Routed network for libvirt}), libvirt allows virtual networks to be defined via XML files and managed by the @command{virsh} command.  The details of the creation and removal of virtual network switches are handled by libvirt, so the user does not have to deal with them."
msgstr "Comme indiqué dans la section précédente (@pxref{Routed network for libvirt}), libvirt permet, avec des fichiers XML, de définir des réseaux virtuels gérés par la commande @command{virsh}. Les détails de la création et de la suppression des commutateurs réseau virtuels sont gérés par libvirt, si bien que vous n'avez pas besoin de vous en occuper."

msgid "However, libvirt's handling of virtual network switches can sometimes clash with more complex networking setups.  In particular, the iptables rules inserted by libvirt for switches operating in the NAT mode can clash with existing iptables/nftables rules, leading to insecure or broken packet filtering."
msgstr "Cependant, la gestion des commutateurs réseau virtuels par libvirt peut parfois entrer en conflit avec des configurations réseaux plus complexes. En particulier, les règles iptables insérées par libvirt pour le fonctionnement des commutateurs en mode NAT peuvent entrer en conflit avec des règles iptables/nftables existantes, ce qui peut casser la sécurité du filtrage de paquets."

msgid "In such cases, the only solution is to manually set up a virtual network switch.  This section will provide instructions on how to do so using Guix System services."
msgstr "Dans ce cas, la seule solution est de configurer manuellement le commutateur réseau virtuel. Cette section fournit des instructions sur la manière de faire avec les services du système Guix."

msgid "Creating the virtual network bridge"
msgstr "Créer le pont réseau virtuel"

msgid "The @code{static-networking-service-type} can be used to create a virtual network bridge and assign an IP address to it:"
msgstr "Le type @code{static-networking-service-type} peut être utilisé pour créer un pont réseau virtuel et lui assigner une adresse IP :"

msgid ""
"(service static-networking-service-type\n"
"         (list (static-networking\n"
"                ;; The default provision is 'networking; if you're using any\n"
"                ;; other service with this provision, such as\n"
"                ;; `network-manager-service-type`, then you need to change the\n"
"                ;; default.\n"
"                (provision '(static-networking))\n"
"                (links\n"
"                 (list (network-link\n"
"                        (name \"virbr0\")\n"
"                        (type 'bridge)\n"
"                        (arguments '()))))\n"
"                (addresses\n"
"                 (list (network-address\n"
"                        (device \"virbr0\")\n"
"                        (value \"192.168.10.1/24\")))))))\n"
msgstr ""
"(service static-networking-service-type\n"
"         (list (static-networking\n"
"                ;; La fourniture par défaut est 'networking ; si vous utilisez\n"
"                ;; un autre service qui fournit ce nom, comme\n"
"                ;; « network-manager-service-type », vous devrez changer\n"
"                ;; la valeur par défaut.\n"
"                (provision '(static-networking))\n"
"                (links\n"
"                 (list (network-link\n"
"                        (name \"virbr0\")\n"
"                        (type 'bridge)\n"
"                        (arguments '()))))\n"
"                (addresses\n"
"                 (list (network-address\n"
"                        (device \"virbr0\")\n"
"                        (value \"192.168.10.1/24\")))))))\n"

msgid "Running dnsmasq for the virtual network bridge"
msgstr "Exécuter dnsmasq pour le pont réseau virtuel"

msgid "The @code{dnsmasq-service-type} can be used to provide DNS and DHCP for guests connected to this virtual network switch:"
msgstr "Le type @code{dnsmasq-service-type} peut être utilisé pour fournir le DNS et le DHCP aux invités connectés à ce commutateur réseau virtuel :"

msgid ""
"(service dnsmasq-service-type\n"
"         (dnsmasq-configuration\n"
"          ;; You can have multiple instances of `dnsmasq-service-type` as long\n"
"          ;; as each one has a different shepherd-provision.\n"
"          (shepherd-provision '(dnsmasq-virbr0))\n"
"          (extra-options (list\n"
"                          ;; Only bind to the virtual bridge. This\n"
"                          ;; avoids conflicts with other running\n"
"                          ;; dnsmasq instances.\n"
"                          \"--except-interface=lo\"\n"
"                          \"--interface=virbr0\"\n"
"                          \"--bind-dynamic\"\n"
"                          ;; IPv4 addresses to offer to VMs. This\n"
"                          ;; should match the chosen subnet.\n"
"                          \"--dhcp-range=192.168.10.2,192.168.10.254\"))))\n"
msgstr ""
"(service dnsmasq-service-type\n"
"         (dnsmasq-configuration\n"
"          ;; Vous pouvez avoir plusieurs instances de « dnsmasq-service-type »\n"
"          ;; tant qu'elles ont chacun une fourniture shepherd différente.\n"
"          (shepherd-provision '(dnsmasq-virbr0))\n"
"          (extra-options (list\n"
"                          ;; Ne se lier qu'au pont virtuel. Cela\n"
"                          ;; évite les conflits avec les autres instance\n"
"                          ;; de dnsmasq.\n"
"                          \"--except-interface=lo\"\n"
"                          \"--interface=virbr0\"\n"
"                          \"--bind-dynamic\"\n"
"                          ;; adresses IPv4 à fournir aux VM. Cela devrait\n"
"                          ;; correspondre au sous-réseau choisi.\n"
"                          \"--dhcp-range=192.168.10.2,192.168.10.254\"))))\n"

msgid "Configuring NAT for the virtual network switch"
msgstr "Configurer le NAT pour le commutateur réseau virtuel"

msgid "If you intend to use the virtual network switch in NAT mode, you will need to use nftables (or iptables) rules to set up IP masquerading.  The following example shows how to use @code{nftables-service-type} to do this:"
msgstr "Si vous avez l'intention d'utiliser le commutateur réseau virtuel en mode NAT, vous devrez utiliser des règles nftables (ou iptables) pour mettre en place le masque d'IP. L'exemple suivant montre comment utiliser @code{nftables-service-type} pour cela :"

msgid ""
"(service nftables-service-type\n"
"         (nftables-configuration\n"
"          (ruleset\n"
"           (plain-file \"nftables.conf\"\n"
"                       \"\\\n"
"table inet filter @{\n"
"\n"
msgstr ""
"(service nftables-service-type\n"
"         (nftables-configuration\n"
"          (ruleset\n"
"           (plain-file \"nftables.conf\"\n"
"                       \"\\\n"
"table inet filter @{\n"
"\n"

msgid ""
"  chain input @{\n"
"    type filter hook input priority filter; policy drop;\n"
"    # Add your existing packet filtering rules here...\n"
"    iifname virbr0 udp dport 67 counter accept comment \\\"allow dhcp on virbr0\\\"\n"
"    iifname virbr0 meta l4proto @{tcp, udp@} th dport 53 accept \\\\\n"
"        comment \\\"allow dns on virbr0\\\"\n"
"  @}\n"
"\n"
msgstr ""
"  chain input @{\n"
"    type filter hook input priority filter; policy drop;\n"
"    # Ajoutez vos règles de filtrage de paquets existantes ici...\n"
"    iifname virbr0 udp dport 67 counter accept comment \\\"allow dhcp on virbr0\\\"\n"
"    iifname virbr0 meta l4proto @{tcp, udp@} th dport 53 accept \\\\\n"
"        comment \\\"allow dns on virbr0\\\"\n"
"  @}\n"
"\n"

msgid ""
"  chain forward @{\n"
"    type filter hook forward priority filter; policy drop;\n"
"    # Add your existing forwarding rules here...\n"
"    iifname virbr0 accept comment \\\"allow outbound traffic from virbr0\\\"\n"
"    oifname virbr0 ct state @{established, related @} accept \\\\\n"
"        comment \\\"allow established traffic to virbr0\\\"\n"
"  @}\n"
"\n"
msgstr ""
"  chain forward @{\n"
"    type filter hook forward priority filter; policy drop;\n"
"    # Ajoutez vos règles de transfert de paquets existantes ici...\n"
"    iifname virbr0 accept comment \\\"allow outbound traffic from virbr0\\\"\n"
"    oifname virbr0 ct state @{established, related @} accept \\\\\n"
"        comment \\\"allow established traffic to virbr0\\\"\n"
"  @}\n"
"\n"

msgid ""
"@}\n"
"\n"
msgstr ""
"@}\n"
"\n"

msgid ""
"table inet nat @{\n"
"  chain postrouting @{\n"
"    type nat hook postrouting priority srcnat; policy accept;\n"
"    # Add your existing nat rules here...\n"
"    iifname virbr0 ip daddr @{ 224.0.0.0/24, 255.255.255.255/32 @} return \\\\\n"
"        comment \\\"don't masquerade to reserved address blocks\\\"\n"
"    iifname virbr0 oifname != virbr0 masquerade \\\\\n"
"        comment \\\"masquerade all outgoing traffic from VMs\\\"\n"
"  @}\n"
"@}\n"
"\"))))\n"
msgstr ""
"table inet nat @{\n"
"  chain postrouting @{\n"
"    type nat hook postrouting priority srcnat; policy accept;\n"
"    # Ajoutez vos règles nat existantes ici...\n"
"    iifname virbr0 ip daddr @{ 224.0.0.0/24, 255.255.255.255/32 @} return \\\\\n"
"        comment \\\"don't masquerade to reserved address blocks\\\"\n"
"    iifname virbr0 oifname != virbr0 masquerade \\\\\n"
"        comment \\\"masquerade all outgoing traffic from VMs\\\"\n"
"  @}\n"
"@}\n"
"\"))))\n"

msgid "Ensure that you have IPv4 forwarding enabled (you can use @code{sysctl-service-type} for this)."
msgstr "Assurez-vous que vous avez activé le transfert d'IPv4 (vous pouvez utiliser @code{sysctl-service-type} pour cela)."

msgid "VM References"
msgstr "Références sur les VM"

msgid "@uref{https://jamielinux.com/docs/libvirt-networking-handbook/index.html, The (unofficial) libvirt Networking Handbook}@* Note that this resource is rather outdated at the time of writing (as of March 2025, it was last updated in 2015).  Nevertheless, the authors of this chapter have found it to be a valuable source of information."
msgstr "@uref{https://jamielinux.com/docs/libvirt-networking-handbook/index.html, Le manuel (non officiel) réseau de libvirt}@* Remarquez que cette ressource est plutôt datée au moment d'écrire ces lignes (en mars 2025, il a été mis à jour pour la dernière fois en 2015). Cependant, les auteurs de ce chapitre pensent qu'il s'agit toujours d'une précieuse source d'information."

msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr "Guix est un gestionnaire de paquets fonctionnel qui propose de nombreuses fonctionnalités en plus de ce que les gestionnaires de paquets traditionnels peuvent faire. Pour quelqu'un qui n'est pas initié, ces fonctionnalités peuvent ne pas paraître utiles au premier coup d'œil. Le but de ce chapitre est de vous montrer certains concepts avancés en gestion de paquets."

msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "@pxref{Gestion des paquets,,, guix.fr, le manuel de référence de GNU Guix} pour une référence complète."

msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @dfn{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr "Guix fournit une fonctionnalité utile que peut être plutôt étrange pour les débutants et débutantes : les @dfn{profils}. C'est une manière de regrouper l'installation de paquets ensemble et chaque utilisateur ou utilisatrice du même système peuvent avoir autant de profils que souhaité."

msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr "Que vous programmiez ou non, vous trouverez sans doute plus de flexibilité et de possibilité avec plusieurs profils. Bien qu'ils changent un peu du paradigme des @emph{gestionnaires de paquets traditionnels}, ils sont pratiques à utiliser une fois que vous avec saisi comment les configurer."

msgid "This section is an opinionated guide on the use of multiple profiles.  It predates @command{guix shell} and its fast profile cache (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual})."
msgstr "Cette section est un guide aux opinions bien arrêtées sur l'utilisation de plusieurs profils. Il a été écrit avant l'introduction de @command{guix shell} et son cache de profil rapide (@pxref{Invoquer guix shell,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "In many cases, you may find that using @command{guix shell} to set up the environment you need, when you need it, is less work that maintaining a dedicated profile.  Your call!"
msgstr "Dans de nombreux cas, vous trouverez qu'utiliser @command{guix shell} pour configurer l'environnement dont vous avez besoin, quand vous en avez besoin, représente moins de travail que de maintenir un profil dédié. À vous de choisir !"

msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr "Si vous connaissez @samp{virtualenv} de Python, vous pouvez conceptualiser un profil comme une sorte de @samp{virtualenv} universel qui peut contenir n'importe quel sorte de logiciel, pas seulement du code Python. En plus, les profils sont auto-suffisants : ils capturent toutes les dépendances à l'exécution qui garantissent que tous les programmes d'un profil fonctionneront toujours à tout instant."

msgid "Multiple profiles have many benefits:"
msgstr "Avoir plusieurs profils présente de nombreux intérêts :"

msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr "Une séparation sémantique claire des divers paquets dont vous avez besoin pour différents contextes."

msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr "On peut rendre plusieurs profils disponibles dans l'environnement soit à la connexion, soit dans un shell dédié."

msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr "Les profils peuvent être chargés à la demande. Par exemple, vous pouvez utiliser plusieurs shells, chacun dans un profil différent."

msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr "L'isolation : les programmes d'un profil n'utiliseront pas ceux d'un autre, et vous pouvez même installe plusieurs versions d'un même programme dans deux profils différents, sans conflit."

msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr "Déduplication : les profils partagent les dépendances qui sont exactement les mêmes. Avoir plusieurs profils ne gâche donc pas d'espace."

msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr "Reproductible : lorsque vous utilisez des manifestes déclaratifs, un profil peut être entièrement spécifié par le commit Guix qui a été utilisé pour le créer. Cela signifie que vous pouvez @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, recréer n'importe où et à n'importe quel moment} exactement le même profil, avec juste l'information du numéro de commit. Voir la section sur les @ref{Reproducible profiles}."

msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr "Des mises à jours et une maintenance plus faciles : avoir plusieurs profils facilite la gestion des listes de paquets à la main."

msgid "Concretely, here follows some typical profiles:"
msgstr "Concrètement voici des profils courants :"

msgid "The dependencies of a project you are working on."
msgstr "Les dépendances d'un projet sur lequel vous travaillez."

msgid "Your favourite programming language libraries."
msgstr "Des bibliothèques de votre langage de programmation favori."

msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr "Des programmes spécifiques pour les ordinateurs portables (comme @samp{powertop}) dont vous n'avez pas besoin sur un ordinateur de bureau."

msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr "@TeX{}live (il peut être bien pratique si vous avez besoin d'installer un seul paquet pour un document que vous avez reçu par courriel)."

msgid "Games."
msgstr "Jeux."

msgid "Let's dive in the set up!"
msgstr "Voyons cela de plus près !"

msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr "Un profil Guix peut être paramétré par un @dfn{manifeste}. Un manifeste est un bout de code Scheme qui spécifie l'ensemble des paquets que vous voulez avoir dans votre profil ; il ressemble à ceci :"

msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 de package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; La sortie « lib » de package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"

msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr "@xref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur la syntaxe."

msgid "We can create a manifest specification per profile and install them this way:"
msgstr "On peut créer une spécification de manifeste par profil et les installer de cette manière :"

msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # s'il n'existe pas encore\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr "On spécifie ici une variable arbitraire @samp{GUIX_EXTRA_PROFILES} pour pointer vers le répertoire où seront stockés nos profils dans le reste de cet article."

msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr "C'est un peu plus propre de placer tous vos profils dans un répertoire unique, où chaque profil a son propre sous-répertoire. De cette manière, chaque sous-répertoire contiendra tous les liens symboliques pour exactement un profil. En plus, il devient facile d'énumérer les profils depuis n'importe quel langage de programmation (p.@: ex.@: un script shell) en énumérant simplement les sous-répertoires de @samp{$GUIX_EXTRA_PROFILES}."

msgid "Note that it's also possible to loop over the output of"
msgstr "Remarquez qu'il est aussi possible d'utiliser la sortie de"

msgid "guix package --list-profiles\n"
msgstr "guix package --list-profiles\n"

msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr "même si vous devrez sans doute enlever @file{~/.config/guix/current}."

msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr "Pour activer tous les profils à la connexion, ajoutez cela à votre @file{~/.bash_profile} (ou similaire) :"

msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"

msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr "Remarque pour les utilisateurs du système Guix : ce qui précède ressemble à la manière dont votre profil par défaut @file{~/.guix-profile} est activé dans @file{/etc/profile}, ce dernier étant chargé par défaut par @file{~/.bashrc}."

msgid "You can obviously choose to only enable a subset of them:"
msgstr "Vous pouvez évidemment choisir de n'en activer qu'une partie :"

msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"

msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr "Lorsqu'un profil est désactivé, il est facile de l'activer pour un shell individuel sans « polluer » le reste de la session :"

msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"

msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr "Le secret pour activer un profil est de @emph{sourcer} son fichier @samp{etc/profile}. Ce fichier contient du code shell qui exporte les bonnes variables d'environnement nécessaires à activer les logiciels présents dans le profil. Il est créé automatiquement par Guix et doit être sourcé. Il contient les mêmes variables que ce que vous obtiendrez en lançant :"

msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr "guix package --search-paths=prefix --profile=$my_profile\"\n"

msgid "Once again, see @ref{Invoking guix package,,, guix, GNU Guix Reference Manual} for the command line options."
msgstr "Encore une fois, voir @ref{Invoquer guix package,,, guix.fr, le manuel de référence de GNU Guix} pour les options de la ligne de commande."

msgid "To upgrade a profile, simply install the manifest again:"
msgstr "Pour mettre à jour un profil, installez de nouveau le manifeste :"

msgid ""
"guix package -m /path/to/guix-my-project-manifest.scm \\\n"
" -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""
"guix package -m /path/to/guix-my-project-manifest.scm \\\n"
" -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr "Pour mettre à jour tous les profils, vous pouvez simplement les énumérer. Par exemple, en supposant que vous spécifications sont dans @file{~/.guix-manifests/guix-$profile-manifest.scm}, où @samp{$profile} est le nom du profil (p.@: ex@: « projet1 »), vous pouvez utiliser ce qui suit dans le shell :"

msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" \\\n"
"   --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" \\\n"
"   --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"

msgid "Each profile has its own generations:"
msgstr "Chaque profil a ses propres générations :"

msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"

msgid "You can roll-back to any generation of a given profile:"
msgstr "Vous pouvez revenir à n'importe quelle génération d'un profil donné :"

msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"

msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr "Enfin, si vous voulez passer à un profil sans hériter l'environnement actuel, vous pouvez l'activer dans un shell vide :"

msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"

msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr "Activer un profil consiste en substance à exporter un ensemble de variables d'environnement. C'est le rôle de @samp{etc/profile} dans le profil."

msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr "Remarque : seules les variables d'environnement des paquets qui les utilisent seront modifiées."

msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr "Par exemple, @samp{MANPATH} ne sera pas modifié s'il n'y a pas d'application qui utilise les pages de manuel dans le profil. Donc si vous voulez pouvoir accéder aux pages de manuel facilement une fois le profil chargé, vous avez deux possibilités :"

msgid "Either export the variable manually, e.g."
msgstr "Exporter la variable manuellement, par exemple :"

msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"

msgid "Or include @samp{man-db} to the profile manifest."
msgstr "Inclure @samp{man-db} dans le manifeste du profil."

msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr "Il en va de même pour @samp{INFOPATH} (vous pouvez installer @samp{info-reader}), @samp{PKG_CONFIG_PATH} (installer @samp{pkg-config}), etc."

msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr "Que faire du profil par défaut que Guix garder dans @file{~/.guix-profile} ?"

msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr "Vous pouvez lui assigner le rôle que vous souhaitez. Habituellement, vous y installerez un manifeste des paquets que vous voulez pouvoir utiliser dans toutes les situations."

msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr "Autrement, vous pouvez en faire un profil sans manifeste pour des paquets sans importance que vous voulez juste garder quelques jours. C'est une manière de pouvoir facilement lancer"

msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""
"guix install package-foo\n"
"guix upgrade package-bar\n"

msgid "without having to specify the path to a profile."
msgstr "sans avoir à spécifier un profil."

msgid "Manifests let you @dfn{declare} the set of packages you'd like to have in a profile (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  They are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr "Les manifestes vous permettent de @dfn{déclarer} l'ensemble de paquets que vous souhaitez voir dans un profil (@pxref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}). Ils sont pratiques pour garder la liste des paquets et, par exemple, les synchroniser entre plusieurs machines avec un système de gestion de versions."

msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr "Les gens se plaignent souvent que les manifestes sont lents à installer quand ils contiennent beaucoup de paquets. C'est particulièrement embêtant quand vous voulez juste mettre à jour un paquet dans un gros manifeste."

msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr "C'est une raison de plus d'utiliser plusieurs profils, qui sont bien pratiques pour diviser les manifestes en plusieurs ensembles de paquets de même type. Plusieurs petits profils sont plus flexibles et plus maniables."

msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr "Les manifestes ont de nombreux avantages. En particulier, ils facilitent la maintenance :"

msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr "Lorsqu'un profil est créé à partir d'un manifeste, le manifeste lui-même est suffisant pour garder la liste des paquets sous le coude et réinstaller le profil plus tard sur un autre système. Pour les profils ad-hoc, il faudrait générer une spécification de manifeste à la main et noter les versions de paquets pour les paquets qui n'utilisent pas la version par défaut."

msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr "@code{guix package --upgrade} essaye toujours de mettre à jour les paquets qui ont des entrées propagées, même s'il n'y à rien à faire. Les manifestes de Guix résolvent ce problème."

msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr "Lorsque vous mettez partiellement à jour un profil, des conflits peuvent survenir (à cause des dépendances différentes entre les paquets à jour et ceux qui ne le sont pas) et ça peut être embêtant à corriger à la main. Les manifestes suppriment ce problème puisque tous les paquets sont toujours mis à jour en même temps."

msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr "Comme on l'a mentionné plus haut, les manifestes permettent d'avoir des profils reproductibles, alors que les commandes impératives @code{guix install}, @code{guix upgrade}, etc, ne le peuvent pas, puisqu'elles produisent un profil différent à chaque fois qu'elles sont lancées, même avec les même paquets. Voir @uref{https://issues.guix.gnu.org/issue/33285, la discussion sur ce problème}."

msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr "Les spécifications de manifestes sont utilisables par les autres commandes @samp{guix}. Par exemple, vous pouvez lancer @code{guix weather -m manifest} pour voir combien de substituts sont disponibles, ce qui peut vous aider à décider si vous voulez faire la mise à jour maintenant ou un peu plus tard. Un autre exemple : vous pouvez lancer @code{guix package -m manifest.scm} pour créer un lot contenant tous les paquets du manifeste (et leurs références transitives)."

msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr "Enfin, les manifestes ont une représentation Scheme, le type d'enregistrement @samp{<manifest>}. Vous pouvez les manipuler en Scheme et les passer aux diverses @uref{https://fr.wikipedia.org/wiki/Api, API} de Guix."

msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future.  The @command{guix shell} command also protects recently-used profiles from garbage collection; profiles that have not been used for a while may be garbage-collected though, along with the packages they refer to."
msgstr "Vous devez bien comprendre que même si vous pouvez utiliser les manifestes pour déclarer des profils, les deux ne sont pas strictement équivalents : les profils pour l'effet de bord « d'épingler » les paquets dans le dépôt, ce qui évite qu'ils ne soient nettoyés (@pxref{Invoquer guix gc,,, guix.fr, le manuel de référence de GNU Guix}) et s'assure qu'ils seront toujours disponibles à n'importe quel moment dans le futur. La commande @command{guix shell} protège également les profils récemment utilisés du ramasse-miettes : les profiles qui n'ont pas été utilisé pendant un certain temps peuvent être cependant être nettoyés, avec les paquets auxquels ils se réfèrent."

msgid "To be 100% sure that a given profile will never be collected, install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr "Pour être sûr à 100 % qu'un profil donné ne sera pas nettoyé, installez le manifeste dans un profil et d'utiliser @code{GUIX_PROFILE=/le/profil; . \"$GUIX_PROFILE\"/etc/profile} comme on l'a expliqué plus haut : cela garantie que l'environnement de bidouillage sera toujours disponible."

msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr "@emph{Avertissement de sécurité :} bien que garder d'anciens profils soit pratique, gardez à l'esprit que les anciens paquets n'ont pas forcément reçu les dernières corrections de sécurité."

msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr "Pour reproduire un profil bit-à-bit, on a besoin de deux informations :"

msgid "a manifest (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual});"
msgstr "un manifeste (@pxref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}) ;"

msgid "a Guix channel specification (@pxref{Replicating Guix,,, guix, GNU Guix Reference Manual})."
msgstr "une spécification de canal Guix (@pxref{Répliquer Guix,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr "En effet, les manifestes seuls ne sont pas forcément suffisants : différentes versions de Guix (ou différents canaux) peuvent produire des sorties différentes avec le même manifeste."

msgid "You can output the Guix channel specification with @samp{guix describe --format=channels} (@pxref{Invoking guix describe,,, guix, GNU Guix Reference Manual}).  Save this to a file, say @samp{channel-specs.scm}."
msgstr "Vous pouvez afficher la spécification de canaux Guix avec @samp{guix describe --format=channels} (@pxref{Invoquer guix describe,,, guix.fr, le manuel de référence de GNU Guix}). Enregistrez-la dans un fichier, par exemple @samp{channel-specs.scm}."

msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr "Sur un autre ordinateur, vous pouvez utiliser le fichier de spécification de canaux et le manifeste pour reproduire exactement le même profil :"

msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"

msgid ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"

msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package \\\n"
" --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package \\\n"
" --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr "Vous pouvez supprimer le profil des canaux Guix que vous venez d'installer avec la spécification de canaux, le profil du projet n'en dépend pas."

msgid "development, with Guix"
msgstr "développement, avec Guix"

msgid "software development, with Guix"
msgstr "développement logiciel, avec Guix"

msgid "Guix is a handy tool for developers; @command{guix shell}, in particular, gives a standalone development environment for your package, no matter what language(s) it's written in (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual}).  To benefit from it, you have to initially write a package definition and have it either in Guix proper, or in a channel, or directly in your project's source tree as a @file{guix.scm} file.  This last option is appealing: all developers have to do to get set up is clone the project's repository and run @command{guix shell}, with no arguments."
msgstr "Guix est un outil pratique pour les développeurs ; @command{guix shell}, notamment, fournit un environnement de développement autonome et complet pour votre paquet peu importe le langage dans lequel il est écrit (@pxref{Invoquer guix shell,,, guix.fr, Manuel de référence GNU Guix}).  Pour en bénéficier, vous devez écrire une définition de paquet accessible depuis Guix officiel, un canal, ou bien depuis les sources de votre projet dans le fichier @file{guix.scm}.  Cette dernière option est particulièrement alléchante : la seule chose à faire pour initialiser son environnement de travail est d’exécuter @command{guix shell} sans argument dans le dépôt du projet."

msgid "Development needs go beyond development environments though.  How can developers perform continuous integration of their code in Guix build environments? How can they deliver their code straight to adventurous users? This chapter describes a set of files developers can add to their repository to set up Guix-based development environments, continuous integration, and continuous delivery---all at once@footnote{This chapter is adapted from a @uref{https://guix.gnu.org/en/blog/2023/from-development-environments-to-continuous-integrationthe-ultimate-guide-to-software-development-with-guix/, blog post} published in June 2023 on the Guix web site.}."
msgstr "Les besoins des projets logiciels ne se limitent cependant pas à l’environnement d’exécution.  Comment effectuer l’intégration continue du code dans des environnements de compilation Guix ? Comment livrer le code directement aux utilisatrices aventureuses ? Ce chapitre décrit l’ensemble des fichiers qu’une développeuse peut ajouter à son dépôt pour créer un environnement de développement, d’intégration continue et de livraison continue basé sur Guix uniquement@footnote{Ce chapitre est une adaptation de @uref{https://guix.gnu.org/fr/blog/2023/from-development-environments-to-continuous-integrationthe-ultimate-guide-to-software-development-with-guix/, cet article de blog} (en anglais) publié en juin 2023 sur le site de Guix.}."

msgid "How do we go about ``Guixifying'' a repository? The first step, as we've seen, will be to add a @file{guix.scm} at the root of the repository in question. We'll take @uref{https://www.gnu.org/software/guile,Guile} as an example in this chapter: it's written in Scheme (mostly) and C, and has a number of dependencies---a C compilation tool chain, C libraries, Autoconf and its friends, LaTeX, and so on. The resulting @file{guix.scm} looks like the usual package definition (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}), just without the @code{define-public} bit:"
msgstr "Comment entreprendre la ``Guixification'' d’un dépôt ? La première étape, comme vu précédemment, consiste à ajouter un fichier @file{guix.scm} à la racine du dépôt. Nous prendrons comme exemple @uref{,Guile} au long de chapitre. Guile est (principalement) écrit en Scheme et en C, possède plusieurs dépendances---Une suite d’outils de compilation C, des bibliothèques C, Autoconf et sa clique, LaTeX, et ainsi de suite… Le fichier @file{guix.scm} ressemblera à une définition de paquet traditionnelle (@pxref{Définition des paquets,,, guix.fr, Manuel de référence de GNU Guix}) sans le @code{define-public} :"

msgid ""
";; The ‘guix.scm’ file for Guile, for use by ‘guix shell’.\n"
"\n"
msgstr ""
";; Le fichier « guix.scm » pour Guile, à utiliser avec « guix shell ».\n"
"\n"

msgid ""
"(use-modules (guix)\n"
"             (guix build-system gnu)\n"
"             ((guix licenses) #:prefix license:)\n"
"             (gnu packages autotools)\n"
"             (gnu packages base)\n"
"             (gnu packages bash)\n"
"             (gnu packages bdw-gc)\n"
"             (gnu packages compression)\n"
"             (gnu packages flex)\n"
"             (gnu packages gdb)\n"
"             (gnu packages gettext)\n"
"             (gnu packages gperf)\n"
"             (gnu packages libffi)\n"
"             (gnu packages libunistring)\n"
"             (gnu packages linux)\n"
"             (gnu packages pkg-config)\n"
"             (gnu packages readline)\n"
"             (gnu packages tex)\n"
"             (gnu packages texinfo)\n"
"             (gnu packages version-control))\n"
"\n"
msgstr ""
"(use-modules (guix)\n"
"             (guix build-system gnu)\n"
"             ((guix licenses) #:prefix license:)\n"
"             (gnu packages autotools)\n"
"             (gnu packages base)\n"
"             (gnu packages bash)\n"
"             (gnu packages bdw-gc)\n"
"             (gnu packages compression)\n"
"             (gnu packages flex)\n"
"             (gnu packages gdb)\n"
"             (gnu packages gettext)\n"
"             (gnu packages gperf)\n"
"             (gnu packages libffi)\n"
"             (gnu packages libunistring)\n"
"             (gnu packages linux)\n"
"             (gnu packages pkg-config)\n"
"             (gnu packages readline)\n"
"             (gnu packages tex)\n"
"             (gnu packages texinfo)\n"
"             (gnu packages version-control))\n"
"\n"

msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source #f)                                     ;no source\n"
"  (build-system gnu-build-system)\n"
"  (native-inputs\n"
"   (append (list autoconf\n"
"                 automake\n"
"                 libtool\n"
"                 gnu-gettext\n"
"                 flex\n"
"                 texinfo\n"
"                 texlive-base                 ;for \"make pdf\"\n"
"                 texlive-epsf\n"
"                 gperf\n"
"                 git\n"
"                 gdb\n"
"                 strace\n"
"                 readline\n"
"                 lzip\n"
"                 pkg-config)\n"
"\n"
msgstr ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ; un numéro de version cool\n"
"  (source #f)                                     ; pas de source\n"
"  (build-system gnu-build-system)\n"
"  (native-inputs\n"
"   (append (list autoconf\n"
"                 automake\n"
"                 libtool\n"
"                 gnu-gettext\n"
"                 flex\n"
"                 texinfo\n"
"                 texlive-base                 ; pour « make pdf »\n"
"                 texlive-epsf\n"
"                 gperf\n"
"                 git\n"
"                 gdb\n"
"                 strace\n"
"                 readline\n"
"                 lzip\n"
"                 pkg-config)\n"
"\n"

msgid ""
"           ;; When cross-compiling, a native version of Guile itself is\n"
"           ;; needed.\n"
"           (if (%current-target-system)\n"
"               (list this-package)\n"
"               '())))\n"
"  (inputs\n"
"   (list libffi bash-minimal))\n"
"  (propagated-inputs\n"
"   (list libunistring libgc))\n"
"\n"
msgstr ""
"           ;; Lors de la compilation croisée, une version native de Guile est\n"
"           ;; nécessaire.\n"
"           (if (%current-target-system)\n"
"               (list this-package)\n"
"               '())))\n"
"  (inputs\n"
"   (list libffi bash-minimal))\n"
"  (propagated-inputs\n"
"   (list libunistring libgc))\n"
"\n"

msgid ""
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"GUILE_LOAD_PATH\")\n"
"          (files '(\"share/guile/site/3.0\")))\n"
"         (search-path-specification\n"
"          (variable \"GUILE_LOAD_COMPILED_PATH\")\n"
"          (files '(\"lib/guile/3.0/site-ccache\")))))\n"
"  (synopsis \"Scheme implementation intended especially for extensions\")\n"
"  (description\n"
"   \"Guile is the GNU Ubiquitous Intelligent Language for Extensions,\n"
"and it's actually a full-blown Scheme implementation!\")\n"
"  (home-page \"https://www.gnu.org/software/guile/\")\n"
"  (license license:lgpl3+))\n"
msgstr ""
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"GUILE_LOAD_PATH\")\n"
"          (files '(\"share/guile/site/3.0\")))\n"
"         (search-path-specification\n"
"          (variable \"GUILE_LOAD_COMPILED_PATH\")\n"
"          (files '(\"lib/guile/3.0/site-ccache\")))))\n"
"  (synopsis \"Scheme implementation intended especially for extensions\")\n"
"  (description\n"
"   \"Guile is the GNU Ubiquitous Intelligent Language for Extensions,\n"
"and it's actually a full-blown Scheme implementation!\")\n"
"  (home-page \"https://www.gnu.org/software/guile/\")\n"
"  (license license:lgpl3+))\n"

msgid "Quite a bit of boilerplate, but now someone who'd like to hack on Guile now only needs to run:"
msgstr "Même si ça peut paraître fastidieux, une personne souhaitant bidouiller Guile n’aura désormais qu’à exécuter :"

msgid "guix shell\n"
msgstr "guix shell\n"

msgid "That gives them a shell containing all the dependencies of Guile: those listed above, but also @emph{implicit dependencies} such as the GCC tool chain, GNU@ Make, sed, grep, and so on.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual}, for more info on @command{guix shell}."
msgstr "pour obtenir un environnement d’exécution avec toutes les dépendances de Guile : celle listées ci-dessus, mais également les @emph{dépendances implicites} : la suite d’outils GCC, GNU Make, sed, grep, etc.  @xref{Invoquer guix shell,,, guix.fr, Manuel de référence de GNU Guix} pour plus d’informations sur @command{guix shell}."

msgid "The chef's recommendation"
msgstr "La recommandation du chef"

msgid "Our suggestion is to create development environments like this:"
msgstr "Nous suggérons la création d’environnements de développement comme suit :"

msgid "guix shell --container --link-profile\n"
msgstr "guix shell --container --link-profile\n"

msgid "... or, for short:"
msgstr "… ou plus brièvement :"

msgid "guix shell -CP\n"
msgstr "guix shell -CP\n"

msgid "That gives a shell in an isolated container, and all the dependencies show up in @code{$HOME/.guix-profile}, which plays well with caches such as @file{config.cache} (@pxref{Cache Files,,, autoconf, Autoconf}) and absolute file names recorded in generated @code{Makefile}s and the likes. The fact that the shell runs in a container brings peace of mind: nothing but the current directory and Guile's dependencies is visible inside the container; nothing from the system can possibly interfere with your development."
msgstr "Nous obtenons un conteneur avec toutes les dépendances qui apparaissent dans @code{$HOME/.guix-profile} qui permet de profiter des caches comme le @file{config.cache} (@pxref{Cache Files,,, autoconf, Autoconf}) ainsi que des noms de fichier absolus stockés dans les éventuels @code{Makefile} autogénérés ou autres. L’exécution de l’environnement logiciel dans un conteneur apporte la garantie que seuls les dépendances de Guix et le dossier courant sont accessibles ; aucun élément du système ne peut interférer avec l’environnement de développement ainsi créé."

msgid "Level 1: Building with Guix"
msgstr "Niveau 1 : Compiler avec Guix"

msgid "Now that we have a package definition (@pxref{Getting Started}), why not also take advantage of it so we can build Guile with Guix? We had left the @code{source} field empty, because @command{guix shell} above only cares about the @emph{inputs} of our package---so it can set up the development environment---not about the package itself."
msgstr "Maintenant que nous avons notre définition de paquet (@pxref{Getting Started}), pour ne pas en profiter pour compiler Guile avec Guix ? Nous avions omis le champ @code{source} car @command{guix shell} ne se préoccupe que des @emph{dépendances} du paquet---afin de mettre en place l’environnement de développement."

msgid "To build the package with Guix, we'll need to fill out the @code{source} field, along these lines:"
msgstr "Pour compiler le paquet il nous faut remplir le champ @code{source} avec quelque chose du style :"

msgid ""
"(use-modules (guix)\n"
"             (guix git-download)  ;for ‘git-predicate’\n"
"             @dots{})\n"
"\n"
msgstr ""
"(use-modules (guix)\n"
"             (guix git-download)  ; pour « git-predicate »\n"
"             @dots{})\n"
"\n"

msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (current-source-directory))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""
"(define vcs-file?\n"
"  ;; Renvoie vrai lorsque le fichier donné est sous contrôle de version.\n"
"  (or (git-predicate (current-source-directory))\n"
"      (const #t)))                                ; pas dans un dépôt Git\n"
"\n"

msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source (local-file \".\" \"guile-checkout\"\n"
"                      #:recursive? #t\n"
"                      #:select? vcs-file?))\n"
"  @dots{})\n"
msgstr ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ; un numéro de version cool\n"
"  (source (local-file \".\" \"guile-checkout\"\n"
"                      #:recursive? #t\n"
"                      #:select? vcs-file?))\n"
"  @dots{})\n"

msgid "Here's what we changed compared to the previous section:"
msgstr "Voici la différence entre la version actuelle et la section précédente :"

msgid "We added @code{(guix git-download)} to our set of imported modules, so we can use its @code{git-predicate} procedure."
msgstr "Nous avons ajouté @code{(guix git-download)} à la liste des modules importés pour la procédure @code{git-predicate}."

msgid "We defined @code{vcs-file?} as a procedure that returns true when passed a file that is under version control. For good measure, we add a fallback case for when we're not in a Git checkout: always return true."
msgstr "Nous avons défini la procédure @code{vcs-file?} qui nous permet de savoir si un fichier est versionné. Pour faire bonne mesure nous répondons toujours oui lorsque nous ne sommes pas dans un dépôt Git."

msgid "We set @code{source} to a @uref{https://guix.gnu.org/manual/devel/en/html_node/G_002dExpressions.html#index-local_002dfile,@code{local-file}}---a recursive copy of the current directory (@code{\".\"}), limited to files under version control (the @code{#:select?} bit)."
msgstr "Nous remplissons la @code{source} avec un @uref{https://guix.gnu.org/manual/devel/fr/html_node/G_002dExpressions.html#index-local_002dfile,@code{local-file}}---une copie récursive des fichiers versionnés (avec le @code{#:select?}) du dossier courant (@code{\".\"})."

msgid "From there on, our @file{guix.scm} file serves a second purpose: it lets us build the software with Guix. The whole point of building with Guix is that it's a ``clean'' build---you can be sure nothing from your working tree or system interferes with the build result---and it lets you test a variety of things. First, you can do a plain native build:"
msgstr "À partir de là, notre @file{guix.scm} prend un second rôle : il nous permet de compiler le logiciel avec Guix. L’intérêt réside en ce que cette compilation est ``pure''---nous sommes certains qu’aucun élément de notre copie de travail ou du système n’interfère avec la compilation--et de tester plein de choses. Premièrement, nous pouvons réaliser une compilation native standard :"

msgid "guix build -f guix.scm\n"
msgstr "guix build -f guix.scm\n"

msgid "But you can also build for another system (possibly after setting up @pxref{Daemon Offload Setup, offloading,, guix, GNU Guix Reference Manual} or @pxref{Virtualization Services, transparent emulation,, guix, GNU Guix Reference Manual}):"
msgstr "Mais nous pouvons également compiler pour un autre système (après avoir mis en place @pxref{Réglages du déchargement du démon,,, guix.fr, Manuel de référence de GNU Guix} ou @pxref{Services de virtualisation, Émulation transparente avec QEMU,, guix.fr, Manuel de référence de GNU Guix}) :"

msgid "guix build -f guix.scm -s aarch64-linux -s riscv64-linux\n"
msgstr "guix build -f guix.scm -s aarch64-linux -s riscv64-linux\n"

msgid "@dots{} or cross-compile:"
msgstr "… ou en compilation croisée :"

msgid "guix build -f guix.scm --target=x86_64-w64-mingw32\n"
msgstr "guix build -f guix.scm --target=x86_64-w64-mingw32\n"

msgid "You can also use @dfn{package transformations} to test package variants (@pxref{Package Transformation Options,,, guix, GNU Guix Reference Manual}):"
msgstr "Nous pouvons également utiliser les @dfn{transformations de paquets} pour tester des variantes (@pxref{Options de transformation de paquets,,, guix.fr, Manuel de référence de GNU Guix}) :"

msgid ""
"# What if we built with Clang instead of GCC?\n"
"guix build -f guix.scm \\\n"
"  --with-c-toolchain=guile@@3.0.99-git=clang-toolchain\n"
"\n"
msgstr ""
"# Et si nous construisions avec Clang au lieu de GCC ?\n"
"guix build -f guix.scm \\\n"
"  --with-c-toolchain=guile@@3.0.99-git=clang-toolchain\n"
"\n"

msgid ""
"# What about that under-tested configure flag?\n"
"guix build -f guix.scm \\\n"
"  --with-configure-flag=guile@@3.0.99-git=--disable-networking\n"
msgstr ""
"# Qu'en est-il de ce drapeau de configuration rarement testé ?\n"
"guix build -f guix.scm \\\n"
"  --with-configure-flag=guile@@3.0.99-git=--disable-networking\n"

msgid "Handy!"
msgstr "Pratique !"

msgid "Level 2: The Repository as a Channel"
msgstr "Niveau 2 : Le dépôt comme canal"

msgid "We now have a Git repository containing (among other things) a package definition (@pxref{Building with Guix}).  Can't we turn it into a @dfn{channel} (@pxref{Channels,,, guix, GNU Guix Reference Manual})? After all, channels are designed to ship package definitions to users, and that's exactly what we're doing with our @file{guix.scm}."
msgstr "Nous avons maintenant un dépôt Git contenant (entre autres) une définition de paquet (@pxref{Building with Guix}).  Ne pourrions-nous pas l’utiliser comme @dfn{canal} (@pxref{Canaux,,, guix.fr, Manuel de référence de GNU Guix}) ? Après tout, les canaux sont conçues pour livrer des définitions de paquets aux utilisateurs, et c’est ce que nous faisons avec notre @file{guix.scm}."

msgid "Turns out we can indeed turn it into a channel, but with one caveat: we must create a separate directory for the @code{.scm} file(s) of our channel so that @command{guix pull} doesn't load unrelated @code{.scm} files when someone pulls the channel---and in Guile, there are lots of them! So we'll start like this, keeping a top-level @file{guix.scm} symlink for the sake of @command{guix shell}:"
msgstr "Il s’avère que nous pouvons effectivement faire de notre dépôt un canal, mais à une condition : nous devons créer un dossier à part pour le(s) fichier(s) @code{.scm} du canal, afin que @command{guix pull} ne télécharge pas des @code{.scm} liées au dépôt lors d’une mise à jour --- il y en a beaucoup dans Guile ! Voici donc notre disposition initiale, en conservant un lien symbolique à la racine vers @file{guix.scm} pour la commande @command{guix shell} :"

msgid ""
"mkdir -p .guix/modules\n"
"mv guix.scm .guix/modules/guile-package.scm\n"
"ln -s .guix/modules/guile-package.scm guix.scm\n"
msgstr ""
"mkdir -p .guix/modules\n"
"mv guix.scm .guix/modules/guile-package.scm\n"
"ln -s .guix/modules/guile-package.scm guix.scm\n"

msgid "To make it usable as part of a channel, we need to turn our @file{guix.scm} file into a @dfn{package module} (@pxref{Package Modules,,, guix, GNU Guix Reference Manual}): we do that by changing the @code{use-modules} form at the top to a @code{define-module} form. We also need to actually @emph{export} a package variable, with @code{define-public}, while still returning the package value at the end of the file so we can still use @command{guix shell} and @command{guix build -f guix.scm}. The end result looks like this (not repeating things that haven't changed):"
msgstr "Pour rendre notre fichier @file{guix.scm} utilisable dans le canal, nous devons l’adapter en @dfn{module de paquets} (@pxref{Modules de paquets,,, guix.fr, Manuel de référence de GNU Guix}) en utilisant @code{define-module} à la place de @code{use-modules} au début. Nous devons également @emph{exporter} une variable de paquet avec @code{define-public} tout en retournant le paquet à la fin du fichier pour qu’il reste utilisable avec @command{guix shell} et @command{guix build -f guix.scm}. Le résultat final ressemble à ça (en omettant les parties identiques) :"

msgid ""
"(define-module (guile-package)\n"
"  #:use-module (guix)\n"
"  #:use-module (guix git-download)   ;for ‘git-predicate’\n"
"  @dots{})\n"
"\n"
msgstr ""
"(define-module (guile-package)\n"
"  #:use-module (guix)\n"
"  #:use-module (guix git-download)   ; pour « git-predicate »\n"
"  @dots{})\n"
"\n"

msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (dirname (dirname (current-source-directory))))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""
"(define vcs-file?\n"
"  ;; Renvoie vrai lorsque le fichier donné est sous contrôle de version.\n"
"  (or (git-predicate (dirname (dirname (current-source-directory))))\n"
"      (const #t)))                                ; pas dans un dépôt Git\n"
"\n"

msgid ""
"(define-public guile\n"
"  (package\n"
"    (name \"guile\")\n"
"    (version \"3.0.99-git\")                          ;funky version number\n"
"    (source (local-file \"../..\" \"guile-checkout\"\n"
"                        #:recursive? #t\n"
"                        #:select? vcs-file?))\n"
"    @dots{}))\n"
"\n"
msgstr ""
"(define-public guile\n"
"  (package\n"
"    (name \"guile\")\n"
"    (version \"3.0.99-git\")                          ; un numéro de version cool\n"
"    (source (local-file \"../..\" \"guile-checkout\"\n"
"                        #:recursive? #t\n"
"                        #:select? vcs-file?))\n"
"    @dots{}))\n"
"\n"

msgid ""
";; Return the package object define above at the end of the module.\n"
"guile\n"
msgstr ""
";; Renvoie l’objet du paquet défini ci-dessus en fin de module.\n"
"guile\n"

msgid "We need one last thing: a @uref{https://guix.gnu.org/manual/devel/en/html_node/Package-Modules-in-a-Sub_002ddirectory.html,@code{.guix-channel} file} so Guix knows where to look for package modules in our repository:"
msgstr "Il nous manque plus que le dernier élément : le @uref{https://guix.gnu.org/manual/devel/fr/html_node/Modules-de-paquets-dans-un-sous_002drepertoire.html, fichier @code{.guix-channel}} qui permet à Guix de trouver les modules de paquets de notre dépôt :"

msgid ""
";; This file lets us present this repo as a Guix channel.\n"
"\n"
msgstr ""
";; Ce fichier nous permet de présenter ce dépôt comme un canal Guix.\n"
"\n"

msgid ""
"(channel\n"
"  (version 0)\n"
"  (directory \".guix/modules\"))  ;look for package modules under .guix/modules/\n"
msgstr ""
"(channel\n"
"  (version 0)\n"
"  (directory \".guix/modules\"))  ; rechercher les modules de paquets dans .guix/modules/\n"

msgid "To recap, we now have these files:"
msgstr "Pour récapituler, nous avons :"

msgid ""
".\n"
"├── .guix-channel\n"
"├── guix.scm → .guix/modules/guile-package.scm\n"
"└── .guix\n"
"    └── modules\n"
"       └── guile-package.scm\n"
msgstr ""
".\n"
"├── .guix-channel\n"
"├── guix.scm → .guix/modules/guile-package.scm\n"
"└── .guix\n"
"    └── modules\n"
"       └── guile-package.scm\n"

msgid "And that's it: we have a channel! (We could do better and support @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Channel-Authorizations.html,@emph{channel authentication}} so users know they're pulling genuine code. We'll spare you the details here but it's worth considering!) Users can pull from this channel by @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Additional-Channels.html,adding it to @code{~/.config/guix/channels.scm}}, along these lines:"
msgstr "Et voilà, nous avons un canal ! (Nous pourrions faire mieux en ajoutant le support de @uref{https://guix.gnu.org/manual/devel/fr/html_node/Specifier-les-autorisations-des-canaux.html,@emph{l’authentification de canal}} pour garantir l’authenticité du code. Nous n’entrerons pas dans les détails mais il peut être important de le considérer!) Les utilisateurs peuvent récupérer notre canal avec le fichier @uref{https://guix.gnu.org/manual/devel/fr/html_node/Specifier-des-canaux-supplementaires.html,@file{~/.config/guix/channels.scm}} en y ajoutant quelque chose du genre :"

msgid ""
"(append (list (channel\n"
"                (name 'guile)\n"
"                (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                (branch \"main\")))\n"
"        %default-channels)\n"
msgstr ""
"(append (list (channel\n"
"                (name 'guile)\n"
"                (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                (branch \"main\")))\n"
"        %default-channels)\n"

msgid "After running @command{guix pull}, we can see the new package:"
msgstr "Après un @command{guix pull}, nous pouvons voir les nouveaux paquets :"

msgid ""
"$ guix describe\n"
"Generation 264  May 26 2023 16:00:35    (current)\n"
"  guile 36fd2b4\n"
"    repository URL: https://git.savannah.gnu.org/git/guile.git\n"
"    branch: main\n"
"    commit: 36fd2b4920ae926c79b936c29e739e71a6dff2bc\n"
"  guix c5bc698\n"
"    repository URL: https://git.guix.gnu.org/guix.git\n"
"    commit: c5bc698e8922d78ed85989985cc2ceb034de2f23\n"
"$ guix package -A ^guile$\n"
"guile   3.0.99-git      out,debug       guile-package.scm:51:4\n"
"guile   3.0.9           out,debug       gnu/packages/guile.scm:317:2\n"
"guile   2.2.7           out,debug       gnu/packages/guile.scm:258:2\n"
"guile   2.2.4           out,debug       gnu/packages/guile.scm:304:2\n"
"guile   2.0.14          out,debug       gnu/packages/guile.scm:148:2\n"
"guile   1.8.8           out             gnu/packages/guile.scm:77:2\n"
"$ guix build guile@@3.0.99-git\n"
"[@dots{}]\n"
"/gnu/store/axnzbl89yz7ld78bmx72vpqp802dwsar-guile-3.0.99-git-debug\n"
"/gnu/store/r34gsij7f0glg2fbakcmmk0zn4v62s5w-guile-3.0.99-git\n"
msgstr ""
"$ guix describe\n"
"Génération 264  26 mai 2023 16:00:35    (actuelle)\n"
"  guile 36fd2b4\n"
"    URL du dépôt : https://git.savannah.gnu.org/git/guile.git\n"
"    branche : main\n"
"    commit : 36fd2b4920ae926c79b936c29e739e71a6dff2bc\n"
"  guix c5bc698\n"
"    URL du dépôt : https://git.guix.gnu.org/guix.git\n"
"    commit : c5bc698e8922d78ed85989985cc2ceb034de2f23\n"
"$ guix package -A ^guile$\n"
"guile   3.0.99-git      out,debug       guile-package.scm:51:4\n"
"guile   3.0.9           out,debug       gnu/packages/guile.scm:317:2\n"
"guile   2.2.7           out,debug       gnu/packages/guile.scm:258:2\n"
"guile   2.2.4           out,debug       gnu/packages/guile.scm:304:2\n"
"guile   2.0.14          out,debug       gnu/packages/guile.scm:148:2\n"
"guile   1.8.8           out             gnu/packages/guile.scm:77:2\n"
"$ guix build guile@@3.0.99-git\n"
"[@dots{}]\n"
"/gnu/store/axnzbl89yz7ld78bmx72vpqp802dwsar-guile-3.0.99-git-debug\n"
"/gnu/store/r34gsij7f0glg2fbakcmmk0zn4v62s5w-guile-3.0.99-git\n"

msgid "That's how, as a developer, you get your software delivered directly into the hands of users! No intermediaries, yet no loss of transparency and provenance tracking."
msgstr "Voici comment, en tant que développeuse, vous pouvez livrer votre logiciel directement aux utilisateurs ! Sans aucun intermédiaire, sans perte de transparence et un suivi de la provenance."

msgid "With that in place, it also becomes trivial for anyone to create Docker images, Deb/RPM packages, or a plain tarball with @command{guix pack} (@pxref{Invoking guix pack,,, guix, GNU Guix Reference Manual}):"
msgstr "De plus, il devient également trivial de créer des images Docker, des paquets Deb/RPM ou une archive avec @command{guix pack} (@pxref{Invoquer guix pack,,, guix.fr, Manuel de référence de GNU Guix}) :"

msgid ""
"# How about a Docker image of our Guile snapshot?\n"
"guix pack -f docker -S /bin=bin guile@@3.0.99-git\n"
"\n"
msgstr ""
"# Que diriez-vous d’une image Docker de notre archive Guile ?\n"
"guix pack -f docker -S /bin=bin guile@@3.0.99-git\n"
"\n"

msgid ""
"# And a relocatable RPM?\n"
"guix pack -f rpm -R -S /bin=bin guile@@3.0.99-git\n"
msgstr ""
"# Et d’un RPM repositionnable ?\n"
"guix pack -f rpm -R -S /bin=bin guile@@3.0.99-git\n"

msgid "Bonus: Package Variants"
msgstr "Bonus : Variantes de paquets"

msgid "We now have an actual channel, but it contains only one package (@pxref{The Repository as a Channel}).  While we're at it, we can define @dfn{package variants} (@pxref{Defining Package Variants,,, guix, GNU Guix Reference Manual}) in our @file{guile-package.scm} file, variants that we want to be able to test as Guile developers---similar to what we did above with transformation options. We can add them like so:"
msgstr "Nous avons maintenant un vrai canal, mais celui-ci ne contient qu’un seul paquet (@pxref{The Repository as a Channel}). Pendant que nous y sommes, nous pouvons définir des @dfn{variantes de paquets} (@pxref{Définition de variantes de paquets,,, guix.fr, le manuel de référence de GNU Guix}) dans notre fichier @file{guile-package.scm}. Ce sont des variantes que nous voulons pouvoir tester en tant que développeurs Guile, exactement comme nous avons fait ci-dessus avec les options de transformation. Nous pouvons les ajouter comme suit :"

msgid ""
";; This is the ‘.guix/modules/guile-package.scm’ file.\n"
"\n"
msgstr ""
";; Voici le fichier « .guix/modules/guile-package.scm ».\n"
"\n"

msgid ""
"(define-module (guile-package)\n"
"  @dots{})\n"
"\n"
msgstr ""
"(define-module (guile-package)\n"
"  @dots{})\n"
"\n"

msgid ""
"(define-public guile\n"
"  @dots{})\n"
"\n"
msgstr ""
"(define-public guile\n"
"  @dots{})\n"
"\n"

msgid ""
"(define (package-with-configure-flags p flags)\n"
"  \"Return P with FLAGS as additional 'configure' flags.\"\n"
"  (package/inherit p\n"
"    (arguments\n"
"     (substitute-keyword-arguments (package-arguments p)\n"
"       ((#:configure-flags original-flags #~(list))\n"
"        #~(append #$original-flags #$flags))))))\n"
"\n"
msgstr ""
"(define (package-with-configure-flags p flags)\n"
"  \"Renvoie P avec FLAGS en tant que drapeaux supplémentaires pour « configure ».\"\n"
"  (package/inherit p\n"
"    (arguments\n"
"     (substitute-keyword-arguments (package-arguments p)\n"
"       ((#:configure-flags original-flags #~(list))\n"
"        #~(append #$original-flags #$flags))))))\n"
"\n"

msgid ""
"(define-public guile-without-threads\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--without-threads\")))\n"
"    (name \"guile-without-threads\")))\n"
"\n"
msgstr ""
"(define-public guile-without-threads\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--without-threads\")))\n"
"    (name \"guile-without-threads\")))\n"
"\n"

msgid ""
"(define-public guile-without-networking\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--disable-networking\")))\n"
"    (name \"guile-without-networking\")))\n"
"\n"
msgstr ""
"(define-public guile-without-networking\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--disable-networking\")))\n"
"    (name \"guile-without-networking\")))\n"
"\n"

msgid ""
";; Return the package object defined above at the end of the module.\n"
"guile\n"
msgstr ""
";; Renvoie l’objet du paquet défini ci-dessus à la fin du module.\n"
"guile\n"

msgid "We can build these variants as regular packages once we've pulled the channel. Alternatively, from a checkout of Guile, we can run a command like this one from the top level:"
msgstr "Une fois le canal récupéré, nous pouvons construire ces variantes en tant que paquets ordinaires. Autrement, à partir d'un checkout de Guile, nous pouvons exécuter une commande comme celle-ci depuis le niveau supérieur :"

msgid "guix build -L $PWD/.guix/modules guile-without-threads\n"
msgstr "guix build -L $PWD/.guix/modules guile-without-threads\n"

msgid "Level 3: Setting Up Continuous Integration"
msgstr "Niveau 3 : Mettre en place une intégration continue"

msgid "continuous integration (CI)"
msgstr "intégration continue (CI)"

msgid "The channel we defined above (@pxref{The Repository as a Channel})  becomes even more interesting once we set up @uref{https://en.wikipedia.org/wiki/Continuous_integration, @dfn{continuous integration}} (CI). There are several ways to do that."
msgstr "Le canal défini ci-dessus (@pxref{The Repository as a Channel}) devient encore plus intéressant lorsqu’on installe @uref{https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue, une @dfn{intégration continue}} (CI). Il existe plusieurs manière de le faire."

msgid "You can use one of the mainstream continuous integration tools, such as GitLab-CI. To do that, you need to make sure you run jobs in a Docker image or virtual machine that has Guix installed. If we were to do that in the case of Guile, we'd have a job that runs a shell command like this one:"
msgstr "Vous pouvez utiliser un des outils d’intégration continue standards, comme GitLab-CI. Pour ce faire, assurez-vous de lancer vos tâches sur une image Docker ou sur une machine virtuelle sur laquelle Guix est installé. Si nous faisions ça pour Guile, nous aurions une tâche qui exécute une commande shell comme celle-ci :"

msgid "guix build -L $PWD/.guix/modules guile@@3.0.99-git\n"
msgstr "guix build -L $PWD/.guix/modules guile@@3.0.99-git\n"

msgid "Doing this works great and has the advantage of being easy to achieve on your favorite CI platform."
msgstr "Cette manière de procéder fonctionne bien et a l’avantage d’être facile à réaliser sur votre plateforme CI préférée."

msgid "That said, you'll really get the most of it by using @uref{https://guix.gnu.org/en/cuirass,Cuirass}, a CI tool designed for and tightly integrated with Guix. Using it is more work than using a hosted CI tool because you first need to set it up, but that setup phase is greatly simplified if you use its Guix System service (@pxref{Continuous Integration,,, guix, GNU Guix Reference Manual}).  Going back to our example, we give Cuirass a spec file that goes like this:"
msgstr "Ceci dit, vous en tirerez un maximum en utilisant @uref{https://guix.gnu.org/fr/cuirass,Cuirass}, un outil de Cl créé pour Guix et bien intégré à ce dernier. S’en servir nécessite plus de travail qu’un outil de Cl en ligne, parce qu’il faut d’abord l’installer, mais cette phase d’installation est grandement simplifiée si vous utilisez le service du Système Guix (@pxref{Intégration continue,,, guix.fr, le manuel de référence de GNU Guix}). Revenons à notre exemple dans lequel on donne à Cuirass un fichier de spécifications comme celui-ci :"

msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(channels guile))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""
";; Fichier de spécification Cuirass pour construire tous les paquets du canal ‘guile’.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(channels guile))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"

msgid "It differs from what you'd do with other CI tools in two important ways:"
msgstr "Cela diffère de ce que vous feriez avec d'autres outils de CI de deux manières principales :"

msgid "Cuirass knows it's tracking @emph{two} channels, @code{guile} and @code{guix}. Indeed, our own @code{guile} package depends on many packages provided by the @code{guix} channel---GCC, the GNU libc, libffi, and so on. Changes to packages from the @code{guix} channel can potentially influence our @code{guile} build and this is something we'd like to see as soon as possible as Guile developers."
msgstr "Cuirass sait qu’il suit @emph{deux} canaux, @code{guile} et @code{guix}. En effet, notre paquet @code{guile} dépend de nombreux paquets fournis par le canal @code{guix} : GCC, GNU libc, libffi et ainsi de suite. Des changements dans les paquets du canal @code{guix} peuvent potentiellement influencer notre build @code{guile} et c’est quelque chose qu’on aimerait voir arriver le plus vite possible en tant que développeurs Guile."

msgid "Build results are not thrown away: they can be distributed as @dfn{substitutes} so that users of our @code{guile} channel transparently get pre-built binaries! (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}, for background info on substitutes.)"
msgstr "Les résultats des constructions ne sont pas supprimés : ils peuvent être distribués en tant que @dfn{substituts} pour que les utilisateurs de notre canal @code{guile} puissent avoir des fichiers binaires pré-construits de manière transparente. (@pxref{Substituts,,, guix.fr, le manuel de référence de GNU Guix} pour plus d’informations sur les substituts)."

msgid "From a developer's viewpoint, the end result is this @uref{https://ci.guix.gnu.org/jobset/guile,status page} listing @emph{evaluations}: each evaluation is a combination of commits of the @code{guix} and @code{guile} channels providing a number of @emph{jobs}---one job per package defined in @file{guile-package.scm} times the number of target architectures."
msgstr "Pour le développeur, le résultat est cette @uref{https://ci.guix.gnu.org/jobset/guile,page de statut} qui liste les @emph{évaluations} : chacune est une combinaison des commits des canaux @code{guix} et @code{guile} qui donnent un certain nombre de tâches ; une tâche par paquet défini dans @file{guile-package.scm} multipliée par le nombre d’architectures cibles."

msgid "As for substitutes, they come for free! As an example, since our @code{guile} jobset is built on ci.guix.gnu.org, which runs @command{guix publish} (@pxref{Invoking guix publish,,, guix, GNU Guix Reference Manual}) in addition to Cuirass, one automatically gets substitutes for @code{guile} builds from ci.guix.gnu.org; no additional work is needed for that."
msgstr "Quant aux substituts, ils sont gratuits ! À titre d’exemple, puisque notre jobset @code{guile} est construit sur ci.guix.gnu.org, qui fait tourner @command{guix publish} (@pxref{Invoquer guix publish,,, guix.fr, le manuel de référence de GNU Guix}) en plus de Cuirass, on peut récupérer automatiquement des substituts pour les constructions de @code{guile} à partir de ci.guix.gnu.org. Aucune action supplémentaire n’est nécessaire."

msgid "Bonus: Build manifest"
msgstr "Bonus : Manifeste de construction"

msgid "The Cuirass spec above is convenient: it builds every package in our channel, which includes a few variants (@pxref{Setting Up Continuous Integration}).  However, this might be insufficiently expressive in some cases: one might want specific cross-compilation jobs, transformations, Docker images, RPM/Deb packages, or even system tests."
msgstr "La spécification de Cuirass ci-dessus est pratique : il construit chaque paquet dans notre canal, y compris quelques variantes (@pxref{Setting Up Continuous Integration}). Cependant, cela pourrait être trop peu expressif dans certains cas : il se peut quon veuille des opérations de compilation croisée ou des transformations spécifiques, des images Docker, des paquets RPM/Deb, ou même des tests système."

msgid "To achieve that, you can write a @dfn{manifest} (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  The one we have for Guile has entries for the package variants we defined above, as well as additional variants and cross builds:"
msgstr "Pour ce faire, vous pouvez écrire un @dfn{manifeste} (@pxref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}). Celui que nous avons pour Guile comporte des entrées pour les variantes de paquets que nous avons définis plus haut, ainsi que des variantes et des compilations croisées supplémentaires :"

msgid ""
";; This is ‘.guix/manifest.scm’.\n"
"\n"
msgstr ""
";; Ceci correspond à « .guix/manifest.scm ».\n"
"\n"

msgid ""
"(use-modules (guix)\n"
"             (guix profiles)\n"
"             (guile-package))   ;import our own package module\n"
"\n"
msgstr ""
"(use-modules (guix)\n"
"             (guix profiles)\n"
"             (guile-package))   ; importe notre propre module de paquets\n"
"\n"

msgid ""
"(define* (package->manifest-entry* package system\n"
"                                   #:key target)\n"
"  \"Return a manifest entry for PACKAGE on SYSTEM, optionally cross-compiled to\n"
"TARGET.\"\n"
"  (manifest-entry\n"
"    (inherit (package->manifest-entry package))\n"
"    (name (string-append (package-name package) \".\" system\n"
"                         (if target\n"
"                             (string-append \".\" target)\n"
"                             \"\")))\n"
"    (item (with-parameters ((%current-system system)\n"
"                            (%current-target-system target))\n"
"            package))))\n"
"\n"
msgstr ""
"(define* (package->manifest-entry* package system\n"
"                                   #:key target)\n"
"  \"Renvoie une entrée de manifeste pour PACKAGE sur le SYSTEM, éventuellement compilé\n"
"de manière croisée pour TARGET.\"\n"
"  (manifest-entry\n"
"    (inherit (package->manifest-entry package))\n"
"    (name (string-append (package-name package) \".\" system\n"
"                         (if target\n"
"                             (string-append \".\" target)\n"
"                             \"\")))\n"
"    (item (with-parameters ((%current-system system)\n"
"                            (%current-target-system target))\n"
"            package))))\n"
"\n"

msgid ""
"(define native-builds\n"
"  (manifest\n"
"   (append (map (lambda (system)\n"
"                  (package->manifest-entry* guile system))\n"
"\n"
msgstr ""
"(define native-builds\n"
"  (manifest\n"
"   (append (map (lambda (system)\n"
"                  (package->manifest-entry* guile system))\n"
"\n"

msgid ""
"                '(\"x86_64-linux\" \"i686-linux\"\n"
"                  \"aarch64-linux\" \"armhf-linux\"\n"
"                  \"powerpc64le-linux\"))\n"
"           (map (lambda (guile)\n"
"                  (package->manifest-entry* guile \"x86_64-linux\"))\n"
"                (cons (package\n"
"                        (inherit (package-with-c-toolchain\n"
"                                  guile\n"
"                                  `((\"clang-toolchain\"\n"
"                                     ,(specification->package\n"
"                                       \"clang-toolchain\")))))\n"
"                        (name \"guile-clang\"))\n"
"                      (list guile-without-threads\n"
"                            guile-without-networking\n"
"                            guile-debug\n"
"                            guile-strict-typing))))))\n"
"\n"
msgstr ""
"                '(\"x86_64-linux\" \"i686-linux\"\n"
"                  \"aarch64-linux\" \"armhf-linux\"\n"
"                  \"powerpc64le-linux\"))\n"
"           (map (lambda (guile)\n"
"                  (package->manifest-entry* guile \"x86_64-linux\"))\n"
"                (cons (package\n"
"                        (inherit (package-with-c-toolchain\n"
"                                  guile\n"
"                                  `((\"clang-toolchain\"\n"
"                                     ,(specification->package\n"
"                                       \"clang-toolchain\")))))\n"
"                        (name \"guile-clang\"))\n"
"                      (list guile-without-threads\n"
"                            guile-without-networking\n"
"                            guile-debug\n"
"                            guile-strict-typing))))))\n"
"\n"

msgid ""
"(define cross-builds\n"
"  (manifest\n"
"   (map (lambda (target)\n"
"          (package->manifest-entry* guile \"x86_64-linux\"\n"
"                                    #:target target))\n"
"        '(\"i586-pc-gnu\"\n"
"          \"aarch64-linux-gnu\"\n"
"          \"riscv64-linux-gnu\"\n"
"          \"i686-w64-mingw32\"\n"
"          \"x86_64-linux-gnu\"))))\n"
"\n"
msgstr ""
"(define cross-builds\n"
"  (manifest\n"
"   (map (lambda (target)\n"
"          (package->manifest-entry* guile \"x86_64-linux\"\n"
"                                    #:target target))\n"
"        '(\"i586-pc-gnu\"\n"
"          \"aarch64-linux-gnu\"\n"
"          \"riscv64-linux-gnu\"\n"
"          \"i686-w64-mingw32\"\n"
"          \"x86_64-linux-gnu\"))))\n"
"\n"

msgid "(concatenate-manifests (list native-builds cross-builds))\n"
msgstr "(concatenate-manifests (list native-builds cross-builds))\n"

msgid "We won't go into the details of this manifest; suffice to say that it provides additional flexibility. We now need to tell Cuirass to build this manifest, which is done with a spec slightly different from the previous one:"
msgstr "Nous n’allons pas entrer dans les détails du manifeste ; il suffit de dire qu'il apporte une flexibilité supplémentaire. Nous devons maintenant demander à Cuirass de construire ce manifeste, chose faite à l'aide d'une spécification légèrement différente de la précédente :"

msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(manifest \".guix/manifest.scm\"))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""
";; Fichier de spécification Cuirass pour construire tous les paquets du canal « guile ».\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(manifest \".guix/manifest.scm\"))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"

msgid "We changed the @code{(build @dots{})} part of the spec to @code{'(manifest \".guix/manifest.scm\")} so that it would pick our manifest, and that's it!"
msgstr "Nous avons changé la partie du fichier de spécification @code{(build @dots{})} en @code{'(manifest \".guix/manifest.scm\")}, pour qu'il choisisse notre manifeste, et c'est tout !"

msgid "We picked Guile as the running example in this chapter and you can see the result here:"
msgstr "Nous avons choisi Guile en tant qu’exemple dans ce chapitre et vous pouvez voir le résultat ici :"

msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix-channel?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix-channel}};"
msgstr "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix-channel?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix-channel}} ;"

msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/modules/guile-package.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/modules/guile-package.scm}} with the top-level @file{guix.scm} symlink;"
msgstr "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/modules/guile-package.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/modules/guile-package.scm}} avec le lien symbolique de plus haut niveau @file{guix.scm} ;"

msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/manifest.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/manifest.scm}}."
msgstr "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/manifest.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/manifest.scm}}."

msgid "These days, repositories are commonly peppered with dot files for various tools: @code{.envrc}, @code{.gitlab-ci.yml}, @code{.github/workflows}, @code{Dockerfile}, @code{.buildpacks}, @code{Aptfile}, @code{requirements.txt}, and whatnot. It may sound like we're proposing a bunch of @emph{additional} files, but in fact those files are expressive enough to @emph{supersede} most or all of those listed above."
msgstr "De nos jours, les dépôts sont souvent remplis de fichiers de configuration pour divers outils : @code{.envrc}, @code{.gitlab-ci.yml}, @code{.github/workflows}, @code{Dockerfile}, @code{.buildpacks}, @code{Aptfile}, @code{requirements.txt}, etc. Nous pouvons avoir l’impression de proposer un ensemble de fichiers @emph{supplémentaires}, mais en réalité ces fichiers sont suffisamment expressifs pour @emph{remplacer} la plupart ou la totalité des éléments listés ci-dessus."

msgid "With a couple of files, we get support for:"
msgstr "Avec quelques fichiers, nous obtenons une prise en charge pour :"

msgid "development environments (@command{guix shell});"
msgstr "des environnements de développement (@command{guix shell}) ;"

msgid "pristine test builds, including for package variants and for cross-compilation (@command{guix build});"
msgstr "des constructions de test vierges, y compris pour les variantes de paquets et pour la compilation croisée (@command{guix build}) ;"

msgid "continuous integration (with Cuirass or with some other tool);"
msgstr "une intégration continue (à l’aide de Cuirass ou d’un autre outil) ;"

msgid "continuous delivery to users (@emph{via} the channel and with pre-built binaries);"
msgstr "une livraison continue aux utilisateurs (@emph{via} le canal et avec des binaires pré-construits) ;"

msgid "generation of derivative build artifacts such as Docker images or Deb/RPM packages (@command{guix pack})."
msgstr "une génération d’artefacts de construction dérivés tels que les images Docker ou les paquets Deb/RPM (@command{guix pack})."

msgid "This a nice (in our view!) unified tool set for reproducible software deployment, and an illustration of how you as a developer can benefit from it!"
msgstr "Voilà un ensemble d'outils correctement (à notre avis !) unifiés pour un déploiement de logiciels reproductible, ainsi qu'un exemple de la manière dont vous pouvez en profiter en tant que développeur !"

msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr "Guix fournit plusieurs outils pour gérer l'environnement. Ce chapitre vous montre ces outils."

msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr "Guix fournit un paquet @samp{direnv}, qui peut étendre le shell après avoir changé de répertoire de travail. Vous pouvez utiliser cet outil pour préparer un environnement Guix pur."

msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr "L'exemple suivant fournit une fonction shell dans @file{~/.direnvrc}, qui peut être utilisée dans le dépôt Git de Guix dans @file{~/src/guix/.envrc} pour créer un environnement de construction similaire à celui décrit dans @ref{Construire depuis Git,,, guix.fr, le manuel de référence de GNU Guix}."

msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr "Créez un fichier @file{~/.direnv} avec le code Bash suivant :"

msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""
"# Grâce à <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Remarquez qu'on ajoute des variables shells au déclencheur de la fonction.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"

msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""
"use_guix()\n"
"@{\n"
"    # indique un jeton Github.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"

msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""
"    # Nettoie « GUIX_PACKAGE_PATH ».\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"

msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""
"    # Recrée une racine du ramasse miettes.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"

msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""
"    # Divers paquets.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"

msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""
"    # Paquets de l'environnement.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"

msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix shell --search-paths --root=\"$gcroot\" --pure \\\n"
"     --development guix $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""
"    # Merci <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix shell --search-paths --root=\"$gcroot\" --pure \\\n"
"     --development guix $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"

msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""
"    # Défini les drapeaux configure à l'avance.\n"
"    configure()\n"
"    @{\n"
"        ./configure\n"
"    @}\n"
"    export_function configure\n"
"\n"

msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""
"    # Lance make et construit éventuellement quelque chose.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"

msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""
"    # Défini une commande Git pour pousser.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"

msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""
"    clear                        # Nettoie l'écran.\n"
"    git-cal --author='Votre Nom' # Montre le calendrier des contributions.\n"
"\n"

msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""
"    # Montre l'aide des commandes.\n"
"    echo \"\n"
"build          construit un paquet ou juste un projet si aucun argument n'est fournit\n"
"configure      lance ./configure avec les paramètres pré-définis\n"
"push           pousse un dépôt Git\n"
"\"\n"
"@}\n"

msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr "Tous les projets contenant un @file{.envrc} avec une chaine @code{use guix} aura des variables d'environnement et des procédures prédéfinies."

msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr "Lancez @command{direnv allow} pour mettre en place l'environnement pour la première fois."

msgid "reproducible research"
msgstr "recherche reproductible"

msgid "Because it supports reproducible deployment, Guix is a solid foundation for @dfn{reproducible research workflows}.  This section is targeted at scientists; it shows how to add Guix to one's reproducible research toolbox@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2023/06/a-guide-to-reproducible-research-papers/, blog post published on the Guix-HPC web site in 2023.}.}."
msgstr "Comme il prend en charge les déploiements reproductibles, Guix est une base solide pour @dfn{les méthodes de recherche reproductibles}. Cette section s'adresse aux scientifiques ; elle montre comment ajouter Guix à sa trousse à outils de recherche reproductible@footnote{Ce chapitre est adapté d'un @uref{https://hpc.guix.info/blog/2023/06/a-guide-to-reproducible-research-papers/, billet de blog publié sur le site web de Guix-HPC en 2023.}.}."

msgid "With Guix as the basis of your computational workflow, you can get what's in essence @emph{executable provenance meta-data}: it's like the list of package name/version pairs some provide as an appendix to their publication, except more precise and immediately deployable."
msgstr "Avec Guix comme base de votre méthode de travail informatique, vous pouvez obtenir ce qui se trouve être par essence des @emph{métadonnées de provenance de l'exécutable} : c'est comme une liste de paires de nom de paquet et de version que certaines personnes fournissent en fin de leur publication, sauf que c'est plus précis et immédiatement déployable."

msgid "This section is a guide in just four steps on how to make your computational experiments reproducible using Guix, and how to provide that information in your research paper."
msgstr "Cette section est un guide de seulement quatre étapes sur la manière de rendre vos expériences informatiques reproductibles avec Guix, et comment fournir cette information dans vos papiers de recherche."

msgid "Step 1: Setting Up the Environment"
msgstr "Étape 1 : Mettre en place l'environnement"

msgid "The first step is to identify precisely what packages you need in your software environment to run your computational experiment."
msgstr "La première étape consiste à identifier précisément les paquets dont vous avez besoin dans votre environnement logiciel pour exécuter votre expérience informatique."

msgid "Assuming you have a Python script that uses NumPy, you can start by creating an environment that contains these two packages and to run your code in that environment (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual}):"
msgstr "En supposant que vous avez un script Python qui utilise NumPy, vous pouvez commencer par créer un environnement qui contient ces deux paquets et lancer votre code dans cet environnement (@pxref{Invoquer guix shell,,, guix.fr, le manuel de référence de GNU Guix}) :"

msgid "guix shell -C python python-numpy -- python3 ./myscript.py\n"
msgstr "guix shell -C python python-numpy -- python3 ./myscript.py\n"

msgid "The @code{-C} flag here (or @code{--container}) instructs @command{guix shell} to create that environment in an isolated container with nothing but the two packages you asked for.  That way, if @command{./myscript.py} needs more than these two packages, it'll fail to run and you'll immediately notice.  On some systems @code{--container} is not supported; in that case, you can resort to @code{--pure} instead."
msgstr "Le drapeau @code{-C} ici (ou @code{--container}) indique à @command{guix shell} de créer cet environnement dans un conteneur isolé avec rien d'autre que les deux paquets demandés. De cette manière, si @command{./myscript.py} a besoin de plus que ces deux paquets, il échouera à s'exécuter et vous le remarquerez immédiatement. Sur certains système @code{--container} n'est pas pris en charge ; dans ce cas, vous pouvez utiliser @code{--pure} à la place."

msgid "Perhaps you'll find that you also need Pandas and add it to the environment:"
msgstr "Peut-être que vous remarquerez que vous avez également besoin de Pandas et vous l'ajoutez à l'environnement :"

msgid ""
"guix shell -C python python-numpy python-pandas -- \\\n"
"  python3 ./myscript.py\n"
msgstr ""
"guix shell -C python python-numpy python-pandas -- \\\n"
"  python3 ./myscript.py\n"

msgid "If you fail to guess the name of the package (this one was easy!), try @code{guix search}."
msgstr "Si vous n'arrivez pas à deviner le nom du paquet (celui-là était facile !), essayez @code{guix search}."

msgid "Environments for Python, R, and similar high-level languages are relatively easy to set up.  For C/C++ code, you may need more packages:"
msgstr "Les environnements pour Python, R, et les langages haut-niveau similaires sont assez faciles à configurer. Pour du code C/C++, vous aurez peut-être besoin de paquets supplémentaires :"

msgid "guix shell -C gcc-toolchain cmake coreutils grep sed make -- @dots{}\n"
msgstr "guix shell -C gcc-toolchain cmake coreutils grep sed make -- @dots{}\n"

msgid "Or perhaps you'll find that you could just as well provide a package definition for your code---@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}, to learn more on how to do that."
msgstr "Ou bien vous pourriez tout aussi bien fournir une définition de paquet pour votre code --- @pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix} pour en apprendre plus."

msgid "Eventually, you'll have a list of packages that satisfies your needs."
msgstr "Enfin, vous obtiendrez une liste des paquets qui satisfont vos besoins."

msgid "What if a package is missing?"
msgstr "Que faire s'il manque un paquet ?"

msgid "Guix and the main scientific channels provide about @uref{https://hpc.guix.info/browse, tens of thousands of packages}.  Yet, there's always the possibility that the one package you need is missing."
msgstr "Guix et les canaux scientifiques principaux fournissent environ @uref{https://hpc.guix.info/browse, des dizaines de milliers de paquets}. Cependant, il est toujours possible que le paquet dont vous avez besoin ne soit pas disponible."

msgid "In that case, you will need to provide a definition for it (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) in a dedicated channel of yours (@pxref{Creating a Channel,,, guix, GNU Guix Reference Manual}).  For software in Python, R, and other high-level languages, most of the work can usually be automated by using @command{guix import} (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr "Dans ce cas, vous devrez fournir une définition pour celui-ci (@pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix}) dans un canal dédié que vous possédez (@pxref{Écrire de nouveaux de canaux,,, guix.fr, le manuel de référence de GNU Guix}). Pour des logiciels en Python, R et d'autres langages de haut-niveau, le gros du travail peut être automatisé en utilisant @command{guix import} (@pxref{Invoquer guix import,,, guix.fr, le manuel de référence de GNU Guix})."

msgid "Join @uref{https://guix.gnu.org/contact/,the friendly Guix community} to get help!"
msgstr "Rejoignez @uref{https://guix.gnu.org/contact/,la joyeuse communauté Guix} pour recevoir de l'aide !"

msgid "Step 2: Recording the Environment"
msgstr "Étape 2 : Enregistrer l'environnement"

msgid "Now that you have that @code{guix shell} command line with a list of packages, the best course of action is to save it in a @emph{manifest} file---essentially a software bill of materials---that Guix can then ingest (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  The easiest way to get started is by ``translating'' your command line into a manifest:"
msgstr "Maintenant que vous avez cette ligne de commande @code{guix shell} avec une liste de paquets, le mieux à faire est de la sauvegarder dans un fichier @emph{manifeste} --- la nomenclature logicielle --- que Guix peut ensuite utiliser (@pxref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}). Le plus facile est de commencer par « traduire » votre ligne de commande en un manifeste :"

msgid ""
"guix shell python python-numpy python-pandas \\\n"
"  --export-manifest > manifest.scm\n"
msgstr ""
"guix shell python python-numpy python-pandas \\\n"
"  --export-manifest > manifest.scm\n"

msgid "Put that manifest under version control! From there anyone can redeploy the software environment described by the manifest and run code in that environment:"
msgstr "Mettez ce manifeste sous contrôle de version ! À partir de maintenant n'importe qui peut redéployer l'environnement logiciel décrit par le manifeste et exécuter le code dans cet environnement :"

msgid "guix shell -C -m manifest.scm -- python3 ./myscript.py\n"
msgstr "guix shell -C -m manifest.scm -- python3 ./myscript.py\n"

msgid "Here's what @file{manifest.scm} reads:"
msgstr "Voilà ce à quoi ressemble un fichier @file{manifest.scm} :"

msgid ""
";; What follows is a \"manifest\" equivalent to the command line you gave.\n"
";; You can store it in a file that you may then pass to any 'guix' command\n"
";; that accepts a '--manifest' (or '-m') option.\n"
"\n"
msgstr ""
";; Ce qui suit est un \"manifeste\" équivalent à la ligne de commande que vous avez passée.\n"
";; Vous pouvez le sauvegarder dans un fichier que vous pouvez passer à n'importe quelle commande « guix »\n"
";; qui accepte l'option « --manifest » (ou « -m »).\n"
"\n"

msgid ""
"(specifications->manifest\n"
"  (list \"python\" \"python-numpy\" \"python-pandas\"))\n"
msgstr ""
"(specifications->manifest\n"
"  (list \"python\" \"python-numpy\" \"python-pandas\"))\n"

msgid "It's a code snippet that lists packages.  Notice that there are no version numbers! Indeed, these version numbers are specified in package definitions, located in Guix channels.  To allow others to reproduce the exact same environment as the one you're running, you need to @emph{pin Guix itself} , by capturing the current Guix channel commits with @command{guix describe} (@pxref{Replicating Guix,,, guix, GNU Guix Reference Manual}):"
msgstr "C'est un bout de code qui liste les paquets. Remarquez qu'il n'y a pas de numéro de version ! En effet, ces numéros de version sont spécifiés dans les définitions des paquets situés dans les canaux de Guix. Pour permettre aux autres de reproduire exactement le même environnement que celui que vous exécutez, vous devrez @emph{épingler Guix lui-même}, en capturant les commits actuels des canaux de Guix avec @command{guix describe} (@pxref{Répliquer Guix,,, guix.fr, le manuel de référence de GNU Guix}) :"

msgid "guix describe -f channels > channels.scm\n"
msgstr "guix describe -f channels > channels.scm\n"

msgid "lock files, for reproducibility"
msgstr "fichiers verrous, pour la reproductibilité"

msgid "This @code{channels.scm} file is similar in spirit to ``lock files'' that some deployment tools employ to pin package revisions. You should also keep it under version control in your code, and possibly update it once in a while when you feel like running your code against newer versions of its dependencies. With this file, anyone, @emph{at any time and on any machine}, can now reproduce the exact same environment by running:"
msgstr "Ce fichier @code{channels.scm} est semblable en principe aux « fichiers verrous » que certains outils de déploiement utilisent pour fixer les révisions de paquets. Vous devriez également le garder sous contrôle de version dans votre code, et éventuellement le mettre à jour de temps en temps lorsque vous voudrez exécuter votre code avec de nouvelles versions de ses dépendances. Avec ce fichier, n'importe qui, @emph{à n'importe quel moment et sur n'importe quelle machine}, peut maintenant reproduire exactement le même environnement en exécutant :"

msgid ""
"guix time-machine -C channels.scm -- \\\n"
"  shell -C -m manifest.scm -- \\\n"
"  python3 ./myscript.py\n"
msgstr ""
"guix time-machine -C channels.scm -- \\\n"
"  shell -C -m manifest.scm -- \\\n"
"  python3 ./myscript.py\n"

msgid "In this example we rely solely on the @code{guix} channel, which provides the Python packages we need. Perhaps some of the packages you need live @uref{https://hpc.guix.info/channels,in other channels}---maybe @code{guix-cran} if you use R, maybe @code{guix-science}.  That's fine: @code{guix describe} also captures that."
msgstr "Dans cet exemple nous nous reposons sur le canal @code{guix}, qui fournit les paquets Python dont nous avons besoin. Certains paquets dont vous avez besoin peuvent se trouver @uref{https://hpc.guix.info/channels,dans d'autres canaux} --- peut-être @code{guix-cran} si vous utilisez R, peut être @code{guix-science}. Tout va bien : @code{guix describe} capture également cela."

msgid "Of course do include a @file{README} file giving the exact command to run the code. Not everyone uses Guix so it can be helpful to also provide minimal non-Guix setup instructions: which package versions are used, how software is built, etc. As we have seen, such instructions would likely be inaccurate and inconvenient to follow at best. Yet, it can be a useful starting point to someone trying to recreate a @emph{similar} environment using different tools. It should probably be presented as such, with the understanding that the only way to get the @emph{same} environment is to use Guix."
msgstr "Bien sûr ajoutez un fichier @file{README} avec la commande exacte pour exécuter votre code. Tout le monde n'utilise pas Guix, donc il peut être utile de fournir également des instructions de mise en place minimales sans Guix : les versions des paquets que vous utilisez, comment ces logiciels sont construits, etc. Comme vu précédemment, ces instructions seront probablement inexactes et peu pratiques à suivre au mieux. Cependant, il peut s'agir d'un point d'entrée utile pour quelqu'un qui essaye de recréer un environnement @emph{similaire} avec d'autres outils. Il devrait être présenté de cette manière, en comprenant que la seule manière d'obtenir le @emph{même} environnement est d'utiliser Guix."

msgid "Step 3: Ensuring Long-Term Source Code Archiving"
msgstr "Étape 3 : assurer l'archivage du code source sur le long-terme"

msgid "We insisted on version control before: for the @file{manifest.scm} and @file{channels.scm} files, but of course also for your own code. Our recommendation is to have these two @file{.scm} files in the same repository as the code they're about."
msgstr "Nous avons insisté sur le contrôle de version précédemment : pour les fichiers @file{manifest.scm} et @file{channels.scm}, mais bien sûr également pour votre propre code. Nous recommandons d'avoir ces deux fichiers @file{.scm} dans le même répertoire que le code dont ils parlent."

msgid "Since the goal is enabling reproducibility, source code availability is a prime concern.  Source code hosting services come and go and we don't want our code to vanish in a whim and render our published research work unverifiable. @uref{https://www.softwareheritage.org/,Software Heritage} (SWH for short) is @emph{the} solution for this: SWH archives public source code and provides unique intrinsic identifiers to refer to it---@uref{https://swhid.org, @dfn{SWHIDs}}.  Guix itself is @uref{https://doi.org/10.1145/3641525.3663622,connected to SWH} to (1)@ ensure that the source code of its packages is archived, and (2)@ to fall back to downloading from the SWH archive should code vanish from its original site."
msgstr "Comme le but est de permettre la reproductibilité, la disponibilité du code source est une préoccupation de premier plan. Les services d'hébergement de code vont et viennent et nous n'aimerions pas voir notre code disparaître d'un coup de tête et rendre notre recherche publiée impossible à vérifier. @uref{https://www.softwareheritage.org/,Software Heritage} (SWH pour les intimes) est @emph{la} solution à ce problème : SWH archive le code source public et fournit des identifiants intrinsèques uniques pour s'y référer --- @uref{https://swhid.org, @dfn{les SWHID}}. Guix lui-même est @uref{https://doi.org/10.1145/3641525.3663622,connecté à SWH} pour 1°@ assurer que le code source de ses paquets est archivé, et 2°@ comme solution de repli pour télécharger depuis l'archive SWH si le code disparaissait du site originel."

msgid "Once your own code is available in a public version-control repository, such as a Git repository on your lab's hosting service, you can ask SWH to archive it by going to its @uref{https://archive.softwareheritage.org/save/,Save Code Now} interface.  SWH will process the request asynchronously and eventually you'll find your code has made it into @uref{https://archive.softwareheritage.org/,the archive}."
msgstr "Une fois que votre propre code est disponible sur un dépôt de contrôle de version public, comme un dépôt Git sur le service d'hébergement de votre laboratoire, vous pouvez demander à SWH de l'archiver en allant sur son interface @uref{https://archive.softwareheritage.org/save/,Save Code Now}. SWH traitera la requête de manière asynchrone et votre code finira par arrivez dans @uref{https://archive.softwareheritage.org/,l'archive}."

msgid "Step 4: Referencing the Software Environment"
msgstr "Étape 4 : Référencer l'environnement logiciel"

msgid "This brings us to the last step: referring to our code @emph{and} software environment in our beloved paper.  We already have all our code and Guix files in the same repository, which is archived on SWH.  Thanks to SWH, we now have a SWHID, which uniquely identifies the relevant revision of our code."
msgstr "Cela nous amène à la dernière étape : référencer notre code @emph{et} l'environnement logiciel dans notre papier. Nous avons déjà tout notre code et les fichiers Guix dans le même dépôt, qui est archivé dans SWH. Grâce à SWH, nous avons maintenant un SWHID, qui identifie de manière unique la bonne révision de notre code."

msgid "Following @uref{https://www.softwareheritage.org/howto-archive-and-reference-your-code/,SWH's own guide}, we'll pick an @code{swh:dir} kind of identifier, which refers to the directory of the relevant revision/commit of our repository, and we'll keep @emph{contextual info} for clarity---that includes the original URL. Putting it all together, we'll conclude our paper with a sentence along these lines:"
msgstr "En suivant le @uref{https://www.softwareheritage.org/howto-archive-and-reference-your-code/,le propre guide de SWH}, nous choisissons un identifiant de type @code{swh:dir}, qui se réfère au répertoire de la révision ou du commit concerné dans notre dépôt, et nous allons garder des @emph{informations contextuelles} pour plus de clarté --- ce qui comprend l'URL originale. Pour rassembler tout cela, nous conclurons notre papier avec une phrase de ce style :"

msgid "Example"
msgstr "Exemple"

msgid "The source code used to produce this study, as well as instructions to run it in the right software environment using GNU@ Guix, is archived on Software Heritage as @uref{https://archive.softwareheritage.org/swh:1:dir:cc8919d7705fbaa31efa677ce00bef7eb374fb80;origin=https://gitlab.inria.fr/lcourtes-phd/edcc-2006-redone;visit=swh:1:snp:71a4d08ef4a2e8455b67ef0c6b82349e82870b46;anchor=swh:1:rev:36fde7e5ba289c4c3e30d9afccebbe0cfe83853a,@code{swh:1:dir:cc8919d7705fbaa31efa677ce00bef7eb374fb80;origin=https://gitlab.inria.fr/lcourtes-phd/edcc-2006-redone;visit=swh:1:snp:71a4d08ef4a2e8455b67ef0c6b82349e82870b46;anchor=swh:1:rev:36fde7e5ba289c4c3e30d9afccebbe0cfe83853a}}."
msgstr "Le code source utilisé pour produire cette étude, ainsi que les instructions pour les exécuter dans le bon environnement logiciel avec GNU@ Guix, est archivé sur Software Heritage à l'adresse @uref{https://archive.softwareheritage.org/swh:1:dir:cc8919d7705fbaa31efa677ce00bef7eb374fb80;origin=https://gitlab.inria.fr/lcourtes-phd/edcc-2006-redone;visit=swh:1:snp:71a4d08ef4a2e8455b67ef0c6b82349e82870b46;anchor=swh:1:rev:36fde7e5ba289c4c3e30d9afccebbe0cfe83853a,@code{swh:1:dir:cc8919d7705fbaa31efa677ce00bef7eb374fb80;origin=https://gitlab.inria.fr/lcourtes-phd/edcc-2006-redone;visit=swh:1:snp:71a4d08ef4a2e8455b67ef0c6b82349e82870b46;anchor=swh:1:rev:36fde7e5ba289c4c3e30d9afccebbe0cfe83853a}}."

msgid "With this information, the reader can:"
msgstr "Avec ces informations, la personne qui lit votre papier peut :"

msgid "get the source code;"
msgstr "récupérer le code source,"

msgid "reproduce its software environment with @code{guix time-machine} and run the code;"
msgstr "reproduire son environnement logiciel avec @code{guix time-machine} et exécuter le code,"

msgid "inspect and possibly modify both the code and its environment."
msgstr "inspecter et éventuellement modifier le code aussi bien que son environnement."

msgid "Mission accomplished!"
msgstr "Mission accomplie !"

msgid "cluster installation"
msgstr "installation d'une grappe de calcul"

msgid "high-performance computing, HPC"
msgstr "calcul haute-performance, HPC"

msgid "HPC, high-performance computing"
msgstr "HPC, calcul haute-performance"

msgid "Guix is appealing to scientists and @acronym{HPC, high-performance computing} practitioners: it makes it easy to deploy potentially complex software stacks, and it lets you do so in a reproducible fashion---you can redeploy the exact same software on different machines and at different points in time."
msgstr "Guix est intéressant pour les scientifiques et les professionnels du @acronym{HPC, calcul haute-performance}. Il facilite en effet le déploiement de piles logicielles complexes et vous permet de le faire de manière reproductible — vous pouvez redéployer exactement le même logiciel sur des machines différentes et à des moments différents."

msgid "In this chapter we look at how a cluster sysadmin can install Guix for system-wide use, such that it can be used on all the cluster nodes, and discuss the various tradeoffs@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, blog post published on the Guix-HPC web site in 2017}.}."
msgstr "Dans ce chapitre nous allons voir comment l'administrateur·ice système d'une grappe peut installer Guix sur le système, de sorte qu'il puisse être utilisé sur tous les nœuds de la grappe, et nous discuterons de différents compromis possibles@footnote{Ce chapitre est adapté d'un @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, billet de blog publié sur le site web de Guix-HPC en 2017}.}."

msgid "Here we assume that the cluster is running a GNU/Linux distro other than Guix System and that we are going to install Guix on top of it."
msgstr "Nous supposons ici que la grappe utilise une distribution GNU/Linux autre que le Système Guix et que nous allons installer Guix par-dessus."

msgid "The recommended approach is to set up one @emph{head node} running @command{guix-daemon} and exporting @file{/gnu/store} over NFS to compute nodes."
msgstr "L'approche recommandée est d'installer un @emph{nœud principal} qui exécuterait @command{guix-daemon} et exporterait @file{/gnu/store} sur NFS vers les nœuds de calcul."

msgid "Remember that @command{guix-daemon} is responsible for spawning build processes and downloads on behalf of clients (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}), and more generally accessing @file{/gnu/store}, which contains all the package binaries built by all the users (@pxref{The Store,,, guix, GNU Guix Reference Manual}).  ``Client'' here refers to all the Guix commands that users see, such as @code{guix install}.  On a cluster, these commands may be running on the compute nodes and we'll want them to talk to the head node's @code{guix-daemon} instance."
msgstr "Rappelez-vous que @command{guix-daemon} est responsable du démarrage des constructions et des téléchargements pour ses clients (@pxref{Invoquer guix-daemon,,, guix.fr, le manuel de référence de GNU Guix}), et plus généralement de l'accès à @file{/gnu/store} qui contient tous les binaires des paquets construits par tous les utilisateur·ices (@pxref{Le dépôt,,, guix.fr, le manuel de référence de GNU Guix}). Les « clients » signifient toutes les commandes Guix que voient les utilisateurs et utilisatrices, comme @command{guix install}. Sur une grappe, ces commandes peuvent être lancées sur les nœuds de calcul et l'on souhaiterait qu'elles parlent au @code{guix-daemon} du nœud principal."

msgid "To begin with, the head node can be installed following the usual binary installation instructions (@pxref{Binary Installation,,, guix, GNU Guix Reference Manual}).  Thanks to the installation script, this should be quick.  Once installation is complete, we need to make some adjustments."
msgstr "Pour commencer, le nœud principal peut être installé suivant les instructions d'installation binaires habituelles (@pxref{Installation binaire,,, guix.fr, le manuel de référence de GNU Guix}). Grâce au script d'installation, cela devrait être rapide. Une fois l'installation terminée, nous devons faire quelques ajustements."

msgid "Since we want @code{guix-daemon} to be reachable not just from the head node but also from the compute nodes, we need to arrange so that it listens for connections over TCP/IP.  To do that, we'll edit the systemd startup file for @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, and add a @code{--listen} argument to the @code{ExecStart} line so that it looks something like this:"
msgstr "Comme nous voulons que @code{guix-daemon} soit joignable non seulement depuis le nœud principal, mais aussi depuis les nœuds de calcul, nous devons nous arranger pour qu'il se mette en écoute de connexions sur TCP/IP. Pour ce faire, nous allons modifier le fichier de démarrage systemd de @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, et ajouter un argument @code{--listen} à la ligne @code{ExecStart} ur qu'elle ressemble à quelque chose comme :"

msgid ""
"ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \\\n"
"    --build-users-group=guixbuild \\\n"
"    --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""
"ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \\\n"
"    --build-users-group=guixbuild \\\n"
"    --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"

msgid "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"

msgid "For these changes to take effect, the service needs to be restarted:"
msgstr "Pour que ces changements fassent effet, le service doit être redémarré :"

msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"
msgstr ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"

msgid "The @code{--listen=0.0.0.0} bit means that @code{guix-daemon} will process @emph{all} incoming TCP connections on port 44146 (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}). This is usually fine in a cluster setup where the head node is reachable exclusively from the cluster's local area network---you don't want that to be exposed to the Internet!"
msgstr "@code{--listen=0.0.0.0} indique que @code{guix-daemon} traitera @emph{toutes} les connexions TCP entrantes sur le port 44146 (@pxref{Invoquer guix-daemon,,, guix.fr, le manuel de référence de GNU Guix}). C'est généralement acceptable sur une grappe dont le nœud principal est exclusivement accessible à partir du réseau local de la grappe. Vous ne voulez pas l'exposer sur Internet !"

msgid "The next step is to define our NFS exports in @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} by adding something along these lines:"
msgstr "L'étape suivante consiste à définir nos exports NFS dans @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} en ajoutant quelque chose comme :"

msgid ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"
msgstr ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"

msgid "The @file{/gnu/store} directory can be exported read-only since only @command{guix-daemon} on the master node will ever modify it.  @file{/var/guix} contains @emph{user profiles} as managed by @code{guix package}; thus, to allow users to install packages with @code{guix package}, this must be read-write."
msgstr "Le répertoire @file{/gnu/store} peut être exporté en lecture-seule car seul le @command{guix-daemon} du nœud principal le modifiera jamais. @file{/var/guix} contient les @emph{profils utilisateurs} gérés par @code{guix package}. Ainsi, pour permettre à tout le monde d'installer des paquets avec @code{guix package}, il doit être en lecture-écriture."

msgid "Users can create as many profiles as they like in addition to the default profile, @file{~/.guix-profile}.  For instance, @code{guix package -p ~/dev/python-dev -i python} installs Python in a profile reachable from the @code{~/dev/python-dev} symlink.  To make sure that this profile is protected from garbage collection---i.e., that Python will not be removed from @file{/gnu/store} while this profile exists---, @emph{home directories should be mounted on the head node} as well so that @code{guix-daemon} knows about these non-standard profiles and avoids collecting software they refer to."
msgstr "Les utilisateurs et utilisatrices peuvent créer autant de profils qu'ils et elles le souhaitent en plus du profil par défaut, @file{~/.guix-profile}. Par exemple, @code{guix package -p ~/dev/python-dev -i python} installe Python dans un profil accessible depuis le lien symbolique @code{~/dev/python-dev}. Pour vous assurer que ce profil est protégé contre le ramasse-miettes, c.-à-d.@: que Python ne sera pas supprimé de @file{/gnu/store} alors que le profil existe, @emph{les répertoires personnels devraient également être montés sur le nœud principal} pour que @code{guix-daemon} connaisse ces profils non standards et évite de supprimer les logiciels auxquels ils se réfèrent."

msgid "It may be a good idea to periodically remove unused bits from @file{/gnu/store} by running @command{guix gc} (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual}).  This can be done by adding a crontab entry on the head node:"
msgstr "Vous devriez régulièrement supprimer les paquets inutilisés de @file{/gnu/store} en exécutant @command{guix gc} (@pxref{Invoquer guix gc,,, guix.fr, le manuel de référence de GNU Guix}). Vous pouvez le faire en ajoutant une entrée à la crontab du nœud principal :"

msgid "root@@master# crontab -e\n"
msgstr "root@@master# crontab -e\n"

msgid "... with something like this:"
msgstr "… avec quelque chose comme cela :"

msgid ""
"# Every day at 5AM, run the garbage collector to make sure\n"
"# at least 10 GB are free on /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"
msgstr ""
"# Tous les jours à 5h, lancer le ramasse-miettes pour s'assurer\n"
"# d'avoir au moins 10 Gio libres sur /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"

msgid "We're done with the head node! Let's look at compute nodes now."
msgstr "Nous en avons terminé avec le nœud principal ! Voyons maintenant les nœuds de calcul."

msgid "First of all, we need compute nodes to mount those NFS directories that the head node exports.  This can be done by adding the following lines to @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}}:"
msgstr "Tout d'abord, les nœuds de calcul doivent monter les répertoires NFS exportés par le nœud principal. Vous pouvez le faire en ajoutant les lignes suivantes à @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}} :"

msgid ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"
msgstr ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"

msgid "... where @var{head-node} is the name or IP address of your head node.  From there on, assuming the mount points exist, you should be able to mount each of these on the compute nodes."
msgstr "… où @var{head-node} est le nom ou l'IP de votre nœud principal. À partir de là, en supposant que les points de montage existent, vous devriez pouvoir monter tous ces répertoires sur chaque nœud de calcul."

msgid "Next, we need to provide a default @command{guix} command that users can run when they first connect to the cluster (eventually they will invoke @command{guix pull}, which will provide them with their ``own'' @command{guix} command).  Similar to what the binary installation script did on the head node, we'll store that in @file{/usr/local/bin}:"
msgstr "Ensuite, nous devons fournir une commande @command{guix} par défaut que les utilisateur·ices peuvent exécuter lors de leur première connexion à la grappe (ils et elles finiront par invoquer @command{guix pull}, qui leur fournira leur propre commande @command{guix}). Comme l'a fait le script d'installation sur le nœud principal, nous le stockons dans @file{/usr/local/bin} :"

msgid ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"
msgstr ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"

msgid "We then need to tell @code{guix} to talk to the daemon running on our master node, by adding these lines to @code{/etc/profile}:"
msgstr "Nous devons ensuite dire à @code{guix} de parler au démon qui s'exécute sur notre nœud principal, en ajoutant ces lignes à @code{/etc/profile} :"

msgid ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"
msgstr ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"

msgid "To avoid warnings and make sure @code{guix} uses the right locale, we need to tell it to use locale data provided by Guix (@pxref{Application Setup,,, guix, GNU Guix Reference Manual}):"
msgstr "Pour éviter des avertissements et vous assurer que @code{guix} utilise le bon environnement linguistique, nous devons lui dire d'utiliser les données linguistiques fournies par Guix (@pxref{Réglages applicatifs,,, guix.fr, le manuel de référence de GNU Guix Reference Manual}) :"

msgid ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"
msgstr ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"

msgid ""
"# Here we must use a valid locale name.  Try \"ls $GUIX_LOCPATH/*\"\n"
"# to see what names can be used.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"
msgstr ""
"# Nous devons utiliser un nom de paramètre linguistique valide. Essayez « ls $GUIX_LOCPATH/* »\n"
"# pour voir les noms utilisables.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"

msgid "For convenience, @code{guix package} automatically generates @file{~/.guix-profile/etc/profile}, which defines all the environment variables necessary to use the packages---@code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc.  Likewise, @command{guix pull} does that under @file{~/.config/guix/current}.  Thus it's a good idea to source both from @code{/etc/profile}:"
msgstr "Pour votre confort, @code{guix package} génère automatiquement @file{~/.guix-profile/etc/profile}, qui définit toutes les variables d'environnement nécessaires pour utiliser les paquets : @code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc. De même, @command{guix pull} le fait pour @file{~/.config/guix/current}. Ainsi, il vaut mieux sourcer les deux à partir de @code{/etc/profile} :"

msgid ""
"for GUIX_PROFILE in \"$HOME/.config/guix/current\" \"$HOME/.guix-profile\"\n"
"do\n"
"  if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"    . \"$GUIX_PROFILE/etc/profile\"\n"
"  fi\n"
"done\n"
msgstr ""
"for GUIX_PROFILE in \"$HOME/.config/guix/current\" \"$HOME/.guix-profile\"\n"
"do\n"
"  if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"    . \"$GUIX_PROFILE/etc/profile\"\n"
"  fi\n"
"done\n"

msgid "Last but not least, Guix provides command-line completion notably for Bash and zsh.  In @code{/etc/bashrc}, consider adding this line:"
msgstr "Enfin, Guix propose la complétion des commandes notamment pour Bash et zsh. Dans @code{/etc/bashrc}, pensez à ajouter cette ligne :"

msgid ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"
msgstr ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"

msgid "Voilà!"
msgstr "Et voilà !"

msgid "You can check that everything's in place by logging in on a compute node and running:"
msgstr "Vous pouvez vérifier que tout est en place en vous connectant à un nœud de calcul et en exécutant :"

msgid "guix install hello\n"
msgstr "guix install hello\n"

msgid "The daemon on the head node should download pre-built binaries on your behalf and unpack them in @file{/gnu/store}, and @command{guix install} should create @file{~/.guix-profile} containing the @file{~/.guix-profile/bin/hello} command."
msgstr "Le démon sur le nœud principal devrait télécharger les binaires préconstruits pour vous et les déballer dans @file{/gnu/store} et @command{guix install} devrait créer un @file{~/.guix-profile} contenant la commande @file{~/.guix-profile/bin/hello}."

msgid "Network Access"
msgstr "Accès réseau"

msgid "Guix requires network access to download source code and pre-built binaries.  The good news is that only the head node needs that since compute nodes simply delegate to it."
msgstr "Guix a besoin d'un accès réseau pour télécharger le code source et les binaires préconstruits. La bonne nouvelle, c'est que seul le nœud principal en a besoin car les nœuds de calcul lui délèguent cette tâche."

msgid "It is customary for cluster nodes to have access at best to a @emph{white list} of hosts.  Our head node needs at least @code{ci.guix.gnu.org} in this white list since this is where it gets pre-built binaries from by default, for all the packages that are in Guix proper."
msgstr "Les nœuds d'une grappe ont traditionnellement accès au mieux à une liste blanche d'hôtes. Notre nœud principal a besoin au minimum que @code{ci.guix.gnu.org} soit dans cette liste car c'est là qu'il récupère les binaires préconstruits par défaut, pour tous les paquets dans Guix lui-même."

msgid "Incidentally, @code{ci.guix.gnu.org} also serves as a @emph{content-addressed mirror} of the source code of those packages.  Consequently, it is sufficient to have @emph{only} @code{ci.guix.gnu.org} in that white list."
msgstr "Au passage, @code{ci.guix.gnu.org} sert également de @emph{miroir addressé par le contenu} du code source de ces paquets. En conséquence, il suffit d'avoir @emph{uniquement} @code{ci.guix.gnu.org} dans cette liste blanche."

msgid "Software packages maintained in a separate repository such as one of the various @uref{https://hpc.guix.info/channels, HPC channels} are of course unavailable from @code{ci.guix.gnu.org}.  For these packages, you may want to extend the white list such that source and pre-built binaries (assuming this-party servers provide binaries for these packages) can be downloaded.  As a last resort, users can always download source on their workstation and add it to the cluster's @file{/gnu/store}, like this:"
msgstr "Les paquets logiciels maintenus dans un dépôt séparé comme ceux des divers @uref{https://hpc.guix.info/channels, canaux HPC} ne sont bien sur pas disponibles sur @code{ci.guix.gnu.org}. Pour ces paquets, vous devriez étendre la liste blanche pour que les sources et les binaires préconstruits (en supposant que des serveurs tiers fournissent des binaires pour ces paquets) puissent être téléchargés. En dernier recours, les utilisateur·ices peuvent toujours télécharger les sources sur leur machine de travail et les ajouter au @file{/gnu/store} de la grappe, de cette manière :"

msgid ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"
msgstr ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"

msgid "The above command downloads @code{starpu-1.2.3.tar.gz} @emph{and} sends it to the cluster's @code{guix-daemon} instance over SSH."
msgstr "La commande ci-dessus télécharge @code{starpu-1.2.3.tar.gz} @emph{et} l'envoie à l'instance @code{guix-daemon} du nœud principal par SSH."

msgid "Air-gapped clusters require more work.  At the moment, our suggestion would be to download all the necessary source code on a workstation running Guix.  For instance, using the @option{--sources} option of @command{guix build} (@pxref{Invoking guix build,,, guix, GNU Guix Reference Manual}), the example below downloads all the source code the @code{openmpi} package depends on:"
msgstr "Les grappes sans connexion nécessitent plus de travail. Pour le moment, notre suggestion est de télécharger tout le code source nécessaire sur une station de travail qui exécute Guix. Par exemple, avec l'option @option{--sources} de @command{guix build} (@pxref{Invoquer guix build,,, guix.fr, le manuel de référence de GNU Guix}), l'exemple ci-dessous télécharge tout le code source dont dépend le paquet @code{openmpi} :"

msgid ""
"$ guix build --sources=transitive openmpi\n"
"\n"
msgstr ""
"$ guix build --sources=transitive openmpi\n"
"\n"

msgid ""
"@dots{}\n"
"\n"
msgstr ""
"@dots{}\n"
"\n"

msgid ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"
msgstr ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"

msgid "(In case you're wondering, that's more than 320@ MiB of @emph{compressed} source code.)"
msgstr "(Si vous vous posez la question, c'est plus de 320 Mio de code source compressé)"

msgid "We can then make a big archive containing all of this (@pxref{Invoking guix archive,,, guix, GNU Guix Reference Manual}):"
msgstr "Nous pouvons ensuite créer une grosse archive contenant tout cela (@pxref{Invoquer guix archive,,, guix.fr, le manuel de référence de GNU Guix}) :"

msgid ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"
msgstr ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"

msgid "@dots{} and we can eventually transfer that archive to the cluster on removable storage and unpack it there:"
msgstr "@dots{} et nous pouvons enfin transférer cette archive vers la grappe avec une clé usb et la déballer :"

msgid "$ guix archive --import < openmpi-source-code.nar\n"
msgstr "$ guix archive --import < openmpi-source-code.nar\n"

msgid "This process has to be repeated every time new source code needs to be brought to the cluster."
msgstr "Ce processus doit être répété chaque fois qu'un nouveau code source doit être apporté à la grappe."

msgid "As we write this, the research institutes involved in Guix-HPC do not have air-gapped clusters though. If you have experience with such setups, we would like to hear feedback and suggestions."
msgstr "Au moment d'écrire ces lignes, les instituts de recherche qui participent à Guix-HPC n'ont pas de grappe déconnectées. Si vous avez de l'expérience avec ce genre de configuration, nous aimerions entendre vos retours et vos suggestions."

msgid "Disk Usage"
msgstr "Utilisation du disque"

msgid "disk usage, on a cluster"
msgstr "utilisation du disque, sur une grappe de calcul"

msgid "A common concern of sysadmins' is whether this is all going to eat a lot of disk space.  If anything, if something is going to exhaust disk space, it's going to be scientific data sets rather than compiled software---that's our experience with almost ten years of Guix usage on HPC clusters.  Nevertheless, it's worth taking a look at how Guix contributes to disk usage."
msgstr "Une inquiétude courante des administrateur·ices systèmes est de savoir si cela va prendre beaucoup de place. Si cela doit avoir lieu, les jeux de données scientifiques prendront plus probablement toute la place, plutôt que les logiciels compilés. C'est notre expérience après presque dix ans d'utilisation de Guix sur des grappes HPC. Néanmoins, il vaut mieux jeter un œil à la manière dont Guix contribue à l'utilisation du disque."

msgid "First, having several versions or variants of a given package in @file{/gnu/store} does not necessarily cost much, because @command{guix-daemon} implements deduplication of identical files, and package variants are likely to have a number of common files."
msgstr "Tout d'abord, avoir plusieurs versions ou variantes d'un paquet donné dans @file{/gnu/store} ne coûte pas forcément très cher, car @command{guix-daemon} implémente la déduplication des fichiers identiques et les variantes de paquets ont tendance à avoir de nombreux fichiers en commun."

msgid "As mentioned above, we recommend having a cron job to run @code{guix gc} periodically, which removes @emph{unused} software from @file{/gnu/store}. However, there's always a possibility that users will keep lots of software in their profiles, or lots of old generations of their profiles, which is ``live'' and cannot be deleted from the viewpoint of @command{guix gc}."
msgstr "Comme nous l'avons mentionné plus haut, nous recommandons d'utiliser une tâche cron pour exécuter @code{guix gc} régulièrement, pour supprimer les logiciels @emph{inutilisés} de @file{/gnu/store}. Cependant, il est toujours possible que les utilisateur·ices gardent de nombreux logiciels dans leurs profils, qui sont « vivants » et ne peuvent pas être supprimés du point de vu de @command{guix gc}."

msgid "The solution to this is for users to regularly remove old generations of their profile. For instance, the following command removes generations that are more than two-month old:"
msgstr "La solution à ce problème est de demander aux utilisateur·ices de régulièrement supprimer les anciennes générations de leurs profils. Par exemple, la commande suivante supprime les générations de plus de deux mois :"

msgid "guix package --delete-generations=2m\n"
msgstr "guix package --delete-generations=2m\n"

msgid "Likewise, it's a good idea to invite users to regularly upgrade their profile, which can reduce the number of variants of a given piece of software stored in @file{/gnu/store}:"
msgstr "De même, il vaut mieux inviter les utilisateur·ices à régulièrement mettre à jour leur profil, ce qui peut réduire le nombre de variantes d'un logiciel donnés stockés dans @file{/gnu/store} :"

msgid ""
"guix pull\n"
"guix upgrade\n"
msgstr ""
"guix pull\n"
"guix upgrade\n"

msgid "As a last resort, it is always possible for sysadmins to do some of this on behalf of their users. Nevertheless, one of the strengths of Guix is the freedom and control users get on their software environment, so we strongly recommend leaving users in control."
msgstr "En dernier recours, il est toujours possibles pour les administrateur·ices systèmes de le faire pour leurs utilisateur·ices. Néanmoins, l'une des forces de Guix est la liberté et le contrôle que ses utilisateur·ices ont sur leur environnement logiciel, donc nous vous recommandons fortement de les laisser aux manettes."

msgid "Security Considerations"
msgstr "Considérations de sécurité"

msgid "security, on a cluster"
msgstr "sécurité, sur une grappe"

msgid "On an HPC cluster, Guix is typically used to manage scientific software.  Security-critical software such as the operating system kernel and system services such as @code{sshd} and the batch scheduler remain under control of sysadmins."
msgstr "Sur un grappe PC, guix est généralement utilisé pour gérer des logiciels scientifiques. Les logiciels critiques pour la sécurité comme le noyau du système d'exploitation et les services systèmes comme @code{sshd} et l'ordonnanceur par lot restent sous votre contrôle."

msgid "The Guix project has a good track record delivering security updates in a timely fashion (@pxref{Security Updates,,, guix, GNU Guix Reference Manual}).  To get security updates, users have to run @code{guix pull && guix upgrade}."
msgstr "Le projet Guix a un bon historique de délivrance de mises à jour de sécurité à temps (@pxref{Mises à jour de sécurité,,, guix.fr, le manuel de référence de GNU Guix}). Pour récupérer les mises à jour de sécurité, les utilisateur·ices doivent exécuter @code{guix pull && guix upgrade}."

msgid "Because Guix uniquely identifies software variants, it is easy to see if a vulnerable piece of software is in use. For instance, to check whether the glibc@ 2.25 variant without the mitigation patch against ``@uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash}'', one can check whether user profiles refer to it at all:"
msgstr "Comme Guix identifie de manière unique les variantes des logiciels, il est facile de voir si un logiciel vulnérable est utilisé. Par exemple, pour vérifier si la variante glibc@@2.25 sans correctif d'atténuation de « @uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash} », on peut vérifier si les profils des utilisateur·ices s'y réfèrent ou non :"

msgid "guix gc --referrers /gnu/store/…-glibc-2.25\n"
msgstr "guix gc --referrers /gnu/store/…-glibc-2.25\n"

msgid "This will report whether profiles exist that refer to this specific glibc variant."
msgstr "Cela rapportera si des profils qui se réfèrent à cette variante spécifique de glibc existent."

msgid "system management"
msgstr "gestion du système"

msgid "sysadmin"
msgstr "adminsys"

msgid "Since Guix does not handle packaging, system configuration and services the way other (more ``classical'') distributions do, some workflows tend to unfold slightly different as we are used to and need slight adjustment.  This chapter intends to help with such manners."
msgstr "Comme Guix ne gère pas les paquets, la configuration système et les services de la même manière que les autres distributions (plus « classiques »), certaines tâches se déroule un peu différemment de ce à quoi on est habitué et doivent être légèrement ajustées. Ce chapitre a pour but de vous aider en ce sens."

msgid "With the deprecation of the default value for the postgres package in postgresql-configuration (see b93434e656eba4260df82158a96c295000d3ff44), system upgrades need some manual action before they can take place.  Here's a handy guide on how to."
msgstr "Avec l'obsolescence de la valeur par défaut du paquet postgres dans postgresql-configuration (voir b93434e656eba4260df82158a96c295000d3ff44), les mises à jour du système ont besoin d'une action manuelle avant de pouvoir être exécutées. Voici un guide pratique pour cela."

msgid "Please note that this is a straight-forward way for smaller datasets.  For larger databases @url{https://www.postgresql.org/docs/current/pgupgrade.html, @code{pg_upgrade}} may be the better choice.  Handling the service and system upgrade as described in this guide still applies, though."
msgstr "Remarquez que c'est une manière simple pour les petits jeux de données. Pour des bases plus grandes @url{https://www.postgresql.org/docs/current/pgupgrade.html, @code{pg_upgrade}} peut être plus adapté. La gestion du service et de la mise à jour du système décrites dans ce guide s'appliquent cependant toujours."

msgid "Stop and disable cuirass."
msgstr "Arrêtez et désactivez cuirass."

msgid "Prevent the service from starting and failing after a reconfiguration:"
msgstr "Évitez que le service ne démarre et échoue après une reconfiguration :"

msgid "sudo herd stop cuirass && sudo herd disable cuirass"
msgstr "sudo herd stop cuirass && sudo herd disable cuirass"

msgid "Dump the database contents."
msgstr "Récupérez le contenu de la base de données."

msgid "sudo su - postgres -s /bin/sh -c pg_dumpall > /tmp/pg.dump"
msgstr "sudo su - postgres -s /bin/sh -c pg_dumpall > /tmp/pg.dump"

msgid "Add or alter the postgres service."
msgstr "Ajoutez ou modifiez le service postgres."

msgid "Depending on whether your postgres service is defined implicitly (through the dependency from the cuirass service) or its own entry in your operating system's @code{(services)} property, you need to either add or alter the already existing configuration to reflect your intended version upgrade."
msgstr "En fonction de si votre service postgres est défini implicitement (à travers la dépendance au service cuirass) ou s'il a sa propre entrée dans la propriété @code{(services)} de votre système d'exploitation, vous devrez soit ajouter, soit modifier, la configuration existante pour refléter la mise à jour vers la version souhaitée."

msgid "Be careful not to upgrade directly to postgres-16 -- cuirass service for some reason doesn't like that.  I had to find and purge the relevant files and then re-initialize after a failed upgrade to postgres 16."
msgstr "Faites attention à ne pas mettre à jour directement vers postgres-16. Le service cuirass n'aime pas ça. J'ai du trouver et purger les fichiers puis réinitialiser le tout après une mise à jour échouée vers postgres 16."

msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql (@@ (gnu packages databases) postgresql-15))))\n"
msgstr ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql (@@ (gnu packages databases) postgresql-15))))\n"

msgid "Note: If you for some reason didn't read the text here but somewhat blindly followed the examples and @emph{did upgrade to 16}, here's how you reset the state:"
msgstr "Remarque : si pour quelque raison que ce soit, vous n'avez pas lu le texte ici mais avez suivi aveuglément les exemple et @emph{avez mis à jour vers la version 16}, voici comment réinitialiser l'état :"

msgid "Delete the database instance files."
msgstr "Supprimez les fichiers de l'instance de base de données."

msgid "They default to live under @file{/var/lib/postgres/data}."
msgstr "Par défaut ils se trouvent dans @file{/var/lib/postgres/data}."

msgid "Re-initialize postgres."
msgstr "Réinitialisez postgres."

msgid "sudo su - postgres -s /bin/sh -c 'pg_ctl init -D /var/lib/postgres/data'"
msgstr "sudo su - postgres -s /bin/sh -c 'pg_ctl init -D /var/lib/postgres/data'"

msgid "Reconfigure your system."
msgstr "Reconfigurez votre système."

msgid "sudo guix system reconfigure path/to/your/altered/config.scm"
msgstr "sudo guix system reconfigure chemin/vers/votre/nouveau/config.scm"

msgid "Restore database contents."
msgstr "Restaurez le contenu de la base de données."

msgid "sudo su - postgres -s /bin/sh -c 'psql -d postgres -f /tmp/pg.dump'"
msgstr "sudo su - postgres -s /bin/sh -c 'psql -d postgres -f /tmp/pg.dump'"

msgid "Enable and start the service."
msgstr "Activez et démarrez le service."

msgid ""
"sudo herd enable cuirass\n"
"sudo herd start cuirass\n"
msgstr ""
"sudo herd enable cuirass\n"
"sudo herd start cuirass\n"

msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr "Guix se base sur le @uref{https://nixos.org/nix/ gestionnaire de paquets Nix} conçu et implémenté par Eelco Dolstra, avec des contributions d'autres personnes (voir le fichier @file{nix/AUTHORS} dans Guix).  Nix a inventé la gestion de paquet fonctionnelle et promu des fonctionnalités sans précédents comme les mises à jour de paquets transactionnelles et les retours en arrière, les profils par utilisateurs et les processus de constructions transparents pour les références.  Sans ce travail, Guix n'existerait pas."

msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr "Les distributions logicielles basées sur Nix, Nixpkgs et NixOS, ont aussi été une inspiration pour Guix."

msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr "GNU@tie{}Guix lui-même est un travail collectif avec des contributions d'un grand nombre de personnes.  Voyez le fichier @file{AUTHORS} dans Guix pour plus d'information sur ces personnes de qualité.  Le fichier @file{THANKS} liste les personnes qui ont aidé en rapportant des bogues, en prenant soin de l'infrastructure, en fournissant des images et des thèmes, en faisant des suggestions et bien plus. Merci !"

msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog} and on the Guix-HPC blog at @uref{https://hpc.guix.info/blog}."
msgstr "Ce document contient des sections adaptées d'articles précédemment publiés sur le blog de Guix sur @uref{https://guix.gnu.org/blog} et le blog de Guix-HPC sur @uref{https://hpc.guix.info/blog}."

msgid "license, GNU Free Documentation License"
msgstr "licence, GNU Free Documentation License"

msgid "fdl-1.3.texi"
msgstr "fdl-1.3.texi"
